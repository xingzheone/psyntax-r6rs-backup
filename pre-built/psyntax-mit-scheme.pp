;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define g$0$12318 (quote #f)) (define g$0$12315 (quote #f)) ((lambda (g$0$12209 g$0$12296) (begin (set! g$0$12209 (lambda g$0$12312 ((lambda (g$0$12311) (if (= g$0$12311 (quote 1)) (apply (lambda (g$0$12298) (g$0$12209 g$0$12298 (lambda (g$0$12300) g$0$12300))) g$0$12312) (if (= g$0$12311 (quote 2)) (apply (lambda (g$0$12303 g$0$12304) (begin (if (procedure? g$0$12304) (void) (error (quote assert) (quote "assertion failed") (quote (procedure? fender)))) ((lambda (g$0$12306) (lambda g$0$12310 ((lambda (g$0$12309) (if (= g$0$12309 (quote 0)) (apply (lambda () g$0$12306) g$0$12310) (if (= g$0$12309 (quote 1)) (apply (lambda (g$0$12308) (set! g$0$12306 (g$0$12304 g$0$12308))) g$0$12310) (error (quote apply) (quote "invalid arg count"))))) (length g$0$12310)))) (g$0$12304 g$0$12303)))) g$0$12312) (error (quote apply) (quote "invalid arg count"))))) (length g$0$12312)))) (set! g$0$12296 (lambda (g$0$12314) (error (quote file-options-spec) (quote "not implemented")))) (begin (set! g$0$12315 g$0$12296) (set! g$0$12318 g$0$12209)))) (quote #f) (quote #f)))


(begin (define g$0$12396 (quote #f)) (define g$0$12395 (quote #f)) (define g$0$12394 (quote #f)) (define g$0$12393 (quote #f)) (define g$0$12392 (quote #f)) (define g$0$12391 (quote #f)) ((lambda (g$0$12321 g$0$12323 g$0$12325 g$0$12327 g$0$12329 g$0$12331) (begin (set! g$0$12321 (g$0$12318 (lambda (g$0$12333) (quote #f)) (lambda (g$0$12335) (begin (if (procedure? g$0$12335) (void) (error (quote assert) (quote "assertion failed") (quote (procedure? p)))) g$0$12335)))) (set! g$0$12323 (lambda (g$0$12337) ((lambda (g$0$12339) (begin (set! g$0$12339 (lambda (g$0$12341) ((lambda (g$0$12343) (if g$0$12343 g$0$12343 ((lambda (g$0$12345) (if g$0$12345 g$0$12345 ((lambda (g$0$12347) (if g$0$12347 g$0$12347 ((lambda (g$0$12349) (if g$0$12349 g$0$12349 (begin (quote #f) (number? g$0$12341)))) (boolean? g$0$12341)))) (symbol? g$0$12341)))) (char? g$0$12341)))) (null? g$0$12341)))) (not (g$0$12339 g$0$12337)))) (quote #f)))) (set! g$0$12325 (lambda (g$0$12351) ((lambda (g$0$12353) (begin (set! g$0$12353 (lambda (g$0$12355) (if (pair? g$0$12355) ((lambda (g$0$12356) (if (memv g$0$12356 (quote (quote))) (if (if g$0$12351 (begin (quote #f) (g$0$12323 (cadr g$0$12355))) (quote #f)) ((lambda (g$0$12382) (begin (set-symbol-value! g$0$12382 (cadr g$0$12355)) g$0$12382)) (gensym)) g$0$12355) (if (memv g$0$12356 (quote (case-lambda))) (cons (quote case-lambda) (map (lambda (g$0$12380) (cons (car g$0$12380) (map g$0$12353 (cdr g$0$12380)))) (cdr g$0$12355))) (if (memv g$0$12356 (quote (lambda))) (cons* (quote lambda) (cadr g$0$12355) (map g$0$12353 (cddr g$0$12355))) (if (memv g$0$12356 (quote (letrec))) ((lambda (g$0$12373 g$0$12374) ((lambda (g$0$12377 g$0$12378) (cons* (quote letrec) (map list g$0$12377 (map g$0$12353 g$0$12378)) (map g$0$12353 g$0$12374))) (map car g$0$12373) (map cadr g$0$12373))) (cadr g$0$12355) (cddr g$0$12355)) (if (memv g$0$12356 (quote (letrec*))) ((lambda (g$0$12365 g$0$12366) ((lambda (g$0$12369 g$0$12370) (cons* (quote letrec*) (map list g$0$12369 (map g$0$12353 g$0$12370)) (map g$0$12353 g$0$12366))) (map car g$0$12365) (map cadr g$0$12365))) (cadr g$0$12355) (cddr g$0$12355)) (if (memv g$0$12356 (quote (begin))) (cons (quote begin) (map g$0$12353 (cdr g$0$12355))) (if (memv g$0$12356 (quote (set!))) (list (quote set!) (cadr g$0$12355) (g$0$12353 (caddr g$0$12355))) (if (memv g$0$12356 (quote (primitive))) ((lambda (g$0$12358) ((lambda (g$0$12360) (if g$0$12360 ((lambda (g$0$12362) g$0$12362) g$0$12360) g$0$12358)) ((g$0$12321) g$0$12358))) (cadr g$0$12355)) (if (memv g$0$12356 (quote (define))) g$0$12355 (if (list? g$0$12355) (map g$0$12353 g$0$12355) (error (quote rewrite) (quote "invalid form ~s ~s") g$0$12355 (list? g$0$12355))))))))))))) (car g$0$12355)) g$0$12355))) g$0$12353)) (quote #f)))) (set! g$0$12327 ((lambda (g$0$12384) (not (eq? (eval-core (list (quote quote) g$0$12384)) (eval-core (list (quote quote) g$0$12384))))) (cons (quote 1) (quote 2)))) (set! g$0$12329 (lambda (g$0$12386) ((g$0$12325 g$0$12327) g$0$12386))) (set! g$0$12331 (lambda (g$0$12389 g$0$12390) (begin (pretty-print ((g$0$12325 (quote #f)) g$0$12389) g$0$12390) (newline g$0$12390)))) (begin (set! g$0$12391 g$0$12331) (set! g$0$12392 g$0$12329) (set! g$0$12393 g$0$12327) (set! g$0$12394 g$0$12325) (set! g$0$12395 g$0$12323) (set! g$0$12396 g$0$12321)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(void)


(begin (define g$0$12874 (quote #f)) (define g$0$12873 (quote #f)) (define g$0$12872 (quote #f)) (define g$0$12871 (quote #f)) (define g$0$12870 (quote #f)) (define g$0$12869 (quote #f)) (define g$0$12868 (quote #f)) (define g$0$12867 (quote #f)) (define g$0$12866 (quote #f)) (define g$0$12865 (quote #f)) (define g$0$12864 (quote #f)) (define g$0$12863 (quote #f)) (define g$0$12862 (quote #f)) (define g$0$12861 (quote #f)) (define g$0$12860 (quote #f)) (define g$0$12859 (quote #f)) (define g$0$12858 (quote #f)) (define g$0$12857 (quote #f)) (define g$0$12856 (quote #f)) (define g$0$12855 (quote #f)) (define g$0$12854 (quote #f)) (define g$0$12853 (quote #f)) (define g$0$12852 (quote #f)) (define g$0$12851 (quote #f)) (define g$0$12850 (quote #f)) (define g$0$12849 (quote #f)) (define g$0$12848 (quote #f)) (define g$0$12847 (quote #f)) (define g$0$12846 (quote #f)) (define g$0$12845 (quote #f)) (define g$0$12844 (quote #f)) (define g$0$12843 (quote #f)) (define g$0$12842 (quote #f)) (define g$0$12841 (quote #f)) (define g$0$12840 (quote #f)) (define g$0$12839 (quote #f)) (define g$0$12838 (quote #f)) (define g$0$12837 (quote #f)) (define g$0$12836 (quote #f)) (define g$0$12835 (quote #f)) (define g$0$12834 (quote #f)) (define g$0$12833 (quote #f)) (define g$0$12832 (quote #f)) (define g$0$12831 (quote #f)) (define g$0$12830 (quote #f)) (define g$0$12829 (quote #f)) (define g$0$12828 (quote #f)) (define g$0$12827 (quote #f)) (define g$0$12826 (quote #f)) ((lambda (g$0$12451 g$0$12453 g$0$12456 g$0$12458 g$0$12460 g$0$12462 g$0$12464 g$0$12466 g$0$12468 g$0$12470 g$0$12472 g$0$12474 g$0$12476 g$0$12478 g$0$12480 g$0$12482 g$0$12484 g$0$12486 g$0$12488 g$0$12490 g$0$12492 g$0$12494 g$0$12496 g$0$12498 g$0$12500 g$0$12502 g$0$12504 g$0$12506 g$0$12508 g$0$12510 g$0$12512 g$0$12514 g$0$12516 g$0$12518 g$0$12520 g$0$12522 g$0$12524 g$0$12526 g$0$12528 g$0$12530 g$0$12532 g$0$12534 g$0$12536 g$0$12538 g$0$12540 g$0$12542 g$0$12544 g$0$12546 g$0$12548) (begin (set! g$0$12451 (lambda () ((lambda (g$0$12550) ((lambda (g$0$12552) (begin (set! g$0$12552 (lambda (g$0$12559 g$0$12560) (if (memq g$0$12559 g$0$12560) g$0$12560 (cons g$0$12559 g$0$12560)))) (lambda g$0$12556 ((lambda (g$0$12555) (if (= g$0$12555 (quote 0)) (apply (lambda () g$0$12550) g$0$12556) (if (= g$0$12555 (quote 1)) (apply (lambda (g$0$12554) (set! g$0$12550 (g$0$12552 g$0$12554 g$0$12550))) g$0$12556) (error (quote apply) (quote "invalid arg count"))))) (length g$0$12556))))) (quote #f))) (quote ())))) (set! g$0$12453 (g$0$12318 (g$0$12451) (lambda (g$0$12562) (begin (if (procedure? g$0$12562) (void) (error (quote current-library-collection) (quote "not a procedure") g$0$12562)) g$0$12562)))) (set! g$0$12456 (lambda (g$0$12574 g$0$12575 g$0$12576 g$0$12577 g$0$12578 g$0$12579 g$0$12580 g$0$12581 g$0$12582 g$0$12583 g$0$12584) (vector (quote g$0$12454) g$0$12574 g$0$12575 g$0$12576 g$0$12577 g$0$12578 g$0$12579 g$0$12580 g$0$12581 g$0$12582 g$0$12583 g$0$12584))) (set! g$0$12458 (lambda (g$0$12586) (if (vector? g$0$12586) (if (= (vector-length g$0$12586) (+ (quote 1) (length (quote (id name version imp* vis* inv* subst env visit-state invoke-state visible?))))) (begin (quote #f) (eq? (vector-ref g$0$12586 (quote 0)) (quote g$0$12454))) (quote #f)) (quote #f)))) (set! g$0$12460 (lambda (g$0$12588) (if (g$0$12458 g$0$12588) (vector-ref g$0$12588 (quote 1)) (error (quote library-id) (quote "~s is not of type ~s") g$0$12588 (quote library))))) (set! g$0$12462 (lambda (g$0$12590) (if (g$0$12458 g$0$12590) (vector-ref g$0$12590 (quote 2)) (error (quote library-name) (quote "~s is not of type ~s") g$0$12590 (quote library))))) (set! g$0$12464 (lambda (g$0$12592) (if (g$0$12458 g$0$12592) (vector-ref g$0$12592 (quote 3)) (error (quote library-version) (quote "~s is not of type ~s") g$0$12592 (quote library))))) (set! g$0$12466 (lambda (g$0$12594) (if (g$0$12458 g$0$12594) (vector-ref g$0$12594 (quote 4)) (error (quote library-imp*) (quote "~s is not of type ~s") g$0$12594 (quote library))))) (set! g$0$12468 (lambda (g$0$12596) (if (g$0$12458 g$0$12596) (vector-ref g$0$12596 (quote 5)) (error (quote library-vis*) (quote "~s is not of type ~s") g$0$12596 (quote library))))) (set! g$0$12470 (lambda (g$0$12598) (if (g$0$12458 g$0$12598) (vector-ref g$0$12598 (quote 6)) (error (quote library-inv*) (quote "~s is not of type ~s") g$0$12598 (quote library))))) (set! g$0$12472 (lambda (g$0$12600) (if (g$0$12458 g$0$12600) (vector-ref g$0$12600 (quote 7)) (error (quote library-subst) (quote "~s is not of type ~s") g$0$12600 (quote library))))) (set! g$0$12474 (lambda (g$0$12602) (if (g$0$12458 g$0$12602) (vector-ref g$0$12602 (quote 8)) (error (quote library-env) (quote "~s is not of type ~s") g$0$12602 (quote library))))) (set! g$0$12476 (lambda (g$0$12604) (if (g$0$12458 g$0$12604) (vector-ref g$0$12604 (quote 9)) (error (quote library-visit-state) (quote "~s is not of type ~s") g$0$12604 (quote library))))) (set! g$0$12478 (lambda (g$0$12606) (if (g$0$12458 g$0$12606) (vector-ref g$0$12606 (quote 10)) (error (quote library-invoke-state) (quote "~s is not of type ~s") g$0$12606 (quote library))))) (set! g$0$12480 (lambda (g$0$12608) (if (g$0$12458 g$0$12608) (vector-ref g$0$12608 (quote 11)) (error (quote library-visible?) (quote "~s is not of type ~s") g$0$12608 (quote library))))) (set! g$0$12482 (lambda (g$0$12611 g$0$12612) (if (g$0$12458 g$0$12611) (vector-set! g$0$12611 (quote 1) g$0$12612) (error (quote set-library-id!) (quote "~s is not of type ~s") g$0$12611 (quote library))))) (set! g$0$12484 (lambda (g$0$12615 g$0$12616) (if (g$0$12458 g$0$12615) (vector-set! g$0$12615 (quote 2) g$0$12616) (error (quote set-library-name!) (quote "~s is not of type ~s") g$0$12615 (quote library))))) (set! g$0$12486 (lambda (g$0$12619 g$0$12620) (if (g$0$12458 g$0$12619) (vector-set! g$0$12619 (quote 3) g$0$12620) (error (quote set-library-version!) (quote "~s is not of type ~s") g$0$12619 (quote library))))) (set! g$0$12488 (lambda (g$0$12623 g$0$12624) (if (g$0$12458 g$0$12623) (vector-set! g$0$12623 (quote 4) g$0$12624) (error (quote set-library-imp*!) (quote "~s is not of type ~s") g$0$12623 (quote library))))) (set! g$0$12490 (lambda (g$0$12627 g$0$12628) (if (g$0$12458 g$0$12627) (vector-set! g$0$12627 (quote 5) g$0$12628) (error (quote set-library-vis*!) (quote "~s is not of type ~s") g$0$12627 (quote library))))) (set! g$0$12492 (lambda (g$0$12631 g$0$12632) (if (g$0$12458 g$0$12631) (vector-set! g$0$12631 (quote 6) g$0$12632) (error (quote set-library-inv*!) (quote "~s is not of type ~s") g$0$12631 (quote library))))) (set! g$0$12494 (lambda (g$0$12635 g$0$12636) (if (g$0$12458 g$0$12635) (vector-set! g$0$12635 (quote 7) g$0$12636) (error (quote set-library-subst!) (quote "~s is not of type ~s") g$0$12635 (quote library))))) (set! g$0$12496 (lambda (g$0$12639 g$0$12640) (if (g$0$12458 g$0$12639) (vector-set! g$0$12639 (quote 8) g$0$12640) (error (quote set-library-env!) (quote "~s is not of type ~s") g$0$12639 (quote library))))) (set! g$0$12498 (lambda (g$0$12643 g$0$12644) (if (g$0$12458 g$0$12643) (vector-set! g$0$12643 (quote 9) g$0$12644) (error (quote set-library-visit-state!) (quote "~s is not of type ~s") g$0$12643 (quote library))))) (set! g$0$12500 (lambda (g$0$12647 g$0$12648) (if (g$0$12458 g$0$12647) (vector-set! g$0$12647 (quote 10) g$0$12648) (error (quote set-library-invoke-state!) (quote "~s is not of type ~s") g$0$12647 (quote library))))) (set! g$0$12502 (lambda (g$0$12651 g$0$12652) (if (g$0$12458 g$0$12651) (vector-set! g$0$12651 (quote 11) g$0$12652) (error (quote set-library-visible?!) (quote "~s is not of type ~s") g$0$12651 (quote library))))) (set! g$0$12504 (lambda (g$0$12654) (if (null? g$0$12654) (quote ()) (error (quote find-dependencies) (quote "cannot handle deps yet"))))) (set! g$0$12506 (lambda (g$0$12656) (letrec ((g$0$12658 (lambda (g$0$12660) (if (null? g$0$12660) (quote #f) (if (g$0$12656 (car g$0$12660)) (car g$0$12660) (g$0$12658 (cdr g$0$12660))))))) (g$0$12658 ((g$0$12453)))))) (set! g$0$12508 (g$0$12318 (quote (".")) (lambda (g$0$12662) (if (if (list? g$0$12662) (begin (quote #f) (for-all string? g$0$12662)) (quote #f)) (map (lambda (g$0$12664) g$0$12664) g$0$12662) (error (quote library-path) (quote "not a list of strings") g$0$12662))))) (set! g$0$12510 (lambda (g$0$12666) (call-with-values (lambda () (open-string-output-port)) (lambda (g$0$12669 g$0$12670) ((lambda (g$0$12672) (begin (set! g$0$12672 (lambda (g$0$12688) (if (<= (quote 0) g$0$12688 (quote 9)) (display g$0$12688 g$0$12669) (display (integer->char (+ (char->integer (quote #\A)) (- g$0$12688 (quote 10)))) g$0$12669)))) (begin (letrec ((g$0$12674 (lambda (g$0$12676) (if (null? g$0$12676) (display (quote ".ss") g$0$12669) (begin (display (quote "/") g$0$12669) (for-each (lambda (g$0$12678) (if ((lambda (g$0$12682) (if g$0$12682 g$0$12682 ((lambda (g$0$12684) (if g$0$12684 g$0$12684 ((lambda (g$0$12686) (if g$0$12686 g$0$12686 (begin (quote #f) (memv g$0$12678 (quote (#\- #\. #\_ #\~)))))) (char<=? (quote #\0) g$0$12678 (quote #\9))))) (char<=? (quote #\A) g$0$12678 (quote #\Z))))) (char<=? (quote #\a) g$0$12678 (quote #\z))) (display g$0$12678 g$0$12669) (begin (display (quote "%") g$0$12669) ((lambda (g$0$12680) (begin (g$0$12672 (quotient g$0$12680 (quote 16))) (g$0$12672 (remainder g$0$12680 (quote 16))))) (char->integer g$0$12678))))) (string->list (symbol->string (car g$0$12676)))) (g$0$12674 (cdr g$0$12676))))))) (g$0$12674 g$0$12666)) (g$0$12670)))) (quote #f)))))) (set! g$0$12512 (g$0$12318 (lambda (g$0$12690) ((lambda (g$0$12692) (letrec ((g$0$12694 (lambda (g$0$12696) (if (pair? g$0$12696) (begin (quote #f) ((lambda (g$0$12698) (if (file-exists? g$0$12698) g$0$12698 (g$0$12694 (cdr g$0$12696)))) (string-append (car g$0$12696) g$0$12692))) (quote #f))))) (g$0$12694 (g$0$12508)))) (g$0$12510 g$0$12690))) (lambda (g$0$12700) (if (procedure? g$0$12700) g$0$12700 (error (quote file-locator) (quote "not a procedure") g$0$12700))))) (set! g$0$12514 (g$0$12318 (lambda (g$0$12702) ((lambda (g$0$12704) (if (string? g$0$12704) (begin (quote #f) (with-input-from-file g$0$12704 read)) (quote #f))) ((g$0$12512) g$0$12702))) (lambda (g$0$12706) (if (procedure? g$0$12706) g$0$12706 (error (quote library-locator) (quote "not a procedure") g$0$12706))))) (set! g$0$12516 (g$0$12318 (lambda (g$0$12708) (error (quote library-expander) (quote "not initialized"))) (lambda (g$0$12710) (if (procedure? g$0$12710) g$0$12710 (error (quote library-expander) (quote "not a procedure") g$0$12710))))) (set! g$0$12518 (g$0$12318 (quote ()))) (set! g$0$12520 (lambda (g$0$12712) (begin (if (member g$0$12712 (g$0$12518)) (error (quote #f) (quote "circular attempt to import library was detected") g$0$12712) (void)) ((lambda (g$0$12717 g$0$12718) ((lambda (g$0$12720) (dynamic-wind g$0$12720 (lambda () ((lambda (g$0$12722) (begin (if g$0$12722 (void) (error (quote #f) (quote "cannot find library") g$0$12712)) ((g$0$12516) g$0$12722) ((lambda (g$0$12724) (if g$0$12724 g$0$12724 (begin (quote #f) (error (quote #f) (quote "handling external library did not yield the currect library") g$0$12712)))) (g$0$12506 (lambda (g$0$12726) (equal? (g$0$12462 g$0$12726) g$0$12712)))))) ((g$0$12514) g$0$12712))) g$0$12720)) (lambda () ((lambda (g$0$12728) (begin (g$0$12717 g$0$12718) (set! g$0$12718 g$0$12728))) (g$0$12717))))) g$0$12518 (cons g$0$12712 (g$0$12518)))))) (set! g$0$12522 (lambda (g$0$12730) ((lambda (g$0$12732) (if g$0$12732 g$0$12732 (begin (quote #f) (g$0$12520 g$0$12730)))) (g$0$12506 (lambda (g$0$12734) (equal? (g$0$12462 g$0$12734) g$0$12730)))))) (set! g$0$12524 (lambda (g$0$12736) (if (g$0$12506 (lambda (g$0$12738) (equal? (g$0$12462 g$0$12738) g$0$12736))) (begin (quote #f) (quote #t)) (quote #f)))) (set! g$0$12526 (lambda (g$0$12740) ((lambda (g$0$12742) ((lambda (g$0$12744) (if g$0$12744 g$0$12744 (begin (quote #f) (error (quote #f) (quote "cannot find library with required spec") g$0$12740)))) (g$0$12506 (lambda (g$0$12746) (eq? g$0$12742 (g$0$12460 g$0$12746)))))) (car g$0$12740)))) (set! g$0$12528 (make-eq-hashtable)) (set! g$0$12530 (lambda (g$0$12748) (begin ((lambda (g$0$12750) (for-each (lambda (g$0$12752) ((lambda (g$0$12755 g$0$12756) ((lambda (g$0$12758) (hashtable-set! g$0$12528 g$0$12755 g$0$12758)) ((lambda (g$0$12759) (if (memv g$0$12759 (quote (global))) (cons (quote global) (cons g$0$12748 (cdr g$0$12756))) (if (memv g$0$12759 (quote (global-macro))) (cons (quote global-macro) (cons g$0$12748 (cdr g$0$12756))) (if (memv g$0$12759 (quote (global-macro!))) (cons (quote global-macro!) (cons g$0$12748 (cdr g$0$12756))) g$0$12756)))) (car g$0$12756)))) (car g$0$12752) (cdr g$0$12752))) g$0$12750)) (g$0$12474 g$0$12748)) ((g$0$12453) g$0$12748)))) (set! g$0$12532 (lambda (g$0$12771 g$0$12772 g$0$12773 g$0$12774 g$0$12775 g$0$12776 g$0$12777 g$0$12778 g$0$12779 g$0$12780 g$0$12781) ((lambda (g$0$12785 g$0$12786 g$0$12787) (begin (if (if (symbol? g$0$12771) (if (list? g$0$12772) (begin (quote #f) (list? g$0$12773)) (quote #f)) (quote #f)) (void) (error (quote install-library) (quote "invalid spec with id/name/ver") g$0$12771 g$0$12772 g$0$12773)) (if (g$0$12524 g$0$12772) (error (quote install-library) (quote "library is already installed") g$0$12772) (void)) ((lambda (g$0$12789) (g$0$12530 g$0$12789)) (g$0$12456 g$0$12771 g$0$12772 g$0$12773 g$0$12785 g$0$12786 g$0$12787 g$0$12777 g$0$12778 g$0$12779 g$0$12780 g$0$12781)))) (map g$0$12526 g$0$12774) (map g$0$12526 g$0$12775) (map g$0$12526 g$0$12776)))) (set! g$0$12534 (lambda (g$0$12793 g$0$12794 g$0$12795) (g$0$12494 g$0$12793 (cons (cons g$0$12794 g$0$12795) (g$0$12472 g$0$12793))))) (set! g$0$12536 (lambda (g$0$12799 g$0$12800 g$0$12801) (begin (g$0$12496 g$0$12799 (cons (cons g$0$12800 g$0$12801) (g$0$12474 g$0$12799))) (hashtable-set! g$0$12528 g$0$12800 g$0$12801)))) (set! g$0$12538 (lambda (g$0$12803) (hashtable-ref g$0$12528 g$0$12803 (quote #f)))) (set! g$0$12540 (lambda (g$0$12805) ((lambda (g$0$12807) (if (procedure? g$0$12807) (begin (g$0$12500 g$0$12805 (lambda () (error (quote invoke) (quote "circularity detected") g$0$12805))) (for-each g$0$12540 (g$0$12470 g$0$12805)) (g$0$12500 g$0$12805 (lambda () (error (quote invoke) (quote "first invoke did not return") g$0$12805))) (g$0$12807) (g$0$12500 g$0$12805 (quote #t))) (void))) (g$0$12478 g$0$12805)))) (set! g$0$12542 (lambda (g$0$12809) ((lambda (g$0$12811) (if (procedure? g$0$12811) (begin (g$0$12498 g$0$12809 (lambda () (error (quote visit) (quote "circularity detected") g$0$12809))) (for-each g$0$12540 (g$0$12468 g$0$12809)) (g$0$12498 g$0$12809 (lambda () (error (quote invoke) (quote "first visit did not return") g$0$12809))) (g$0$12811) (g$0$12498 g$0$12809 (quote #t))) (void))) (g$0$12476 g$0$12809)))) (set! g$0$12544 (lambda (g$0$12813) (g$0$12540 (g$0$12526 g$0$12813)))) (set! g$0$12546 (lambda g$0$12823 ((lambda (g$0$12822) (if (= g$0$12822 (quote 1)) (apply (lambda (g$0$12815) (letrec ((g$0$12817 (lambda (g$0$12819) (if (null? g$0$12819) (quote ()) (if ((lambda (g$0$12821) (if g$0$12821 g$0$12821 (begin (quote #f) (g$0$12480 (car g$0$12819))))) g$0$12815) (cons (car g$0$12819) (g$0$12817 (cdr g$0$12819))) (g$0$12817 (cdr g$0$12819))))))) (g$0$12817 ((g$0$12453))))) g$0$12823) (if (= g$0$12822 (quote 0)) (apply (lambda () (g$0$12546 (quote #f))) g$0$12823) (error (quote apply) (quote "invalid arg count"))))) (length g$0$12823)))) (set! g$0$12548 (lambda (g$0$12825) (begin (if (g$0$12458 g$0$12825) (void) (error (quote library-spec) (quote "not a library") g$0$12825)) (list (g$0$12460 g$0$12825) (g$0$12462 g$0$12825) (g$0$12464 g$0$12825))))) (begin (set! g$0$12826 g$0$12548) (set! g$0$12827 g$0$12546) (set! g$0$12828 g$0$12544) (set! g$0$12829 g$0$12542) (set! g$0$12830 g$0$12540) (set! g$0$12831 g$0$12538) (set! g$0$12832 g$0$12536) (set! g$0$12833 g$0$12534) (set! g$0$12834 g$0$12532) (set! g$0$12835 g$0$12530) (set! g$0$12836 g$0$12528) (set! g$0$12837 g$0$12526) (set! g$0$12838 g$0$12524) (set! g$0$12839 g$0$12522) (set! g$0$12840 g$0$12520) (set! g$0$12841 g$0$12518) (set! g$0$12842 g$0$12516) (set! g$0$12843 g$0$12514) (set! g$0$12844 g$0$12512) (set! g$0$12845 g$0$12510) (set! g$0$12846 g$0$12508) (set! g$0$12847 g$0$12506) (set! g$0$12848 g$0$12504) (set! g$0$12849 g$0$12502) (set! g$0$12850 g$0$12500) (set! g$0$12851 g$0$12498) (set! g$0$12852 g$0$12496) (set! g$0$12853 g$0$12494) (set! g$0$12854 g$0$12492) (set! g$0$12855 g$0$12490) (set! g$0$12856 g$0$12488) (set! g$0$12857 g$0$12486) (set! g$0$12858 g$0$12484) (set! g$0$12859 g$0$12482) (set! g$0$12860 g$0$12480) (set! g$0$12861 g$0$12478) (set! g$0$12862 g$0$12476) (set! g$0$12863 g$0$12474) (set! g$0$12864 g$0$12472) (set! g$0$12865 g$0$12470) (set! g$0$12866 g$0$12468) (set! g$0$12867 g$0$12466) (set! g$0$12868 g$0$12464) (set! g$0$12869 g$0$12462) (set! g$0$12870 g$0$12460) (set! g$0$12871 g$0$12458) (set! g$0$12872 g$0$12456) (set! g$0$12873 g$0$12453) (set! g$0$12874 g$0$12451)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define g$0$13122 (quote #f)) (define g$0$13114 (quote #f)) (define g$0$13113 (quote #f)) (define g$0$13112 (quote #f)) (define g$0$13108 (quote #f)) (define g$0$13107 (quote #f)) (define g$0$13106 (quote #f)) (define g$0$13105 (quote #f)) ((lambda (g$0$12877 g$0$12954 g$0$12956 g$0$12958 g$0$12996 g$0$12998 g$0$13000 g$0$13002) (begin (set! g$0$12877 (lambda (g$0$13004) (cons (quote define) (cons g$0$13004 (quote ((quote #f))))))) (set! g$0$12954 (lambda (g$0$13008 g$0$13009 g$0$13010) (list (quote lambda) g$0$13009 g$0$13010))) (set! g$0$12956 (lambda (g$0$13014 g$0$13015 g$0$13016) ((lambda (g$0$13018 g$0$13020 g$0$13022 g$0$13024) (begin (set! g$0$13018 (lambda (g$0$13066) (list (quote (primitive error)) (quote (quote apply)) (list (quote quote) (quote "invalid arg count"))))) (set! g$0$13020 (lambda (g$0$13052 g$0$13053 g$0$13054) (call-with-values (lambda () (letrec ((g$0$13056 (lambda (g$0$13059 g$0$13060) (if (pair? g$0$13059) (g$0$13056 (cdr g$0$13059) (+ g$0$13060 (quote 1))) (if (null? g$0$13059) (values g$0$13060 (quote =)) (values g$0$13060 (quote >=))))))) (g$0$13056 g$0$13054 (quote 0)))) (lambda (g$0$13063 g$0$13064) (list (list (quote primitive) g$0$13064) g$0$13053 (list (quote quote) g$0$13063)))))) (set! g$0$13022 (lambda (g$0$13045 g$0$13046 g$0$13047 g$0$13048) (list (quote (primitive apply)) (g$0$12954 g$0$13045 g$0$13047 g$0$13048) g$0$13046))) (set! g$0$13024 (lambda (g$0$13028 g$0$13029 g$0$13030) ((lambda (g$0$13033 g$0$13034) (list (quote lambda) g$0$13033 (g$0$12958 g$0$13028 (list g$0$13034) (list (list (quote (primitive length)) g$0$13033)) (letrec ((g$0$13036 (lambda (g$0$13039 g$0$13040) (if (null? g$0$13039) (g$0$13018 g$0$13028) (list (quote if) (g$0$13020 g$0$13028 g$0$13034 (car g$0$13039)) (g$0$13022 g$0$13028 g$0$13033 (car g$0$13039) (car g$0$13040)) (g$0$13036 (cdr g$0$13039) (cdr g$0$13040))))))) (g$0$13036 g$0$13015 g$0$13030))))) (gensym) (gensym)))) (if (= (length g$0$13016) (quote 1)) (g$0$12954 g$0$13014 (car g$0$13015) (car g$0$13016)) (g$0$13024 g$0$13014 g$0$13015 g$0$13016)))) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$12958 (lambda (g$0$13071 g$0$13072 g$0$13073 g$0$13074) (cons (g$0$12954 g$0$13071 g$0$13072 g$0$13074) g$0$13073))) (set! g$0$12996 (lambda (g$0$13077 g$0$13078) (letrec ((g$0$13080 (lambda (g$0$13082) (if (null? (cdr g$0$13082)) (car g$0$13082) (if (equal? (car g$0$13082) (g$0$12998)) (g$0$13080 (cdr g$0$13082)) (cons (quote begin) g$0$13082)))))) (g$0$13080 g$0$13078)))) (set! g$0$12998 (lambda () (quote ((primitive void))))) (set! g$0$13000 (lambda (g$0$13087 g$0$13088 g$0$13089 g$0$13090) (if (null? g$0$13088) g$0$13090 (list (quote letrec) (map list g$0$13088 g$0$13089) g$0$13090)))) (set! g$0$13002 (lambda (g$0$13095 g$0$13096 g$0$13097 g$0$13098) (if (null? g$0$13096) g$0$13098 (g$0$12958 g$0$13095 g$0$13096 (map (lambda (g$0$13100) (list (quote quote) (quote #f))) g$0$13096) (g$0$12996 g$0$13095 (append (map (lambda (g$0$13103 g$0$13104) (list (quote set!) g$0$13103 g$0$13104)) g$0$13096 g$0$13097) (list g$0$13098))))))) (begin (set! g$0$13105 g$0$13002) (set! g$0$13106 g$0$13000) (set! g$0$13107 g$0$12998) (set! g$0$13108 g$0$12996) (set! g$0$13112 g$0$12958) (set! g$0$13113 g$0$12956) (set! g$0$13114 g$0$12954) (set! g$0$13122 g$0$12877)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define g$0$23359 (quote #f)) (define g$0$23358 (quote #f)) (define g$0$23356 (quote #f)) (define g$0$23355 (quote #f)) (define g$0$23354 (quote #f)) (define g$0$23353 (quote #f)) (define g$0$23352 (quote #f)) (define g$0$23351 (quote #f)) (define g$0$23350 (quote #f)) (define g$0$23349 (quote #f)) (define g$0$23348 (quote #f)) (define g$0$23347 (quote #f)) (define g$0$23346 (quote #f)) (define g$0$23345 (quote #f)) (define g$0$23344 (quote #f)) (define g$0$23343 (quote #f)) (define g$0$23342 (quote #f)) (define g$0$23341 (quote #f)) (define g$0$23340 (quote #f)) (define g$0$23339 (quote #f)) (define g$0$23338 (quote #f)) (define g$0$23337 (quote #f)) (define g$0$23336 (quote #f)) (define g$0$23335 (quote #f)) (define g$0$23334 (quote #f)) (define g$0$23333 (quote #f)) (define g$0$23332 (quote #f)) (define g$0$23331 (quote #f)) (define g$0$23330 (quote #f)) (define g$0$23329 (quote #f)) (define g$0$23328 (quote #f)) (define g$0$23327 (quote #f)) (define g$0$23326 (quote #f)) (define g$0$23325 (quote #f)) (define g$0$23324 (quote #f)) (define g$0$23323 (quote #f)) (define g$0$23322 (quote #f)) (define g$0$23321 (quote #f)) (define g$0$23320 (quote #f)) (define g$0$23319 (quote #f)) (define g$0$23318 (quote #f)) (define g$0$23317 (quote #f)) (define g$0$23316 (quote #f)) (define g$0$23315 (quote #f)) (define g$0$23314 (quote #f)) (define g$0$23313 (quote #f)) (define g$0$23312 (quote #f)) (define g$0$23311 (quote #f)) (define g$0$23310 (quote #f)) (define g$0$23309 (quote #f)) (define g$0$23308 (quote #f)) (define g$0$23307 (quote #f)) (define g$0$23306 (quote #f)) (define g$0$23305 (quote #f)) (define g$0$23304 (quote #f)) (define g$0$23303 (quote #f)) (define g$0$23302 (quote #f)) (define g$0$23301 (quote #f)) (define g$0$23300 (quote #f)) (define g$0$23299 (quote #f)) (define g$0$23298 (quote #f)) (define g$0$23297 (quote #f)) (define g$0$23296 (quote #f)) (define g$0$23295 (quote #f)) (define g$0$23294 (quote #f)) (define g$0$23292 (quote #f)) (define g$0$23291 (quote #f)) (define g$0$23290 (quote #f)) (define g$0$23288 (quote #f)) (define g$0$23287 (quote #f)) (define g$0$23286 (quote #f)) (define g$0$23285 (quote #f)) (define g$0$23284 (quote #f)) (define g$0$23283 (quote #f)) (define g$0$23282 (quote #f)) (define g$0$23281 (quote #f)) (define g$0$23280 (quote #f)) (define g$0$23279 (quote #f)) (define g$0$23278 (quote #f)) (define g$0$23277 (quote #f)) (define g$0$23276 (quote #f)) (define g$0$23275 (quote #f)) (define g$0$23274 (quote #f)) (define g$0$23273 (quote #f)) (define g$0$23272 (quote #f)) (define g$0$23271 (quote #f)) (define g$0$23270 (quote #f)) (define g$0$23269 (quote #f)) (define g$0$23268 (quote #f)) (define g$0$23267 (quote #f)) (define g$0$23266 (quote #f)) (define g$0$23265 (quote #f)) (define g$0$23264 (quote #f)) (define g$0$23263 (quote #f)) (define g$0$23262 (quote #f)) (define g$0$23261 (quote #f)) (define g$0$23260 (quote #f)) (define g$0$23259 (quote #f)) (define g$0$23258 (quote #f)) (define g$0$23257 (quote #f)) (define g$0$23256 (quote #f)) (define g$0$23255 (quote #f)) (define g$0$23254 (quote #f)) (define g$0$23253 (quote #f)) (define g$0$23252 (quote #f)) (define g$0$23251 (quote #f)) (define g$0$23250 (quote #f)) (define g$0$23249 (quote #f)) (define g$0$23248 (quote #f)) (define g$0$23247 (quote #f)) (define g$0$23246 (quote #f)) (define g$0$23245 (quote #f)) (define g$0$23244 (quote #f)) (define g$0$23243 (quote #f)) (define g$0$23242 (quote #f)) (define g$0$23241 (quote #f)) (define g$0$23240 (quote #f)) (define g$0$23239 (quote #f)) (define g$0$23238 (quote #f)) (define g$0$23237 (quote #f)) (define g$0$23236 (quote #f)) (define g$0$23235 (quote #f)) (define g$0$23234 (quote #f)) (define g$0$23233 (quote #f)) (define g$0$23232 (quote #f)) (define g$0$23231 (quote #f)) (define g$0$23230 (quote #f)) (define g$0$23229 (quote #f)) (define g$0$23228 (quote #f)) (define g$0$23227 (quote #f)) (define g$0$23226 (quote #f)) (define g$0$23225 (quote #f)) (define g$0$23224 (quote #f)) (define g$0$23223 (quote #f)) (define g$0$23222 (quote #f)) (define g$0$23221 (quote #f)) (define g$0$23220 (quote #f)) (define g$0$23219 (quote #f)) (define g$0$23218 (quote #f)) (define g$0$23217 (quote #f)) (define g$0$23216 (quote #f)) (define g$0$23215 (quote #f)) (define g$0$23214 (quote #f)) (define g$0$23213 (quote #f)) (define g$0$23212 (quote #f)) (define g$0$23211 (quote #f)) (define g$0$23210 (quote #f)) (define g$0$23209 (quote #f)) (define g$0$23208 (quote #f)) (define g$0$23207 (quote #f)) (define g$0$23206 (quote #f)) (define g$0$23205 (quote #f)) (define g$0$23204 (quote #f)) (define g$0$23203 (quote #f)) (define g$0$23202 (quote #f)) (define g$0$23201 (quote #f)) (define g$0$23200 (quote #f)) (define g$0$23199 (quote #f)) (define g$0$23198 (quote #f)) (define g$0$23197 (quote #f)) (define g$0$23196 (quote #f)) (define g$0$23195 (quote #f)) (define g$0$23194 (quote #f)) (define g$0$23193 (quote #f)) (define g$0$23192 (quote #f)) (define g$0$23191 (quote #f)) (define g$0$23190 (quote #f)) (define g$0$23189 (quote #f)) (define g$0$23188 (quote #f)) (define g$0$23187 (quote #f)) (define g$0$23186 (quote #f)) (define g$0$23185 (quote #f)) (define g$0$23184 (quote #f)) (define g$0$23183 (quote #f)) (define g$0$23182 (quote #f)) (define g$0$23181 (quote #f)) (define g$0$23180 (quote #f)) (define g$0$23179 (quote #f)) (define g$0$23178 (quote #f)) (define g$0$23177 (quote #f)) (define g$0$23176 (quote #f)) (define g$0$23175 (quote #f)) (define g$0$23174 (quote #f)) (define g$0$23173 (quote #f)) (define g$0$23172 (quote #f)) (define g$0$23171 (quote #f)) (define g$0$23170 (quote #f)) (define g$0$23169 (quote #f)) (define g$0$23168 (quote #f)) ((lambda (g$0$13125 g$0$13127 g$0$13132 g$0$13134 g$0$13136 g$0$13138 g$0$13140 g$0$13143 g$0$13145 g$0$13147 g$0$13149 g$0$13151 g$0$13153 g$0$13155 g$0$13157 g$0$13159 g$0$13161 g$0$13163 g$0$13165 g$0$13167 g$0$13169 g$0$13171 g$0$13173 g$0$13176 g$0$13178 g$0$13180 g$0$13182 g$0$13184 g$0$13186 g$0$13188 g$0$13190 g$0$13192 g$0$13194 g$0$13196 g$0$13198 g$0$13200 g$0$13202 g$0$13204 g$0$13206 g$0$13208 g$0$13210 g$0$13212 g$0$13214 g$0$13216 g$0$13218 g$0$13220 g$0$13222 g$0$13224 g$0$13226 g$0$13228 g$0$13230 g$0$13232 g$0$13234 g$0$13236 g$0$13238 g$0$13240 g$0$13242 g$0$13244 g$0$13246 g$0$13248 g$0$13250 g$0$13252 g$0$13254 g$0$13256 g$0$13258 g$0$13272 g$0$13274 g$0$13276 g$0$13475 g$0$13477 g$0$13479 g$0$13481 g$0$13483 g$0$13485 g$0$13487 g$0$13489 g$0$13491 g$0$13493 g$0$13495 g$0$13497 g$0$13499 g$0$13501 g$0$13503 g$0$13505 g$0$13507 g$0$13509 g$0$13511 g$0$13513 g$0$13515 g$0$13517 g$0$13519 g$0$13521 g$0$13523 g$0$13525 g$0$13527 g$0$13529 g$0$13531 g$0$13533 g$0$13535 g$0$13537 g$0$13539 g$0$13541 g$0$13543 g$0$13545 g$0$13547 g$0$13549 g$0$13551 g$0$13553 g$0$13555 g$0$13557 g$0$13559 g$0$13561 g$0$13563 g$0$13565 g$0$13567 g$0$13569 g$0$13571 g$0$13573 g$0$13575 g$0$13577 g$0$13579 g$0$13581 g$0$13583 g$0$13585 g$0$13587 g$0$13589 g$0$13591 g$0$13593 g$0$13595 g$0$13597 g$0$13599 g$0$13601 g$0$13603 g$0$13605 g$0$13607 g$0$13609 g$0$13611 g$0$13613 g$0$13615 g$0$13617 g$0$13619 g$0$13621 g$0$13623 g$0$13625 g$0$13627 g$0$13629 g$0$13631 g$0$13633 g$0$13635 g$0$13637 g$0$13639 g$0$13641 g$0$13643 g$0$13645 g$0$13647 g$0$13649 g$0$13651 g$0$13653 g$0$13655 g$0$13657 g$0$13660 g$0$13662 g$0$13664 g$0$13666 g$0$13668 g$0$13670 g$0$13672 g$0$13674 g$0$13676 g$0$13678 g$0$13680 g$0$13682 g$0$13684 g$0$13686 g$0$13688 g$0$13690 g$0$13692 g$0$13694 g$0$13696 g$0$13698 g$0$13700 g$0$13702 g$0$13704 g$0$13706 g$0$13708 g$0$13710 g$0$13712 g$0$13714 g$0$13716) (begin (set! g$0$13125 (lambda (g$0$13719 g$0$13720) (if (memq g$0$13719 g$0$13720) g$0$13720 (cons g$0$13719 g$0$13720)))) (set! g$0$13127 (lambda (g$0$13723 g$0$13724) (if (null? g$0$13723) g$0$13724 (if (memq (car g$0$13723) g$0$13724) (g$0$13127 (cdr g$0$13723) g$0$13724) (cons (car g$0$13723) (g$0$13127 (cdr g$0$13723) g$0$13724)))))) (set! g$0$13132 (quote (top))) (set! g$0$13134 (lambda (g$0$13726) (memq (quote top) g$0$13726))) (set! g$0$13136 (lambda (g$0$13728) (if (symbol? g$0$13728) (gensym g$0$13728) (if (g$0$13178 g$0$13728) (g$0$13136 (g$0$13228 g$0$13728)) (error (quote gen-lexical) (quote "BUG: invalid arg") g$0$13728))))) (set! g$0$13138 (lambda (g$0$13730) (g$0$13136 g$0$13730))) (set! g$0$13140 (lambda (g$0$13732) (gensym))) (set! g$0$13143 (lambda (g$0$13737 g$0$13738 g$0$13739 g$0$13740) (vector (quote g$0$13141) g$0$13737 g$0$13738 g$0$13739 g$0$13740))) (set! g$0$13145 (lambda (g$0$13742) (if (vector? g$0$13742) (if (= (vector-length g$0$13742) (+ (quote 1) (length (quote (sym* mark** label* sealed/freq))))) (begin (quote #f) (eq? (vector-ref g$0$13742 (quote 0)) (quote g$0$13141))) (quote #f)) (quote #f)))) (set! g$0$13147 (lambda (g$0$13744) (if (g$0$13145 g$0$13744) (vector-ref g$0$13744 (quote 1)) (error (quote rib-sym*) (quote "~s is not of type ~s") g$0$13744 (quote rib))))) (set! g$0$13149 (lambda (g$0$13746) (if (g$0$13145 g$0$13746) (vector-ref g$0$13746 (quote 2)) (error (quote rib-mark**) (quote "~s is not of type ~s") g$0$13746 (quote rib))))) (set! g$0$13151 (lambda (g$0$13748) (if (g$0$13145 g$0$13748) (vector-ref g$0$13748 (quote 3)) (error (quote rib-label*) (quote "~s is not of type ~s") g$0$13748 (quote rib))))) (set! g$0$13153 (lambda (g$0$13750) (if (g$0$13145 g$0$13750) (vector-ref g$0$13750 (quote 4)) (error (quote rib-sealed/freq) (quote "~s is not of type ~s") g$0$13750 (quote rib))))) (set! g$0$13155 (lambda (g$0$13753 g$0$13754) (if (g$0$13145 g$0$13753) (vector-set! g$0$13753 (quote 1) g$0$13754) (error (quote set-rib-sym*!) (quote "~s is not of type ~s") g$0$13753 (quote rib))))) (set! g$0$13157 (lambda (g$0$13757 g$0$13758) (if (g$0$13145 g$0$13757) (vector-set! g$0$13757 (quote 2) g$0$13758) (error (quote set-rib-mark**!) (quote "~s is not of type ~s") g$0$13757 (quote rib))))) (set! g$0$13159 (lambda (g$0$13761 g$0$13762) (if (g$0$13145 g$0$13761) (vector-set! g$0$13761 (quote 3) g$0$13762) (error (quote set-rib-label*!) (quote "~s is not of type ~s") g$0$13761 (quote rib))))) (set! g$0$13161 (lambda (g$0$13765 g$0$13766) (if (g$0$13145 g$0$13765) (vector-set! g$0$13765 (quote 4) g$0$13766) (error (quote set-rib-sealed/freq!) (quote "~s is not of type ~s") g$0$13765 (quote rib))))) (set! g$0$13163 (lambda () (g$0$13143 (quote ()) (quote ()) (quote ()) (quote #f)))) (set! g$0$13165 (lambda (g$0$13770 g$0$13771 g$0$13772) ((lambda (g$0$13774) (begin (set! g$0$13774 (lambda (g$0$13785 g$0$13786 g$0$13787 g$0$13788) (if (pair? g$0$13787) (begin (quote #f) ((lambda (g$0$13790) (if g$0$13790 g$0$13790 (begin (quote #f) (g$0$13774 g$0$13785 g$0$13786 (cdr g$0$13787) (cdr g$0$13788))))) (if (eq? g$0$13785 (car g$0$13787)) (begin (quote #f) (g$0$13230 g$0$13786 (car g$0$13788))) (quote #f)))) (quote #f)))) (begin (if (g$0$13153 g$0$13770) (error (quote extend-rib!) (quote "rib is sealed") g$0$13770) (void)) ((lambda (g$0$13777 g$0$13778) ((lambda (g$0$13780) (begin (if (if (memq g$0$13777 (g$0$13147 g$0$13770)) (begin (quote #f) (g$0$13774 g$0$13777 g$0$13778 g$0$13780 (g$0$13149 g$0$13770))) (quote #f)) (error (quote expander) (quote "cannot redefine") (g$0$13244 g$0$13771 (quote ()))) (void)) (g$0$13155 g$0$13770 (cons g$0$13777 g$0$13780)) (g$0$13157 g$0$13770 (cons g$0$13778 (g$0$13149 g$0$13770))) (g$0$13159 g$0$13770 (cons g$0$13772 (g$0$13151 g$0$13770))))) (g$0$13147 g$0$13770))) (g$0$13228 g$0$13771) (g$0$13182 g$0$13771))))) (quote #f)))) (set! g$0$13167 (lambda (g$0$13792) ((lambda (g$0$13794) (if (null? g$0$13794) (void) ((lambda (g$0$13796) (begin (g$0$13155 g$0$13792 g$0$13796) (g$0$13157 g$0$13792 (list->vector (g$0$13149 g$0$13792))) (g$0$13159 g$0$13792 (list->vector (g$0$13151 g$0$13792))) (g$0$13161 g$0$13792 (make-vector (vector-length g$0$13796) (quote 0))))) (list->vector g$0$13794)))) (g$0$13147 g$0$13792)))) (set! g$0$13169 (lambda (g$0$13798) (if (g$0$13153 g$0$13798) (begin (g$0$13161 g$0$13798 (quote #f)) (g$0$13155 g$0$13798 (vector->list (g$0$13147 g$0$13798))) (g$0$13157 g$0$13798 (vector->list (g$0$13149 g$0$13798))) (g$0$13159 g$0$13798 (vector->list (g$0$13151 g$0$13798)))) (void)))) (set! g$0$13171 (lambda (g$0$13801 g$0$13802) ((lambda (g$0$13804) ((lambda (g$0$13806) ((lambda (g$0$13808) (begin (vector-set! g$0$13804 g$0$13808 (+ g$0$13806 (quote 1))) (if (= g$0$13808 g$0$13802) (void) ((lambda (g$0$13812 g$0$13813 g$0$13814) (begin ((lambda (g$0$13816) (begin (vector-set! g$0$13812 g$0$13802 (vector-ref g$0$13812 g$0$13808)) (vector-set! g$0$13812 g$0$13808 g$0$13816))) (vector-ref g$0$13812 g$0$13802)) ((lambda (g$0$13818) (begin (vector-set! g$0$13813 g$0$13802 (vector-ref g$0$13813 g$0$13808)) (vector-set! g$0$13813 g$0$13808 g$0$13818))) (vector-ref g$0$13813 g$0$13802)) ((lambda (g$0$13820) (begin (vector-set! g$0$13814 g$0$13802 (vector-ref g$0$13814 g$0$13808)) (vector-set! g$0$13814 g$0$13808 g$0$13820))) (vector-ref g$0$13814 g$0$13802)))) (g$0$13147 g$0$13801) (g$0$13149 g$0$13801) (g$0$13151 g$0$13801))))) (letrec ((g$0$13822 (lambda (g$0$13824) (if (zero? g$0$13824) (quote 0) ((lambda (g$0$13826) (if (= g$0$13806 (vector-ref g$0$13804 g$0$13826)) (g$0$13822 g$0$13826) g$0$13824)) (- g$0$13824 (quote 1))))))) (g$0$13822 g$0$13802)))) (vector-ref g$0$13804 g$0$13802))) (g$0$13153 g$0$13801)))) (set! g$0$13173 (lambda (g$0$13829 g$0$13830) (g$0$13143 (map g$0$13228 g$0$13829) (map g$0$13182 g$0$13829) g$0$13830 (quote #f)))) (set! g$0$13176 (lambda (g$0$13834 g$0$13835 g$0$13836) (vector (quote g$0$13174) g$0$13834 g$0$13835 g$0$13836))) (set! g$0$13178 (lambda (g$0$13838) (if (vector? g$0$13838) (if (= (vector-length g$0$13838) (+ (quote 1) (length (quote (expr mark* subst*))))) (begin (quote #f) (eq? (vector-ref g$0$13838 (quote 0)) (quote g$0$13174))) (quote #f)) (quote #f)))) (set! g$0$13180 (lambda (g$0$13840) (if (g$0$13178 g$0$13840) (vector-ref g$0$13840 (quote 1)) (error (quote stx-expr) (quote "~s is not of type ~s") g$0$13840 (quote stx))))) (set! g$0$13182 (lambda (g$0$13842) (if (g$0$13178 g$0$13842) (vector-ref g$0$13842 (quote 2)) (error (quote stx-mark*) (quote "~s is not of type ~s") g$0$13842 (quote stx))))) (set! g$0$13184 (lambda (g$0$13844) (if (g$0$13178 g$0$13844) (vector-ref g$0$13844 (quote 3)) (error (quote stx-subst*) (quote "~s is not of type ~s") g$0$13844 (quote stx))))) (set! g$0$13186 (lambda (g$0$13847 g$0$13848) (if (g$0$13178 g$0$13847) (vector-set! g$0$13847 (quote 1) g$0$13848) (error (quote set-stx-expr!) (quote "~s is not of type ~s") g$0$13847 (quote stx))))) (set! g$0$13188 (lambda (g$0$13851 g$0$13852) (if (g$0$13178 g$0$13851) (vector-set! g$0$13851 (quote 2) g$0$13852) (error (quote set-stx-mark*!) (quote "~s is not of type ~s") g$0$13851 (quote stx))))) (set! g$0$13190 (lambda (g$0$13855 g$0$13856) (if (g$0$13178 g$0$13855) (vector-set! g$0$13855 (quote 3) g$0$13856) (error (quote set-stx-subst*!) (quote "~s is not of type ~s") g$0$13855 (quote stx))))) (set! g$0$13192 (lambda (g$0$13859 g$0$13860) (g$0$13176 g$0$13860 (g$0$13182 g$0$13859) (g$0$13184 g$0$13859)))) (set! g$0$13194 (lambda () (string (quote #\m)))) (set! g$0$13196 (quote #f)) (set! g$0$13198 not) (set! g$0$13200 (lambda (g$0$13864 g$0$13865 g$0$13866) ((lambda (g$0$13868) (begin (set! g$0$13868 (lambda (g$0$13875 g$0$13876) (letrec ((g$0$13878 (lambda (g$0$13881 g$0$13882) (if (null? g$0$13882) (cdr g$0$13876) (cons g$0$13881 (g$0$13878 (car g$0$13882) (cdr g$0$13882))))))) (g$0$13878 (car g$0$13875) (cdr g$0$13875))))) ((lambda (g$0$13871 g$0$13872) (if (if (not (null? g$0$13864)) (if (not (null? g$0$13871)) (begin (quote #f) (g$0$13198 (car g$0$13871))) (quote #f)) (quote #f)) (values (g$0$13868 g$0$13864 g$0$13871) (g$0$13868 g$0$13865 g$0$13872)) (values (append g$0$13864 g$0$13871) (append g$0$13865 g$0$13872)))) (g$0$13182 g$0$13866) (g$0$13184 g$0$13866)))) (quote #f)))) (set! g$0$13202 (lambda (g$0$13886 g$0$13887 g$0$13888) (if (g$0$13178 g$0$13886) (call-with-values (lambda () (g$0$13200 g$0$13887 g$0$13888 g$0$13886)) (lambda (g$0$13891 g$0$13892) (g$0$13176 (g$0$13180 g$0$13886) g$0$13891 g$0$13892))) (g$0$13176 g$0$13886 g$0$13887 g$0$13888)))) (set! g$0$13204 (lambda (g$0$13895 g$0$13896) (g$0$13202 g$0$13896 (list g$0$13895) (quote (shift))))) (set! g$0$13206 (lambda (g$0$13899 g$0$13900) (g$0$13202 g$0$13900 (quote ()) (list g$0$13899)))) (set! g$0$13208 (lambda (g$0$13903 g$0$13904) (if (g$0$13178 g$0$13903) (g$0$13208 (g$0$13180 g$0$13903) g$0$13904) (g$0$13904 g$0$13903)))) (set! g$0$13210 (lambda (g$0$13906) (if (g$0$13178 g$0$13906) ((lambda (g$0$13910 g$0$13911 g$0$13912) (map (lambda (g$0$13914) (g$0$13202 g$0$13914 g$0$13911 g$0$13912)) g$0$13910)) (g$0$13210 (g$0$13180 g$0$13906)) (g$0$13182 g$0$13906) (g$0$13184 g$0$13906)) (if (vector? g$0$13906) (vector->list g$0$13906) (error (quote syntax-vector->list) (quote "not a syntax vector") g$0$13906))))) (set! g$0$13212 (lambda (g$0$13916) (g$0$13208 g$0$13916 pair?))) (set! g$0$13214 (lambda (g$0$13918) (g$0$13208 g$0$13918 vector?))) (set! g$0$13216 (lambda (g$0$13920) (g$0$13208 g$0$13920 null?))) (set! g$0$13218 (lambda (g$0$13922) ((lambda (g$0$13924) (if g$0$13924 g$0$13924 (begin (quote #f) (if (g$0$13212 g$0$13922) (begin (quote #f) (g$0$13218 (g$0$13224 g$0$13922))) (quote #f))))) (g$0$13216 g$0$13922)))) (set! g$0$13220 (lambda (g$0$13926) (if (g$0$13178 g$0$13926) (g$0$13202 (g$0$13220 (g$0$13180 g$0$13926)) (g$0$13182 g$0$13926) (g$0$13184 g$0$13926)) (if (pair? g$0$13926) (car g$0$13926) (error (quote syntax-car) (quote "not a pair") g$0$13926))))) (set! g$0$13222 (lambda (g$0$13928) (if (g$0$13212 g$0$13928) (cons (g$0$13220 g$0$13928) (g$0$13222 (g$0$13224 g$0$13928))) (if (g$0$13216 g$0$13928) (quote ()) (error (quote syntax->list) (quote "invalid argument") g$0$13928))))) (set! g$0$13224 (lambda (g$0$13930) (if (g$0$13178 g$0$13930) (g$0$13202 (g$0$13224 (g$0$13180 g$0$13930)) (g$0$13182 g$0$13930) (g$0$13184 g$0$13930)) (if (pair? g$0$13930) (cdr g$0$13930) (error (quote syntax-cdr) (quote "not a pair") g$0$13930))))) (set! g$0$13226 (lambda (g$0$13932) (g$0$13208 g$0$13932 symbol?))) (set! g$0$13228 (lambda (g$0$13934) (if (g$0$13178 g$0$13934) (g$0$13228 (g$0$13180 g$0$13934)) (if (symbol? g$0$13934) g$0$13934 (error (quote id->sym) (quote "not an id") g$0$13934))))) (set! g$0$13230 (lambda (g$0$13937 g$0$13938) ((lambda (g$0$13940) (if g$0$13940 g$0$13940 (begin (quote #f) (if (pair? g$0$13937) (if (pair? g$0$13938) (if (eq? (car g$0$13937) (car g$0$13938)) (begin (quote #f) (g$0$13230 (cdr g$0$13937) (cdr g$0$13938))) (quote #f)) (quote #f)) (quote #f))))) (if (null? g$0$13937) (begin (quote #f) (null? g$0$13938)) (quote #f))))) (set! g$0$13232 (lambda (g$0$13943 g$0$13944) (if (eq? (g$0$13228 g$0$13943) (g$0$13228 g$0$13944)) (begin (quote #f) (g$0$13230 (g$0$13182 g$0$13943) (g$0$13182 g$0$13944))) (quote #f)))) (set! g$0$13234 (lambda (g$0$13947 g$0$13948) ((lambda (g$0$13951 g$0$13952) (if ((lambda (g$0$13954) (if g$0$13954 g$0$13954 (begin (quote #f) g$0$13952))) g$0$13951) (eq? g$0$13951 g$0$13952) (eq? (g$0$13228 g$0$13947) (g$0$13228 g$0$13948)))) (g$0$13248 g$0$13947) (g$0$13248 g$0$13948)))) (set! g$0$13236 (lambda (g$0$13956) (if (for-all g$0$13226 g$0$13956) (begin (quote #f) (g$0$13238 g$0$13956)) (quote #f)))) (set! g$0$13238 (lambda (g$0$13958) ((lambda (g$0$13960) (if g$0$13960 g$0$13960 (begin (quote #f) (if (not (g$0$13240 (car g$0$13958) (cdr g$0$13958))) (begin (quote #f) (g$0$13238 (cdr g$0$13958))) (quote #f))))) (null? g$0$13958)))) (set! g$0$13240 (lambda (g$0$13963 g$0$13964) (if (pair? g$0$13964) (begin (quote #f) ((lambda (g$0$13966) (if g$0$13966 g$0$13966 (begin (quote #f) (g$0$13240 g$0$13963 (cdr g$0$13964))))) (g$0$13232 g$0$13963 (car g$0$13964)))) (quote #f)))) (set! g$0$13242 (lambda (g$0$13968) ((lambda (g$0$13970) (if g$0$13970 g$0$13970 ((lambda (g$0$13972) (if g$0$13972 g$0$13972 ((lambda (g$0$13974) (if g$0$13974 g$0$13974 (begin (quote #f) (boolean? g$0$13968)))) (char? g$0$13968)))) (string? g$0$13968)))) (number? g$0$13968)))) (set! g$0$13244 (lambda (g$0$13977 g$0$13978) (if (g$0$13134 g$0$13978) g$0$13977 (letrec ((g$0$13980 (lambda (g$0$13982) (if (g$0$13178 g$0$13982) (g$0$13244 (g$0$13180 g$0$13982) (g$0$13182 g$0$13982)) (if (pair? g$0$13982) ((lambda (g$0$13989 g$0$13990) (if (if (eq? g$0$13989 (car g$0$13982)) (begin (quote #f) (eq? g$0$13990 (cdr g$0$13982))) (quote #f)) g$0$13982 (cons g$0$13989 g$0$13990))) (g$0$13980 (car g$0$13982)) (g$0$13980 (cdr g$0$13982))) (if (vector? g$0$13982) ((lambda (g$0$13984) ((lambda (g$0$13986) (if (for-all eq? g$0$13984 g$0$13986) g$0$13982 (list->vector g$0$13986))) (map g$0$13980 g$0$13984))) (vector->list g$0$13982)) g$0$13982)))))) (g$0$13980 g$0$13977))))) (set! g$0$13246 (lambda (g$0$13992) (g$0$13244 g$0$13992 (quote ())))) (set! g$0$13248 (lambda (g$0$13994) ((lambda (g$0$13996) (letrec ((g$0$13998 (lambda (g$0$14001 g$0$14002) (if (null? g$0$14001) (g$0$13714 g$0$13996) (if (eq? (car g$0$14001) (quote shift)) (g$0$13998 (cdr g$0$14001) (cdr g$0$14002)) ((lambda (g$0$14004) (if (g$0$13153 g$0$14004) ((lambda (g$0$14014) (letrec ((g$0$14016 (lambda (g$0$14019 g$0$14020) (if (= g$0$14019 g$0$14020) (g$0$13998 (cdr g$0$14001) g$0$14002) (if (if (eq? (vector-ref g$0$14014 g$0$14019) g$0$13996) (begin (quote #f) (g$0$13230 g$0$14002 (vector-ref (g$0$13149 g$0$14004) g$0$14019))) (quote #f)) ((lambda (g$0$14022) (begin (g$0$13171 g$0$14004 g$0$14019) g$0$14022)) (vector-ref (g$0$13151 g$0$14004) g$0$14019)) (g$0$14016 (+ g$0$14019 (quote 1)) g$0$14020)))))) (g$0$14016 (quote 0) (vector-length g$0$14014)))) (g$0$13147 g$0$14004)) (letrec ((g$0$14006 (lambda (g$0$14010 g$0$14011 g$0$14012) (if (null? g$0$14010) (g$0$13998 (cdr g$0$14001) g$0$14002) (if (if (eq? (car g$0$14010) g$0$13996) (begin (quote #f) (g$0$13230 (car g$0$14011) g$0$14002)) (quote #f)) (car g$0$14012) (g$0$14006 (cdr g$0$14010) (cdr g$0$14011) (cdr g$0$14012))))))) (g$0$14006 (g$0$13147 g$0$14004) (g$0$13149 g$0$14004) (g$0$13151 g$0$14004))))) (car g$0$14001))))))) (g$0$13998 (g$0$13184 g$0$13994) (g$0$13182 g$0$13994)))) (g$0$13228 g$0$13994)))) (set! g$0$13250 (lambda (g$0$14025 g$0$14026) ((lambda (g$0$14028) (if g$0$14028 ((lambda (g$0$14032) (if (if (pair? g$0$14032) (begin (quote #f) (eq? (car g$0$14032) (quote $core-rtd))) (quote #f)) (cons (quote $rtd) (map g$0$13513 (cdr g$0$14032))) g$0$14032)) g$0$14028) ((lambda (g$0$14030) (if g$0$14030 (cdr g$0$14030) (quote (displaced-lexical . #f)))) (assq g$0$14025 g$0$14026)))) (g$0$12831 g$0$14025)))) (set! g$0$13252 cons) (set! g$0$13254 car) (set! g$0$13256 cdr) (set! g$0$13258 (lambda (g$0$14035 g$0$14036) (if (g$0$13226 g$0$14035) ((lambda (g$0$14049) ((lambda (g$0$14051) ((lambda (g$0$14053) ((lambda (g$0$14055) ((lambda () (begin (if g$0$14051 (void) (error (quote expander) (quote "unbound identifier") (g$0$13244 g$0$14035 (quote ())))) ((lambda (g$0$14056) (if (memv g$0$14056 (quote (lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd))) (values g$0$14055 (g$0$13256 g$0$14053) g$0$14049) (values (quote other) (quote #f) (quote #f)))) g$0$14055))))) (g$0$13254 g$0$14053))) (g$0$13250 g$0$14051 g$0$14036))) (g$0$13248 g$0$14049))) g$0$14035) (if (g$0$13212 g$0$14035) ((lambda (g$0$14040) (if (g$0$13226 g$0$14040) ((lambda (g$0$14042) ((lambda (g$0$14044) ((lambda (g$0$14046) ((lambda () (begin (if g$0$14042 (void) (error (quote expander) (quote "unbound identifier") (g$0$13244 g$0$14035 (quote ())))) ((lambda (g$0$14047) (if (memv g$0$14047 (quote (define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import $core-rtd))) (values g$0$14046 (g$0$13256 g$0$14044) g$0$14040) (values (quote call) (quote #f) (quote #f)))) g$0$14046))))) (g$0$13254 g$0$14044))) (g$0$13250 g$0$14042 g$0$14036))) (g$0$13248 g$0$14040)) (values (quote call) (quote #f) (quote #f)))) (g$0$13220 g$0$14035)) ((lambda (g$0$14038) (if (g$0$13242 g$0$14038) (values (quote constant) g$0$14038 (quote #f)) (values (quote other) (quote #f) (quote #f)))) (g$0$13246 g$0$14035)))))) (set! g$0$13272 (lambda (g$0$14059 g$0$14060) (if (procedure? g$0$14059) (cons* (quote local-macro) g$0$14059 g$0$14060) (if (if (pair? g$0$14059) (if (eq? (car g$0$14059) (quote macro!)) (begin (quote #f) (procedure? (cdr g$0$14059))) (quote #f)) (quote #f)) (cons* (quote local-macro!) (cdr g$0$14059) g$0$14060) (if (if (pair? g$0$14059) (begin (quote #f) (eq? (car g$0$14059) (quote $rtd))) (quote #f)) g$0$14059 (error (quote expand) (quote "invalid transformer") g$0$14059)))))) (set! g$0$13274 (lambda (g$0$14062) (if (procedure? g$0$14062) (cons (quote macro!) g$0$14062) (error (quote make-variable-transformer) (quote "not a procedure") g$0$14062)))) (set! g$0$13276 (lambda (g$0$14064) (g$0$13272 (eval-core (g$0$12392 g$0$14064)) g$0$14064))) (set! g$0$13475 (lambda (g$0$14066) ((lambda (g$0$14068) ((lambda (g$0$14070) (if (if g$0$14070 (begin (quote #f) (apply (lambda (g$0$14121 g$0$14122 g$0$14123 g$0$14124) (g$0$13226 g$0$14121)) g$0$14070)) (quote #f)) (apply (lambda (g$0$14113 g$0$14114 g$0$14115 g$0$14116) (values g$0$14113 (cons (quote defun) (cons g$0$14114 (cons g$0$14115 g$0$14116))))) g$0$14070) ((lambda (g$0$14072) ((lambda (g$0$14074) (if (if g$0$14074 (begin (quote #f) (apply (lambda (g$0$14081 g$0$14082) (g$0$13226 g$0$14081)) g$0$14074)) (quote #f)) (apply (lambda (g$0$14077 g$0$14078) (values g$0$14077 (cons (quote expr) g$0$14078))) g$0$14074) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$14072 (quote ()))))) ((lambda (g$0$14084) (if (g$0$13212 g$0$14084) (begin (quote #f) ((lambda (g$0$14086) (if g$0$14086 (begin (quote #f) ((lambda (g$0$14088) (if g$0$14088 (begin (quote #f) (append g$0$14086 g$0$14088)) (quote #f))) ((lambda (g$0$14090) (if (g$0$13212 g$0$14090) (begin (quote #f) ((lambda (g$0$14092) (if g$0$14092 (begin (quote #f) ((lambda (g$0$14094) (if g$0$14094 (begin (quote #f) (append g$0$14092 g$0$14094)) (quote #f))) ((lambda (g$0$14096) (if (g$0$13212 g$0$14096) (begin (quote #f) ((lambda (g$0$14098) (if g$0$14098 (begin (quote #f) ((lambda (g$0$14100) (if g$0$14100 (begin (quote #f) (append g$0$14098 g$0$14100)) (quote #f))) ((lambda (g$0$14102) (if (equal? (g$0$13246 g$0$14102) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$14096)))) (quote #f))) ((lambda (g$0$14104) (list g$0$14104)) (g$0$13220 g$0$14096)))) (quote #f))) (g$0$13224 g$0$14090)))) (quote #f))) ((lambda (g$0$14106) (list g$0$14106)) (g$0$13220 g$0$14090)))) (quote #f))) (g$0$13224 g$0$14084)))) (quote #f))) ((lambda (g$0$14108) (quote ())) (g$0$13220 g$0$14084)))) (quote #f))) g$0$14072))) g$0$14068))) ((lambda (g$0$14126) (if (g$0$13212 g$0$14126) (begin (quote #f) ((lambda (g$0$14128) (if g$0$14128 (begin (quote #f) ((lambda (g$0$14130) (if g$0$14130 (begin (quote #f) (append g$0$14128 g$0$14130)) (quote #f))) ((lambda (g$0$14132) (if (g$0$13212 g$0$14132) (begin (quote #f) ((lambda (g$0$14134) (if g$0$14134 (begin (quote #f) ((lambda (g$0$14136) (if g$0$14136 (begin (quote #f) (append g$0$14134 g$0$14136)) (quote #f))) ((lambda (g$0$14138) (if (g$0$13212 g$0$14138) (begin (quote #f) ((lambda (g$0$14140) (if g$0$14140 (begin (quote #f) ((lambda (g$0$14142) (if g$0$14142 (begin (quote #f) (append g$0$14140 g$0$14142)) (quote #f))) ((letrec ((g$0$14144 (lambda (g$0$14146) (if (g$0$13212 g$0$14146) ((lambda (g$0$14148) (if g$0$14148 (begin (quote #f) ((lambda (g$0$14150) (if g$0$14150 (begin (quote #f) (map cons g$0$14148 g$0$14150)) (quote #f))) (g$0$14144 (g$0$13224 g$0$14146)))) (quote #f))) ((lambda (g$0$14152) (list g$0$14152)) (g$0$13220 g$0$14146))) (if (g$0$13216 g$0$14146) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$14144) (g$0$13224 g$0$14138)))) (quote #f))) ((lambda (g$0$14154) (list g$0$14154)) (g$0$13220 g$0$14138)))) (quote #f))) (g$0$13224 g$0$14132)))) (quote #f))) ((lambda (g$0$14156) (if (g$0$13212 g$0$14156) (begin (quote #f) ((lambda (g$0$14158) (if g$0$14158 (begin (quote #f) ((lambda (g$0$14160) (if g$0$14160 (begin (quote #f) (append g$0$14158 g$0$14160)) (quote #f))) ((lambda (g$0$14162) (list g$0$14162)) (g$0$13224 g$0$14156)))) (quote #f))) ((lambda (g$0$14164) (list g$0$14164)) (g$0$13220 g$0$14156)))) (quote #f))) (g$0$13220 g$0$14132)))) (quote #f))) (g$0$13224 g$0$14126)))) (quote #f))) ((lambda (g$0$14166) (quote ())) (g$0$13220 g$0$14126)))) (quote #f))) g$0$14068))) g$0$14066))) (set! g$0$13477 (lambda (g$0$14168) ((lambda (g$0$14170) ((lambda (g$0$14172) (if (if g$0$14172 (begin (quote #f) (apply (lambda (g$0$14179 g$0$14180) (g$0$13226 g$0$14179)) g$0$14172)) (quote #f)) (apply (lambda (g$0$14175 g$0$14176) (values g$0$14175 g$0$14176)) g$0$14172) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$14170 (quote ()))))) ((lambda (g$0$14182) (if (g$0$13212 g$0$14182) (begin (quote #f) ((lambda (g$0$14184) (if g$0$14184 (begin (quote #f) ((lambda (g$0$14186) (if g$0$14186 (begin (quote #f) (append g$0$14184 g$0$14186)) (quote #f))) ((lambda (g$0$14188) (if (g$0$13212 g$0$14188) (begin (quote #f) ((lambda (g$0$14190) (if g$0$14190 (begin (quote #f) ((lambda (g$0$14192) (if g$0$14192 (begin (quote #f) (append g$0$14190 g$0$14192)) (quote #f))) ((lambda (g$0$14194) (if (g$0$13212 g$0$14194) (begin (quote #f) ((lambda (g$0$14196) (if g$0$14196 (begin (quote #f) ((lambda (g$0$14198) (if g$0$14198 (begin (quote #f) (append g$0$14196 g$0$14198)) (quote #f))) ((lambda (g$0$14200) (if (equal? (g$0$13246 g$0$14200) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$14194)))) (quote #f))) ((lambda (g$0$14202) (list g$0$14202)) (g$0$13220 g$0$14194)))) (quote #f))) (g$0$13224 g$0$14188)))) (quote #f))) ((lambda (g$0$14204) (list g$0$14204)) (g$0$13220 g$0$14188)))) (quote #f))) (g$0$13224 g$0$14182)))) (quote #f))) ((lambda (g$0$14206) (quote ())) (g$0$13220 g$0$14182)))) (quote #f))) g$0$14170))) g$0$14168))) (set! g$0$13479 (lambda (g$0$14208) ((lambda (g$0$14210) ((lambda (g$0$14212) (if g$0$14212 ((lambda (g$0$14214) ((lambda (g$0$14217 g$0$14218) (g$0$13206 (g$0$13143 (list g$0$14217) (list g$0$13132) (list g$0$14218) (quote #f)) (g$0$13202 g$0$14208 g$0$13132 (quote ())))) (car g$0$14214) (cdr g$0$14214))) g$0$14212) (g$0$13202 g$0$14208 g$0$13132 (quote ())))) (assq g$0$14208 g$0$14210))) (g$0$12864 (g$0$12839 (quote (psyntax system $all))))))) (set! g$0$13481 (lambda (g$0$14222 g$0$14223 g$0$14224) (cons (cons* g$0$14222 (quote lexical) g$0$14223) g$0$14224))) (set! g$0$13483 (lambda (g$0$14228 g$0$14229 g$0$14230) (if (null? g$0$14228) g$0$14230 (g$0$13483 (cdr g$0$14228) (cdr g$0$14229) (g$0$13481 (car g$0$14228) (car g$0$14229) g$0$14230))))) (set! g$0$13485 (lambda (g$0$14234 g$0$14235 g$0$14236) ((lambda (g$0$14238) ((lambda (g$0$14240) (if (if g$0$14240 (begin (quote #f) (apply (lambda (g$0$14275 g$0$14276 g$0$14277 g$0$14278) (quote #t)) g$0$14240)) (quote #f)) (apply (lambda (g$0$14245 g$0$14246 g$0$14247 g$0$14248) ((lambda (g$0$14250) ((lambda (g$0$14253 g$0$14254) ((lambda (g$0$14258 g$0$14259 g$0$14260) (letrec ((g$0$14262 (lambda (g$0$14265 g$0$14266) (if (null? g$0$14265) (g$0$13613 (g$0$13206 (g$0$13173 g$0$14258 g$0$14259) (cons g$0$14247 g$0$14248)) (g$0$13483 g$0$14259 g$0$14260 g$0$14235) g$0$14236) (list (quote (primitive call-with-values)) (g$0$13114 (quote #f) (quote ()) (car g$0$14266)) (g$0$13114 (quote #f) (car g$0$14265) (g$0$14262 (cdr g$0$14265) (cdr g$0$14266)))))))) (g$0$14262 g$0$14253 g$0$14250))) (apply append g$0$14245) (apply append g$0$14254) (apply append g$0$14253))) (map (lambda (g$0$14268) (map g$0$13136 g$0$14268)) g$0$14245) (map (lambda (g$0$14270) (map g$0$13140 g$0$14270)) g$0$14245))) (g$0$13593 g$0$14246 g$0$14235 g$0$14236))) g$0$14240) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$14238 (quote ()))))) ((lambda (g$0$14280) (if (g$0$13212 g$0$14280) (begin (quote #f) ((lambda (g$0$14282) (if g$0$14282 (begin (quote #f) ((lambda (g$0$14284) (if g$0$14284 (begin (quote #f) (append g$0$14282 g$0$14284)) (quote #f))) ((lambda (g$0$14286) (if (g$0$13212 g$0$14286) (begin (quote #f) ((lambda (g$0$14288) (if g$0$14288 (begin (quote #f) ((lambda (g$0$14290) (if g$0$14290 (begin (quote #f) (append g$0$14288 g$0$14290)) (quote #f))) ((lambda (g$0$14292) (if (g$0$13212 g$0$14292) (begin (quote #f) ((lambda (g$0$14294) (if g$0$14294 (begin (quote #f) ((lambda (g$0$14296) (if g$0$14296 (begin (quote #f) (append g$0$14294 g$0$14296)) (quote #f))) ((letrec ((g$0$14298 (lambda (g$0$14300) (if (g$0$13212 g$0$14300) ((lambda (g$0$14302) (if g$0$14302 (begin (quote #f) ((lambda (g$0$14304) (if g$0$14304 (begin (quote #f) (map cons g$0$14302 g$0$14304)) (quote #f))) (g$0$14298 (g$0$13224 g$0$14300)))) (quote #f))) ((lambda (g$0$14306) (list g$0$14306)) (g$0$13220 g$0$14300))) (if (g$0$13216 g$0$14300) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$14298) (g$0$13224 g$0$14292)))) (quote #f))) ((lambda (g$0$14308) (list g$0$14308)) (g$0$13220 g$0$14292)))) (quote #f))) (g$0$13224 g$0$14286)))) (quote #f))) ((letrec ((g$0$14310 (lambda (g$0$14312) (if (g$0$13212 g$0$14312) ((lambda (g$0$14314) (if g$0$14314 (begin (quote #f) ((lambda (g$0$14316) (if g$0$14316 (begin (quote #f) (map cons g$0$14314 g$0$14316)) (quote #f))) (g$0$14310 (g$0$13224 g$0$14312)))) (quote #f))) ((lambda (g$0$14318) (if (g$0$13212 g$0$14318) (begin (quote #f) ((lambda (g$0$14320) (if g$0$14320 (begin (quote #f) ((lambda (g$0$14322) (if g$0$14322 (begin (quote #f) (append g$0$14320 g$0$14322)) (quote #f))) ((lambda (g$0$14324) (if (g$0$13212 g$0$14324) (begin (quote #f) ((lambda (g$0$14326) (if g$0$14326 (begin (quote #f) ((lambda (g$0$14328) (if g$0$14328 (begin (quote #f) (append g$0$14326 g$0$14328)) (quote #f))) ((lambda (g$0$14330) (if (equal? (g$0$13246 g$0$14330) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$14324)))) (quote #f))) ((lambda (g$0$14332) (list g$0$14332)) (g$0$13220 g$0$14324)))) (quote #f))) (g$0$13224 g$0$14318)))) (quote #f))) ((letrec ((g$0$14334 (lambda (g$0$14336) (if (g$0$13212 g$0$14336) ((lambda (g$0$14338) (if g$0$14338 (begin (quote #f) ((lambda (g$0$14340) (if g$0$14340 (begin (quote #f) (map cons g$0$14338 g$0$14340)) (quote #f))) (g$0$14334 (g$0$13224 g$0$14336)))) (quote #f))) ((lambda (g$0$14342) (list g$0$14342)) (g$0$13220 g$0$14336))) (if (g$0$13216 g$0$14336) (list (begin (quote fml**) (quote ()))) (quote #f)))))) g$0$14334) (g$0$13220 g$0$14318)))) (quote #f))) (g$0$13220 g$0$14312))) (if (g$0$13216 g$0$14312) (list (begin (quote fml**) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$14310) (g$0$13220 g$0$14286)))) (quote #f))) (g$0$13224 g$0$14280)))) (quote #f))) ((lambda (g$0$14344) (quote ())) (g$0$13220 g$0$14280)))) (quote #f))) g$0$14238))) g$0$14234))) (set! g$0$13487 (lambda (g$0$14349 g$0$14350 g$0$14351 g$0$14352) ((lambda (g$0$14354) ((lambda (g$0$14356) (if (if g$0$14356 (begin (quote #f) (apply (lambda (g$0$14383 g$0$14384 g$0$14385 g$0$14386) (quote #t)) g$0$14356)) (quote #f)) (apply (lambda (g$0$14361 g$0$14362 g$0$14363 g$0$14364) (if (not (g$0$13236 g$0$14361)) (error (quote expander) (quote "invalid identifiers") (g$0$13244 g$0$14349 (quote ()))) ((lambda (g$0$14367 g$0$14368) ((lambda (g$0$14371 g$0$14372) ((lambda (g$0$14375 g$0$14376) (g$0$14352 (quote #f) g$0$14367 g$0$14376 g$0$14375)) (g$0$13613 (g$0$13206 g$0$14371 (cons g$0$14363 g$0$14364)) g$0$14372 g$0$14351) (g$0$13593 (map (lambda (g$0$14378) (g$0$13206 g$0$14371 g$0$14378)) g$0$14362) g$0$14372 g$0$14351))) (g$0$13173 g$0$14361 g$0$14368) (g$0$13483 g$0$14368 g$0$14367 g$0$14350))) (map g$0$13136 g$0$14361) (map g$0$13140 g$0$14361)))) g$0$14356) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$14354 (quote ()))))) ((lambda (g$0$14388) (if (g$0$13212 g$0$14388) (begin (quote #f) ((lambda (g$0$14390) (if g$0$14390 (begin (quote #f) ((lambda (g$0$14392) (if g$0$14392 (begin (quote #f) (append g$0$14390 g$0$14392)) (quote #f))) ((lambda (g$0$14394) (if (g$0$13212 g$0$14394) (begin (quote #f) ((lambda (g$0$14396) (if g$0$14396 (begin (quote #f) ((lambda (g$0$14398) (if g$0$14398 (begin (quote #f) (append g$0$14396 g$0$14398)) (quote #f))) ((lambda (g$0$14400) (if (g$0$13212 g$0$14400) (begin (quote #f) ((lambda (g$0$14402) (if g$0$14402 (begin (quote #f) ((lambda (g$0$14404) (if g$0$14404 (begin (quote #f) (append g$0$14402 g$0$14404)) (quote #f))) ((letrec ((g$0$14406 (lambda (g$0$14408) (if (g$0$13212 g$0$14408) ((lambda (g$0$14410) (if g$0$14410 (begin (quote #f) ((lambda (g$0$14412) (if g$0$14412 (begin (quote #f) (map cons g$0$14410 g$0$14412)) (quote #f))) (g$0$14406 (g$0$13224 g$0$14408)))) (quote #f))) ((lambda (g$0$14414) (list g$0$14414)) (g$0$13220 g$0$14408))) (if (g$0$13216 g$0$14408) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$14406) (g$0$13224 g$0$14400)))) (quote #f))) ((lambda (g$0$14416) (list g$0$14416)) (g$0$13220 g$0$14400)))) (quote #f))) (g$0$13224 g$0$14394)))) (quote #f))) ((letrec ((g$0$14418 (lambda (g$0$14420) (if (g$0$13212 g$0$14420) ((lambda (g$0$14422) (if g$0$14422 (begin (quote #f) ((lambda (g$0$14424) (if g$0$14424 (begin (quote #f) (map cons g$0$14422 g$0$14424)) (quote #f))) (g$0$14418 (g$0$13224 g$0$14420)))) (quote #f))) ((lambda (g$0$14426) (if (g$0$13212 g$0$14426) (begin (quote #f) ((lambda (g$0$14428) (if g$0$14428 (begin (quote #f) ((lambda (g$0$14430) (if g$0$14430 (begin (quote #f) (append g$0$14428 g$0$14430)) (quote #f))) ((lambda (g$0$14432) (if (g$0$13212 g$0$14432) (begin (quote #f) ((lambda (g$0$14434) (if g$0$14434 (begin (quote #f) ((lambda (g$0$14436) (if g$0$14436 (begin (quote #f) (append g$0$14434 g$0$14436)) (quote #f))) ((lambda (g$0$14438) (if (equal? (g$0$13246 g$0$14438) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$14432)))) (quote #f))) ((lambda (g$0$14440) (list g$0$14440)) (g$0$13220 g$0$14432)))) (quote #f))) (g$0$13224 g$0$14426)))) (quote #f))) ((lambda (g$0$14442) (list g$0$14442)) (g$0$13220 g$0$14426)))) (quote #f))) (g$0$13220 g$0$14420))) (if (g$0$13216 g$0$14420) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$14418) (g$0$13220 g$0$14394)))) (quote #f))) (g$0$13224 g$0$14388)))) (quote #f))) ((lambda (g$0$14444) (quote ())) (g$0$13220 g$0$14388)))) (quote #f))) g$0$14354))) g$0$14349))) (set! g$0$13489 (lambda (g$0$14448 g$0$14449 g$0$14450) (g$0$13487 g$0$14448 g$0$14449 g$0$14450 g$0$13106))) (set! g$0$13491 (lambda (g$0$14454 g$0$14455 g$0$14456) (g$0$13487 g$0$14454 g$0$14455 g$0$14456 g$0$13105))) (set! g$0$13493 (lambda (g$0$14460 g$0$14461 g$0$14462) ((lambda (g$0$14464) ((lambda (g$0$14466) (if (if g$0$14466 (begin (quote #f) (apply (lambda (g$0$14476) (g$0$13226 g$0$14476)) g$0$14466)) (quote #f)) (apply (lambda (g$0$14468) ((lambda (g$0$14470) ((lambda (g$0$14472) ((lambda (g$0$14474) ((lambda () (begin (if g$0$14470 (void) (error (quote expander) (quote "unbound identifier") (g$0$13244 g$0$14460 (quote ())))) (if (if (eq? g$0$14474 (quote $rtd)) (begin (quote #f) (not (list? (g$0$13256 g$0$14472)))) (quote #f)) (void) (error (quote expander) (quote "invalid type") (g$0$13244 g$0$14460 (quote ())))) (list (quote quote) (g$0$13256 g$0$14472)))))) (g$0$13254 g$0$14472))) (g$0$13250 g$0$14470 g$0$14461))) (g$0$13248 g$0$14468))) g$0$14466) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$14464 (quote ()))))) ((lambda (g$0$14478) (if (g$0$13212 g$0$14478) (begin (quote #f) ((lambda (g$0$14480) (if g$0$14480 (begin (quote #f) ((lambda (g$0$14482) (if g$0$14482 (begin (quote #f) (append g$0$14480 g$0$14482)) (quote #f))) ((lambda (g$0$14484) (if (g$0$13212 g$0$14484) (begin (quote #f) ((lambda (g$0$14486) (if g$0$14486 (begin (quote #f) ((lambda (g$0$14488) (if g$0$14488 (begin (quote #f) (append g$0$14486 g$0$14488)) (quote #f))) ((lambda (g$0$14490) (if (equal? (g$0$13246 g$0$14490) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$14484)))) (quote #f))) ((lambda (g$0$14492) (list g$0$14492)) (g$0$13220 g$0$14484)))) (quote #f))) (g$0$13224 g$0$14478)))) (quote #f))) ((lambda (g$0$14494) (quote ())) (g$0$13220 g$0$14478)))) (quote #f))) g$0$14464))) g$0$14460))) (set! g$0$13495 (lambda (g$0$14498 g$0$14499 g$0$14500) ((lambda (g$0$14502) ((lambda (g$0$14504) (if (if g$0$14504 (begin (quote #f) (apply (lambda (g$0$14514) (g$0$13226 g$0$14514)) g$0$14504)) (quote #f)) (apply (lambda (g$0$14506) ((lambda (g$0$14508) ((lambda (g$0$14510) ((lambda (g$0$14512) ((lambda () (begin (if g$0$14508 (void) (error (quote expander) (quote "unbound identifier") (g$0$13244 g$0$14498 (quote ())))) (if (if (eq? g$0$14512 (quote $rtd)) (begin (quote #f) (list? (g$0$13256 g$0$14510))) (quote #f)) (void) (error (quote expander) (quote "invalid type") (g$0$13244 g$0$14498 (quote ())))) (g$0$13597 (car (g$0$13256 g$0$14510)) g$0$14499 g$0$14500))))) (g$0$13254 g$0$14510))) (g$0$13250 g$0$14508 g$0$14499))) (g$0$13248 g$0$14506))) g$0$14504) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$14502 (quote ()))))) ((lambda (g$0$14516) (if (g$0$13212 g$0$14516) (begin (quote #f) ((lambda (g$0$14518) (if g$0$14518 (begin (quote #f) ((lambda (g$0$14520) (if g$0$14520 (begin (quote #f) (append g$0$14518 g$0$14520)) (quote #f))) ((lambda (g$0$14522) (if (g$0$13212 g$0$14522) (begin (quote #f) ((lambda (g$0$14524) (if g$0$14524 (begin (quote #f) ((lambda (g$0$14526) (if g$0$14526 (begin (quote #f) (append g$0$14524 g$0$14526)) (quote #f))) ((lambda (g$0$14528) (if (equal? (g$0$13246 g$0$14528) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$14522)))) (quote #f))) ((lambda (g$0$14530) (list g$0$14530)) (g$0$13220 g$0$14522)))) (quote #f))) (g$0$13224 g$0$14516)))) (quote #f))) ((lambda (g$0$14532) (quote ())) (g$0$13220 g$0$14516)))) (quote #f))) g$0$14502))) g$0$14498))) (set! g$0$13497 (lambda (g$0$14536 g$0$14537 g$0$14538) ((lambda (g$0$14540) ((lambda (g$0$14542) (if (if g$0$14542 (begin (quote #f) (apply (lambda (g$0$14552) (g$0$13226 g$0$14552)) g$0$14542)) (quote #f)) (apply (lambda (g$0$14544) ((lambda (g$0$14546) ((lambda (g$0$14548) ((lambda (g$0$14550) ((lambda () (begin (if g$0$14546 (void) (error (quote expander) (quote "unbound identifier") (g$0$13244 g$0$14536 (quote ())))) (if (if (eq? g$0$14550 (quote $rtd)) (begin (quote #f) (list? (g$0$13256 g$0$14548))) (quote #f)) (void) (error (quote expander) (quote "invalid type") (g$0$13244 g$0$14536 (quote ())))) (g$0$13597 (cadr (g$0$13256 g$0$14548)) g$0$14537 g$0$14538))))) (g$0$13254 g$0$14548))) (g$0$13250 g$0$14546 g$0$14537))) (g$0$13248 g$0$14544))) g$0$14542) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$14540 (quote ()))))) ((lambda (g$0$14554) (if (g$0$13212 g$0$14554) (begin (quote #f) ((lambda (g$0$14556) (if g$0$14556 (begin (quote #f) ((lambda (g$0$14558) (if g$0$14558 (begin (quote #f) (append g$0$14556 g$0$14558)) (quote #f))) ((lambda (g$0$14560) (if (g$0$13212 g$0$14560) (begin (quote #f) ((lambda (g$0$14562) (if g$0$14562 (begin (quote #f) ((lambda (g$0$14564) (if g$0$14564 (begin (quote #f) (append g$0$14562 g$0$14564)) (quote #f))) ((lambda (g$0$14566) (if (equal? (g$0$13246 g$0$14566) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$14560)))) (quote #f))) ((lambda (g$0$14568) (list g$0$14568)) (g$0$13220 g$0$14560)))) (quote #f))) (g$0$13224 g$0$14554)))) (quote #f))) ((lambda (g$0$14570) (quote ())) (g$0$13220 g$0$14554)))) (quote #f))) g$0$14540))) g$0$14536))) (set! g$0$13499 (lambda (g$0$14574 g$0$14575 g$0$14576) ((lambda (g$0$14578) ((lambda (g$0$14580) (if (if g$0$14580 (begin (quote #f) (apply (lambda (g$0$14590 g$0$14591 g$0$14592) (quote #t)) g$0$14580)) (quote #f)) (apply (lambda (g$0$14584 g$0$14585 g$0$14586) (list (quote if) (g$0$13597 g$0$14584 g$0$14575 g$0$14576) (g$0$13108 (quote #f) (g$0$13593 (cons g$0$14585 g$0$14586) g$0$14575 g$0$14576)) (g$0$13107))) g$0$14580) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$14578 (quote ()))))) ((lambda (g$0$14594) (if (g$0$13212 g$0$14594) (begin (quote #f) ((lambda (g$0$14596) (if g$0$14596 (begin (quote #f) ((lambda (g$0$14598) (if g$0$14598 (begin (quote #f) (append g$0$14596 g$0$14598)) (quote #f))) ((lambda (g$0$14600) (if (g$0$13212 g$0$14600) (begin (quote #f) ((lambda (g$0$14602) (if g$0$14602 (begin (quote #f) ((lambda (g$0$14604) (if g$0$14604 (begin (quote #f) (append g$0$14602 g$0$14604)) (quote #f))) ((lambda (g$0$14606) (if (g$0$13212 g$0$14606) (begin (quote #f) ((lambda (g$0$14608) (if g$0$14608 (begin (quote #f) ((lambda (g$0$14610) (if g$0$14610 (begin (quote #f) (append g$0$14608 g$0$14610)) (quote #f))) ((letrec ((g$0$14612 (lambda (g$0$14614) (if (g$0$13212 g$0$14614) ((lambda (g$0$14616) (if g$0$14616 (begin (quote #f) ((lambda (g$0$14618) (if g$0$14618 (begin (quote #f) (map cons g$0$14616 g$0$14618)) (quote #f))) (g$0$14612 (g$0$13224 g$0$14614)))) (quote #f))) ((lambda (g$0$14620) (list g$0$14620)) (g$0$13220 g$0$14614))) (if (g$0$13216 g$0$14614) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14612) (g$0$13224 g$0$14606)))) (quote #f))) ((lambda (g$0$14622) (list g$0$14622)) (g$0$13220 g$0$14606)))) (quote #f))) (g$0$13224 g$0$14600)))) (quote #f))) ((lambda (g$0$14624) (list g$0$14624)) (g$0$13220 g$0$14600)))) (quote #f))) (g$0$13224 g$0$14594)))) (quote #f))) ((lambda (g$0$14626) (quote ())) (g$0$13220 g$0$14594)))) (quote #f))) g$0$14578))) g$0$14574))) (set! g$0$13501 (lambda (g$0$14630 g$0$14631 g$0$14632) ((lambda (g$0$14634) ((lambda (g$0$14636) (if (if g$0$14636 (begin (quote #f) (apply (lambda (g$0$14646 g$0$14647 g$0$14648) (quote #t)) g$0$14636)) (quote #f)) (apply (lambda (g$0$14640 g$0$14641 g$0$14642) (list (quote if) (g$0$13597 g$0$14640 g$0$14631 g$0$14632) (g$0$13107) (g$0$13108 (quote #f) (g$0$13593 (cons g$0$14641 g$0$14642) g$0$14631 g$0$14632)))) g$0$14636) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$14634 (quote ()))))) ((lambda (g$0$14650) (if (g$0$13212 g$0$14650) (begin (quote #f) ((lambda (g$0$14652) (if g$0$14652 (begin (quote #f) ((lambda (g$0$14654) (if g$0$14654 (begin (quote #f) (append g$0$14652 g$0$14654)) (quote #f))) ((lambda (g$0$14656) (if (g$0$13212 g$0$14656) (begin (quote #f) ((lambda (g$0$14658) (if g$0$14658 (begin (quote #f) ((lambda (g$0$14660) (if g$0$14660 (begin (quote #f) (append g$0$14658 g$0$14660)) (quote #f))) ((lambda (g$0$14662) (if (g$0$13212 g$0$14662) (begin (quote #f) ((lambda (g$0$14664) (if g$0$14664 (begin (quote #f) ((lambda (g$0$14666) (if g$0$14666 (begin (quote #f) (append g$0$14664 g$0$14666)) (quote #f))) ((letrec ((g$0$14668 (lambda (g$0$14670) (if (g$0$13212 g$0$14670) ((lambda (g$0$14672) (if g$0$14672 (begin (quote #f) ((lambda (g$0$14674) (if g$0$14674 (begin (quote #f) (map cons g$0$14672 g$0$14674)) (quote #f))) (g$0$14668 (g$0$13224 g$0$14670)))) (quote #f))) ((lambda (g$0$14676) (list g$0$14676)) (g$0$13220 g$0$14670))) (if (g$0$13216 g$0$14670) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14668) (g$0$13224 g$0$14662)))) (quote #f))) ((lambda (g$0$14678) (list g$0$14678)) (g$0$13220 g$0$14662)))) (quote #f))) (g$0$13224 g$0$14656)))) (quote #f))) ((lambda (g$0$14680) (list g$0$14680)) (g$0$13220 g$0$14656)))) (quote #f))) (g$0$13224 g$0$14650)))) (quote #f))) ((lambda (g$0$14682) (quote ())) (g$0$13220 g$0$14650)))) (quote #f))) g$0$14634))) g$0$14630))) (set! g$0$13503 (lambda (g$0$14686 g$0$14687 g$0$14688) ((lambda (g$0$14690) ((lambda (g$0$14692) (if (if g$0$14692 (begin (quote #f) (apply (lambda (g$0$14740 g$0$14741 g$0$14742) (quote #t)) g$0$14692)) (quote #f)) (apply (lambda (g$0$14734 g$0$14735 g$0$14736) (list (quote if) (g$0$13597 g$0$14734 g$0$14687 g$0$14688) (g$0$13597 g$0$14735 g$0$14687 g$0$14688) (g$0$13597 g$0$14736 g$0$14687 g$0$14688))) g$0$14692) ((lambda (g$0$14694) ((lambda (g$0$14696) (if (if g$0$14696 (begin (quote #f) (apply (lambda (g$0$14703 g$0$14704) (quote #t)) g$0$14696)) (quote #f)) (apply (lambda (g$0$14699 g$0$14700) (list (quote if) (g$0$13597 g$0$14699 g$0$14687 g$0$14688) (g$0$13597 g$0$14700 g$0$14687 g$0$14688) (g$0$13107))) g$0$14696) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$14694 (quote ()))))) ((lambda (g$0$14706) (if (g$0$13212 g$0$14706) (begin (quote #f) ((lambda (g$0$14708) (if g$0$14708 (begin (quote #f) ((lambda (g$0$14710) (if g$0$14710 (begin (quote #f) (append g$0$14708 g$0$14710)) (quote #f))) ((lambda (g$0$14712) (if (g$0$13212 g$0$14712) (begin (quote #f) ((lambda (g$0$14714) (if g$0$14714 (begin (quote #f) ((lambda (g$0$14716) (if g$0$14716 (begin (quote #f) (append g$0$14714 g$0$14716)) (quote #f))) ((lambda (g$0$14718) (if (g$0$13212 g$0$14718) (begin (quote #f) ((lambda (g$0$14720) (if g$0$14720 (begin (quote #f) ((lambda (g$0$14722) (if g$0$14722 (begin (quote #f) (append g$0$14720 g$0$14722)) (quote #f))) ((lambda (g$0$14724) (if (equal? (g$0$13246 g$0$14724) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$14718)))) (quote #f))) ((lambda (g$0$14726) (list g$0$14726)) (g$0$13220 g$0$14718)))) (quote #f))) (g$0$13224 g$0$14712)))) (quote #f))) ((lambda (g$0$14728) (list g$0$14728)) (g$0$13220 g$0$14712)))) (quote #f))) (g$0$13224 g$0$14706)))) (quote #f))) ((lambda (g$0$14730) (quote ())) (g$0$13220 g$0$14706)))) (quote #f))) g$0$14694))) g$0$14690))) ((lambda (g$0$14744) (if (g$0$13212 g$0$14744) (begin (quote #f) ((lambda (g$0$14746) (if g$0$14746 (begin (quote #f) ((lambda (g$0$14748) (if g$0$14748 (begin (quote #f) (append g$0$14746 g$0$14748)) (quote #f))) ((lambda (g$0$14750) (if (g$0$13212 g$0$14750) (begin (quote #f) ((lambda (g$0$14752) (if g$0$14752 (begin (quote #f) ((lambda (g$0$14754) (if g$0$14754 (begin (quote #f) (append g$0$14752 g$0$14754)) (quote #f))) ((lambda (g$0$14756) (if (g$0$13212 g$0$14756) (begin (quote #f) ((lambda (g$0$14758) (if g$0$14758 (begin (quote #f) ((lambda (g$0$14760) (if g$0$14760 (begin (quote #f) (append g$0$14758 g$0$14760)) (quote #f))) ((lambda (g$0$14762) (if (g$0$13212 g$0$14762) (begin (quote #f) ((lambda (g$0$14764) (if g$0$14764 (begin (quote #f) ((lambda (g$0$14766) (if g$0$14766 (begin (quote #f) (append g$0$14764 g$0$14766)) (quote #f))) ((lambda (g$0$14768) (if (equal? (g$0$13246 g$0$14768) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$14762)))) (quote #f))) ((lambda (g$0$14770) (list g$0$14770)) (g$0$13220 g$0$14762)))) (quote #f))) (g$0$13224 g$0$14756)))) (quote #f))) ((lambda (g$0$14772) (list g$0$14772)) (g$0$13220 g$0$14756)))) (quote #f))) (g$0$13224 g$0$14750)))) (quote #f))) ((lambda (g$0$14774) (list g$0$14774)) (g$0$13220 g$0$14750)))) (quote #f))) (g$0$13224 g$0$14744)))) (quote #f))) ((lambda (g$0$14776) (quote ())) (g$0$13220 g$0$14744)))) (quote #f))) g$0$14690))) g$0$14686))) (set! g$0$13505 (lambda (g$0$14780 g$0$14781 g$0$14782) ((lambda (g$0$14784 g$0$14786) (begin (set! g$0$14784 (lambda (g$0$14980 g$0$14981 g$0$14982) ((lambda (g$0$14984) ((lambda (g$0$14986) (if (if g$0$14986 (begin (quote #f) (apply (lambda (g$0$15006 g$0$15007 g$0$15008) (quote #t)) g$0$14986)) (quote #f)) (apply (lambda (g$0$15000 g$0$15001 g$0$15002) (list (quote if) (list (quote (primitive memv)) g$0$14980 (list (quote quote) (g$0$13246 g$0$15000))) (g$0$13108 (quote #f) (g$0$13593 (cons g$0$15001 g$0$15002) g$0$14781 g$0$14782)) g$0$14982)) g$0$14986) ((lambda (g$0$14988) ((lambda (g$0$14990) (if (if g$0$14990 (begin (quote #f) (apply (lambda (g$0$14994) (quote #t)) g$0$14990)) (quote #f)) (apply (lambda (g$0$14992) (error (quote expander) (quote "invalid syntax") (g$0$13246 g$0$14780))) g$0$14990) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$14988 (quote ()))))) ((lambda (g$0$14996) (list g$0$14996)) g$0$14988))) g$0$14984))) ((lambda (g$0$15010) (if (g$0$13212 g$0$15010) (begin (quote #f) ((lambda (g$0$15012) (if g$0$15012 (begin (quote #f) ((lambda (g$0$15014) (if g$0$15014 (begin (quote #f) (append g$0$15012 g$0$15014)) (quote #f))) ((lambda (g$0$15016) (if (g$0$13212 g$0$15016) (begin (quote #f) ((lambda (g$0$15018) (if g$0$15018 (begin (quote #f) ((lambda (g$0$15020) (if g$0$15020 (begin (quote #f) (append g$0$15018 g$0$15020)) (quote #f))) ((letrec ((g$0$15022 (lambda (g$0$15024) (if (g$0$13212 g$0$15024) ((lambda (g$0$15026) (if g$0$15026 (begin (quote #f) ((lambda (g$0$15028) (if g$0$15028 (begin (quote #f) (map cons g$0$15026 g$0$15028)) (quote #f))) (g$0$15022 (g$0$13224 g$0$15024)))) (quote #f))) ((lambda (g$0$15030) (list g$0$15030)) (g$0$13220 g$0$15024))) (if (g$0$13216 g$0$15024) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$15022) (g$0$13224 g$0$15016)))) (quote #f))) ((lambda (g$0$15032) (list g$0$15032)) (g$0$13220 g$0$15016)))) (quote #f))) (g$0$13224 g$0$15010)))) (quote #f))) ((letrec ((g$0$15034 (lambda (g$0$15036) (if (g$0$13212 g$0$15036) ((lambda (g$0$15038) (if g$0$15038 (begin (quote #f) ((lambda (g$0$15040) (if g$0$15040 (begin (quote #f) (map cons g$0$15038 g$0$15040)) (quote #f))) (g$0$15034 (g$0$13224 g$0$15036)))) (quote #f))) ((lambda (g$0$15042) (list g$0$15042)) (g$0$13220 g$0$15036))) (if (g$0$13216 g$0$15036) (list (begin (quote d*) (quote ()))) (quote #f)))))) g$0$15034) (g$0$13220 g$0$15010)))) (quote #f))) g$0$14984))) g$0$14981))) (set! g$0$14786 (lambda (g$0$14873 g$0$14874) ((lambda (g$0$14876) ((lambda (g$0$14878) (if (if g$0$14878 (begin (quote #f) (apply (lambda (g$0$14940 g$0$14941 g$0$14942) (quote #t)) g$0$14878)) (quote #f)) (apply (lambda (g$0$14934 g$0$14935 g$0$14936) (g$0$14784 g$0$14873 g$0$14874 (g$0$13107))) g$0$14878) ((lambda (g$0$14880) ((lambda (g$0$14882) (if (if g$0$14882 (begin (quote #f) (apply (lambda (g$0$14902 g$0$14903 g$0$14904) (quote #t)) g$0$14882)) (quote #f)) (apply (lambda (g$0$14896 g$0$14897 g$0$14898) (if (if (g$0$13226 g$0$14896) (begin (quote #f) (g$0$13234 g$0$14896 (g$0$13479 (quote else)))) (quote #f)) (g$0$13108 (quote #f) (g$0$13593 (cons g$0$14897 g$0$14898) g$0$14781 g$0$14782)) (error (quote expander) (quote "invalid syntax") (g$0$13246 g$0$14780)))) g$0$14882) ((lambda (g$0$14884) ((lambda (g$0$14886) (if (if g$0$14886 (begin (quote #f) (apply (lambda (g$0$14890) (quote #t)) g$0$14886)) (quote #f)) (apply (lambda (g$0$14888) (error (quote expander) (quote "invalid syntax") (g$0$13246 g$0$14780))) g$0$14886) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$14884 (quote ()))))) ((lambda (g$0$14892) (list g$0$14892)) g$0$14884))) g$0$14880))) ((lambda (g$0$14906) (if (g$0$13212 g$0$14906) (begin (quote #f) ((lambda (g$0$14908) (if g$0$14908 (begin (quote #f) ((lambda (g$0$14910) (if g$0$14910 (begin (quote #f) (append g$0$14908 g$0$14910)) (quote #f))) ((lambda (g$0$14912) (if (g$0$13212 g$0$14912) (begin (quote #f) ((lambda (g$0$14914) (if g$0$14914 (begin (quote #f) ((lambda (g$0$14916) (if g$0$14916 (begin (quote #f) (append g$0$14914 g$0$14916)) (quote #f))) ((letrec ((g$0$14918 (lambda (g$0$14920) (if (g$0$13212 g$0$14920) ((lambda (g$0$14922) (if g$0$14922 (begin (quote #f) ((lambda (g$0$14924) (if g$0$14924 (begin (quote #f) (map cons g$0$14922 g$0$14924)) (quote #f))) (g$0$14918 (g$0$13224 g$0$14920)))) (quote #f))) ((lambda (g$0$14926) (list g$0$14926)) (g$0$13220 g$0$14920))) (if (g$0$13216 g$0$14920) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$14918) (g$0$13224 g$0$14912)))) (quote #f))) ((lambda (g$0$14928) (list g$0$14928)) (g$0$13220 g$0$14912)))) (quote #f))) (g$0$13224 g$0$14906)))) (quote #f))) ((lambda (g$0$14930) (list g$0$14930)) (g$0$13220 g$0$14906)))) (quote #f))) g$0$14880))) g$0$14876))) ((lambda (g$0$14944) (if (g$0$13212 g$0$14944) (begin (quote #f) ((lambda (g$0$14946) (if g$0$14946 (begin (quote #f) ((lambda (g$0$14948) (if g$0$14948 (begin (quote #f) (append g$0$14946 g$0$14948)) (quote #f))) ((lambda (g$0$14950) (if (g$0$13212 g$0$14950) (begin (quote #f) ((lambda (g$0$14952) (if g$0$14952 (begin (quote #f) ((lambda (g$0$14954) (if g$0$14954 (begin (quote #f) (append g$0$14952 g$0$14954)) (quote #f))) ((letrec ((g$0$14956 (lambda (g$0$14958) (if (g$0$13212 g$0$14958) ((lambda (g$0$14960) (if g$0$14960 (begin (quote #f) ((lambda (g$0$14962) (if g$0$14962 (begin (quote #f) (map cons g$0$14960 g$0$14962)) (quote #f))) (g$0$14956 (g$0$13224 g$0$14958)))) (quote #f))) ((lambda (g$0$14964) (list g$0$14964)) (g$0$13220 g$0$14958))) (if (g$0$13216 g$0$14958) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14956) (g$0$13224 g$0$14950)))) (quote #f))) ((lambda (g$0$14966) (list g$0$14966)) (g$0$13220 g$0$14950)))) (quote #f))) (g$0$13224 g$0$14944)))) (quote #f))) ((letrec ((g$0$14968 (lambda (g$0$14970) (if (g$0$13212 g$0$14970) ((lambda (g$0$14972) (if g$0$14972 (begin (quote #f) ((lambda (g$0$14974) (if g$0$14974 (begin (quote #f) (map cons g$0$14972 g$0$14974)) (quote #f))) (g$0$14968 (g$0$13224 g$0$14970)))) (quote #f))) ((lambda (g$0$14976) (list g$0$14976)) (g$0$13220 g$0$14970))) (if (g$0$13216 g$0$14970) (list (begin (quote d*) (quote ()))) (quote #f)))))) g$0$14968) (g$0$13220 g$0$14944)))) (quote #f))) g$0$14876))) g$0$14874))) ((lambda (g$0$14788) ((lambda (g$0$14790) (if (if g$0$14790 (begin (quote #f) (apply (lambda (g$0$14852) (quote #t)) g$0$14790)) (quote #f)) (apply (lambda (g$0$14850) (g$0$13108 (quote #f) (list (g$0$13597 g$0$14850 g$0$14781 g$0$14782) (g$0$13107)))) g$0$14790) ((lambda (g$0$14792) ((lambda (g$0$14794) (if (if g$0$14794 (begin (quote #f) (apply (lambda (g$0$14812 g$0$14813 g$0$14814) (quote #t)) g$0$14794)) (quote #f)) (apply (lambda (g$0$14798 g$0$14799 g$0$14800) ((lambda (g$0$14802) (g$0$13112 (quote #f) (list g$0$14802) (list (g$0$13597 g$0$14798 g$0$14781 g$0$14782)) (letrec ((g$0$14804 (lambda (g$0$14807 g$0$14808) (if (null? g$0$14808) (g$0$14786 g$0$14802 g$0$14807) (g$0$14784 g$0$14802 g$0$14807 (g$0$14804 (car g$0$14808) (cdr g$0$14808))))))) (g$0$14804 g$0$14799 g$0$14800)))) (g$0$13136 (quote t)))) g$0$14794) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$14792 (quote ()))))) ((lambda (g$0$14816) (if (g$0$13212 g$0$14816) (begin (quote #f) ((lambda (g$0$14818) (if g$0$14818 (begin (quote #f) ((lambda (g$0$14820) (if g$0$14820 (begin (quote #f) (append g$0$14818 g$0$14820)) (quote #f))) ((lambda (g$0$14822) (if (g$0$13212 g$0$14822) (begin (quote #f) ((lambda (g$0$14824) (if g$0$14824 (begin (quote #f) ((lambda (g$0$14826) (if g$0$14826 (begin (quote #f) (append g$0$14824 g$0$14826)) (quote #f))) ((lambda (g$0$14828) (if (g$0$13212 g$0$14828) (begin (quote #f) ((lambda (g$0$14830) (if g$0$14830 (begin (quote #f) ((lambda (g$0$14832) (if g$0$14832 (begin (quote #f) (append g$0$14830 g$0$14832)) (quote #f))) ((letrec ((g$0$14834 (lambda (g$0$14836) (if (g$0$13212 g$0$14836) ((lambda (g$0$14838) (if g$0$14838 (begin (quote #f) ((lambda (g$0$14840) (if g$0$14840 (begin (quote #f) (map cons g$0$14838 g$0$14840)) (quote #f))) (g$0$14834 (g$0$13224 g$0$14836)))) (quote #f))) ((lambda (g$0$14842) (list g$0$14842)) (g$0$13220 g$0$14836))) (if (g$0$13216 g$0$14836) (list (begin (quote cls*) (quote ()))) (quote #f)))))) g$0$14834) (g$0$13224 g$0$14828)))) (quote #f))) ((lambda (g$0$14844) (list g$0$14844)) (g$0$13220 g$0$14828)))) (quote #f))) (g$0$13224 g$0$14822)))) (quote #f))) ((lambda (g$0$14846) (list g$0$14846)) (g$0$13220 g$0$14822)))) (quote #f))) (g$0$13224 g$0$14816)))) (quote #f))) ((lambda (g$0$14848) (quote ())) (g$0$13220 g$0$14816)))) (quote #f))) g$0$14792))) g$0$14788))) ((lambda (g$0$14854) (if (g$0$13212 g$0$14854) (begin (quote #f) ((lambda (g$0$14856) (if g$0$14856 (begin (quote #f) ((lambda (g$0$14858) (if g$0$14858 (begin (quote #f) (append g$0$14856 g$0$14858)) (quote #f))) ((lambda (g$0$14860) (if (g$0$13212 g$0$14860) (begin (quote #f) ((lambda (g$0$14862) (if g$0$14862 (begin (quote #f) ((lambda (g$0$14864) (if g$0$14864 (begin (quote #f) (append g$0$14862 g$0$14864)) (quote #f))) ((lambda (g$0$14866) (if (equal? (g$0$13246 g$0$14866) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$14860)))) (quote #f))) ((lambda (g$0$14868) (list g$0$14868)) (g$0$13220 g$0$14860)))) (quote #f))) (g$0$13224 g$0$14854)))) (quote #f))) ((lambda (g$0$14870) (quote ())) (g$0$13220 g$0$14854)))) (quote #f))) g$0$14788))) g$0$14780))) (quote #f) (quote #f)))) (set! g$0$13507 (lambda (g$0$15046 g$0$15047 g$0$15048) ((lambda (g$0$15050) ((lambda (g$0$15052) (if (if g$0$15052 (begin (quote #f) (apply (lambda (g$0$15056) (quote #t)) g$0$15052)) (quote #f)) (apply (lambda (g$0$15054) (list (quote quote) (g$0$13246 g$0$15054))) g$0$15052) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$15050 (quote ()))))) ((lambda (g$0$15058) (if (g$0$13212 g$0$15058) (begin (quote #f) ((lambda (g$0$15060) (if g$0$15060 (begin (quote #f) ((lambda (g$0$15062) (if g$0$15062 (begin (quote #f) (append g$0$15060 g$0$15062)) (quote #f))) ((lambda (g$0$15064) (if (g$0$13212 g$0$15064) (begin (quote #f) ((lambda (g$0$15066) (if g$0$15066 (begin (quote #f) ((lambda (g$0$15068) (if g$0$15068 (begin (quote #f) (append g$0$15066 g$0$15068)) (quote #f))) ((lambda (g$0$15070) (if (equal? (g$0$13246 g$0$15070) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$15064)))) (quote #f))) ((lambda (g$0$15072) (list g$0$15072)) (g$0$13220 g$0$15064)))) (quote #f))) (g$0$13224 g$0$15058)))) (quote #f))) ((lambda (g$0$15074) (quote ())) (g$0$13220 g$0$15058)))) (quote #f))) g$0$15050))) g$0$15046))) (set! g$0$13509 (lambda (g$0$15078 g$0$15079 g$0$15080) ((lambda (g$0$15082) ((lambda (g$0$15084) (if (if g$0$15084 (begin (quote #f) (apply (lambda (g$0$15098 g$0$15099 g$0$15100) (quote #t)) g$0$15084)) (quote #f)) (apply (lambda (g$0$15088 g$0$15089 g$0$15090) (call-with-values (lambda () (g$0$13603 g$0$15088 (map cons g$0$15089 g$0$15090) g$0$15079 g$0$15080)) (lambda (g$0$15093 g$0$15094) (g$0$13113 (quote #f) g$0$15093 g$0$15094)))) g$0$15084) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$15082 (quote ()))))) ((lambda (g$0$15102) (if (g$0$13212 g$0$15102) (begin (quote #f) ((lambda (g$0$15104) (if g$0$15104 (begin (quote #f) ((lambda (g$0$15106) (if g$0$15106 (begin (quote #f) (append g$0$15104 g$0$15106)) (quote #f))) ((letrec ((g$0$15108 (lambda (g$0$15110) (if (g$0$13212 g$0$15110) ((lambda (g$0$15112) (if g$0$15112 (begin (quote #f) ((lambda (g$0$15114) (if g$0$15114 (begin (quote #f) (map cons g$0$15112 g$0$15114)) (quote #f))) (g$0$15108 (g$0$13224 g$0$15110)))) (quote #f))) ((lambda (g$0$15116) (if (g$0$13212 g$0$15116) (begin (quote #f) ((lambda (g$0$15118) (if g$0$15118 (begin (quote #f) ((lambda (g$0$15120) (if g$0$15120 (begin (quote #f) (append g$0$15118 g$0$15120)) (quote #f))) ((lambda (g$0$15122) (if (g$0$13212 g$0$15122) (begin (quote #f) ((lambda (g$0$15124) (if g$0$15124 (begin (quote #f) ((lambda (g$0$15126) (if g$0$15126 (begin (quote #f) (append g$0$15124 g$0$15126)) (quote #f))) ((letrec ((g$0$15128 (lambda (g$0$15130) (if (g$0$13212 g$0$15130) ((lambda (g$0$15132) (if g$0$15132 (begin (quote #f) ((lambda (g$0$15134) (if g$0$15134 (begin (quote #f) (map cons g$0$15132 g$0$15134)) (quote #f))) (g$0$15128 (g$0$13224 g$0$15130)))) (quote #f))) ((lambda (g$0$15136) (list g$0$15136)) (g$0$13220 g$0$15130))) (if (g$0$13216 g$0$15130) (list (begin (quote b**) (quote ()))) (quote #f)))))) g$0$15128) (g$0$13224 g$0$15122)))) (quote #f))) ((lambda (g$0$15138) (list g$0$15138)) (g$0$13220 g$0$15122)))) (quote #f))) (g$0$13224 g$0$15116)))) (quote #f))) ((lambda (g$0$15140) (list g$0$15140)) (g$0$13220 g$0$15116)))) (quote #f))) (g$0$13220 g$0$15110))) (if (g$0$13216 g$0$15110) (list (begin (quote fmls*) (quote ())) (begin (quote b*) (quote ())) (begin (quote b**) (quote ()))) (quote #f)))))) g$0$15108) (g$0$13224 g$0$15102)))) (quote #f))) ((lambda (g$0$15142) (quote ())) (g$0$13220 g$0$15102)))) (quote #f))) g$0$15082))) g$0$15078))) (set! g$0$13511 (lambda (g$0$15146 g$0$15147 g$0$15148) ((lambda (g$0$15150) ((lambda (g$0$15152) (if (if g$0$15152 (begin (quote #f) (apply (lambda (g$0$15166 g$0$15167 g$0$15168) (quote #t)) g$0$15152)) (quote #f)) (apply (lambda (g$0$15156 g$0$15157 g$0$15158) (call-with-values (lambda () (g$0$13601 g$0$15156 (cons g$0$15157 g$0$15158) g$0$15147 g$0$15148)) (lambda (g$0$15161 g$0$15162) (g$0$13114 (quote #f) g$0$15161 g$0$15162)))) g$0$15152) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$15150 (quote ()))))) ((lambda (g$0$15170) (if (g$0$13212 g$0$15170) (begin (quote #f) ((lambda (g$0$15172) (if g$0$15172 (begin (quote #f) ((lambda (g$0$15174) (if g$0$15174 (begin (quote #f) (append g$0$15172 g$0$15174)) (quote #f))) ((lambda (g$0$15176) (if (g$0$13212 g$0$15176) (begin (quote #f) ((lambda (g$0$15178) (if g$0$15178 (begin (quote #f) ((lambda (g$0$15180) (if g$0$15180 (begin (quote #f) (append g$0$15178 g$0$15180)) (quote #f))) ((lambda (g$0$15182) (if (g$0$13212 g$0$15182) (begin (quote #f) ((lambda (g$0$15184) (if g$0$15184 (begin (quote #f) ((lambda (g$0$15186) (if g$0$15186 (begin (quote #f) (append g$0$15184 g$0$15186)) (quote #f))) ((letrec ((g$0$15188 (lambda (g$0$15190) (if (g$0$13212 g$0$15190) ((lambda (g$0$15192) (if g$0$15192 (begin (quote #f) ((lambda (g$0$15194) (if g$0$15194 (begin (quote #f) (map cons g$0$15192 g$0$15194)) (quote #f))) (g$0$15188 (g$0$13224 g$0$15190)))) (quote #f))) ((lambda (g$0$15196) (list g$0$15196)) (g$0$13220 g$0$15190))) (if (g$0$13216 g$0$15190) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15188) (g$0$13224 g$0$15182)))) (quote #f))) ((lambda (g$0$15198) (list g$0$15198)) (g$0$13220 g$0$15182)))) (quote #f))) (g$0$13224 g$0$15176)))) (quote #f))) ((lambda (g$0$15200) (list g$0$15200)) (g$0$13220 g$0$15176)))) (quote #f))) (g$0$13224 g$0$15170)))) (quote #f))) ((lambda (g$0$15202) (quote ())) (g$0$13220 g$0$15170)))) (quote #f))) g$0$15150))) g$0$15146))) (set! g$0$13513 (lambda (g$0$15204) (g$0$13202 (letrec ((g$0$15206 (lambda (g$0$15208) (if (g$0$13178 g$0$15208) g$0$15208 (if (pair? g$0$15208) (cons (g$0$15206 (car g$0$15208)) (g$0$15206 (cdr g$0$15208))) (if (symbol? g$0$15208) (g$0$13479 g$0$15208) (if (vector? g$0$15208) (list->vector (map g$0$15206 (vector->list g$0$15208))) g$0$15208))))))) (g$0$15206 g$0$15204)) (quote ()) (quote ())))) (set! g$0$13515 (lambda (g$0$15210) ((lambda (g$0$15212) ((lambda (g$0$15214) (if (if g$0$15214 (begin (quote #f) (apply (lambda (g$0$15227 g$0$15228 g$0$15229 g$0$15230) (quote #t)) g$0$15214)) (quote #f)) (apply (lambda (g$0$15219 g$0$15220 g$0$15221 g$0$15222) (g$0$13513 (list (quote syntax-case) (cons (quote list) g$0$15220) (quote ()) (list g$0$15219 (cons (quote begin) (cons g$0$15221 g$0$15222)))))) g$0$15214) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$15212 (quote ()))))) ((lambda (g$0$15232) (if (g$0$13212 g$0$15232) (begin (quote #f) ((lambda (g$0$15234) (if g$0$15234 (begin (quote #f) ((lambda (g$0$15236) (if g$0$15236 (begin (quote #f) (append g$0$15234 g$0$15236)) (quote #f))) ((lambda (g$0$15238) (if (g$0$13212 g$0$15238) (begin (quote #f) ((lambda (g$0$15240) (if g$0$15240 (begin (quote #f) ((lambda (g$0$15242) (if g$0$15242 (begin (quote #f) (append g$0$15240 g$0$15242)) (quote #f))) ((lambda (g$0$15244) (if (g$0$13212 g$0$15244) (begin (quote #f) ((lambda (g$0$15246) (if g$0$15246 (begin (quote #f) ((lambda (g$0$15248) (if g$0$15248 (begin (quote #f) (append g$0$15246 g$0$15248)) (quote #f))) ((letrec ((g$0$15250 (lambda (g$0$15252) (if (g$0$13212 g$0$15252) ((lambda (g$0$15254) (if g$0$15254 (begin (quote #f) ((lambda (g$0$15256) (if g$0$15256 (begin (quote #f) (map cons g$0$15254 g$0$15256)) (quote #f))) (g$0$15250 (g$0$13224 g$0$15252)))) (quote #f))) ((lambda (g$0$15258) (list g$0$15258)) (g$0$13220 g$0$15252))) (if (g$0$13216 g$0$15252) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15250) (g$0$13224 g$0$15244)))) (quote #f))) ((lambda (g$0$15260) (list g$0$15260)) (g$0$13220 g$0$15244)))) (quote #f))) (g$0$13224 g$0$15238)))) (quote #f))) ((letrec ((g$0$15262 (lambda (g$0$15264) (if (g$0$13212 g$0$15264) ((lambda (g$0$15266) (if g$0$15266 (begin (quote #f) ((lambda (g$0$15268) (if g$0$15268 (begin (quote #f) (map cons g$0$15266 g$0$15268)) (quote #f))) (g$0$15262 (g$0$13224 g$0$15264)))) (quote #f))) ((lambda (g$0$15270) (if (g$0$13212 g$0$15270) (begin (quote #f) ((lambda (g$0$15272) (if g$0$15272 (begin (quote #f) ((lambda (g$0$15274) (if g$0$15274 (begin (quote #f) (append g$0$15272 g$0$15274)) (quote #f))) ((lambda (g$0$15276) (if (g$0$13212 g$0$15276) (begin (quote #f) ((lambda (g$0$15278) (if g$0$15278 (begin (quote #f) ((lambda (g$0$15280) (if g$0$15280 (begin (quote #f) (append g$0$15278 g$0$15280)) (quote #f))) ((lambda (g$0$15282) (if (equal? (g$0$13246 g$0$15282) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$15276)))) (quote #f))) ((lambda (g$0$15284) (list g$0$15284)) (g$0$13220 g$0$15276)))) (quote #f))) (g$0$13224 g$0$15270)))) (quote #f))) ((lambda (g$0$15286) (list g$0$15286)) (g$0$13220 g$0$15270)))) (quote #f))) (g$0$13220 g$0$15264))) (if (g$0$13216 g$0$15264) (list (begin (quote fml*) (quote ())) (begin (quote expr*) (quote ()))) (quote #f)))))) g$0$15262) (g$0$13220 g$0$15238)))) (quote #f))) (g$0$13224 g$0$15232)))) (quote #f))) ((lambda (g$0$15288) (quote ())) (g$0$13220 g$0$15232)))) (quote #f))) g$0$15212))) g$0$15210))) (set! g$0$13517 (lambda (g$0$15290) ((lambda (g$0$15292) ((lambda (g$0$15294) (if (if g$0$15294 (begin (quote #f) (apply (lambda (g$0$15397 g$0$15398 g$0$15399 g$0$15400) (quote #t)) g$0$15294)) (quote #f)) (apply (lambda (g$0$15389 g$0$15390 g$0$15391 g$0$15392) (if (g$0$13236 g$0$15389) (g$0$13513 (cons (cons (quote lambda) (cons g$0$15389 (cons g$0$15391 g$0$15392))) g$0$15390)) (error (quote expander) (quote "invalid bindings") (g$0$13244 g$0$15290 (quote ()))))) g$0$15294) ((lambda (g$0$15296) ((lambda (g$0$15298) (if (if g$0$15298 (begin (quote #f) (apply (lambda (g$0$15314 g$0$15315 g$0$15316 g$0$15317 g$0$15318) (g$0$13226 g$0$15314)) g$0$15298)) (quote #f)) (apply (lambda (g$0$15304 g$0$15305 g$0$15306 g$0$15307 g$0$15308) (if (g$0$13236 g$0$15305) (g$0$13513 (list (quote letrec) (list (list g$0$15304 (cons (quote lambda) (cons g$0$15305 (cons g$0$15307 g$0$15308))))) (cons g$0$15304 g$0$15306))) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$15290 (quote ()))))) g$0$15298) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$15296 (quote ()))))) ((lambda (g$0$15320) (if (g$0$13212 g$0$15320) (begin (quote #f) ((lambda (g$0$15322) (if g$0$15322 (begin (quote #f) ((lambda (g$0$15324) (if g$0$15324 (begin (quote #f) (append g$0$15322 g$0$15324)) (quote #f))) ((lambda (g$0$15326) (if (g$0$13212 g$0$15326) (begin (quote #f) ((lambda (g$0$15328) (if g$0$15328 (begin (quote #f) ((lambda (g$0$15330) (if g$0$15330 (begin (quote #f) (append g$0$15328 g$0$15330)) (quote #f))) ((lambda (g$0$15332) (if (g$0$13212 g$0$15332) (begin (quote #f) ((lambda (g$0$15334) (if g$0$15334 (begin (quote #f) ((lambda (g$0$15336) (if g$0$15336 (begin (quote #f) (append g$0$15334 g$0$15336)) (quote #f))) ((lambda (g$0$15338) (if (g$0$13212 g$0$15338) (begin (quote #f) ((lambda (g$0$15340) (if g$0$15340 (begin (quote #f) ((lambda (g$0$15342) (if g$0$15342 (begin (quote #f) (append g$0$15340 g$0$15342)) (quote #f))) ((letrec ((g$0$15344 (lambda (g$0$15346) (if (g$0$13212 g$0$15346) ((lambda (g$0$15348) (if g$0$15348 (begin (quote #f) ((lambda (g$0$15350) (if g$0$15350 (begin (quote #f) (map cons g$0$15348 g$0$15350)) (quote #f))) (g$0$15344 (g$0$13224 g$0$15346)))) (quote #f))) ((lambda (g$0$15352) (list g$0$15352)) (g$0$13220 g$0$15346))) (if (g$0$13216 g$0$15346) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15344) (g$0$13224 g$0$15338)))) (quote #f))) ((lambda (g$0$15354) (list g$0$15354)) (g$0$13220 g$0$15338)))) (quote #f))) (g$0$13224 g$0$15332)))) (quote #f))) ((letrec ((g$0$15356 (lambda (g$0$15358) (if (g$0$13212 g$0$15358) ((lambda (g$0$15360) (if g$0$15360 (begin (quote #f) ((lambda (g$0$15362) (if g$0$15362 (begin (quote #f) (map cons g$0$15360 g$0$15362)) (quote #f))) (g$0$15356 (g$0$13224 g$0$15358)))) (quote #f))) ((lambda (g$0$15364) (if (g$0$13212 g$0$15364) (begin (quote #f) ((lambda (g$0$15366) (if g$0$15366 (begin (quote #f) ((lambda (g$0$15368) (if g$0$15368 (begin (quote #f) (append g$0$15366 g$0$15368)) (quote #f))) ((lambda (g$0$15370) (if (g$0$13212 g$0$15370) (begin (quote #f) ((lambda (g$0$15372) (if g$0$15372 (begin (quote #f) ((lambda (g$0$15374) (if g$0$15374 (begin (quote #f) (append g$0$15372 g$0$15374)) (quote #f))) ((lambda (g$0$15376) (if (equal? (g$0$13246 g$0$15376) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$15370)))) (quote #f))) ((lambda (g$0$15378) (list g$0$15378)) (g$0$13220 g$0$15370)))) (quote #f))) (g$0$13224 g$0$15364)))) (quote #f))) ((lambda (g$0$15380) (list g$0$15380)) (g$0$13220 g$0$15364)))) (quote #f))) (g$0$13220 g$0$15358))) (if (g$0$13216 g$0$15358) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$15356) (g$0$13220 g$0$15332)))) (quote #f))) (g$0$13224 g$0$15326)))) (quote #f))) ((lambda (g$0$15382) (list g$0$15382)) (g$0$13220 g$0$15326)))) (quote #f))) (g$0$13224 g$0$15320)))) (quote #f))) ((lambda (g$0$15384) (quote ())) (g$0$13220 g$0$15320)))) (quote #f))) g$0$15296))) g$0$15292))) ((lambda (g$0$15402) (if (g$0$13212 g$0$15402) (begin (quote #f) ((lambda (g$0$15404) (if g$0$15404 (begin (quote #f) ((lambda (g$0$15406) (if g$0$15406 (begin (quote #f) (append g$0$15404 g$0$15406)) (quote #f))) ((lambda (g$0$15408) (if (g$0$13212 g$0$15408) (begin (quote #f) ((lambda (g$0$15410) (if g$0$15410 (begin (quote #f) ((lambda (g$0$15412) (if g$0$15412 (begin (quote #f) (append g$0$15410 g$0$15412)) (quote #f))) ((lambda (g$0$15414) (if (g$0$13212 g$0$15414) (begin (quote #f) ((lambda (g$0$15416) (if g$0$15416 (begin (quote #f) ((lambda (g$0$15418) (if g$0$15418 (begin (quote #f) (append g$0$15416 g$0$15418)) (quote #f))) ((letrec ((g$0$15420 (lambda (g$0$15422) (if (g$0$13212 g$0$15422) ((lambda (g$0$15424) (if g$0$15424 (begin (quote #f) ((lambda (g$0$15426) (if g$0$15426 (begin (quote #f) (map cons g$0$15424 g$0$15426)) (quote #f))) (g$0$15420 (g$0$13224 g$0$15422)))) (quote #f))) ((lambda (g$0$15428) (list g$0$15428)) (g$0$13220 g$0$15422))) (if (g$0$13216 g$0$15422) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15420) (g$0$13224 g$0$15414)))) (quote #f))) ((lambda (g$0$15430) (list g$0$15430)) (g$0$13220 g$0$15414)))) (quote #f))) (g$0$13224 g$0$15408)))) (quote #f))) ((letrec ((g$0$15432 (lambda (g$0$15434) (if (g$0$13212 g$0$15434) ((lambda (g$0$15436) (if g$0$15436 (begin (quote #f) ((lambda (g$0$15438) (if g$0$15438 (begin (quote #f) (map cons g$0$15436 g$0$15438)) (quote #f))) (g$0$15432 (g$0$13224 g$0$15434)))) (quote #f))) ((lambda (g$0$15440) (if (g$0$13212 g$0$15440) (begin (quote #f) ((lambda (g$0$15442) (if g$0$15442 (begin (quote #f) ((lambda (g$0$15444) (if g$0$15444 (begin (quote #f) (append g$0$15442 g$0$15444)) (quote #f))) ((lambda (g$0$15446) (if (g$0$13212 g$0$15446) (begin (quote #f) ((lambda (g$0$15448) (if g$0$15448 (begin (quote #f) ((lambda (g$0$15450) (if g$0$15450 (begin (quote #f) (append g$0$15448 g$0$15450)) (quote #f))) ((lambda (g$0$15452) (if (equal? (g$0$13246 g$0$15452) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$15446)))) (quote #f))) ((lambda (g$0$15454) (list g$0$15454)) (g$0$13220 g$0$15446)))) (quote #f))) (g$0$13224 g$0$15440)))) (quote #f))) ((lambda (g$0$15456) (list g$0$15456)) (g$0$13220 g$0$15440)))) (quote #f))) (g$0$13220 g$0$15434))) (if (g$0$13216 g$0$15434) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$15432) (g$0$13220 g$0$15408)))) (quote #f))) (g$0$13224 g$0$15402)))) (quote #f))) ((lambda (g$0$15458) (quote ())) (g$0$13220 g$0$15402)))) (quote #f))) g$0$15292))) g$0$15290))) (set! g$0$13519 (lambda (g$0$15460) ((lambda (g$0$15462) ((lambda (g$0$15464) (if (if g$0$15464 (begin (quote #f) (apply (lambda (g$0$15559 g$0$15560 g$0$15561 g$0$15562) (quote #t)) g$0$15464)) (quote #f)) (apply (lambda (g$0$15551 g$0$15552 g$0$15553 g$0$15554) (if (g$0$13236 g$0$15552) (g$0$13513 (list (quote make-traced-procedure) (list (quote quote) g$0$15551) (cons (quote lambda) (cons g$0$15552 (cons g$0$15553 g$0$15554))))) (error (quote expander) (quote "invalid formals") (g$0$13244 g$0$15460 (quote ()))))) g$0$15464) ((lambda (g$0$15466) ((lambda (g$0$15468) (if (if g$0$15468 (begin (quote #f) (apply (lambda (g$0$15484 g$0$15485 g$0$15486 g$0$15487 g$0$15488) (quote #t)) g$0$15468)) (quote #f)) (apply (lambda (g$0$15474 g$0$15475 g$0$15476 g$0$15477 g$0$15478) (if (g$0$13236 (cons g$0$15476 g$0$15475)) (g$0$13513 (list (quote make-traced-procedure) (list (quote quote) g$0$15474) (cons (quote lambda) (cons (append g$0$15475 g$0$15476) (cons g$0$15477 g$0$15478))))) (error (quote expander) (quote "invalid formals") (g$0$13244 g$0$15460 (quote ()))))) g$0$15468) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$15466 (quote ()))))) ((lambda (g$0$15490) (if (g$0$13212 g$0$15490) (begin (quote #f) ((lambda (g$0$15492) (if g$0$15492 (begin (quote #f) ((lambda (g$0$15494) (if g$0$15494 (begin (quote #f) (append g$0$15492 g$0$15494)) (quote #f))) ((lambda (g$0$15496) (if (g$0$13212 g$0$15496) (begin (quote #f) ((lambda (g$0$15498) (if g$0$15498 (begin (quote #f) ((lambda (g$0$15500) (if g$0$15500 (begin (quote #f) (append g$0$15498 g$0$15500)) (quote #f))) ((lambda (g$0$15502) (if (g$0$13212 g$0$15502) (begin (quote #f) ((lambda (g$0$15504) (if g$0$15504 (begin (quote #f) ((lambda (g$0$15506) (if g$0$15506 (begin (quote #f) (append g$0$15504 g$0$15506)) (quote #f))) ((lambda (g$0$15508) (if (g$0$13212 g$0$15508) (begin (quote #f) ((lambda (g$0$15510) (if g$0$15510 (begin (quote #f) ((lambda (g$0$15512) (if g$0$15512 (begin (quote #f) (append g$0$15510 g$0$15512)) (quote #f))) ((letrec ((g$0$15514 (lambda (g$0$15516) (if (g$0$13212 g$0$15516) ((lambda (g$0$15518) (if g$0$15518 (begin (quote #f) ((lambda (g$0$15520) (if g$0$15520 (begin (quote #f) (map cons g$0$15518 g$0$15520)) (quote #f))) (g$0$15514 (g$0$13224 g$0$15516)))) (quote #f))) ((lambda (g$0$15522) (list g$0$15522)) (g$0$13220 g$0$15516))) (if (g$0$13216 g$0$15516) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15514) (g$0$13224 g$0$15508)))) (quote #f))) ((lambda (g$0$15524) (list g$0$15524)) (g$0$13220 g$0$15508)))) (quote #f))) (g$0$13224 g$0$15502)))) (quote #f))) ((letrec ((g$0$15526 (lambda (g$0$15528) (if (g$0$13212 g$0$15528) ((lambda (g$0$15534) (if g$0$15534 (begin (quote #f) ((lambda (g$0$15536) (if g$0$15536 (begin (quote #f) (cons (map cons g$0$15534 (car g$0$15536)) (cdr g$0$15536))) (quote #f))) (g$0$15526 (g$0$13224 g$0$15528)))) (quote #f))) ((lambda (g$0$15538) (list g$0$15538)) (g$0$13220 g$0$15528))) ((lambda (g$0$15530) (if g$0$15530 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) g$0$15530)) (quote #f))) ((lambda (g$0$15532) (list g$0$15532)) g$0$15528)))))) (lambda (g$0$15540) ((lambda (g$0$15542) (if g$0$15542 (begin (quote #f) (append (car g$0$15542) (cdr g$0$15542))) (quote #f))) (g$0$15526 g$0$15540)))) (g$0$13220 g$0$15502)))) (quote #f))) (g$0$13224 g$0$15496)))) (quote #f))) ((lambda (g$0$15544) (list g$0$15544)) (g$0$13220 g$0$15496)))) (quote #f))) (g$0$13224 g$0$15490)))) (quote #f))) ((lambda (g$0$15546) (quote ())) (g$0$13220 g$0$15490)))) (quote #f))) g$0$15466))) g$0$15462))) ((lambda (g$0$15564) (if (g$0$13212 g$0$15564) (begin (quote #f) ((lambda (g$0$15566) (if g$0$15566 (begin (quote #f) ((lambda (g$0$15568) (if g$0$15568 (begin (quote #f) (append g$0$15566 g$0$15568)) (quote #f))) ((lambda (g$0$15570) (if (g$0$13212 g$0$15570) (begin (quote #f) ((lambda (g$0$15572) (if g$0$15572 (begin (quote #f) ((lambda (g$0$15574) (if g$0$15574 (begin (quote #f) (append g$0$15572 g$0$15574)) (quote #f))) ((lambda (g$0$15576) (if (g$0$13212 g$0$15576) (begin (quote #f) ((lambda (g$0$15578) (if g$0$15578 (begin (quote #f) ((lambda (g$0$15580) (if g$0$15580 (begin (quote #f) (append g$0$15578 g$0$15580)) (quote #f))) ((lambda (g$0$15582) (if (g$0$13212 g$0$15582) (begin (quote #f) ((lambda (g$0$15584) (if g$0$15584 (begin (quote #f) ((lambda (g$0$15586) (if g$0$15586 (begin (quote #f) (append g$0$15584 g$0$15586)) (quote #f))) ((letrec ((g$0$15588 (lambda (g$0$15590) (if (g$0$13212 g$0$15590) ((lambda (g$0$15592) (if g$0$15592 (begin (quote #f) ((lambda (g$0$15594) (if g$0$15594 (begin (quote #f) (map cons g$0$15592 g$0$15594)) (quote #f))) (g$0$15588 (g$0$13224 g$0$15590)))) (quote #f))) ((lambda (g$0$15596) (list g$0$15596)) (g$0$13220 g$0$15590))) (if (g$0$13216 g$0$15590) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15588) (g$0$13224 g$0$15582)))) (quote #f))) ((lambda (g$0$15598) (list g$0$15598)) (g$0$13220 g$0$15582)))) (quote #f))) (g$0$13224 g$0$15576)))) (quote #f))) ((letrec ((g$0$15600 (lambda (g$0$15602) (if (g$0$13212 g$0$15602) ((lambda (g$0$15604) (if g$0$15604 (begin (quote #f) ((lambda (g$0$15606) (if g$0$15606 (begin (quote #f) (map cons g$0$15604 g$0$15606)) (quote #f))) (g$0$15600 (g$0$13224 g$0$15602)))) (quote #f))) ((lambda (g$0$15608) (list g$0$15608)) (g$0$13220 g$0$15602))) (if (g$0$13216 g$0$15602) (list (begin (quote fmls) (quote ()))) (quote #f)))))) g$0$15600) (g$0$13220 g$0$15576)))) (quote #f))) (g$0$13224 g$0$15570)))) (quote #f))) ((lambda (g$0$15610) (list g$0$15610)) (g$0$13220 g$0$15570)))) (quote #f))) (g$0$13224 g$0$15564)))) (quote #f))) ((lambda (g$0$15612) (quote ())) (g$0$13220 g$0$15564)))) (quote #f))) g$0$15462))) g$0$15460))) (set! g$0$13521 (lambda (g$0$15614) ((lambda (g$0$15616) ((lambda (g$0$15618) (if (if g$0$15618 (begin (quote #f) (apply (lambda (g$0$15751 g$0$15752 g$0$15753 g$0$15754) (quote #t)) g$0$15618)) (quote #f)) (apply (lambda (g$0$15743 g$0$15744 g$0$15745 g$0$15746) (if (g$0$13236 g$0$15744) (g$0$13513 (list (quote define) g$0$15743 (list (quote make-traced-procedure) (list (quote quote) g$0$15743) (cons (quote lambda) (cons g$0$15744 (cons g$0$15745 g$0$15746)))))) (error (quote expander) (quote "invalid formals") (g$0$13244 g$0$15614 (quote ()))))) g$0$15618) ((lambda (g$0$15620) ((lambda (g$0$15622) (if (if g$0$15622 (begin (quote #f) (apply (lambda (g$0$15676 g$0$15677 g$0$15678 g$0$15679 g$0$15680) (quote #t)) g$0$15622)) (quote #f)) (apply (lambda (g$0$15666 g$0$15667 g$0$15668 g$0$15669 g$0$15670) (if (g$0$13236 (cons g$0$15668 g$0$15667)) (g$0$13513 (list (quote define) g$0$15666 (list (quote make-traced-procedure) (list (quote quote) g$0$15666) (cons (quote lambda) (cons (append g$0$15667 g$0$15668) (cons g$0$15669 g$0$15670)))))) (error (quote expander) (quote "invalid formals") (g$0$13244 g$0$15614 (quote ()))))) g$0$15622) ((lambda (g$0$15624) ((lambda (g$0$15626) (if (if g$0$15626 (begin (quote #f) (apply (lambda (g$0$15633 g$0$15634) (quote #t)) g$0$15626)) (quote #f)) (apply (lambda (g$0$15629 g$0$15630) (if (g$0$13226 g$0$15629) (g$0$13513 (list (quote define) g$0$15629 (list (quote let) (list (list (quote v) g$0$15630)) (cons (quote if) (cons (quote (procedure? v)) (cons (cons (quote make-traced-procedure) (cons (list (quote quote) g$0$15629) (quote (v)))) (quote ((error (quote trace-define) "not a procedure" v))))))))) (error (quote expander) (quote "invalid formals") (g$0$13244 g$0$15614 (quote ()))))) g$0$15626) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$15624 (quote ()))))) ((lambda (g$0$15636) (if (g$0$13212 g$0$15636) (begin (quote #f) ((lambda (g$0$15638) (if g$0$15638 (begin (quote #f) ((lambda (g$0$15640) (if g$0$15640 (begin (quote #f) (append g$0$15638 g$0$15640)) (quote #f))) ((lambda (g$0$15642) (if (g$0$13212 g$0$15642) (begin (quote #f) ((lambda (g$0$15644) (if g$0$15644 (begin (quote #f) ((lambda (g$0$15646) (if g$0$15646 (begin (quote #f) (append g$0$15644 g$0$15646)) (quote #f))) ((lambda (g$0$15648) (if (g$0$13212 g$0$15648) (begin (quote #f) ((lambda (g$0$15650) (if g$0$15650 (begin (quote #f) ((lambda (g$0$15652) (if g$0$15652 (begin (quote #f) (append g$0$15650 g$0$15652)) (quote #f))) ((lambda (g$0$15654) (if (equal? (g$0$13246 g$0$15654) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$15648)))) (quote #f))) ((lambda (g$0$15656) (list g$0$15656)) (g$0$13220 g$0$15648)))) (quote #f))) (g$0$13224 g$0$15642)))) (quote #f))) ((lambda (g$0$15658) (list g$0$15658)) (g$0$13220 g$0$15642)))) (quote #f))) (g$0$13224 g$0$15636)))) (quote #f))) ((lambda (g$0$15660) (quote ())) (g$0$13220 g$0$15636)))) (quote #f))) g$0$15624))) g$0$15620))) ((lambda (g$0$15682) (if (g$0$13212 g$0$15682) (begin (quote #f) ((lambda (g$0$15684) (if g$0$15684 (begin (quote #f) ((lambda (g$0$15686) (if g$0$15686 (begin (quote #f) (append g$0$15684 g$0$15686)) (quote #f))) ((lambda (g$0$15688) (if (g$0$13212 g$0$15688) (begin (quote #f) ((lambda (g$0$15690) (if g$0$15690 (begin (quote #f) ((lambda (g$0$15692) (if g$0$15692 (begin (quote #f) (append g$0$15690 g$0$15692)) (quote #f))) ((lambda (g$0$15694) (if (g$0$13212 g$0$15694) (begin (quote #f) ((lambda (g$0$15696) (if g$0$15696 (begin (quote #f) ((lambda (g$0$15698) (if g$0$15698 (begin (quote #f) (append g$0$15696 g$0$15698)) (quote #f))) ((letrec ((g$0$15700 (lambda (g$0$15702) (if (g$0$13212 g$0$15702) ((lambda (g$0$15704) (if g$0$15704 (begin (quote #f) ((lambda (g$0$15706) (if g$0$15706 (begin (quote #f) (map cons g$0$15704 g$0$15706)) (quote #f))) (g$0$15700 (g$0$13224 g$0$15702)))) (quote #f))) ((lambda (g$0$15708) (list g$0$15708)) (g$0$13220 g$0$15702))) (if (g$0$13216 g$0$15702) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15700) (g$0$13224 g$0$15694)))) (quote #f))) ((lambda (g$0$15710) (list g$0$15710)) (g$0$13220 g$0$15694)))) (quote #f))) (g$0$13224 g$0$15688)))) (quote #f))) ((lambda (g$0$15712) (if (g$0$13212 g$0$15712) (begin (quote #f) ((lambda (g$0$15714) (if g$0$15714 (begin (quote #f) ((lambda (g$0$15716) (if g$0$15716 (begin (quote #f) (append g$0$15714 g$0$15716)) (quote #f))) ((letrec ((g$0$15718 (lambda (g$0$15720) (if (g$0$13212 g$0$15720) ((lambda (g$0$15726) (if g$0$15726 (begin (quote #f) ((lambda (g$0$15728) (if g$0$15728 (begin (quote #f) (cons (map cons g$0$15726 (car g$0$15728)) (cdr g$0$15728))) (quote #f))) (g$0$15718 (g$0$13224 g$0$15720)))) (quote #f))) ((lambda (g$0$15730) (list g$0$15730)) (g$0$13220 g$0$15720))) ((lambda (g$0$15722) (if g$0$15722 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) g$0$15722)) (quote #f))) ((lambda (g$0$15724) (list g$0$15724)) g$0$15720)))))) (lambda (g$0$15732) ((lambda (g$0$15734) (if g$0$15734 (begin (quote #f) (append (car g$0$15734) (cdr g$0$15734))) (quote #f))) (g$0$15718 g$0$15732)))) (g$0$13224 g$0$15712)))) (quote #f))) ((lambda (g$0$15736) (list g$0$15736)) (g$0$13220 g$0$15712)))) (quote #f))) (g$0$13220 g$0$15688)))) (quote #f))) (g$0$13224 g$0$15682)))) (quote #f))) ((lambda (g$0$15738) (quote ())) (g$0$13220 g$0$15682)))) (quote #f))) g$0$15620))) g$0$15616))) ((lambda (g$0$15756) (if (g$0$13212 g$0$15756) (begin (quote #f) ((lambda (g$0$15758) (if g$0$15758 (begin (quote #f) ((lambda (g$0$15760) (if g$0$15760 (begin (quote #f) (append g$0$15758 g$0$15760)) (quote #f))) ((lambda (g$0$15762) (if (g$0$13212 g$0$15762) (begin (quote #f) ((lambda (g$0$15764) (if g$0$15764 (begin (quote #f) ((lambda (g$0$15766) (if g$0$15766 (begin (quote #f) (append g$0$15764 g$0$15766)) (quote #f))) ((lambda (g$0$15768) (if (g$0$13212 g$0$15768) (begin (quote #f) ((lambda (g$0$15770) (if g$0$15770 (begin (quote #f) ((lambda (g$0$15772) (if g$0$15772 (begin (quote #f) (append g$0$15770 g$0$15772)) (quote #f))) ((letrec ((g$0$15774 (lambda (g$0$15776) (if (g$0$13212 g$0$15776) ((lambda (g$0$15778) (if g$0$15778 (begin (quote #f) ((lambda (g$0$15780) (if g$0$15780 (begin (quote #f) (map cons g$0$15778 g$0$15780)) (quote #f))) (g$0$15774 (g$0$13224 g$0$15776)))) (quote #f))) ((lambda (g$0$15782) (list g$0$15782)) (g$0$13220 g$0$15776))) (if (g$0$13216 g$0$15776) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15774) (g$0$13224 g$0$15768)))) (quote #f))) ((lambda (g$0$15784) (list g$0$15784)) (g$0$13220 g$0$15768)))) (quote #f))) (g$0$13224 g$0$15762)))) (quote #f))) ((lambda (g$0$15786) (if (g$0$13212 g$0$15786) (begin (quote #f) ((lambda (g$0$15788) (if g$0$15788 (begin (quote #f) ((lambda (g$0$15790) (if g$0$15790 (begin (quote #f) (append g$0$15788 g$0$15790)) (quote #f))) ((letrec ((g$0$15792 (lambda (g$0$15794) (if (g$0$13212 g$0$15794) ((lambda (g$0$15796) (if g$0$15796 (begin (quote #f) ((lambda (g$0$15798) (if g$0$15798 (begin (quote #f) (map cons g$0$15796 g$0$15798)) (quote #f))) (g$0$15792 (g$0$13224 g$0$15794)))) (quote #f))) ((lambda (g$0$15800) (list g$0$15800)) (g$0$13220 g$0$15794))) (if (g$0$13216 g$0$15794) (list (begin (quote fmls) (quote ()))) (quote #f)))))) g$0$15792) (g$0$13224 g$0$15786)))) (quote #f))) ((lambda (g$0$15802) (list g$0$15802)) (g$0$13220 g$0$15786)))) (quote #f))) (g$0$13220 g$0$15762)))) (quote #f))) (g$0$13224 g$0$15756)))) (quote #f))) ((lambda (g$0$15804) (quote ())) (g$0$13220 g$0$15756)))) (quote #f))) g$0$15616))) g$0$15614))) (set! g$0$13523 (lambda (g$0$15806) ((lambda (g$0$15808) (begin (set! g$0$15808 (lambda (g$0$15884 g$0$15885 g$0$15886) ((lambda (g$0$15888 g$0$15890) (begin (set! g$0$15888 (lambda (g$0$15989 g$0$15990) ((lambda (g$0$15992) ((lambda (g$0$15994) (if (if g$0$15994 (begin (quote #f) (apply (lambda (g$0$16071 g$0$16072) (quote #t)) g$0$15994)) (quote #f)) (apply (lambda (g$0$16065 g$0$16066) ((lambda (g$0$16068) (list (quote let) (list (list g$0$16068 g$0$16065)) (list (quote if) g$0$16068 (list g$0$16066 g$0$16068) g$0$15990))) (gensym))) g$0$15994) ((lambda (g$0$15996) ((lambda (g$0$15998) (if (if g$0$15998 (begin (quote #f) (apply (lambda (g$0$16052) (quote #t)) g$0$15998)) (quote #f)) (apply (lambda (g$0$16048) ((lambda (g$0$16050) (list (quote let) (list (list g$0$16050 g$0$16048)) (list (quote if) g$0$16050 g$0$16050 g$0$15990))) (gensym))) g$0$15998) ((lambda (g$0$16000) ((lambda (g$0$16002) (if (if g$0$16002 (begin (quote #f) (apply (lambda (g$0$16018 g$0$16019 g$0$16020) (quote #t)) g$0$16002)) (quote #f)) (apply (lambda (g$0$16012 g$0$16013 g$0$16014) (list (quote if) g$0$16012 (cons (quote begin) (cons g$0$16013 g$0$16014)) g$0$15990)) g$0$16002) ((lambda (g$0$16004) ((lambda (g$0$16006) (if (if g$0$16006 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16006)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid guard clause") (g$0$13244 g$0$15989 (quote ())))) g$0$16006) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16004 (quote ()))))) ((lambda (g$0$16008) (quote ())) g$0$16004))) g$0$16000))) ((lambda (g$0$16022) (if (g$0$13212 g$0$16022) (begin (quote #f) ((lambda (g$0$16024) (if g$0$16024 (begin (quote #f) ((lambda (g$0$16026) (if g$0$16026 (begin (quote #f) (append g$0$16024 g$0$16026)) (quote #f))) ((lambda (g$0$16028) (if (g$0$13212 g$0$16028) (begin (quote #f) ((lambda (g$0$16030) (if g$0$16030 (begin (quote #f) ((lambda (g$0$16032) (if g$0$16032 (begin (quote #f) (append g$0$16030 g$0$16032)) (quote #f))) ((letrec ((g$0$16034 (lambda (g$0$16036) (if (g$0$13212 g$0$16036) ((lambda (g$0$16038) (if g$0$16038 (begin (quote #f) ((lambda (g$0$16040) (if g$0$16040 (begin (quote #f) (map cons g$0$16038 g$0$16040)) (quote #f))) (g$0$16034 (g$0$13224 g$0$16036)))) (quote #f))) ((lambda (g$0$16042) (list g$0$16042)) (g$0$13220 g$0$16036))) (if (g$0$13216 g$0$16036) (list (begin (quote v*) (quote ()))) (quote #f)))))) g$0$16034) (g$0$13224 g$0$16028)))) (quote #f))) ((lambda (g$0$16044) (list g$0$16044)) (g$0$13220 g$0$16028)))) (quote #f))) (g$0$13224 g$0$16022)))) (quote #f))) ((lambda (g$0$16046) (list g$0$16046)) (g$0$13220 g$0$16022)))) (quote #f))) g$0$16000))) g$0$15996))) ((lambda (g$0$16054) (if (g$0$13212 g$0$16054) (begin (quote #f) ((lambda (g$0$16056) (if g$0$16056 (begin (quote #f) ((lambda (g$0$16058) (if g$0$16058 (begin (quote #f) (append g$0$16056 g$0$16058)) (quote #f))) ((lambda (g$0$16060) (if (equal? (g$0$13246 g$0$16060) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16054)))) (quote #f))) ((lambda (g$0$16062) (list g$0$16062)) (g$0$13220 g$0$16054)))) (quote #f))) g$0$15996))) g$0$15992))) ((lambda (g$0$16074) (if (g$0$13212 g$0$16074) (begin (quote #f) ((lambda (g$0$16076) (if g$0$16076 (begin (quote #f) ((lambda (g$0$16078) (if g$0$16078 (begin (quote #f) (append g$0$16076 g$0$16078)) (quote #f))) ((lambda (g$0$16080) (if (g$0$13212 g$0$16080) (begin (quote #f) ((lambda (g$0$16082) (if g$0$16082 (begin (quote #f) ((lambda (g$0$16084) (if g$0$16084 (begin (quote #f) (append g$0$16082 g$0$16084)) (quote #f))) ((lambda (g$0$16086) (if (g$0$13212 g$0$16086) (begin (quote #f) ((lambda (g$0$16088) (if g$0$16088 (begin (quote #f) ((lambda (g$0$16090) (if g$0$16090 (begin (quote #f) (append g$0$16088 g$0$16090)) (quote #f))) ((lambda (g$0$16092) (if (equal? (g$0$13246 g$0$16092) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16086)))) (quote #f))) ((lambda (g$0$16094) (list g$0$16094)) (g$0$13220 g$0$16086)))) (quote #f))) (g$0$13224 g$0$16080)))) (quote #f))) ((lambda (g$0$16096) (if (g$0$13226 g$0$16096) (if (g$0$13234 g$0$16096 (g$0$13479 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$16080)))) (quote #f))) (g$0$13224 g$0$16074)))) (quote #f))) ((lambda (g$0$16098) (list g$0$16098)) (g$0$13220 g$0$16074)))) (quote #f))) g$0$15992))) g$0$15989))) (set! g$0$15890 (lambda (g$0$15896) ((lambda (g$0$15898) ((lambda (g$0$15900) (if (if g$0$15900 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15900)) (quote #f)) (apply (lambda () ((lambda (g$0$15984) (values (list g$0$15984 (list (quote lambda) (quote ()) (list (quote raise) g$0$15884))) g$0$15984)) (gensym))) g$0$15900) ((lambda (g$0$15902) ((lambda (g$0$15904) (if (if g$0$15904 (begin (quote #f) (apply (lambda (g$0$15947 g$0$15948) (quote #t)) g$0$15904)) (quote #f)) (apply (lambda (g$0$15943 g$0$15944) (values (cons (quote begin) (cons g$0$15943 g$0$15944)) (quote #f))) g$0$15904) ((lambda (g$0$15906) ((lambda (g$0$15908) (if (if g$0$15908 (begin (quote #f) (apply (lambda (g$0$15929 g$0$15930) (quote #t)) g$0$15908)) (quote #f)) (apply (lambda (g$0$15921 g$0$15922) (call-with-values (lambda () (g$0$15890 g$0$15922)) (lambda (g$0$15925 g$0$15926) (values (g$0$15888 g$0$15921 g$0$15925) g$0$15926)))) g$0$15908) ((lambda (g$0$15910) ((lambda (g$0$15912) (if (if g$0$15912 (begin (quote #f) (apply (lambda (g$0$15916) (quote #t)) g$0$15912)) (quote #f)) (apply (lambda (g$0$15914) (error (quote expander) (quote "invalid guard clause") (g$0$13244 g$0$15914 (quote ())))) g$0$15912) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$15910 (quote ()))))) ((lambda (g$0$15918) (list g$0$15918)) g$0$15910))) g$0$15906))) ((lambda (g$0$15932) (if (g$0$13212 g$0$15932) (begin (quote #f) ((lambda (g$0$15934) (if g$0$15934 (begin (quote #f) ((lambda (g$0$15936) (if g$0$15936 (begin (quote #f) (append g$0$15934 g$0$15936)) (quote #f))) ((lambda (g$0$15938) (list g$0$15938)) (g$0$13224 g$0$15932)))) (quote #f))) ((lambda (g$0$15940) (list g$0$15940)) (g$0$13220 g$0$15932)))) (quote #f))) g$0$15906))) g$0$15902))) ((lambda (g$0$15950) (if (g$0$13212 g$0$15950) (begin (quote #f) ((lambda (g$0$15952) (if g$0$15952 (begin (quote #f) ((lambda (g$0$15954) (if g$0$15954 (begin (quote #f) (append g$0$15952 g$0$15954)) (quote #f))) ((lambda (g$0$15956) (if (equal? (g$0$13246 g$0$15956) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$15950)))) (quote #f))) ((lambda (g$0$15958) (if (g$0$13212 g$0$15958) (begin (quote #f) ((lambda (g$0$15960) (if g$0$15960 (begin (quote #f) ((lambda (g$0$15962) (if g$0$15962 (begin (quote #f) (append g$0$15960 g$0$15962)) (quote #f))) ((lambda (g$0$15964) (if (g$0$13212 g$0$15964) (begin (quote #f) ((lambda (g$0$15966) (if g$0$15966 (begin (quote #f) ((lambda (g$0$15968) (if g$0$15968 (begin (quote #f) (append g$0$15966 g$0$15968)) (quote #f))) ((letrec ((g$0$15970 (lambda (g$0$15972) (if (g$0$13212 g$0$15972) ((lambda (g$0$15974) (if g$0$15974 (begin (quote #f) ((lambda (g$0$15976) (if g$0$15976 (begin (quote #f) (map cons g$0$15974 g$0$15976)) (quote #f))) (g$0$15970 (g$0$13224 g$0$15972)))) (quote #f))) ((lambda (g$0$15978) (list g$0$15978)) (g$0$13220 g$0$15972))) (if (g$0$13216 g$0$15972) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$15970) (g$0$13224 g$0$15964)))) (quote #f))) ((lambda (g$0$15980) (list g$0$15980)) (g$0$13220 g$0$15964)))) (quote #f))) (g$0$13224 g$0$15958)))) (quote #f))) ((lambda (g$0$15982) (if (g$0$13226 g$0$15982) (if (g$0$13234 g$0$15982 (g$0$13479 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$15958)))) (quote #f))) (g$0$13220 g$0$15950)))) (quote #f))) g$0$15902))) g$0$15898))) ((lambda (g$0$15986) (if (equal? (g$0$13246 g$0$15986) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$15898))) g$0$15896))) (call-with-values (lambda () (g$0$15890 g$0$15886)) (lambda (g$0$15893 g$0$15894) (if g$0$15894 (list (list (quote call/cc) (list (quote lambda) (list g$0$15894) (list g$0$15885 (list (quote lambda) (quote ()) g$0$15893))))) (list g$0$15885 (list (quote lambda) (quote ()) g$0$15893))))))) (quote #f) (quote #f)))) ((lambda (g$0$15810) ((lambda (g$0$15812) (if (if g$0$15812 (begin (quote #f) (apply (lambda (g$0$15827 g$0$15828 g$0$15829 g$0$15830) (g$0$13226 g$0$15827)) g$0$15812)) (quote #f)) (apply (lambda (g$0$15817 g$0$15818 g$0$15819 g$0$15820) ((lambda (g$0$15822) (g$0$13513 (list (list (quote call/cc) (list (quote lambda) (list g$0$15822) (list (quote lambda) (quote ()) (list (quote with-exception-handler) (list (quote lambda) (list g$0$15817) (g$0$15808 g$0$15817 g$0$15822 g$0$15818)) (cons (quote lambda) (cons (quote ()) (cons (quote #f) (cons g$0$15819 g$0$15820))))))))))) (gensym))) g$0$15812) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$15810 (quote ()))))) ((lambda (g$0$15832) (if (g$0$13212 g$0$15832) (begin (quote #f) ((lambda (g$0$15834) (if g$0$15834 (begin (quote #f) ((lambda (g$0$15836) (if g$0$15836 (begin (quote #f) (append g$0$15834 g$0$15836)) (quote #f))) ((lambda (g$0$15838) (if (g$0$13212 g$0$15838) (begin (quote #f) ((lambda (g$0$15840) (if g$0$15840 (begin (quote #f) ((lambda (g$0$15842) (if g$0$15842 (begin (quote #f) (append g$0$15840 g$0$15842)) (quote #f))) ((lambda (g$0$15844) (if (g$0$13212 g$0$15844) (begin (quote #f) ((lambda (g$0$15846) (if g$0$15846 (begin (quote #f) ((lambda (g$0$15848) (if g$0$15848 (begin (quote #f) (append g$0$15846 g$0$15848)) (quote #f))) ((letrec ((g$0$15850 (lambda (g$0$15852) (if (g$0$13212 g$0$15852) ((lambda (g$0$15854) (if g$0$15854 (begin (quote #f) ((lambda (g$0$15856) (if g$0$15856 (begin (quote #f) (map cons g$0$15854 g$0$15856)) (quote #f))) (g$0$15850 (g$0$13224 g$0$15852)))) (quote #f))) ((lambda (g$0$15858) (list g$0$15858)) (g$0$13220 g$0$15852))) (if (g$0$13216 g$0$15852) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15850) (g$0$13224 g$0$15844)))) (quote #f))) ((lambda (g$0$15860) (list g$0$15860)) (g$0$13220 g$0$15844)))) (quote #f))) (g$0$13224 g$0$15838)))) (quote #f))) ((lambda (g$0$15862) (if (g$0$13212 g$0$15862) (begin (quote #f) ((lambda (g$0$15864) (if g$0$15864 (begin (quote #f) ((lambda (g$0$15866) (if g$0$15866 (begin (quote #f) (append g$0$15864 g$0$15866)) (quote #f))) ((letrec ((g$0$15868 (lambda (g$0$15870) (if (g$0$13212 g$0$15870) ((lambda (g$0$15872) (if g$0$15872 (begin (quote #f) ((lambda (g$0$15874) (if g$0$15874 (begin (quote #f) (map cons g$0$15872 g$0$15874)) (quote #f))) (g$0$15868 (g$0$13224 g$0$15870)))) (quote #f))) ((lambda (g$0$15876) (list g$0$15876)) (g$0$13220 g$0$15870))) (if (g$0$13216 g$0$15870) (list (begin (quote clause*) (quote ()))) (quote #f)))))) g$0$15868) (g$0$13224 g$0$15862)))) (quote #f))) ((lambda (g$0$15878) (list g$0$15878)) (g$0$13220 g$0$15862)))) (quote #f))) (g$0$13220 g$0$15838)))) (quote #f))) (g$0$13224 g$0$15832)))) (quote #f))) ((lambda (g$0$15880) (quote ())) (g$0$13220 g$0$15832)))) (quote #f))) g$0$15810))) g$0$15806))) (quote #f)))) (set! g$0$13525 (lambda (g$0$16100) ((lambda (g$0$16102) (begin (set! g$0$16102 (lambda (g$0$16166) ((lambda (g$0$16168) (if g$0$16168 g$0$16168 (begin (quote #f) (if (not (memq (car g$0$16166) (cdr g$0$16166))) (begin (quote #f) (g$0$16102 (cdr g$0$16166))) (quote #f))))) (null? g$0$16166)))) ((lambda (g$0$16104) ((lambda (g$0$16106) (if (if g$0$16106 (begin (quote #f) (apply (lambda (g$0$16120 g$0$16121 g$0$16122) (if (g$0$13226 g$0$16120) (if (g$0$13226 g$0$16122) (begin (quote #f) (for-all g$0$13226 g$0$16121)) (quote #f)) (quote #f))) g$0$16106)) (quote #f)) (apply (lambda (g$0$16110 g$0$16111 g$0$16112) ((lambda (g$0$16115 g$0$16116) (begin (if (g$0$16102 g$0$16115) (void) (error (quote expander) (quote "duplicate names in enumeration set") (g$0$13244 g$0$16100 (quote ())))) (g$0$13513 (list (quote begin) (list (quote define) g$0$16116 (list (quote enum-set-constructor) (list (quote make-enumeration) (list (quote quote) g$0$16115)))) (list (quote define-syntax) g$0$16110 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote (_ n)) (quote (identifier? (syntax n))) (list (quote if) (list (quote memq) (quote (syntax->datum (syntax n))) (list (quote quote) g$0$16115)) (quote (syntax (quote n))) (list (quote syntax-error) (quote x) (quote "not a member of set") (list (quote quote) g$0$16115))))))) (list (quote define-syntax) g$0$16112 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote (_ n* ...)) (list (quote begin) (cons (quote for-each) (cons (list (quote lambda) (quote (n)) (quote (unless (identifier? n) (syntax-error x "non-identifier argument"))) (cons (quote unless) (cons (list (quote memq) (quote (syntax->datum n)) (list (quote quote) g$0$16115)) (quote ((syntax-error n "not a member of set")))))) (quote ((syntax (n* ...)))))) (list (quote syntax) (cons g$0$16116 (quote ((quote (n* ...))))))))))))))) (g$0$13708 g$0$16111) (gensym))) g$0$16106) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16104 (quote ()))))) ((lambda (g$0$16124) (if (g$0$13212 g$0$16124) (begin (quote #f) ((lambda (g$0$16126) (if g$0$16126 (begin (quote #f) ((lambda (g$0$16128) (if g$0$16128 (begin (quote #f) (append g$0$16126 g$0$16128)) (quote #f))) ((lambda (g$0$16130) (if (g$0$13212 g$0$16130) (begin (quote #f) ((lambda (g$0$16132) (if g$0$16132 (begin (quote #f) ((lambda (g$0$16134) (if g$0$16134 (begin (quote #f) (append g$0$16132 g$0$16134)) (quote #f))) ((lambda (g$0$16136) (if (g$0$13212 g$0$16136) (begin (quote #f) ((lambda (g$0$16138) (if g$0$16138 (begin (quote #f) ((lambda (g$0$16140) (if g$0$16140 (begin (quote #f) (append g$0$16138 g$0$16140)) (quote #f))) ((lambda (g$0$16142) (if (g$0$13212 g$0$16142) (begin (quote #f) ((lambda (g$0$16144) (if g$0$16144 (begin (quote #f) ((lambda (g$0$16146) (if g$0$16146 (begin (quote #f) (append g$0$16144 g$0$16146)) (quote #f))) ((lambda (g$0$16148) (if (equal? (g$0$13246 g$0$16148) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16142)))) (quote #f))) ((lambda (g$0$16150) (list g$0$16150)) (g$0$13220 g$0$16142)))) (quote #f))) (g$0$13224 g$0$16136)))) (quote #f))) ((letrec ((g$0$16152 (lambda (g$0$16154) (if (g$0$13212 g$0$16154) ((lambda (g$0$16156) (if g$0$16156 (begin (quote #f) ((lambda (g$0$16158) (if g$0$16158 (begin (quote #f) (map cons g$0$16156 g$0$16158)) (quote #f))) (g$0$16152 (g$0$13224 g$0$16154)))) (quote #f))) ((lambda (g$0$16160) (list g$0$16160)) (g$0$13220 g$0$16154))) (if (g$0$13216 g$0$16154) (list (begin (quote id*) (quote ()))) (quote #f)))))) g$0$16152) (g$0$13220 g$0$16136)))) (quote #f))) (g$0$13224 g$0$16130)))) (quote #f))) ((lambda (g$0$16162) (list g$0$16162)) (g$0$13220 g$0$16130)))) (quote #f))) (g$0$13224 g$0$16124)))) (quote #f))) ((lambda (g$0$16164) (quote ())) (g$0$13220 g$0$16124)))) (quote #f))) g$0$16104))) g$0$16100))) (quote #f)))) (set! g$0$13527 (lambda (g$0$16170) ((lambda (g$0$16172) ((lambda (g$0$16174) (if (if g$0$16174 (begin (quote #f) (apply (lambda (g$0$16178) (quote #t)) g$0$16174)) (quote #f)) (apply (lambda (g$0$16176) (g$0$13513 (list (quote time-it) (list (quote quote) g$0$16176) (list (quote lambda) (quote ()) g$0$16176)))) g$0$16174) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16172 (quote ()))))) ((lambda (g$0$16180) (if (g$0$13212 g$0$16180) (begin (quote #f) ((lambda (g$0$16182) (if g$0$16182 (begin (quote #f) ((lambda (g$0$16184) (if g$0$16184 (begin (quote #f) (append g$0$16182 g$0$16184)) (quote #f))) ((lambda (g$0$16186) (if (g$0$13212 g$0$16186) (begin (quote #f) ((lambda (g$0$16188) (if g$0$16188 (begin (quote #f) ((lambda (g$0$16190) (if g$0$16190 (begin (quote #f) (append g$0$16188 g$0$16190)) (quote #f))) ((lambda (g$0$16192) (if (equal? (g$0$13246 g$0$16192) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16186)))) (quote #f))) ((lambda (g$0$16194) (list g$0$16194)) (g$0$13220 g$0$16186)))) (quote #f))) (g$0$13224 g$0$16180)))) (quote #f))) ((lambda (g$0$16196) (quote ())) (g$0$13220 g$0$16180)))) (quote #f))) g$0$16172))) g$0$16170))) (set! g$0$13529 (lambda (g$0$16198) ((lambda (g$0$16200) ((lambda (g$0$16202) (if (if g$0$16202 (begin (quote #f) (apply (lambda (g$0$16206) (quote #t)) g$0$16202)) (quote #f)) (apply (lambda (g$0$16204) (g$0$13513 (list (quote make-promise) (list (quote lambda) (quote ()) g$0$16204)))) g$0$16202) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16200 (quote ()))))) ((lambda (g$0$16208) (if (g$0$13212 g$0$16208) (begin (quote #f) ((lambda (g$0$16210) (if g$0$16210 (begin (quote #f) ((lambda (g$0$16212) (if g$0$16212 (begin (quote #f) (append g$0$16210 g$0$16212)) (quote #f))) ((lambda (g$0$16214) (if (g$0$13212 g$0$16214) (begin (quote #f) ((lambda (g$0$16216) (if g$0$16216 (begin (quote #f) ((lambda (g$0$16218) (if g$0$16218 (begin (quote #f) (append g$0$16216 g$0$16218)) (quote #f))) ((lambda (g$0$16220) (if (equal? (g$0$13246 g$0$16220) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16214)))) (quote #f))) ((lambda (g$0$16222) (list g$0$16222)) (g$0$13220 g$0$16214)))) (quote #f))) (g$0$13224 g$0$16208)))) (quote #f))) ((lambda (g$0$16224) (quote ())) (g$0$13220 g$0$16208)))) (quote #f))) g$0$16200))) g$0$16198))) (set! g$0$13531 (lambda (g$0$16226) ((lambda (g$0$16228) ((lambda (g$0$16230) (if (if g$0$16230 (begin (quote #f) (apply (lambda (g$0$16234) (quote #t)) g$0$16230)) (quote #f)) (apply (lambda (g$0$16232) (g$0$13513 (list (quote unless) g$0$16232 (list (quote error) (quote (quote assert)) (quote "assertion failed") (list (quote quote) g$0$16232))))) g$0$16230) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16228 (quote ()))))) ((lambda (g$0$16236) (if (g$0$13212 g$0$16236) (begin (quote #f) ((lambda (g$0$16238) (if g$0$16238 (begin (quote #f) ((lambda (g$0$16240) (if g$0$16240 (begin (quote #f) (append g$0$16238 g$0$16240)) (quote #f))) ((lambda (g$0$16242) (if (g$0$13212 g$0$16242) (begin (quote #f) ((lambda (g$0$16244) (if g$0$16244 (begin (quote #f) ((lambda (g$0$16246) (if g$0$16246 (begin (quote #f) (append g$0$16244 g$0$16246)) (quote #f))) ((lambda (g$0$16248) (if (equal? (g$0$13246 g$0$16248) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16242)))) (quote #f))) ((lambda (g$0$16250) (list g$0$16250)) (g$0$13220 g$0$16242)))) (quote #f))) (g$0$13224 g$0$16236)))) (quote #f))) ((lambda (g$0$16252) (quote ())) (g$0$13220 g$0$16236)))) (quote #f))) g$0$16228))) g$0$16226))) (set! g$0$13533 (lambda (g$0$16254) ((lambda (g$0$16256) ((lambda (g$0$16258) (if (if g$0$16258 (begin (quote #f) (apply (lambda (g$0$16263) (quote #t)) g$0$16258)) (quote #f)) (apply (lambda (g$0$16260) ((lambda (g$0$16261) (if (memv g$0$16261 (quote (little))) (g$0$13513 (quote (quote little))) (if (memv g$0$16261 (quote (big))) (g$0$13513 (quote (quote big))) (error (quote expander) (quote "endianness must be big or little") (g$0$13244 g$0$16254 (quote ())))))) (g$0$13708 g$0$16260))) g$0$16258) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16256 (quote ()))))) ((lambda (g$0$16265) (if (g$0$13212 g$0$16265) (begin (quote #f) ((lambda (g$0$16267) (if g$0$16267 (begin (quote #f) ((lambda (g$0$16269) (if g$0$16269 (begin (quote #f) (append g$0$16267 g$0$16269)) (quote #f))) ((lambda (g$0$16271) (if (g$0$13212 g$0$16271) (begin (quote #f) ((lambda (g$0$16273) (if g$0$16273 (begin (quote #f) ((lambda (g$0$16275) (if g$0$16275 (begin (quote #f) (append g$0$16273 g$0$16275)) (quote #f))) ((lambda (g$0$16277) (if (equal? (g$0$13246 g$0$16277) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16271)))) (quote #f))) ((lambda (g$0$16279) (list g$0$16279)) (g$0$13220 g$0$16271)))) (quote #f))) (g$0$13224 g$0$16265)))) (quote #f))) ((lambda (g$0$16281) (quote ())) (g$0$13220 g$0$16265)))) (quote #f))) g$0$16256))) g$0$16254))) (set! g$0$13535 (lambda (g$0$16283) ((lambda (g$0$16285) ((lambda (g$0$16287) (if (if g$0$16287 (begin (quote #f) (apply (lambda (g$0$16397) (quote #t)) g$0$16287)) (quote #f)) (apply (lambda (g$0$16395) (g$0$13513 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) g$0$16395)) (list (quote (id e* ...)) (quote (identifier? (syntax id))) (cons (quote cons) (cons (list (quote syntax) g$0$16395) (quote ((syntax (e* ...))))))))))) g$0$16287) ((lambda (g$0$16289) ((lambda (g$0$16291) (if (if g$0$16291 (begin (quote #f) (apply (lambda (g$0$16307 g$0$16308 g$0$16309 g$0$16310 g$0$16311) (if (g$0$13226 g$0$16307) (if (g$0$13226 g$0$16309) (begin (quote #f) (g$0$13226 g$0$16310)) (quote #f)) (quote #f))) g$0$16291)) (quote #f)) (apply (lambda (g$0$16297 g$0$16298 g$0$16299 g$0$16300 g$0$16301) (g$0$13513 (list (quote cons) (quote (quote macro!)) (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote (set!)) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) g$0$16298)) (list (list (quote set!) (quote id) g$0$16300) (list (quote syntax) g$0$16301)) (list (quote (id e* ...)) (quote (identifier? (syntax id))) (list (quote syntax) (cons g$0$16298 (quote (e* ...)))))))))) g$0$16291) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16289 (quote ()))))) ((lambda (g$0$16313) (if (g$0$13212 g$0$16313) (begin (quote #f) ((lambda (g$0$16315) (if g$0$16315 (begin (quote #f) ((lambda (g$0$16317) (if g$0$16317 (begin (quote #f) (append g$0$16315 g$0$16317)) (quote #f))) ((lambda (g$0$16319) (if (g$0$13212 g$0$16319) (begin (quote #f) ((lambda (g$0$16321) (if g$0$16321 (begin (quote #f) ((lambda (g$0$16323) (if g$0$16323 (begin (quote #f) (append g$0$16321 g$0$16323)) (quote #f))) ((lambda (g$0$16325) (if (g$0$13212 g$0$16325) (begin (quote #f) ((lambda (g$0$16327) (if g$0$16327 (begin (quote #f) ((lambda (g$0$16329) (if g$0$16329 (begin (quote #f) (append g$0$16327 g$0$16329)) (quote #f))) ((lambda (g$0$16331) (if (equal? (g$0$13246 g$0$16331) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16325)))) (quote #f))) ((lambda (g$0$16333) (if (g$0$13212 g$0$16333) (begin (quote #f) ((lambda (g$0$16335) (if g$0$16335 (begin (quote #f) ((lambda (g$0$16337) (if g$0$16337 (begin (quote #f) (append g$0$16335 g$0$16337)) (quote #f))) ((lambda (g$0$16339) (if (g$0$13212 g$0$16339) (begin (quote #f) ((lambda (g$0$16341) (if g$0$16341 (begin (quote #f) ((lambda (g$0$16343) (if g$0$16343 (begin (quote #f) (append g$0$16341 g$0$16343)) (quote #f))) ((lambda (g$0$16345) (if (equal? (g$0$13246 g$0$16345) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16339)))) (quote #f))) ((lambda (g$0$16347) (list g$0$16347)) (g$0$13220 g$0$16339)))) (quote #f))) (g$0$13224 g$0$16333)))) (quote #f))) ((lambda (g$0$16349) (if (g$0$13212 g$0$16349) (begin (quote #f) ((lambda (g$0$16351) (if g$0$16351 (begin (quote #f) ((lambda (g$0$16353) (if g$0$16353 (begin (quote #f) (append g$0$16351 g$0$16353)) (quote #f))) ((lambda (g$0$16355) (if (g$0$13212 g$0$16355) (begin (quote #f) ((lambda (g$0$16357) (if g$0$16357 (begin (quote #f) ((lambda (g$0$16359) (if g$0$16359 (begin (quote #f) (append g$0$16357 g$0$16359)) (quote #f))) ((lambda (g$0$16361) (if (g$0$13212 g$0$16361) (begin (quote #f) ((lambda (g$0$16363) (if g$0$16363 (begin (quote #f) ((lambda (g$0$16365) (if g$0$16365 (begin (quote #f) (append g$0$16363 g$0$16365)) (quote #f))) ((lambda (g$0$16367) (if (equal? (g$0$13246 g$0$16367) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16361)))) (quote #f))) ((lambda (g$0$16369) (list g$0$16369)) (g$0$13220 g$0$16361)))) (quote #f))) (g$0$13224 g$0$16355)))) (quote #f))) ((lambda (g$0$16371) (list g$0$16371)) (g$0$13220 g$0$16355)))) (quote #f))) (g$0$13224 g$0$16349)))) (quote #f))) ((lambda (g$0$16373) (if (g$0$13226 g$0$16373) (if (g$0$13234 g$0$16373 (g$0$13479 (quote set!))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$16349)))) (quote #f))) (g$0$13220 g$0$16333)))) (quote #f))) (g$0$13220 g$0$16325)))) (quote #f))) (g$0$13224 g$0$16319)))) (quote #f))) ((lambda (g$0$16375) (if (g$0$13212 g$0$16375) (begin (quote #f) ((lambda (g$0$16377) (if g$0$16377 (begin (quote #f) ((lambda (g$0$16379) (if g$0$16379 (begin (quote #f) (append g$0$16377 g$0$16379)) (quote #f))) ((lambda (g$0$16381) (if (g$0$13212 g$0$16381) (begin (quote #f) ((lambda (g$0$16383) (if g$0$16383 (begin (quote #f) ((lambda (g$0$16385) (if g$0$16385 (begin (quote #f) (append g$0$16383 g$0$16385)) (quote #f))) ((lambda (g$0$16387) (if (equal? (g$0$13246 g$0$16387) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16381)))) (quote #f))) ((lambda (g$0$16389) (list g$0$16389)) (g$0$13220 g$0$16381)))) (quote #f))) (g$0$13224 g$0$16375)))) (quote #f))) ((lambda (g$0$16391) (list g$0$16391)) (g$0$13220 g$0$16375)))) (quote #f))) (g$0$13220 g$0$16319)))) (quote #f))) (g$0$13224 g$0$16313)))) (quote #f))) ((lambda (g$0$16393) (quote ())) (g$0$13220 g$0$16313)))) (quote #f))) g$0$16289))) g$0$16285))) ((lambda (g$0$16399) (if (g$0$13212 g$0$16399) (begin (quote #f) ((lambda (g$0$16401) (if g$0$16401 (begin (quote #f) ((lambda (g$0$16403) (if g$0$16403 (begin (quote #f) (append g$0$16401 g$0$16403)) (quote #f))) ((lambda (g$0$16405) (if (g$0$13212 g$0$16405) (begin (quote #f) ((lambda (g$0$16407) (if g$0$16407 (begin (quote #f) ((lambda (g$0$16409) (if g$0$16409 (begin (quote #f) (append g$0$16407 g$0$16409)) (quote #f))) ((lambda (g$0$16411) (if (equal? (g$0$13246 g$0$16411) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16405)))) (quote #f))) ((lambda (g$0$16413) (list g$0$16413)) (g$0$13220 g$0$16405)))) (quote #f))) (g$0$13224 g$0$16399)))) (quote #f))) ((lambda (g$0$16415) (quote ())) (g$0$13220 g$0$16399)))) (quote #f))) g$0$16285))) g$0$16283))) (set! g$0$13537 (lambda (g$0$16417) ((lambda (g$0$16419) (begin (set! g$0$16419 (lambda (g$0$16549) ((lambda (g$0$16551) ((lambda (g$0$16553) (if (if g$0$16553 (begin (quote #f) (apply (lambda (g$0$16608 g$0$16609) (quote #t)) g$0$16553)) (quote #f)) (apply (lambda (g$0$16604 g$0$16605) (list g$0$16604 g$0$16605 g$0$16604)) g$0$16553) ((lambda (g$0$16555) ((lambda (g$0$16557) (if (if g$0$16557 (begin (quote #f) (apply (lambda (g$0$16573 g$0$16574 g$0$16575) (quote #t)) g$0$16557)) (quote #f)) (apply (lambda (g$0$16567 g$0$16568 g$0$16569) (list g$0$16567 g$0$16568 g$0$16569)) g$0$16557) ((lambda (g$0$16559) ((lambda (g$0$16561) (if (if g$0$16561 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16561)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid binding") (g$0$13244 g$0$16417 (quote ())))) g$0$16561) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16559 (quote ()))))) ((lambda (g$0$16563) (quote ())) g$0$16559))) g$0$16555))) ((lambda (g$0$16577) (if (g$0$13212 g$0$16577) (begin (quote #f) ((lambda (g$0$16579) (if g$0$16579 (begin (quote #f) ((lambda (g$0$16581) (if g$0$16581 (begin (quote #f) (append g$0$16579 g$0$16581)) (quote #f))) ((lambda (g$0$16583) (if (g$0$13212 g$0$16583) (begin (quote #f) ((lambda (g$0$16585) (if g$0$16585 (begin (quote #f) ((lambda (g$0$16587) (if g$0$16587 (begin (quote #f) (append g$0$16585 g$0$16587)) (quote #f))) ((lambda (g$0$16589) (if (g$0$13212 g$0$16589) (begin (quote #f) ((lambda (g$0$16591) (if g$0$16591 (begin (quote #f) ((lambda (g$0$16593) (if g$0$16593 (begin (quote #f) (append g$0$16591 g$0$16593)) (quote #f))) ((lambda (g$0$16595) (if (equal? (g$0$13246 g$0$16595) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16589)))) (quote #f))) ((lambda (g$0$16597) (list g$0$16597)) (g$0$13220 g$0$16589)))) (quote #f))) (g$0$13224 g$0$16583)))) (quote #f))) ((lambda (g$0$16599) (list g$0$16599)) (g$0$13220 g$0$16583)))) (quote #f))) (g$0$13224 g$0$16577)))) (quote #f))) ((lambda (g$0$16601) (list g$0$16601)) (g$0$13220 g$0$16577)))) (quote #f))) g$0$16555))) g$0$16551))) ((lambda (g$0$16611) (if (g$0$13212 g$0$16611) (begin (quote #f) ((lambda (g$0$16613) (if g$0$16613 (begin (quote #f) ((lambda (g$0$16615) (if g$0$16615 (begin (quote #f) (append g$0$16613 g$0$16615)) (quote #f))) ((lambda (g$0$16617) (if (g$0$13212 g$0$16617) (begin (quote #f) ((lambda (g$0$16619) (if g$0$16619 (begin (quote #f) ((lambda (g$0$16621) (if g$0$16621 (begin (quote #f) (append g$0$16619 g$0$16621)) (quote #f))) ((lambda (g$0$16623) (if (equal? (g$0$13246 g$0$16623) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16617)))) (quote #f))) ((lambda (g$0$16625) (list g$0$16625)) (g$0$13220 g$0$16617)))) (quote #f))) (g$0$13224 g$0$16611)))) (quote #f))) ((lambda (g$0$16627) (list g$0$16627)) (g$0$13220 g$0$16611)))) (quote #f))) g$0$16551))) g$0$16549))) ((lambda (g$0$16421) ((lambda (g$0$16423) (if (if g$0$16423 (begin (quote #f) (apply (lambda (g$0$16486 g$0$16487 g$0$16488 g$0$16489) (quote #t)) g$0$16423)) (quote #f)) (apply (lambda (g$0$16428 g$0$16429 g$0$16430 g$0$16431) ((lambda (g$0$16433) ((lambda (g$0$16435) (if (if g$0$16435 (begin (quote #f) (apply (lambda (g$0$16445 g$0$16446 g$0$16447) (quote #t)) g$0$16435)) (quote #f)) (apply (lambda (g$0$16439 g$0$16440 g$0$16441) (if (g$0$13236 g$0$16439) (g$0$13513 (list (quote letrec) (list (list (quote loop) (list (quote lambda) g$0$16439 (list (quote if) g$0$16429 (cons (quote begin) (cons (quote (if #f #f)) g$0$16430)) (cons (quote begin) (append g$0$16431 (list (cons (quote loop) g$0$16441)))))))) (cons (quote loop) g$0$16440))) (error (quote expander) (quote "invalid bindings") (g$0$13244 g$0$16417 (quote ()))))) g$0$16435) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16433 (quote ()))))) ((letrec ((g$0$16449 (lambda (g$0$16451) (if (g$0$13212 g$0$16451) ((lambda (g$0$16453) (if g$0$16453 (begin (quote #f) ((lambda (g$0$16455) (if g$0$16455 (begin (quote #f) (map cons g$0$16453 g$0$16455)) (quote #f))) (g$0$16449 (g$0$13224 g$0$16451)))) (quote #f))) ((lambda (g$0$16457) (if (g$0$13212 g$0$16457) (begin (quote #f) ((lambda (g$0$16459) (if g$0$16459 (begin (quote #f) ((lambda (g$0$16461) (if g$0$16461 (begin (quote #f) (append g$0$16459 g$0$16461)) (quote #f))) ((lambda (g$0$16463) (if (g$0$13212 g$0$16463) (begin (quote #f) ((lambda (g$0$16465) (if g$0$16465 (begin (quote #f) ((lambda (g$0$16467) (if g$0$16467 (begin (quote #f) (append g$0$16465 g$0$16467)) (quote #f))) ((lambda (g$0$16469) (if (g$0$13212 g$0$16469) (begin (quote #f) ((lambda (g$0$16471) (if g$0$16471 (begin (quote #f) ((lambda (g$0$16473) (if g$0$16473 (begin (quote #f) (append g$0$16471 g$0$16473)) (quote #f))) ((lambda (g$0$16475) (if (equal? (g$0$13246 g$0$16475) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16469)))) (quote #f))) ((lambda (g$0$16477) (list g$0$16477)) (g$0$13220 g$0$16469)))) (quote #f))) (g$0$13224 g$0$16463)))) (quote #f))) ((lambda (g$0$16479) (list g$0$16479)) (g$0$13220 g$0$16463)))) (quote #f))) (g$0$13224 g$0$16457)))) (quote #f))) ((lambda (g$0$16481) (list g$0$16481)) (g$0$13220 g$0$16457)))) (quote #f))) (g$0$13220 g$0$16451))) (if (g$0$13216 g$0$16451) (list (begin (quote x*) (quote ())) (begin (quote init*) (quote ())) (begin (quote step*) (quote ()))) (quote #f)))))) g$0$16449) g$0$16433))) (map g$0$16419 g$0$16428))) g$0$16423) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16421 (quote ()))))) ((lambda (g$0$16491) (if (g$0$13212 g$0$16491) (begin (quote #f) ((lambda (g$0$16493) (if g$0$16493 (begin (quote #f) ((lambda (g$0$16495) (if g$0$16495 (begin (quote #f) (append g$0$16493 g$0$16495)) (quote #f))) ((lambda (g$0$16497) (if (g$0$13212 g$0$16497) (begin (quote #f) ((lambda (g$0$16499) (if g$0$16499 (begin (quote #f) ((lambda (g$0$16501) (if g$0$16501 (begin (quote #f) (append g$0$16499 g$0$16501)) (quote #f))) ((lambda (g$0$16503) (if (g$0$13212 g$0$16503) (begin (quote #f) ((lambda (g$0$16505) (if g$0$16505 (begin (quote #f) ((lambda (g$0$16507) (if g$0$16507 (begin (quote #f) (append g$0$16505 g$0$16507)) (quote #f))) ((letrec ((g$0$16509 (lambda (g$0$16511) (if (g$0$13212 g$0$16511) ((lambda (g$0$16513) (if g$0$16513 (begin (quote #f) ((lambda (g$0$16515) (if g$0$16515 (begin (quote #f) (map cons g$0$16513 g$0$16515)) (quote #f))) (g$0$16509 (g$0$13224 g$0$16511)))) (quote #f))) ((lambda (g$0$16517) (list g$0$16517)) (g$0$13220 g$0$16511))) (if (g$0$13216 g$0$16511) (list (begin (quote command*) (quote ()))) (quote #f)))))) g$0$16509) (g$0$13224 g$0$16503)))) (quote #f))) ((lambda (g$0$16519) (if (g$0$13212 g$0$16519) (begin (quote #f) ((lambda (g$0$16521) (if g$0$16521 (begin (quote #f) ((lambda (g$0$16523) (if g$0$16523 (begin (quote #f) (append g$0$16521 g$0$16523)) (quote #f))) ((letrec ((g$0$16525 (lambda (g$0$16527) (if (g$0$13212 g$0$16527) ((lambda (g$0$16529) (if g$0$16529 (begin (quote #f) ((lambda (g$0$16531) (if g$0$16531 (begin (quote #f) (map cons g$0$16529 g$0$16531)) (quote #f))) (g$0$16525 (g$0$13224 g$0$16527)))) (quote #f))) ((lambda (g$0$16533) (list g$0$16533)) (g$0$13220 g$0$16527))) (if (g$0$13216 g$0$16527) (list (begin (quote expr*) (quote ()))) (quote #f)))))) g$0$16525) (g$0$13224 g$0$16519)))) (quote #f))) ((lambda (g$0$16535) (list g$0$16535)) (g$0$13220 g$0$16519)))) (quote #f))) (g$0$13220 g$0$16503)))) (quote #f))) (g$0$13224 g$0$16497)))) (quote #f))) ((letrec ((g$0$16537 (lambda (g$0$16539) (if (g$0$13212 g$0$16539) ((lambda (g$0$16541) (if g$0$16541 (begin (quote #f) ((lambda (g$0$16543) (if g$0$16543 (begin (quote #f) (map cons g$0$16541 g$0$16543)) (quote #f))) (g$0$16537 (g$0$13224 g$0$16539)))) (quote #f))) ((lambda (g$0$16545) (list g$0$16545)) (g$0$13220 g$0$16539))) (if (g$0$13216 g$0$16539) (list (begin (quote binding*) (quote ()))) (quote #f)))))) g$0$16537) (g$0$13220 g$0$16497)))) (quote #f))) (g$0$13224 g$0$16491)))) (quote #f))) ((lambda (g$0$16547) (quote ())) (g$0$13220 g$0$16491)))) (quote #f))) g$0$16421))) g$0$16417))) (quote #f)))) (set! g$0$13539 (lambda (g$0$16629) ((lambda (g$0$16631) ((lambda (g$0$16633) (if (if g$0$16633 (begin (quote #f) (apply (lambda (g$0$16650 g$0$16651 g$0$16652 g$0$16653) (for-all g$0$13226 g$0$16650)) g$0$16633)) (quote #f)) (apply (lambda (g$0$16638 g$0$16639 g$0$16640 g$0$16641) (g$0$13513 (letrec ((g$0$16643 (lambda (g$0$16645) (if (null? g$0$16645) (cons (quote let) (cons (quote ()) (cons g$0$16640 g$0$16641))) (list (quote let) (list (car g$0$16645)) (g$0$16643 (cdr g$0$16645))))))) (g$0$16643 (map list g$0$16638 g$0$16639))))) g$0$16633) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16631 (quote ()))))) ((lambda (g$0$16655) (if (g$0$13212 g$0$16655) (begin (quote #f) ((lambda (g$0$16657) (if g$0$16657 (begin (quote #f) ((lambda (g$0$16659) (if g$0$16659 (begin (quote #f) (append g$0$16657 g$0$16659)) (quote #f))) ((lambda (g$0$16661) (if (g$0$13212 g$0$16661) (begin (quote #f) ((lambda (g$0$16663) (if g$0$16663 (begin (quote #f) ((lambda (g$0$16665) (if g$0$16665 (begin (quote #f) (append g$0$16663 g$0$16665)) (quote #f))) ((lambda (g$0$16667) (if (g$0$13212 g$0$16667) (begin (quote #f) ((lambda (g$0$16669) (if g$0$16669 (begin (quote #f) ((lambda (g$0$16671) (if g$0$16671 (begin (quote #f) (append g$0$16669 g$0$16671)) (quote #f))) ((letrec ((g$0$16673 (lambda (g$0$16675) (if (g$0$13212 g$0$16675) ((lambda (g$0$16677) (if g$0$16677 (begin (quote #f) ((lambda (g$0$16679) (if g$0$16679 (begin (quote #f) (map cons g$0$16677 g$0$16679)) (quote #f))) (g$0$16673 (g$0$13224 g$0$16675)))) (quote #f))) ((lambda (g$0$16681) (list g$0$16681)) (g$0$13220 g$0$16675))) (if (g$0$13216 g$0$16675) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$16673) (g$0$13224 g$0$16667)))) (quote #f))) ((lambda (g$0$16683) (list g$0$16683)) (g$0$13220 g$0$16667)))) (quote #f))) (g$0$13224 g$0$16661)))) (quote #f))) ((letrec ((g$0$16685 (lambda (g$0$16687) (if (g$0$13212 g$0$16687) ((lambda (g$0$16689) (if g$0$16689 (begin (quote #f) ((lambda (g$0$16691) (if g$0$16691 (begin (quote #f) (map cons g$0$16689 g$0$16691)) (quote #f))) (g$0$16685 (g$0$13224 g$0$16687)))) (quote #f))) ((lambda (g$0$16693) (if (g$0$13212 g$0$16693) (begin (quote #f) ((lambda (g$0$16695) (if g$0$16695 (begin (quote #f) ((lambda (g$0$16697) (if g$0$16697 (begin (quote #f) (append g$0$16695 g$0$16697)) (quote #f))) ((lambda (g$0$16699) (if (g$0$13212 g$0$16699) (begin (quote #f) ((lambda (g$0$16701) (if g$0$16701 (begin (quote #f) ((lambda (g$0$16703) (if g$0$16703 (begin (quote #f) (append g$0$16701 g$0$16703)) (quote #f))) ((lambda (g$0$16705) (if (equal? (g$0$13246 g$0$16705) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16699)))) (quote #f))) ((lambda (g$0$16707) (list g$0$16707)) (g$0$13220 g$0$16699)))) (quote #f))) (g$0$13224 g$0$16693)))) (quote #f))) ((lambda (g$0$16709) (list g$0$16709)) (g$0$13220 g$0$16693)))) (quote #f))) (g$0$13220 g$0$16687))) (if (g$0$13216 g$0$16687) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$16685) (g$0$13220 g$0$16661)))) (quote #f))) (g$0$13224 g$0$16655)))) (quote #f))) ((lambda (g$0$16711) (quote ())) (g$0$13220 g$0$16655)))) (quote #f))) g$0$16631))) g$0$16629))) (set! g$0$13541 (lambda (g$0$16713) ((lambda (g$0$16715) ((lambda (g$0$16717) (if (if g$0$16717 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16717)) (quote #f)) (apply (lambda () (quote #f)) g$0$16717) ((lambda (g$0$16719) ((lambda (g$0$16721) (if (if g$0$16721 (begin (quote #f) (apply (lambda (g$0$16734 g$0$16735) (quote #t)) g$0$16721)) (quote #f)) (apply (lambda (g$0$16724 g$0$16725) (g$0$13513 (letrec ((g$0$16727 (lambda (g$0$16730 g$0$16731) (if (null? g$0$16731) (list (quote begin) (quote #f) g$0$16730) (list (quote let) (list (list (quote t) g$0$16730)) (list (quote if) (quote t) (quote t) (g$0$16727 (car g$0$16731) (cdr g$0$16731)))))))) (g$0$16727 g$0$16724 g$0$16725)))) g$0$16721) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16719 (quote ()))))) ((lambda (g$0$16737) (if (g$0$13212 g$0$16737) (begin (quote #f) ((lambda (g$0$16739) (if g$0$16739 (begin (quote #f) ((lambda (g$0$16741) (if g$0$16741 (begin (quote #f) (append g$0$16739 g$0$16741)) (quote #f))) ((lambda (g$0$16743) (if (g$0$13212 g$0$16743) (begin (quote #f) ((lambda (g$0$16745) (if g$0$16745 (begin (quote #f) ((lambda (g$0$16747) (if g$0$16747 (begin (quote #f) (append g$0$16745 g$0$16747)) (quote #f))) ((letrec ((g$0$16749 (lambda (g$0$16751) (if (g$0$13212 g$0$16751) ((lambda (g$0$16753) (if g$0$16753 (begin (quote #f) ((lambda (g$0$16755) (if g$0$16755 (begin (quote #f) (map cons g$0$16753 g$0$16755)) (quote #f))) (g$0$16749 (g$0$13224 g$0$16751)))) (quote #f))) ((lambda (g$0$16757) (list g$0$16757)) (g$0$13220 g$0$16751))) (if (g$0$13216 g$0$16751) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$16749) (g$0$13224 g$0$16743)))) (quote #f))) ((lambda (g$0$16759) (list g$0$16759)) (g$0$13220 g$0$16743)))) (quote #f))) (g$0$13224 g$0$16737)))) (quote #f))) ((lambda (g$0$16761) (quote ())) (g$0$13220 g$0$16737)))) (quote #f))) g$0$16719))) g$0$16715))) ((lambda (g$0$16763) (if (g$0$13212 g$0$16763) (begin (quote #f) ((lambda (g$0$16765) (if g$0$16765 (begin (quote #f) ((lambda (g$0$16767) (if g$0$16767 (begin (quote #f) (append g$0$16765 g$0$16767)) (quote #f))) ((lambda (g$0$16769) (if (equal? (g$0$13246 g$0$16769) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16763)))) (quote #f))) ((lambda (g$0$16771) (quote ())) (g$0$13220 g$0$16763)))) (quote #f))) g$0$16715))) g$0$16713))) (set! g$0$13543 (lambda (g$0$16773) ((lambda (g$0$16775) ((lambda (g$0$16777) (if (if g$0$16777 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16777)) (quote #f)) (apply (lambda () (quote #t)) g$0$16777) ((lambda (g$0$16779) ((lambda (g$0$16781) (if (if g$0$16781 (begin (quote #f) (apply (lambda (g$0$16794 g$0$16795) (quote #t)) g$0$16781)) (quote #f)) (apply (lambda (g$0$16784 g$0$16785) (g$0$13513 (letrec ((g$0$16787 (lambda (g$0$16790 g$0$16791) (if (null? g$0$16791) (list (quote begin) (quote #f) g$0$16790) (cons (quote if) (cons g$0$16790 (cons (g$0$16787 (car g$0$16791) (cdr g$0$16791)) (quote (#f))))))))) (g$0$16787 g$0$16784 g$0$16785)))) g$0$16781) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16779 (quote ()))))) ((lambda (g$0$16797) (if (g$0$13212 g$0$16797) (begin (quote #f) ((lambda (g$0$16799) (if g$0$16799 (begin (quote #f) ((lambda (g$0$16801) (if g$0$16801 (begin (quote #f) (append g$0$16799 g$0$16801)) (quote #f))) ((lambda (g$0$16803) (if (g$0$13212 g$0$16803) (begin (quote #f) ((lambda (g$0$16805) (if g$0$16805 (begin (quote #f) ((lambda (g$0$16807) (if g$0$16807 (begin (quote #f) (append g$0$16805 g$0$16807)) (quote #f))) ((letrec ((g$0$16809 (lambda (g$0$16811) (if (g$0$13212 g$0$16811) ((lambda (g$0$16813) (if g$0$16813 (begin (quote #f) ((lambda (g$0$16815) (if g$0$16815 (begin (quote #f) (map cons g$0$16813 g$0$16815)) (quote #f))) (g$0$16809 (g$0$13224 g$0$16811)))) (quote #f))) ((lambda (g$0$16817) (list g$0$16817)) (g$0$13220 g$0$16811))) (if (g$0$13216 g$0$16811) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$16809) (g$0$13224 g$0$16803)))) (quote #f))) ((lambda (g$0$16819) (list g$0$16819)) (g$0$13220 g$0$16803)))) (quote #f))) (g$0$13224 g$0$16797)))) (quote #f))) ((lambda (g$0$16821) (quote ())) (g$0$13220 g$0$16797)))) (quote #f))) g$0$16779))) g$0$16775))) ((lambda (g$0$16823) (if (g$0$13212 g$0$16823) (begin (quote #f) ((lambda (g$0$16825) (if g$0$16825 (begin (quote #f) ((lambda (g$0$16827) (if g$0$16827 (begin (quote #f) (append g$0$16825 g$0$16827)) (quote #f))) ((lambda (g$0$16829) (if (equal? (g$0$13246 g$0$16829) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16823)))) (quote #f))) ((lambda (g$0$16831) (quote ())) (g$0$13220 g$0$16823)))) (quote #f))) g$0$16775))) g$0$16773))) (set! g$0$13545 (lambda (g$0$16833) ((lambda (g$0$16835) ((lambda (g$0$16837) (if (if g$0$16837 (begin (quote #f) (apply (lambda (g$0$17110 g$0$17111) (quote #t)) g$0$16837)) (quote #f)) (apply (lambda (g$0$16840 g$0$16841) (g$0$13513 (letrec ((g$0$16843 (lambda (g$0$16846 g$0$16847) (if (null? g$0$16847) ((lambda (g$0$16979) ((lambda (g$0$16981) (if (if g$0$16981 (begin (quote #f) (apply (lambda (g$0$17080 g$0$17081) (quote #t)) g$0$16981)) (quote #f)) (apply (lambda (g$0$17076 g$0$17077) (cons (quote begin) (cons g$0$17076 g$0$17077))) g$0$16981) ((lambda (g$0$16983) ((lambda (g$0$16985) (if (if g$0$16985 (begin (quote #f) (apply (lambda (g$0$17046 g$0$17047) (quote #t)) g$0$16985)) (quote #f)) (apply (lambda (g$0$17042 g$0$17043) (list (quote let) (list (list (quote t) g$0$17042)) (list (quote if) (quote t) (cons g$0$17043 (quote (t)))))) g$0$16985) ((lambda (g$0$16987) ((lambda (g$0$16989) (if (if g$0$16989 (begin (quote #f) (apply (lambda (g$0$17029) (quote #t)) g$0$16989)) (quote #f)) (apply (lambda (g$0$17027) (cons (quote or) (cons g$0$17027 (quote ((if #f #f)))))) g$0$16989) ((lambda (g$0$16991) ((lambda (g$0$16993) (if (if g$0$16993 (begin (quote #f) (apply (lambda (g$0$17006 g$0$17007) (quote #t)) g$0$16993)) (quote #f)) (apply (lambda (g$0$17002 g$0$17003) (list (quote if) g$0$17002 (cons (quote begin) g$0$17003))) g$0$16993) ((lambda (g$0$16995) ((lambda (g$0$16997) (if (if g$0$16997 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16997)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid last clause") (g$0$13244 g$0$16833 (quote ())))) g$0$16997) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16995 (quote ()))))) ((lambda (g$0$16999) (quote ())) g$0$16995))) g$0$16991))) ((lambda (g$0$17009) (if (g$0$13212 g$0$17009) (begin (quote #f) ((lambda (g$0$17011) (if g$0$17011 (begin (quote #f) ((lambda (g$0$17013) (if g$0$17013 (begin (quote #f) (append g$0$17011 g$0$17013)) (quote #f))) ((letrec ((g$0$17015 (lambda (g$0$17017) (if (g$0$13212 g$0$17017) ((lambda (g$0$17019) (if g$0$17019 (begin (quote #f) ((lambda (g$0$17021) (if g$0$17021 (begin (quote #f) (map cons g$0$17019 g$0$17021)) (quote #f))) (g$0$17015 (g$0$13224 g$0$17017)))) (quote #f))) ((lambda (g$0$17023) (list g$0$17023)) (g$0$13220 g$0$17017))) (if (g$0$13216 g$0$17017) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$17015) (g$0$13224 g$0$17009)))) (quote #f))) ((lambda (g$0$17025) (list g$0$17025)) (g$0$13220 g$0$17009)))) (quote #f))) g$0$16991))) g$0$16987))) ((lambda (g$0$17031) (if (g$0$13212 g$0$17031) (begin (quote #f) ((lambda (g$0$17033) (if g$0$17033 (begin (quote #f) ((lambda (g$0$17035) (if g$0$17035 (begin (quote #f) (append g$0$17033 g$0$17035)) (quote #f))) ((lambda (g$0$17037) (if (equal? (g$0$13246 g$0$17037) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17031)))) (quote #f))) ((lambda (g$0$17039) (list g$0$17039)) (g$0$13220 g$0$17031)))) (quote #f))) g$0$16987))) g$0$16983))) ((lambda (g$0$17049) (if (g$0$13212 g$0$17049) (begin (quote #f) ((lambda (g$0$17051) (if g$0$17051 (begin (quote #f) ((lambda (g$0$17053) (if g$0$17053 (begin (quote #f) (append g$0$17051 g$0$17053)) (quote #f))) ((lambda (g$0$17055) (if (g$0$13212 g$0$17055) (begin (quote #f) ((lambda (g$0$17057) (if g$0$17057 (begin (quote #f) ((lambda (g$0$17059) (if g$0$17059 (begin (quote #f) (append g$0$17057 g$0$17059)) (quote #f))) ((lambda (g$0$17061) (if (g$0$13212 g$0$17061) (begin (quote #f) ((lambda (g$0$17063) (if g$0$17063 (begin (quote #f) ((lambda (g$0$17065) (if g$0$17065 (begin (quote #f) (append g$0$17063 g$0$17065)) (quote #f))) ((lambda (g$0$17067) (if (equal? (g$0$13246 g$0$17067) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17061)))) (quote #f))) ((lambda (g$0$17069) (list g$0$17069)) (g$0$13220 g$0$17061)))) (quote #f))) (g$0$13224 g$0$17055)))) (quote #f))) ((lambda (g$0$17071) (if (g$0$13226 g$0$17071) (if (g$0$13234 g$0$17071 (g$0$13479 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17055)))) (quote #f))) (g$0$13224 g$0$17049)))) (quote #f))) ((lambda (g$0$17073) (list g$0$17073)) (g$0$13220 g$0$17049)))) (quote #f))) g$0$16983))) g$0$16979))) ((lambda (g$0$17083) (if (g$0$13212 g$0$17083) (begin (quote #f) ((lambda (g$0$17085) (if g$0$17085 (begin (quote #f) ((lambda (g$0$17087) (if g$0$17087 (begin (quote #f) (append g$0$17085 g$0$17087)) (quote #f))) ((lambda (g$0$17089) (if (g$0$13212 g$0$17089) (begin (quote #f) ((lambda (g$0$17091) (if g$0$17091 (begin (quote #f) ((lambda (g$0$17093) (if g$0$17093 (begin (quote #f) (append g$0$17091 g$0$17093)) (quote #f))) ((letrec ((g$0$17095 (lambda (g$0$17097) (if (g$0$13212 g$0$17097) ((lambda (g$0$17099) (if g$0$17099 (begin (quote #f) ((lambda (g$0$17101) (if g$0$17101 (begin (quote #f) (map cons g$0$17099 g$0$17101)) (quote #f))) (g$0$17095 (g$0$13224 g$0$17097)))) (quote #f))) ((lambda (g$0$17103) (list g$0$17103)) (g$0$13220 g$0$17097))) (if (g$0$13216 g$0$17097) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$17095) (g$0$13224 g$0$17089)))) (quote #f))) ((lambda (g$0$17105) (list g$0$17105)) (g$0$13220 g$0$17089)))) (quote #f))) (g$0$13224 g$0$17083)))) (quote #f))) ((lambda (g$0$17107) (if (g$0$13226 g$0$17107) (if (g$0$13234 g$0$17107 (g$0$13479 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17083)))) (quote #f))) g$0$16979))) g$0$16846) ((lambda (g$0$16849) ((lambda (g$0$16851) (if (if g$0$16851 (begin (quote #f) (apply (lambda (g$0$16950 g$0$16951) (quote #t)) g$0$16851)) (quote #f)) (apply (lambda (g$0$16946 g$0$16947) (error (quote expander) (quote "incorrect position of keyword else") (g$0$13244 g$0$16833 (quote ())))) g$0$16851) ((lambda (g$0$16853) ((lambda (g$0$16855) (if (if g$0$16855 (begin (quote #f) (apply (lambda (g$0$16916 g$0$16917) (quote #t)) g$0$16855)) (quote #f)) (apply (lambda (g$0$16912 g$0$16913) (list (quote let) (list (list (quote t) g$0$16912)) (list (quote if) (quote t) (cons g$0$16913 (quote (t))) (g$0$16843 (car g$0$16847) (cdr g$0$16847))))) g$0$16855) ((lambda (g$0$16857) ((lambda (g$0$16859) (if (if g$0$16859 (begin (quote #f) (apply (lambda (g$0$16899) (quote #t)) g$0$16859)) (quote #f)) (apply (lambda (g$0$16897) (list (quote or) g$0$16897 (g$0$16843 (car g$0$16847) (cdr g$0$16847)))) g$0$16859) ((lambda (g$0$16861) ((lambda (g$0$16863) (if (if g$0$16863 (begin (quote #f) (apply (lambda (g$0$16876 g$0$16877) (quote #t)) g$0$16863)) (quote #f)) (apply (lambda (g$0$16872 g$0$16873) (list (quote if) g$0$16872 (cons (quote begin) g$0$16873) (g$0$16843 (car g$0$16847) (cdr g$0$16847)))) g$0$16863) ((lambda (g$0$16865) ((lambda (g$0$16867) (if (if g$0$16867 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16867)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid last clause") (g$0$13244 g$0$16833 (quote ())))) g$0$16867) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16865 (quote ()))))) ((lambda (g$0$16869) (quote ())) g$0$16865))) g$0$16861))) ((lambda (g$0$16879) (if (g$0$13212 g$0$16879) (begin (quote #f) ((lambda (g$0$16881) (if g$0$16881 (begin (quote #f) ((lambda (g$0$16883) (if g$0$16883 (begin (quote #f) (append g$0$16881 g$0$16883)) (quote #f))) ((letrec ((g$0$16885 (lambda (g$0$16887) (if (g$0$13212 g$0$16887) ((lambda (g$0$16889) (if g$0$16889 (begin (quote #f) ((lambda (g$0$16891) (if g$0$16891 (begin (quote #f) (map cons g$0$16889 g$0$16891)) (quote #f))) (g$0$16885 (g$0$13224 g$0$16887)))) (quote #f))) ((lambda (g$0$16893) (list g$0$16893)) (g$0$13220 g$0$16887))) (if (g$0$13216 g$0$16887) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$16885) (g$0$13224 g$0$16879)))) (quote #f))) ((lambda (g$0$16895) (list g$0$16895)) (g$0$13220 g$0$16879)))) (quote #f))) g$0$16861))) g$0$16857))) ((lambda (g$0$16901) (if (g$0$13212 g$0$16901) (begin (quote #f) ((lambda (g$0$16903) (if g$0$16903 (begin (quote #f) ((lambda (g$0$16905) (if g$0$16905 (begin (quote #f) (append g$0$16903 g$0$16905)) (quote #f))) ((lambda (g$0$16907) (if (equal? (g$0$13246 g$0$16907) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16901)))) (quote #f))) ((lambda (g$0$16909) (list g$0$16909)) (g$0$13220 g$0$16901)))) (quote #f))) g$0$16857))) g$0$16853))) ((lambda (g$0$16919) (if (g$0$13212 g$0$16919) (begin (quote #f) ((lambda (g$0$16921) (if g$0$16921 (begin (quote #f) ((lambda (g$0$16923) (if g$0$16923 (begin (quote #f) (append g$0$16921 g$0$16923)) (quote #f))) ((lambda (g$0$16925) (if (g$0$13212 g$0$16925) (begin (quote #f) ((lambda (g$0$16927) (if g$0$16927 (begin (quote #f) ((lambda (g$0$16929) (if g$0$16929 (begin (quote #f) (append g$0$16927 g$0$16929)) (quote #f))) ((lambda (g$0$16931) (if (g$0$13212 g$0$16931) (begin (quote #f) ((lambda (g$0$16933) (if g$0$16933 (begin (quote #f) ((lambda (g$0$16935) (if g$0$16935 (begin (quote #f) (append g$0$16933 g$0$16935)) (quote #f))) ((lambda (g$0$16937) (if (equal? (g$0$13246 g$0$16937) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$16931)))) (quote #f))) ((lambda (g$0$16939) (list g$0$16939)) (g$0$13220 g$0$16931)))) (quote #f))) (g$0$13224 g$0$16925)))) (quote #f))) ((lambda (g$0$16941) (if (g$0$13226 g$0$16941) (if (g$0$13234 g$0$16941 (g$0$13479 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$16925)))) (quote #f))) (g$0$13224 g$0$16919)))) (quote #f))) ((lambda (g$0$16943) (list g$0$16943)) (g$0$13220 g$0$16919)))) (quote #f))) g$0$16853))) g$0$16849))) ((lambda (g$0$16953) (if (g$0$13212 g$0$16953) (begin (quote #f) ((lambda (g$0$16955) (if g$0$16955 (begin (quote #f) ((lambda (g$0$16957) (if g$0$16957 (begin (quote #f) (append g$0$16955 g$0$16957)) (quote #f))) ((lambda (g$0$16959) (if (g$0$13212 g$0$16959) (begin (quote #f) ((lambda (g$0$16961) (if g$0$16961 (begin (quote #f) ((lambda (g$0$16963) (if g$0$16963 (begin (quote #f) (append g$0$16961 g$0$16963)) (quote #f))) ((letrec ((g$0$16965 (lambda (g$0$16967) (if (g$0$13212 g$0$16967) ((lambda (g$0$16969) (if g$0$16969 (begin (quote #f) ((lambda (g$0$16971) (if g$0$16971 (begin (quote #f) (map cons g$0$16969 g$0$16971)) (quote #f))) (g$0$16965 (g$0$13224 g$0$16967)))) (quote #f))) ((lambda (g$0$16973) (list g$0$16973)) (g$0$13220 g$0$16967))) (if (g$0$13216 g$0$16967) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$16965) (g$0$13224 g$0$16959)))) (quote #f))) ((lambda (g$0$16975) (list g$0$16975)) (g$0$13220 g$0$16959)))) (quote #f))) (g$0$13224 g$0$16953)))) (quote #f))) ((lambda (g$0$16977) (if (g$0$13226 g$0$16977) (if (g$0$13234 g$0$16977 (g$0$13479 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$16953)))) (quote #f))) g$0$16849))) g$0$16846))))) (g$0$16843 g$0$16840 g$0$16841)))) g$0$16837) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$16835 (quote ()))))) ((lambda (g$0$17113) (if (g$0$13212 g$0$17113) (begin (quote #f) ((lambda (g$0$17115) (if g$0$17115 (begin (quote #f) ((lambda (g$0$17117) (if g$0$17117 (begin (quote #f) (append g$0$17115 g$0$17117)) (quote #f))) ((lambda (g$0$17119) (if (g$0$13212 g$0$17119) (begin (quote #f) ((lambda (g$0$17121) (if g$0$17121 (begin (quote #f) ((lambda (g$0$17123) (if g$0$17123 (begin (quote #f) (append g$0$17121 g$0$17123)) (quote #f))) ((letrec ((g$0$17125 (lambda (g$0$17127) (if (g$0$13212 g$0$17127) ((lambda (g$0$17129) (if g$0$17129 (begin (quote #f) ((lambda (g$0$17131) (if g$0$17131 (begin (quote #f) (map cons g$0$17129 g$0$17131)) (quote #f))) (g$0$17125 (g$0$13224 g$0$17127)))) (quote #f))) ((lambda (g$0$17133) (list g$0$17133)) (g$0$13220 g$0$17127))) (if (g$0$13216 g$0$17127) (list (begin (quote cls*) (quote ()))) (quote #f)))))) g$0$17125) (g$0$13224 g$0$17119)))) (quote #f))) ((lambda (g$0$17135) (list g$0$17135)) (g$0$13220 g$0$17119)))) (quote #f))) (g$0$13224 g$0$17113)))) (quote #f))) ((lambda (g$0$17137) (quote ())) (g$0$13220 g$0$17113)))) (quote #f))) g$0$16835))) g$0$16833))) (set! g$0$13547 (lambda (g$0$17139) ((lambda (g$0$17141) ((lambda (g$0$17143) (if (if g$0$17143 (begin (quote #f) (apply (lambda (g$0$17158 g$0$17159) (quote #t)) g$0$17143)) (quote #f)) (apply (lambda (g$0$17146 g$0$17147) ((lambda (g$0$17149) (begin (if (string? g$0$17149) (void) (error (quote expander) (quote "invalid syntax") (g$0$13246 g$0$17139))) (with-input-from-file g$0$17149 (lambda () (letrec ((g$0$17151 (lambda (g$0$17153) ((lambda (g$0$17155) (if (eof-object? g$0$17155) (cons (g$0$13513 (quote begin)) (g$0$13192 g$0$17146 (reverse g$0$17153))) (g$0$17151 (cons g$0$17155 g$0$17153)))) (read))))) (g$0$17151 (quote ()))))))) (g$0$13246 g$0$17147))) g$0$17143) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17141 (quote ()))))) ((lambda (g$0$17161) (if (g$0$13212 g$0$17161) (begin (quote #f) ((lambda (g$0$17163) (if g$0$17163 (begin (quote #f) ((lambda (g$0$17165) (if g$0$17165 (begin (quote #f) (append g$0$17163 g$0$17165)) (quote #f))) ((lambda (g$0$17167) (if (g$0$13212 g$0$17167) (begin (quote #f) ((lambda (g$0$17169) (if g$0$17169 (begin (quote #f) ((lambda (g$0$17171) (if g$0$17171 (begin (quote #f) (append g$0$17169 g$0$17171)) (quote #f))) ((lambda (g$0$17173) (if (equal? (g$0$13246 g$0$17173) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17167)))) (quote #f))) ((lambda (g$0$17175) (list g$0$17175)) (g$0$13220 g$0$17167)))) (quote #f))) (g$0$13224 g$0$17161)))) (quote #f))) ((lambda (g$0$17177) (list g$0$17177)) (g$0$13220 g$0$17161)))) (quote #f))) g$0$17141))) g$0$17139))) (set! g$0$13549 (lambda (g$0$17179) ((lambda (g$0$17181) ((lambda (g$0$17183) (if (if g$0$17183 (begin (quote #f) (apply (lambda (g$0$17199 g$0$17200 g$0$17201) (quote #t)) g$0$17183)) (quote #f)) (apply (lambda (g$0$17187 g$0$17188 g$0$17189) (begin (if (for-all (lambda (g$0$17191) (if (g$0$13226 g$0$17191) (if (not (g$0$13234 g$0$17191 (g$0$13479 (quote ...)))) (begin (quote #f) (not (g$0$13234 g$0$17191 (g$0$13479 (quote _))))) (quote #f)) (quote #f))) g$0$17187) (void) (error (quote expander) (quote "invalid literals") (g$0$13244 g$0$17179 (quote ())))) (g$0$13513 (list (quote lambda) (quote (x)) (cons (quote syntax-case) (cons (quote x) (cons g$0$17187 (map (lambda (g$0$17194 g$0$17195) (list g$0$17194 (list (quote syntax) g$0$17195))) g$0$17188 g$0$17189)))))))) g$0$17183) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17181 (quote ()))))) ((lambda (g$0$17203) (if (g$0$13212 g$0$17203) (begin (quote #f) ((lambda (g$0$17205) (if g$0$17205 (begin (quote #f) ((lambda (g$0$17207) (if g$0$17207 (begin (quote #f) (append g$0$17205 g$0$17207)) (quote #f))) ((lambda (g$0$17209) (if (g$0$13212 g$0$17209) (begin (quote #f) ((lambda (g$0$17211) (if g$0$17211 (begin (quote #f) ((lambda (g$0$17213) (if g$0$17213 (begin (quote #f) (append g$0$17211 g$0$17213)) (quote #f))) ((letrec ((g$0$17215 (lambda (g$0$17217) (if (g$0$13212 g$0$17217) ((lambda (g$0$17219) (if g$0$17219 (begin (quote #f) ((lambda (g$0$17221) (if g$0$17221 (begin (quote #f) (map cons g$0$17219 g$0$17221)) (quote #f))) (g$0$17215 (g$0$13224 g$0$17217)))) (quote #f))) ((lambda (g$0$17223) (if (g$0$13212 g$0$17223) (begin (quote #f) ((lambda (g$0$17225) (if g$0$17225 (begin (quote #f) ((lambda (g$0$17227) (if g$0$17227 (begin (quote #f) (append g$0$17225 g$0$17227)) (quote #f))) ((lambda (g$0$17229) (if (g$0$13212 g$0$17229) (begin (quote #f) ((lambda (g$0$17231) (if g$0$17231 (begin (quote #f) ((lambda (g$0$17233) (if g$0$17233 (begin (quote #f) (append g$0$17231 g$0$17233)) (quote #f))) ((lambda (g$0$17235) (if (equal? (g$0$13246 g$0$17235) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17229)))) (quote #f))) ((lambda (g$0$17237) (list g$0$17237)) (g$0$13220 g$0$17229)))) (quote #f))) (g$0$13224 g$0$17223)))) (quote #f))) ((lambda (g$0$17239) (list g$0$17239)) (g$0$13220 g$0$17223)))) (quote #f))) (g$0$13220 g$0$17217))) (if (g$0$13216 g$0$17217) (list (begin (quote pat*) (quote ())) (begin (quote tmp*) (quote ()))) (quote #f)))))) g$0$17215) (g$0$13224 g$0$17209)))) (quote #f))) ((letrec ((g$0$17241 (lambda (g$0$17243) (if (g$0$13212 g$0$17243) ((lambda (g$0$17245) (if g$0$17245 (begin (quote #f) ((lambda (g$0$17247) (if g$0$17247 (begin (quote #f) (map cons g$0$17245 g$0$17247)) (quote #f))) (g$0$17241 (g$0$13224 g$0$17243)))) (quote #f))) ((lambda (g$0$17249) (list g$0$17249)) (g$0$13220 g$0$17243))) (if (g$0$13216 g$0$17243) (list (begin (quote lits) (quote ()))) (quote #f)))))) g$0$17241) (g$0$13220 g$0$17209)))) (quote #f))) (g$0$13224 g$0$17203)))) (quote #f))) ((lambda (g$0$17251) (quote ())) (g$0$13220 g$0$17203)))) (quote #f))) g$0$17181))) g$0$17179))) (set! g$0$13551 ((lambda () ((lambda (g$0$17275 g$0$17277 g$0$17279 g$0$17281 g$0$17283 g$0$17285) (begin (set! g$0$17275 (lambda (g$0$17926 g$0$17927) (letrec ((g$0$17929 (lambda (g$0$17931) (if (null? g$0$17931) g$0$17927 (g$0$17277 (car g$0$17931) (g$0$17929 (cdr g$0$17931))))))) (g$0$17929 g$0$17926)))) (set! g$0$17277 (lambda (g$0$17820 g$0$17821) ((lambda (g$0$17823) ((lambda (g$0$17825) (if (if g$0$17825 (begin (quote #f) (apply (lambda (g$0$17905) (quote #t)) g$0$17825)) (quote #f)) (apply (lambda (g$0$17859) ((lambda (g$0$17861) ((lambda (g$0$17863) (if (if g$0$17863 (begin (quote #f) (apply (lambda (g$0$17885) (quote #t)) g$0$17863)) (quote #f)) (apply (lambda (g$0$17883) (list (g$0$13479 (quote quote)) (cons g$0$17883 g$0$17859))) g$0$17863) ((lambda (g$0$17865) ((lambda (g$0$17867) (if (if g$0$17867 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17867)) (quote #f)) (apply (lambda () ((lambda (g$0$17869) ((lambda (g$0$17871) (if (if g$0$17871 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17871)) (quote #f)) (apply (lambda () (list (g$0$13479 (quote list)) g$0$17820)) g$0$17871) ((lambda (g$0$17873) ((lambda (g$0$17875) (if (if g$0$17875 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17875)) (quote #f)) (apply (lambda () (list (g$0$13479 (quote cons)) g$0$17820 g$0$17821)) g$0$17875) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17873 (quote ()))))) ((lambda (g$0$17877) (quote ())) g$0$17873))) g$0$17869))) ((lambda (g$0$17879) (if (equal? (g$0$13246 g$0$17879) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$17869))) g$0$17859)) g$0$17867) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17865 (quote ()))))) ((lambda (g$0$17881) (quote ())) g$0$17865))) g$0$17861))) ((lambda (g$0$17887) (if (g$0$13212 g$0$17887) (begin (quote #f) ((lambda (g$0$17889) (if g$0$17889 (begin (quote #f) ((lambda (g$0$17891) (if g$0$17891 (begin (quote #f) (append g$0$17889 g$0$17891)) (quote #f))) ((lambda (g$0$17893) (if (g$0$13212 g$0$17893) (begin (quote #f) ((lambda (g$0$17895) (if g$0$17895 (begin (quote #f) ((lambda (g$0$17897) (if g$0$17897 (begin (quote #f) (append g$0$17895 g$0$17897)) (quote #f))) ((lambda (g$0$17899) (if (equal? (g$0$13246 g$0$17899) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17893)))) (quote #f))) ((lambda (g$0$17901) (list g$0$17901)) (g$0$13220 g$0$17893)))) (quote #f))) (g$0$13224 g$0$17887)))) (quote #f))) ((lambda (g$0$17903) (if (g$0$13226 g$0$17903) (if (g$0$13234 g$0$17903 (g$0$13479 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17887)))) (quote #f))) g$0$17861))) g$0$17820)) g$0$17825) ((lambda (g$0$17827) ((lambda (g$0$17829) (if (if g$0$17829 (begin (quote #f) (apply (lambda (g$0$17839) (quote #t)) g$0$17829)) (quote #f)) (apply (lambda (g$0$17837) (cons* (g$0$13479 (quote list)) g$0$17820 g$0$17837)) g$0$17829) ((lambda (g$0$17831) ((lambda (g$0$17833) (if (if g$0$17833 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17833)) (quote #f)) (apply (lambda () (list (g$0$13479 (quote cons)) g$0$17820 g$0$17821)) g$0$17833) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17831 (quote ()))))) ((lambda (g$0$17835) (quote ())) g$0$17831))) g$0$17827))) ((lambda (g$0$17841) (if (g$0$13212 g$0$17841) (begin (quote #f) ((lambda (g$0$17843) (if g$0$17843 (begin (quote #f) ((lambda (g$0$17845) (if g$0$17845 (begin (quote #f) (append g$0$17843 g$0$17845)) (quote #f))) ((letrec ((g$0$17847 (lambda (g$0$17849) (if (g$0$13212 g$0$17849) ((lambda (g$0$17851) (if g$0$17851 (begin (quote #f) ((lambda (g$0$17853) (if g$0$17853 (begin (quote #f) (map cons g$0$17851 g$0$17853)) (quote #f))) (g$0$17847 (g$0$13224 g$0$17849)))) (quote #f))) ((lambda (g$0$17855) (list g$0$17855)) (g$0$13220 g$0$17849))) (if (g$0$13216 g$0$17849) (list (begin (quote stuff) (quote ()))) (quote #f)))))) g$0$17847) (g$0$13224 g$0$17841)))) (quote #f))) ((lambda (g$0$17857) (if (g$0$13226 g$0$17857) (if (g$0$13234 g$0$17857 (g$0$13479 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17841)))) (quote #f))) g$0$17827))) g$0$17823))) ((lambda (g$0$17907) (if (g$0$13212 g$0$17907) (begin (quote #f) ((lambda (g$0$17909) (if g$0$17909 (begin (quote #f) ((lambda (g$0$17911) (if g$0$17911 (begin (quote #f) (append g$0$17909 g$0$17911)) (quote #f))) ((lambda (g$0$17913) (if (g$0$13212 g$0$17913) (begin (quote #f) ((lambda (g$0$17915) (if g$0$17915 (begin (quote #f) ((lambda (g$0$17917) (if g$0$17917 (begin (quote #f) (append g$0$17915 g$0$17917)) (quote #f))) ((lambda (g$0$17919) (if (equal? (g$0$13246 g$0$17919) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17913)))) (quote #f))) ((lambda (g$0$17921) (list g$0$17921)) (g$0$13220 g$0$17913)))) (quote #f))) (g$0$13224 g$0$17907)))) (quote #f))) ((lambda (g$0$17923) (if (g$0$13226 g$0$17923) (if (g$0$13234 g$0$17923 (g$0$13479 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17907)))) (quote #f))) g$0$17823))) g$0$17821))) (set! g$0$17279 (lambda (g$0$17754 g$0$17755) ((lambda (g$0$17757) (if (null? g$0$17757) (list (g$0$13479 (quote quote)) (quote ())) (if (null? (cdr g$0$17757)) (car g$0$17757) (cons* (g$0$13479 (quote append)) g$0$17757)))) (letrec ((g$0$17759 (lambda (g$0$17761) (if (null? g$0$17761) ((lambda (g$0$17791) ((lambda (g$0$17793) (if (if g$0$17793 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17793)) (quote #f)) (apply (lambda () (quote ())) g$0$17793) ((lambda (g$0$17795) ((lambda (g$0$17797) (if (if g$0$17797 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17797)) (quote #f)) (apply (lambda () (list g$0$17755)) g$0$17797) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17795 (quote ()))))) ((lambda (g$0$17799) (quote ())) g$0$17795))) g$0$17791))) ((lambda (g$0$17801) (if (g$0$13212 g$0$17801) (begin (quote #f) ((lambda (g$0$17803) (if g$0$17803 (begin (quote #f) ((lambda (g$0$17805) (if g$0$17805 (begin (quote #f) (append g$0$17803 g$0$17805)) (quote #f))) ((lambda (g$0$17807) (if (g$0$13212 g$0$17807) (begin (quote #f) ((lambda (g$0$17809) (if g$0$17809 (begin (quote #f) ((lambda (g$0$17811) (if g$0$17811 (begin (quote #f) (append g$0$17809 g$0$17811)) (quote #f))) ((lambda (g$0$17813) (if (equal? (g$0$13246 g$0$17813) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17807)))) (quote #f))) ((lambda (g$0$17815) (if (equal? (g$0$13246 g$0$17815) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13220 g$0$17807)))) (quote #f))) (g$0$13224 g$0$17801)))) (quote #f))) ((lambda (g$0$17817) (if (g$0$13226 g$0$17817) (if (g$0$13234 g$0$17817 (g$0$13479 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17801)))) (quote #f))) g$0$17791))) g$0$17755) ((lambda (g$0$17763) ((lambda (g$0$17765) (if (if g$0$17765 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17765)) (quote #f)) (apply (lambda () (g$0$17759 (cdr g$0$17761))) g$0$17765) ((lambda (g$0$17767) ((lambda (g$0$17769) (if (if g$0$17769 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17769)) (quote #f)) (apply (lambda () (cons (car g$0$17761) (g$0$17759 (cdr g$0$17761)))) g$0$17769) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17767 (quote ()))))) ((lambda (g$0$17771) (quote ())) g$0$17767))) g$0$17763))) ((lambda (g$0$17773) (if (g$0$13212 g$0$17773) (begin (quote #f) ((lambda (g$0$17775) (if g$0$17775 (begin (quote #f) ((lambda (g$0$17777) (if g$0$17777 (begin (quote #f) (append g$0$17775 g$0$17777)) (quote #f))) ((lambda (g$0$17779) (if (g$0$13212 g$0$17779) (begin (quote #f) ((lambda (g$0$17781) (if g$0$17781 (begin (quote #f) ((lambda (g$0$17783) (if g$0$17783 (begin (quote #f) (append g$0$17781 g$0$17783)) (quote #f))) ((lambda (g$0$17785) (if (equal? (g$0$13246 g$0$17785) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17779)))) (quote #f))) ((lambda (g$0$17787) (if (equal? (g$0$13246 g$0$17787) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13220 g$0$17779)))) (quote #f))) (g$0$13224 g$0$17773)))) (quote #f))) ((lambda (g$0$17789) (if (g$0$13226 g$0$17789) (if (g$0$13234 g$0$17789 (g$0$13479 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17773)))) (quote #f))) g$0$17763))) (car g$0$17761)))))) (g$0$17759 g$0$17754))))) (set! g$0$17281 (lambda (g$0$17593) ((lambda (g$0$17595) ((lambda (g$0$17597) ((lambda (g$0$17599) (if (if g$0$17599 (begin (quote #f) (apply (lambda (g$0$17725) (quote #t)) g$0$17599)) (quote #f)) (apply (lambda (g$0$17723) (list (g$0$13479 (quote quote)) (list->vector g$0$17723))) g$0$17599) ((lambda (g$0$17601) ((lambda (g$0$17603) (if (if g$0$17603 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17603)) (quote #f)) (apply (lambda () (letrec ((g$0$17605 (lambda (g$0$17608 g$0$17609) ((lambda (g$0$17611) ((lambda (g$0$17613) (if (if g$0$17613 (begin (quote #f) (apply (lambda (g$0$17691) (quote #t)) g$0$17613)) (quote #f)) (apply (lambda (g$0$17687) (g$0$17609 (map (lambda (g$0$17689) (list (g$0$13479 (quote quote)) g$0$17689)) g$0$17687))) g$0$17613) ((lambda (g$0$17615) ((lambda (g$0$17617) (if (if g$0$17617 (begin (quote #f) (apply (lambda (g$0$17667) (quote #t)) g$0$17617)) (quote #f)) (apply (lambda (g$0$17665) (g$0$17609 g$0$17665)) g$0$17617) ((lambda (g$0$17619) ((lambda (g$0$17621) (if (if g$0$17621 (begin (quote #f) (apply (lambda (g$0$17636 g$0$17637) (quote #t)) g$0$17621)) (quote #f)) (apply (lambda (g$0$17630 g$0$17631) (g$0$17605 g$0$17631 (lambda (g$0$17633) (g$0$17609 (cons g$0$17630 g$0$17633))))) g$0$17621) ((lambda (g$0$17623) ((lambda (g$0$17625) (if (if g$0$17625 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17625)) (quote #f)) (apply (lambda () (list (g$0$13479 (quote list->vector)) g$0$17595)) g$0$17625) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17623 (quote ()))))) ((lambda (g$0$17627) (quote ())) g$0$17623))) g$0$17619))) ((lambda (g$0$17639) (if (g$0$13212 g$0$17639) (begin (quote #f) ((lambda (g$0$17641) (if g$0$17641 (begin (quote #f) ((lambda (g$0$17643) (if g$0$17643 (begin (quote #f) (append g$0$17641 g$0$17643)) (quote #f))) ((lambda (g$0$17645) (if (g$0$13212 g$0$17645) (begin (quote #f) ((lambda (g$0$17647) (if g$0$17647 (begin (quote #f) ((lambda (g$0$17649) (if g$0$17649 (begin (quote #f) (append g$0$17647 g$0$17649)) (quote #f))) ((lambda (g$0$17651) (if (g$0$13212 g$0$17651) (begin (quote #f) ((lambda (g$0$17653) (if g$0$17653 (begin (quote #f) ((lambda (g$0$17655) (if g$0$17655 (begin (quote #f) (append g$0$17653 g$0$17655)) (quote #f))) ((lambda (g$0$17657) (if (equal? (g$0$13246 g$0$17657) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17651)))) (quote #f))) ((lambda (g$0$17659) (list g$0$17659)) (g$0$13220 g$0$17651)))) (quote #f))) (g$0$13224 g$0$17645)))) (quote #f))) ((lambda (g$0$17661) (list g$0$17661)) (g$0$13220 g$0$17645)))) (quote #f))) (g$0$13224 g$0$17639)))) (quote #f))) ((lambda (g$0$17663) (if (g$0$13226 g$0$17663) (if (g$0$13234 g$0$17663 (g$0$13479 (quote cons))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17639)))) (quote #f))) g$0$17619))) g$0$17615))) ((lambda (g$0$17669) (if (g$0$13212 g$0$17669) (begin (quote #f) ((lambda (g$0$17671) (if g$0$17671 (begin (quote #f) ((lambda (g$0$17673) (if g$0$17673 (begin (quote #f) (append g$0$17671 g$0$17673)) (quote #f))) ((letrec ((g$0$17675 (lambda (g$0$17677) (if (g$0$13212 g$0$17677) ((lambda (g$0$17679) (if g$0$17679 (begin (quote #f) ((lambda (g$0$17681) (if g$0$17681 (begin (quote #f) (map cons g$0$17679 g$0$17681)) (quote #f))) (g$0$17675 (g$0$13224 g$0$17677)))) (quote #f))) ((lambda (g$0$17683) (list g$0$17683)) (g$0$13220 g$0$17677))) (if (g$0$13216 g$0$17677) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17675) (g$0$13224 g$0$17669)))) (quote #f))) ((lambda (g$0$17685) (if (g$0$13226 g$0$17685) (if (g$0$13234 g$0$17685 (g$0$13479 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17669)))) (quote #f))) g$0$17615))) g$0$17611))) ((lambda (g$0$17693) (if (g$0$13212 g$0$17693) (begin (quote #f) ((lambda (g$0$17695) (if g$0$17695 (begin (quote #f) ((lambda (g$0$17697) (if g$0$17697 (begin (quote #f) (append g$0$17695 g$0$17697)) (quote #f))) ((lambda (g$0$17699) (if (g$0$13212 g$0$17699) (begin (quote #f) ((lambda (g$0$17701) (if g$0$17701 (begin (quote #f) ((lambda (g$0$17703) (if g$0$17703 (begin (quote #f) (append g$0$17701 g$0$17703)) (quote #f))) ((lambda (g$0$17705) (if (equal? (g$0$13246 g$0$17705) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17699)))) (quote #f))) ((letrec ((g$0$17707 (lambda (g$0$17709) (if (g$0$13212 g$0$17709) ((lambda (g$0$17711) (if g$0$17711 (begin (quote #f) ((lambda (g$0$17713) (if g$0$17713 (begin (quote #f) (map cons g$0$17711 g$0$17713)) (quote #f))) (g$0$17707 (g$0$13224 g$0$17709)))) (quote #f))) ((lambda (g$0$17715) (list g$0$17715)) (g$0$13220 g$0$17709))) (if (g$0$13216 g$0$17709) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17707) (g$0$13220 g$0$17699)))) (quote #f))) (g$0$13224 g$0$17693)))) (quote #f))) ((lambda (g$0$17717) (if (g$0$13226 g$0$17717) (if (g$0$13234 g$0$17717 (g$0$13479 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17693)))) (quote #f))) g$0$17611))) g$0$17608)))) (g$0$17605 g$0$17593 (lambda (g$0$17719) (cons* (g$0$13479 (quote vector)) g$0$17719))))) g$0$17603) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17601 (quote ()))))) ((lambda (g$0$17721) (quote ())) g$0$17601))) g$0$17597))) ((lambda (g$0$17727) (if (g$0$13212 g$0$17727) (begin (quote #f) ((lambda (g$0$17729) (if g$0$17729 (begin (quote #f) ((lambda (g$0$17731) (if g$0$17731 (begin (quote #f) (append g$0$17729 g$0$17731)) (quote #f))) ((lambda (g$0$17733) (if (g$0$13212 g$0$17733) (begin (quote #f) ((lambda (g$0$17735) (if g$0$17735 (begin (quote #f) ((lambda (g$0$17737) (if g$0$17737 (begin (quote #f) (append g$0$17735 g$0$17737)) (quote #f))) ((lambda (g$0$17739) (if (equal? (g$0$13246 g$0$17739) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17733)))) (quote #f))) ((letrec ((g$0$17741 (lambda (g$0$17743) (if (g$0$13212 g$0$17743) ((lambda (g$0$17745) (if g$0$17745 (begin (quote #f) ((lambda (g$0$17747) (if g$0$17747 (begin (quote #f) (map cons g$0$17745 g$0$17747)) (quote #f))) (g$0$17741 (g$0$13224 g$0$17743)))) (quote #f))) ((lambda (g$0$17749) (list g$0$17749)) (g$0$13220 g$0$17743))) (if (g$0$13216 g$0$17743) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17741) (g$0$13220 g$0$17733)))) (quote #f))) (g$0$13224 g$0$17727)))) (quote #f))) ((lambda (g$0$17751) (if (g$0$13226 g$0$17751) (if (g$0$13234 g$0$17751 (g$0$13479 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17727)))) (quote #f))) g$0$17597))) g$0$17595)) g$0$17593))) (set! g$0$17283 (lambda (g$0$17500 g$0$17501) ((lambda (g$0$17503) ((lambda (g$0$17505) (if (if g$0$17505 (begin (quote #f) (apply (lambda (g$0$17580 g$0$17581) (quote #t)) g$0$17505)) (quote #f)) (apply (lambda (g$0$17514 g$0$17515) ((lambda (g$0$17517) ((lambda (g$0$17519) (if (if g$0$17519 (begin (quote #f) (apply (lambda (g$0$17559) (quote #t)) g$0$17519)) (quote #f)) (apply (lambda (g$0$17557) (if (= g$0$17501 (quote 0)) (g$0$17275 g$0$17557 (g$0$17283 g$0$17515 g$0$17501)) (g$0$17277 (g$0$17277 (list (g$0$13479 (quote quote)) (quote unquote)) (g$0$17285 g$0$17557 (- g$0$17501 (quote 1)))) (g$0$17283 g$0$17515 g$0$17501)))) g$0$17519) ((lambda (g$0$17521) ((lambda (g$0$17523) (if (if g$0$17523 (begin (quote #f) (apply (lambda (g$0$17537) (quote #t)) g$0$17523)) (quote #f)) (apply (lambda (g$0$17535) (if (= g$0$17501 (quote 0)) (g$0$17279 g$0$17535 (g$0$17283 g$0$17515 g$0$17501)) (g$0$17277 (g$0$17277 (list (g$0$13479 (quote quote)) (quote unquote-splicing)) (g$0$17285 g$0$17535 (- g$0$17501 (quote 1)))) (g$0$17283 g$0$17515 g$0$17501)))) g$0$17523) ((lambda (g$0$17525) ((lambda (g$0$17527) (if (if g$0$17527 (begin (quote #f) (apply (lambda (g$0$17531) (quote #t)) g$0$17527)) (quote #f)) (apply (lambda (g$0$17529) (g$0$17277 (g$0$17285 g$0$17529 g$0$17501) (g$0$17283 g$0$17515 g$0$17501))) g$0$17527) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17525 (quote ()))))) ((lambda (g$0$17533) (list g$0$17533)) g$0$17525))) g$0$17521))) ((lambda (g$0$17539) (if (g$0$13212 g$0$17539) (begin (quote #f) ((lambda (g$0$17541) (if g$0$17541 (begin (quote #f) ((lambda (g$0$17543) (if g$0$17543 (begin (quote #f) (append g$0$17541 g$0$17543)) (quote #f))) ((letrec ((g$0$17545 (lambda (g$0$17547) (if (g$0$13212 g$0$17547) ((lambda (g$0$17549) (if g$0$17549 (begin (quote #f) ((lambda (g$0$17551) (if g$0$17551 (begin (quote #f) (map cons g$0$17549 g$0$17551)) (quote #f))) (g$0$17545 (g$0$13224 g$0$17547)))) (quote #f))) ((lambda (g$0$17553) (list g$0$17553)) (g$0$13220 g$0$17547))) (if (g$0$13216 g$0$17547) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$17545) (g$0$13224 g$0$17539)))) (quote #f))) ((lambda (g$0$17555) (if (g$0$13226 g$0$17555) (if (g$0$13234 g$0$17555 (g$0$13479 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17539)))) (quote #f))) g$0$17521))) g$0$17517))) ((lambda (g$0$17561) (if (g$0$13212 g$0$17561) (begin (quote #f) ((lambda (g$0$17563) (if g$0$17563 (begin (quote #f) ((lambda (g$0$17565) (if g$0$17565 (begin (quote #f) (append g$0$17563 g$0$17565)) (quote #f))) ((letrec ((g$0$17567 (lambda (g$0$17569) (if (g$0$13212 g$0$17569) ((lambda (g$0$17571) (if g$0$17571 (begin (quote #f) ((lambda (g$0$17573) (if g$0$17573 (begin (quote #f) (map cons g$0$17571 g$0$17573)) (quote #f))) (g$0$17567 (g$0$13224 g$0$17569)))) (quote #f))) ((lambda (g$0$17575) (list g$0$17575)) (g$0$13220 g$0$17569))) (if (g$0$13216 g$0$17569) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$17567) (g$0$13224 g$0$17561)))) (quote #f))) ((lambda (g$0$17577) (if (g$0$13226 g$0$17577) (if (g$0$13234 g$0$17577 (g$0$13479 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17561)))) (quote #f))) g$0$17517))) g$0$17514)) g$0$17505) ((lambda (g$0$17507) ((lambda (g$0$17509) (if (if g$0$17509 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17509)) (quote #f)) (apply (lambda () (list (g$0$13479 (quote quote)) (quote ()))) g$0$17509) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17507 (quote ()))))) ((lambda (g$0$17511) (if (equal? (g$0$13246 g$0$17511) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$17507))) g$0$17503))) ((lambda (g$0$17583) (if (g$0$13212 g$0$17583) (begin (quote #f) ((lambda (g$0$17585) (if g$0$17585 (begin (quote #f) ((lambda (g$0$17587) (if g$0$17587 (begin (quote #f) (append g$0$17585 g$0$17587)) (quote #f))) ((lambda (g$0$17589) (list g$0$17589)) (g$0$13224 g$0$17583)))) (quote #f))) ((lambda (g$0$17591) (list g$0$17591)) (g$0$13220 g$0$17583)))) (quote #f))) g$0$17503))) g$0$17500))) (set! g$0$17285 (lambda (g$0$17316 g$0$17317) ((lambda (g$0$17319) ((lambda (g$0$17321) (if (if g$0$17321 (begin (quote #f) (apply (lambda (g$0$17479) (quote #t)) g$0$17321)) (quote #f)) (apply (lambda (g$0$17477) (if (= g$0$17317 (quote 0)) g$0$17477 (g$0$17277 (list (g$0$13479 (quote quote)) (quote unquote)) (g$0$17285 (list g$0$17477) (- g$0$17317 (quote 1)))))) g$0$17321) ((lambda (g$0$17323) ((lambda (g$0$17325) (if (if g$0$17325 (begin (quote #f) (apply (lambda (g$0$17448 g$0$17449) (quote #t)) g$0$17325)) (quote #f)) (apply (lambda (g$0$17444 g$0$17445) (if (= g$0$17317 (quote 0)) (g$0$17275 g$0$17444 (g$0$17285 g$0$17445 g$0$17317)) (g$0$17277 (g$0$17277 (list (g$0$13479 (quote quote)) (quote unquote)) (g$0$17285 g$0$17444 (- g$0$17317 (quote 1)))) (g$0$17285 g$0$17445 g$0$17317)))) g$0$17325) ((lambda (g$0$17327) ((lambda (g$0$17329) (if (if g$0$17329 (begin (quote #f) (apply (lambda (g$0$17414 g$0$17415) (quote #t)) g$0$17329)) (quote #f)) (apply (lambda (g$0$17410 g$0$17411) (if (= g$0$17317 (quote 0)) (g$0$17279 g$0$17410 (g$0$17285 g$0$17411 g$0$17317)) (g$0$17277 (g$0$17277 (list (g$0$13479 (quote quote)) (quote unquote-splicing)) (g$0$17285 g$0$17410 (- g$0$17317 (quote 1)))) (g$0$17285 g$0$17411 g$0$17317)))) g$0$17329) ((lambda (g$0$17331) ((lambda (g$0$17333) (if (if g$0$17333 (begin (quote #f) (apply (lambda (g$0$17389) (quote #t)) g$0$17333)) (quote #f)) (apply (lambda (g$0$17387) (g$0$17277 (list (g$0$13479 (quote quote)) (quote quasiquote)) (g$0$17285 (list g$0$17387) (+ g$0$17317 (quote 1))))) g$0$17333) ((lambda (g$0$17335) ((lambda (g$0$17337) (if (if g$0$17337 (begin (quote #f) (apply (lambda (g$0$17374 g$0$17375) (quote #t)) g$0$17337)) (quote #f)) (apply (lambda (g$0$17370 g$0$17371) (g$0$17277 (g$0$17285 g$0$17370 g$0$17317) (g$0$17285 g$0$17371 g$0$17317))) g$0$17337) ((lambda (g$0$17339) ((lambda (g$0$17341) (if (if g$0$17341 (begin (quote #f) (apply (lambda (g$0$17355) (not (g$0$13178 g$0$17355))) g$0$17341)) (quote #f)) (apply (lambda (g$0$17353) (g$0$17281 (g$0$17283 g$0$17353 g$0$17317))) g$0$17341) ((lambda (g$0$17343) ((lambda (g$0$17345) (if (if g$0$17345 (begin (quote #f) (apply (lambda (g$0$17349) (quote #t)) g$0$17345)) (quote #f)) (apply (lambda (g$0$17347) (list (g$0$13479 (quote quote)) g$0$17347)) g$0$17345) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17343 (quote ()))))) ((lambda (g$0$17351) (list g$0$17351)) g$0$17343))) g$0$17339))) ((lambda (g$0$17357) (if (g$0$13214 g$0$17357) (begin (quote #f) ((letrec ((g$0$17359 (lambda (g$0$17361) (if (g$0$13212 g$0$17361) ((lambda (g$0$17363) (if g$0$17363 (begin (quote #f) ((lambda (g$0$17365) (if g$0$17365 (begin (quote #f) (map cons g$0$17363 g$0$17365)) (quote #f))) (g$0$17359 (g$0$13224 g$0$17361)))) (quote #f))) ((lambda (g$0$17367) (list g$0$17367)) (g$0$13220 g$0$17361))) (if (g$0$13216 g$0$17361) (list (begin (quote x) (quote ()))) (quote #f)))))) g$0$17359) (g$0$13210 g$0$17357))) (quote #f))) g$0$17339))) g$0$17335))) ((lambda (g$0$17377) (if (g$0$13212 g$0$17377) (begin (quote #f) ((lambda (g$0$17379) (if g$0$17379 (begin (quote #f) ((lambda (g$0$17381) (if g$0$17381 (begin (quote #f) (append g$0$17379 g$0$17381)) (quote #f))) ((lambda (g$0$17383) (list g$0$17383)) (g$0$13224 g$0$17377)))) (quote #f))) ((lambda (g$0$17385) (list g$0$17385)) (g$0$13220 g$0$17377)))) (quote #f))) g$0$17335))) g$0$17331))) ((lambda (g$0$17391) (if (g$0$13212 g$0$17391) (begin (quote #f) ((lambda (g$0$17393) (if g$0$17393 (begin (quote #f) ((lambda (g$0$17395) (if g$0$17395 (begin (quote #f) (append g$0$17393 g$0$17395)) (quote #f))) ((lambda (g$0$17397) (if (g$0$13212 g$0$17397) (begin (quote #f) ((lambda (g$0$17399) (if g$0$17399 (begin (quote #f) ((lambda (g$0$17401) (if g$0$17401 (begin (quote #f) (append g$0$17399 g$0$17401)) (quote #f))) ((lambda (g$0$17403) (if (equal? (g$0$13246 g$0$17403) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17397)))) (quote #f))) ((lambda (g$0$17405) (list g$0$17405)) (g$0$13220 g$0$17397)))) (quote #f))) (g$0$13224 g$0$17391)))) (quote #f))) ((lambda (g$0$17407) (if (g$0$13226 g$0$17407) (if (g$0$13234 g$0$17407 (g$0$13479 (quote quasiquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17391)))) (quote #f))) g$0$17331))) g$0$17327))) ((lambda (g$0$17417) (if (g$0$13212 g$0$17417) (begin (quote #f) ((lambda (g$0$17419) (if g$0$17419 (begin (quote #f) ((lambda (g$0$17421) (if g$0$17421 (begin (quote #f) (append g$0$17419 g$0$17421)) (quote #f))) ((lambda (g$0$17423) (list g$0$17423)) (g$0$13224 g$0$17417)))) (quote #f))) ((lambda (g$0$17425) (if (g$0$13212 g$0$17425) (begin (quote #f) ((lambda (g$0$17427) (if g$0$17427 (begin (quote #f) ((lambda (g$0$17429) (if g$0$17429 (begin (quote #f) (append g$0$17427 g$0$17429)) (quote #f))) ((letrec ((g$0$17431 (lambda (g$0$17433) (if (g$0$13212 g$0$17433) ((lambda (g$0$17435) (if g$0$17435 (begin (quote #f) ((lambda (g$0$17437) (if g$0$17437 (begin (quote #f) (map cons g$0$17435 g$0$17437)) (quote #f))) (g$0$17431 (g$0$13224 g$0$17433)))) (quote #f))) ((lambda (g$0$17439) (list g$0$17439)) (g$0$13220 g$0$17433))) (if (g$0$13216 g$0$17433) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$17431) (g$0$13224 g$0$17425)))) (quote #f))) ((lambda (g$0$17441) (if (g$0$13226 g$0$17441) (if (g$0$13234 g$0$17441 (g$0$13479 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17425)))) (quote #f))) (g$0$13220 g$0$17417)))) (quote #f))) g$0$17327))) g$0$17323))) ((lambda (g$0$17451) (if (g$0$13212 g$0$17451) (begin (quote #f) ((lambda (g$0$17453) (if g$0$17453 (begin (quote #f) ((lambda (g$0$17455) (if g$0$17455 (begin (quote #f) (append g$0$17453 g$0$17455)) (quote #f))) ((lambda (g$0$17457) (list g$0$17457)) (g$0$13224 g$0$17451)))) (quote #f))) ((lambda (g$0$17459) (if (g$0$13212 g$0$17459) (begin (quote #f) ((lambda (g$0$17461) (if g$0$17461 (begin (quote #f) ((lambda (g$0$17463) (if g$0$17463 (begin (quote #f) (append g$0$17461 g$0$17463)) (quote #f))) ((letrec ((g$0$17465 (lambda (g$0$17467) (if (g$0$13212 g$0$17467) ((lambda (g$0$17469) (if g$0$17469 (begin (quote #f) ((lambda (g$0$17471) (if g$0$17471 (begin (quote #f) (map cons g$0$17469 g$0$17471)) (quote #f))) (g$0$17465 (g$0$13224 g$0$17467)))) (quote #f))) ((lambda (g$0$17473) (list g$0$17473)) (g$0$13220 g$0$17467))) (if (g$0$13216 g$0$17467) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$17465) (g$0$13224 g$0$17459)))) (quote #f))) ((lambda (g$0$17475) (if (g$0$13226 g$0$17475) (if (g$0$13234 g$0$17475 (g$0$13479 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17459)))) (quote #f))) (g$0$13220 g$0$17451)))) (quote #f))) g$0$17323))) g$0$17319))) ((lambda (g$0$17481) (if (g$0$13212 g$0$17481) (begin (quote #f) ((lambda (g$0$17483) (if g$0$17483 (begin (quote #f) ((lambda (g$0$17485) (if g$0$17485 (begin (quote #f) (append g$0$17483 g$0$17485)) (quote #f))) ((lambda (g$0$17487) (if (g$0$13212 g$0$17487) (begin (quote #f) ((lambda (g$0$17489) (if g$0$17489 (begin (quote #f) ((lambda (g$0$17491) (if g$0$17491 (begin (quote #f) (append g$0$17489 g$0$17491)) (quote #f))) ((lambda (g$0$17493) (if (equal? (g$0$13246 g$0$17493) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17487)))) (quote #f))) ((lambda (g$0$17495) (list g$0$17495)) (g$0$13220 g$0$17487)))) (quote #f))) (g$0$13224 g$0$17481)))) (quote #f))) ((lambda (g$0$17497) (if (g$0$13226 g$0$17497) (if (g$0$13234 g$0$17497 (g$0$13479 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$17481)))) (quote #f))) g$0$17319))) g$0$17316))) (lambda (g$0$17287) ((lambda (g$0$17289) ((lambda (g$0$17291) (if (if g$0$17291 (begin (quote #f) (apply (lambda (g$0$17295) (quote #t)) g$0$17291)) (quote #f)) (apply (lambda (g$0$17293) (g$0$17285 g$0$17293 (quote 0))) g$0$17291) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17289 (quote ()))))) ((lambda (g$0$17297) (if (g$0$13212 g$0$17297) (begin (quote #f) ((lambda (g$0$17299) (if g$0$17299 (begin (quote #f) ((lambda (g$0$17301) (if g$0$17301 (begin (quote #f) (append g$0$17299 g$0$17301)) (quote #f))) ((lambda (g$0$17303) (if (g$0$13212 g$0$17303) (begin (quote #f) ((lambda (g$0$17305) (if g$0$17305 (begin (quote #f) ((lambda (g$0$17307) (if g$0$17307 (begin (quote #f) (append g$0$17305 g$0$17307)) (quote #f))) ((lambda (g$0$17309) (if (equal? (g$0$13246 g$0$17309) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17303)))) (quote #f))) ((lambda (g$0$17311) (list g$0$17311)) (g$0$13220 g$0$17303)))) (quote #f))) (g$0$13224 g$0$17297)))) (quote #f))) ((lambda (g$0$17313) (quote ())) (g$0$13220 g$0$17297)))) (quote #f))) g$0$17289))) g$0$17287)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$0$13553 ((lambda () ((lambda (g$0$17933) (begin (set! g$0$17933 (lambda (g$0$17970 g$0$17971) ((lambda (g$0$17973) ((lambda (g$0$17975) (if (if g$0$17975 (begin (quote #f) (apply (lambda (g$0$18165) (quote #t)) g$0$17975)) (quote #f)) (apply (lambda (g$0$18155) (if (= g$0$17971 (quote 0)) ((lambda (g$0$18163) (values (list g$0$18163) (list g$0$18155) g$0$18163)) (gensym)) (call-with-values (lambda () (g$0$17933 g$0$18155 (- g$0$17971 (quote 1)))) (lambda (g$0$18159 g$0$18160 g$0$18161) (values g$0$18159 g$0$18160 (list (quote unsyntax) g$0$18161)))))) g$0$17975) ((lambda (g$0$17977) ((lambda (g$0$17979) (if (if g$0$17979 (begin (quote #f) (apply (lambda () (= g$0$17971 (quote 0))) g$0$17979)) (quote #f)) (apply (lambda () (error (quote expander) (quote "incorrect use of unsyntax") (g$0$13244 g$0$17970 (quote ())))) g$0$17979) ((lambda (g$0$17981) ((lambda (g$0$17983) (if (if g$0$17983 (begin (quote #f) (apply (lambda (g$0$18124 g$0$18125) (quote #t)) g$0$17983)) (quote #f)) (apply (lambda (g$0$18106 g$0$18107) (call-with-values (lambda () (g$0$17933 g$0$18107 g$0$17971)) (lambda (g$0$18111 g$0$18112 g$0$18113) (if (= g$0$17971 (quote 0)) ((lambda (g$0$18121) (values (cons (cons g$0$18121 (quote (...))) g$0$18111) (cons g$0$18106 g$0$18112) (cons g$0$18121 (cons (quote ...) g$0$18113)))) (gensym)) (call-with-values (lambda () (g$0$17933 g$0$18106 (- g$0$17971 (quote 1)))) (lambda (g$0$18117 g$0$18118 g$0$18119) (values (append g$0$18117 g$0$18111) (append g$0$18118 g$0$18112) (cons (list (quote unsyntax-splicing) g$0$18119) g$0$18113)))))))) g$0$17983) ((lambda (g$0$17985) ((lambda (g$0$17987) (if (if g$0$17987 (begin (quote #f) (apply (lambda () (= g$0$17971 (quote 0))) g$0$17987)) (quote #f)) (apply (lambda () (error (quote expander) (quote "incorrect use of unsyntax-splicing") (g$0$13244 g$0$17970 (quote ())))) g$0$17987) ((lambda (g$0$17989) ((lambda (g$0$17991) (if (if g$0$17991 (begin (quote #f) (apply (lambda (g$0$18083) (quote #t)) g$0$17991)) (quote #f)) (apply (lambda (g$0$18075) (call-with-values (lambda () (g$0$17933 g$0$18075 (+ g$0$17971 (quote 1)))) (lambda (g$0$18079 g$0$18080 g$0$18081) (values g$0$18079 g$0$18080 (list (quote quasisyntax) g$0$18081))))) g$0$17991) ((lambda (g$0$17993) ((lambda (g$0$17995) (if (if g$0$17995 (begin (quote #f) (apply (lambda (g$0$18062 g$0$18063) (quote #t)) g$0$17995)) (quote #f)) (apply (lambda (g$0$18046 g$0$18047) (call-with-values (lambda () (g$0$17933 g$0$18046 g$0$17971)) (lambda (g$0$18054 g$0$18055 g$0$18056) (call-with-values (lambda () (g$0$17933 g$0$18047 g$0$17971)) (lambda (g$0$18057 g$0$18058 g$0$18059) (values (append g$0$18057 g$0$18054) (append g$0$18058 g$0$18055) (cons g$0$18056 g$0$18059))))))) g$0$17995) ((lambda (g$0$17997) ((lambda (g$0$17999) (if (if g$0$17999 (begin (quote #f) (apply (lambda (g$0$18031) (not (g$0$13178 g$0$17970))) g$0$17999)) (quote #f)) (apply (lambda (g$0$18007) (call-with-values (lambda () (letrec ((g$0$18009 (lambda (g$0$18011) (if (null? g$0$18011) (values (quote ()) (quote ()) (quote ())) (call-with-values (lambda () (g$0$17933 (car g$0$18011) g$0$17971)) (lambda (g$0$18015 g$0$18016 g$0$18017) (call-with-values (lambda () (g$0$18009 (cdr g$0$18011))) (lambda (g$0$18021 g$0$18022 g$0$18023) (values (append g$0$18015 g$0$18021) (append g$0$18016 g$0$18022) (cons g$0$18017 g$0$18023)))))))))) (g$0$18009 g$0$18007))) (lambda (g$0$18027 g$0$18028 g$0$18029) (values g$0$18027 g$0$18028 (list->vector g$0$18029))))) g$0$17999) ((lambda (g$0$18001) ((lambda (g$0$18003) (if (if g$0$18003 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18003)) (quote #f)) (apply (lambda () (values (quote ()) (quote ()) g$0$17970)) g$0$18003) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$18001 (quote ()))))) ((lambda (g$0$18005) (quote ())) g$0$18001))) g$0$17997))) ((lambda (g$0$18033) (if (g$0$13214 g$0$18033) (begin (quote #f) ((letrec ((g$0$18035 (lambda (g$0$18037) (if (g$0$13212 g$0$18037) ((lambda (g$0$18039) (if g$0$18039 (begin (quote #f) ((lambda (g$0$18041) (if g$0$18041 (begin (quote #f) (map cons g$0$18039 g$0$18041)) (quote #f))) (g$0$18035 (g$0$13224 g$0$18037)))) (quote #f))) ((lambda (g$0$18043) (list g$0$18043)) (g$0$13220 g$0$18037))) (if (g$0$13216 g$0$18037) (list (begin (quote x) (quote ()))) (quote #f)))))) g$0$18035) (g$0$13210 g$0$18033))) (quote #f))) g$0$17997))) g$0$17993))) ((lambda (g$0$18065) (if (g$0$13212 g$0$18065) (begin (quote #f) ((lambda (g$0$18067) (if g$0$18067 (begin (quote #f) ((lambda (g$0$18069) (if g$0$18069 (begin (quote #f) (append g$0$18067 g$0$18069)) (quote #f))) ((lambda (g$0$18071) (list g$0$18071)) (g$0$13224 g$0$18065)))) (quote #f))) ((lambda (g$0$18073) (list g$0$18073)) (g$0$13220 g$0$18065)))) (quote #f))) g$0$17993))) g$0$17989))) ((lambda (g$0$18085) (if (g$0$13212 g$0$18085) (begin (quote #f) ((lambda (g$0$18087) (if g$0$18087 (begin (quote #f) ((lambda (g$0$18089) (if g$0$18089 (begin (quote #f) (append g$0$18087 g$0$18089)) (quote #f))) ((lambda (g$0$18091) (if (g$0$13212 g$0$18091) (begin (quote #f) ((lambda (g$0$18093) (if g$0$18093 (begin (quote #f) ((lambda (g$0$18095) (if g$0$18095 (begin (quote #f) (append g$0$18093 g$0$18095)) (quote #f))) ((lambda (g$0$18097) (if (equal? (g$0$13246 g$0$18097) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18091)))) (quote #f))) ((lambda (g$0$18099) (list g$0$18099)) (g$0$13220 g$0$18091)))) (quote #f))) (g$0$13224 g$0$18085)))) (quote #f))) ((lambda (g$0$18101) (if (g$0$13226 g$0$18101) (if (g$0$13234 g$0$18101 (g$0$13479 (quote quasisyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$18085)))) (quote #f))) g$0$17989))) g$0$17985))) ((lambda (g$0$18103) (if (g$0$13226 g$0$18103) (if (g$0$13234 g$0$18103 (g$0$13479 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) g$0$17985))) g$0$17981))) ((lambda (g$0$18127) (if (g$0$13212 g$0$18127) (begin (quote #f) ((lambda (g$0$18129) (if g$0$18129 (begin (quote #f) ((lambda (g$0$18131) (if g$0$18131 (begin (quote #f) (append g$0$18129 g$0$18131)) (quote #f))) ((lambda (g$0$18133) (list g$0$18133)) (g$0$13224 g$0$18127)))) (quote #f))) ((lambda (g$0$18135) (if (g$0$13212 g$0$18135) (begin (quote #f) ((lambda (g$0$18137) (if g$0$18137 (begin (quote #f) ((lambda (g$0$18139) (if g$0$18139 (begin (quote #f) (append g$0$18137 g$0$18139)) (quote #f))) ((lambda (g$0$18141) (if (g$0$13212 g$0$18141) (begin (quote #f) ((lambda (g$0$18143) (if g$0$18143 (begin (quote #f) ((lambda (g$0$18145) (if g$0$18145 (begin (quote #f) (append g$0$18143 g$0$18145)) (quote #f))) ((lambda (g$0$18147) (if (equal? (g$0$13246 g$0$18147) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18141)))) (quote #f))) ((lambda (g$0$18149) (list g$0$18149)) (g$0$13220 g$0$18141)))) (quote #f))) (g$0$13224 g$0$18135)))) (quote #f))) ((lambda (g$0$18151) (if (g$0$13226 g$0$18151) (if (g$0$13234 g$0$18151 (g$0$13479 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$18135)))) (quote #f))) (g$0$13220 g$0$18127)))) (quote #f))) g$0$17981))) g$0$17977))) ((lambda (g$0$18153) (if (g$0$13226 g$0$18153) (if (g$0$13234 g$0$18153 (g$0$13479 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) g$0$17977))) g$0$17973))) ((lambda (g$0$18167) (if (g$0$13212 g$0$18167) (begin (quote #f) ((lambda (g$0$18169) (if g$0$18169 (begin (quote #f) ((lambda (g$0$18171) (if g$0$18171 (begin (quote #f) (append g$0$18169 g$0$18171)) (quote #f))) ((lambda (g$0$18173) (if (g$0$13212 g$0$18173) (begin (quote #f) ((lambda (g$0$18175) (if g$0$18175 (begin (quote #f) ((lambda (g$0$18177) (if g$0$18177 (begin (quote #f) (append g$0$18175 g$0$18177)) (quote #f))) ((lambda (g$0$18179) (if (equal? (g$0$13246 g$0$18179) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18173)))) (quote #f))) ((lambda (g$0$18181) (list g$0$18181)) (g$0$13220 g$0$18173)))) (quote #f))) (g$0$13224 g$0$18167)))) (quote #f))) ((lambda (g$0$18183) (if (g$0$13226 g$0$18183) (if (g$0$13234 g$0$18183 (g$0$13479 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$18167)))) (quote #f))) g$0$17973))) g$0$17970))) (lambda (g$0$17935) ((lambda (g$0$17937) ((lambda (g$0$17939) (if (if g$0$17939 (begin (quote #f) (apply (lambda (g$0$17949) (quote #t)) g$0$17939)) (quote #f)) (apply (lambda (g$0$17941) (call-with-values (lambda () (g$0$17933 g$0$17941 (quote 0))) (lambda (g$0$17945 g$0$17946 g$0$17947) (g$0$13513 (list (quote syntax-case) (cons (quote list) g$0$17946) (quote ()) (list g$0$17945 (list (quote syntax) g$0$17947))))))) g$0$17939) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$17937 (quote ()))))) ((lambda (g$0$17951) (if (g$0$13212 g$0$17951) (begin (quote #f) ((lambda (g$0$17953) (if g$0$17953 (begin (quote #f) ((lambda (g$0$17955) (if g$0$17955 (begin (quote #f) (append g$0$17953 g$0$17955)) (quote #f))) ((lambda (g$0$17957) (if (g$0$13212 g$0$17957) (begin (quote #f) ((lambda (g$0$17959) (if g$0$17959 (begin (quote #f) ((lambda (g$0$17961) (if g$0$17961 (begin (quote #f) (append g$0$17959 g$0$17961)) (quote #f))) ((lambda (g$0$17963) (if (equal? (g$0$13246 g$0$17963) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$17957)))) (quote #f))) ((lambda (g$0$17965) (list g$0$17965)) (g$0$13220 g$0$17957)))) (quote #f))) (g$0$13224 g$0$17951)))) (quote #f))) ((lambda (g$0$17967) (quote ())) (g$0$13220 g$0$17951)))) (quote #f))) g$0$17937))) g$0$17935)))) (quote #f))))) (set! g$0$13555 (lambda (g$0$18185) (error (quote expander) (quote "define-struct not supported") (g$0$13244 g$0$18185 (quote ()))))) (set! g$0$13557 (lambda (g$0$18187) ((lambda (g$0$18189 g$0$18191 g$0$18193 g$0$18195 g$0$18197 g$0$18199 g$0$18201 g$0$18203 g$0$18205 g$0$18207 g$0$18209 g$0$18211 g$0$18213 g$0$18215) (begin (set! g$0$18189 (lambda (g$0$19281 . g$0$19279) (g$0$13706 g$0$19281 (string->symbol (apply string-append (map (lambda (g$0$19283) (if (symbol? g$0$19283) (symbol->string g$0$19283) (if (string? g$0$19283) g$0$19283 (error (quote define-record-type) (quote "BUG"))))) g$0$19279)))))) (set! g$0$18191 (lambda (g$0$19225) ((lambda (g$0$19227) ((lambda (g$0$19229) (if (if g$0$19229 (begin (quote #f) (apply (lambda (g$0$19249 g$0$19250 g$0$19251) (quote #t)) g$0$19229)) (quote #f)) (apply (lambda (g$0$19243 g$0$19244 g$0$19245) g$0$19243) g$0$19229) ((lambda (g$0$19231) ((lambda (g$0$19233) (if (if g$0$19233 (begin (quote #f) (apply (lambda (g$0$19237) (quote #t)) g$0$19233)) (quote #f)) (apply (lambda (g$0$19235) g$0$19235) g$0$19233) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$19231 (quote ()))))) ((lambda (g$0$19239) (list g$0$19239)) g$0$19231))) g$0$19227))) ((lambda (g$0$19253) (if (g$0$13212 g$0$19253) (begin (quote #f) ((lambda (g$0$19255) (if g$0$19255 (begin (quote #f) ((lambda (g$0$19257) (if g$0$19257 (begin (quote #f) (append g$0$19255 g$0$19257)) (quote #f))) ((lambda (g$0$19259) (if (g$0$13212 g$0$19259) (begin (quote #f) ((lambda (g$0$19261) (if g$0$19261 (begin (quote #f) ((lambda (g$0$19263) (if g$0$19263 (begin (quote #f) (append g$0$19261 g$0$19263)) (quote #f))) ((lambda (g$0$19265) (if (g$0$13212 g$0$19265) (begin (quote #f) ((lambda (g$0$19267) (if g$0$19267 (begin (quote #f) ((lambda (g$0$19269) (if g$0$19269 (begin (quote #f) (append g$0$19267 g$0$19269)) (quote #f))) ((lambda (g$0$19271) (if (equal? (g$0$13246 g$0$19271) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$19265)))) (quote #f))) ((lambda (g$0$19273) (list g$0$19273)) (g$0$13220 g$0$19265)))) (quote #f))) (g$0$13224 g$0$19259)))) (quote #f))) ((lambda (g$0$19275) (list g$0$19275)) (g$0$13220 g$0$19259)))) (quote #f))) (g$0$13224 g$0$19253)))) (quote #f))) ((lambda (g$0$19277) (list g$0$19277)) (g$0$13220 g$0$19253)))) (quote #f))) g$0$19227))) g$0$19225))) (set! g$0$18193 (lambda (g$0$19170 g$0$19171) ((lambda (g$0$19173) ((lambda (g$0$19175) (if (if g$0$19175 (begin (quote #f) (apply (lambda (g$0$19195 g$0$19196 g$0$19197) (quote #t)) g$0$19175)) (quote #f)) (apply (lambda (g$0$19189 g$0$19190 g$0$19191) g$0$19190) g$0$19175) ((lambda (g$0$19177) ((lambda (g$0$19179) (if (if g$0$19179 (begin (quote #f) (apply (lambda (g$0$19183) (quote #t)) g$0$19179)) (quote #f)) (apply (lambda (g$0$19181) (g$0$18189 g$0$19171 (quote "make-") (g$0$13246 g$0$19181))) g$0$19179) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$19177 (quote ()))))) ((lambda (g$0$19185) (list g$0$19185)) g$0$19177))) g$0$19173))) ((lambda (g$0$19199) (if (g$0$13212 g$0$19199) (begin (quote #f) ((lambda (g$0$19201) (if g$0$19201 (begin (quote #f) ((lambda (g$0$19203) (if g$0$19203 (begin (quote #f) (append g$0$19201 g$0$19203)) (quote #f))) ((lambda (g$0$19205) (if (g$0$13212 g$0$19205) (begin (quote #f) ((lambda (g$0$19207) (if g$0$19207 (begin (quote #f) ((lambda (g$0$19209) (if g$0$19209 (begin (quote #f) (append g$0$19207 g$0$19209)) (quote #f))) ((lambda (g$0$19211) (if (g$0$13212 g$0$19211) (begin (quote #f) ((lambda (g$0$19213) (if g$0$19213 (begin (quote #f) ((lambda (g$0$19215) (if g$0$19215 (begin (quote #f) (append g$0$19213 g$0$19215)) (quote #f))) ((lambda (g$0$19217) (if (equal? (g$0$13246 g$0$19217) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$19211)))) (quote #f))) ((lambda (g$0$19219) (list g$0$19219)) (g$0$13220 g$0$19211)))) (quote #f))) (g$0$13224 g$0$19205)))) (quote #f))) ((lambda (g$0$19221) (list g$0$19221)) (g$0$13220 g$0$19205)))) (quote #f))) (g$0$13224 g$0$19199)))) (quote #f))) ((lambda (g$0$19223) (list g$0$19223)) (g$0$13220 g$0$19199)))) (quote #f))) g$0$19173))) g$0$19170))) (set! g$0$18195 (lambda (g$0$19114 g$0$19115) ((lambda (g$0$19117) ((lambda (g$0$19119) (if (if g$0$19119 (begin (quote #f) (apply (lambda (g$0$19139 g$0$19140 g$0$19141) (quote #t)) g$0$19119)) (quote #f)) (apply (lambda (g$0$19133 g$0$19134 g$0$19135) g$0$19135) g$0$19119) ((lambda (g$0$19121) ((lambda (g$0$19123) (if (if g$0$19123 (begin (quote #f) (apply (lambda (g$0$19127) (quote #t)) g$0$19123)) (quote #f)) (apply (lambda (g$0$19125) (g$0$18189 g$0$19115 (g$0$13246 g$0$19125) (quote "?"))) g$0$19123) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$19121 (quote ()))))) ((lambda (g$0$19129) (list g$0$19129)) g$0$19121))) g$0$19117))) ((lambda (g$0$19143) (if (g$0$13212 g$0$19143) (begin (quote #f) ((lambda (g$0$19145) (if g$0$19145 (begin (quote #f) ((lambda (g$0$19147) (if g$0$19147 (begin (quote #f) (append g$0$19145 g$0$19147)) (quote #f))) ((lambda (g$0$19149) (if (g$0$13212 g$0$19149) (begin (quote #f) ((lambda (g$0$19151) (if g$0$19151 (begin (quote #f) ((lambda (g$0$19153) (if g$0$19153 (begin (quote #f) (append g$0$19151 g$0$19153)) (quote #f))) ((lambda (g$0$19155) (if (g$0$13212 g$0$19155) (begin (quote #f) ((lambda (g$0$19157) (if g$0$19157 (begin (quote #f) ((lambda (g$0$19159) (if g$0$19159 (begin (quote #f) (append g$0$19157 g$0$19159)) (quote #f))) ((lambda (g$0$19161) (if (equal? (g$0$13246 g$0$19161) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$19155)))) (quote #f))) ((lambda (g$0$19163) (list g$0$19163)) (g$0$13220 g$0$19155)))) (quote #f))) (g$0$13224 g$0$19149)))) (quote #f))) ((lambda (g$0$19165) (list g$0$19165)) (g$0$13220 g$0$19149)))) (quote #f))) (g$0$13224 g$0$19143)))) (quote #f))) ((lambda (g$0$19167) (list g$0$19167)) (g$0$13220 g$0$19143)))) (quote #f))) g$0$19117))) g$0$19114))) (set! g$0$18197 (lambda (g$0$19070 g$0$19071) ((lambda (g$0$19073) ((lambda (g$0$19075) (if (if g$0$19075 (begin (quote #f) (apply (lambda () (quote #t)) g$0$19075)) (quote #f)) (apply (lambda () (quote #f)) g$0$19075) ((lambda (g$0$19077) ((lambda (g$0$19079) (if (if g$0$19079 (begin (quote #f) (apply (lambda (g$0$19089 g$0$19090 g$0$19091) (quote #t)) g$0$19079)) (quote #f)) (apply (lambda (g$0$19083 g$0$19084 g$0$19085) (if (g$0$13234 (g$0$13513 g$0$19070) g$0$19083) (cons g$0$19083 g$0$19084) (g$0$18197 g$0$19070 g$0$19085))) g$0$19079) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$19077 (quote ()))))) ((lambda (g$0$19093) (if (g$0$13212 g$0$19093) (begin (quote #f) ((lambda (g$0$19095) (if g$0$19095 (begin (quote #f) ((lambda (g$0$19097) (if g$0$19097 (begin (quote #f) (append g$0$19095 g$0$19097)) (quote #f))) ((lambda (g$0$19099) (list g$0$19099)) (g$0$13224 g$0$19093)))) (quote #f))) ((lambda (g$0$19101) (if (g$0$13212 g$0$19101) (begin (quote #f) ((lambda (g$0$19103) (if g$0$19103 (begin (quote #f) ((lambda (g$0$19105) (if g$0$19105 (begin (quote #f) (append g$0$19103 g$0$19105)) (quote #f))) ((lambda (g$0$19107) (list g$0$19107)) (g$0$13224 g$0$19101)))) (quote #f))) ((lambda (g$0$19109) (list g$0$19109)) (g$0$13220 g$0$19101)))) (quote #f))) (g$0$13220 g$0$19093)))) (quote #f))) g$0$19077))) g$0$19073))) ((lambda (g$0$19111) (if (equal? (g$0$13246 g$0$19111) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$19073))) g$0$19071))) (set! g$0$18199 (lambda (g$0$18813 g$0$18814 g$0$18815) ((lambda (g$0$18817) (begin (set! g$0$18817 (lambda (g$0$18995) (list->vector (map (lambda (g$0$18997) ((lambda (g$0$18999) ((lambda (g$0$19001) (if (if g$0$19001 (begin (quote #f) (apply (lambda (g$0$19048 g$0$19049) (quote #t)) g$0$19001)) (quote #f)) (apply (lambda (g$0$19044 g$0$19045) (list (quote mutable) g$0$19044)) g$0$19001) ((lambda (g$0$19003) ((lambda (g$0$19005) (if (if g$0$19005 (begin (quote #f) (apply (lambda (g$0$19022 g$0$19023) (quote #t)) g$0$19005)) (quote #f)) (apply (lambda (g$0$19018 g$0$19019) (list (quote immutable) g$0$19018)) g$0$19005) ((lambda (g$0$19007) ((lambda (g$0$19009) (if (if g$0$19009 (begin (quote #f) (apply (lambda (g$0$19013) (quote #t)) g$0$19009)) (quote #f)) (apply (lambda (g$0$19011) (list (quote immutable) g$0$19011)) g$0$19009) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$19007 (quote ()))))) ((lambda (g$0$19015) (list g$0$19015)) g$0$19007))) g$0$19003))) ((lambda (g$0$19025) (if (g$0$13212 g$0$19025) (begin (quote #f) ((lambda (g$0$19027) (if g$0$19027 (begin (quote #f) ((lambda (g$0$19029) (if g$0$19029 (begin (quote #f) (append g$0$19027 g$0$19029)) (quote #f))) ((lambda (g$0$19031) (if (g$0$13212 g$0$19031) (begin (quote #f) ((lambda (g$0$19033) (if g$0$19033 (begin (quote #f) ((lambda (g$0$19035) (if g$0$19035 (begin (quote #f) (append g$0$19033 g$0$19035)) (quote #f))) ((lambda (g$0$19037) (list g$0$19037)) (g$0$13224 g$0$19031)))) (quote #f))) ((lambda (g$0$19039) (list g$0$19039)) (g$0$13220 g$0$19031)))) (quote #f))) (g$0$13224 g$0$19025)))) (quote #f))) ((lambda (g$0$19041) (if (g$0$13226 g$0$19041) (if (g$0$13234 g$0$19041 (g$0$13479 (quote immutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$19025)))) (quote #f))) g$0$19003))) g$0$18999))) ((lambda (g$0$19051) (if (g$0$13212 g$0$19051) (begin (quote #f) ((lambda (g$0$19053) (if g$0$19053 (begin (quote #f) ((lambda (g$0$19055) (if g$0$19055 (begin (quote #f) (append g$0$19053 g$0$19055)) (quote #f))) ((lambda (g$0$19057) (if (g$0$13212 g$0$19057) (begin (quote #f) ((lambda (g$0$19059) (if g$0$19059 (begin (quote #f) ((lambda (g$0$19061) (if g$0$19061 (begin (quote #f) (append g$0$19059 g$0$19061)) (quote #f))) ((lambda (g$0$19063) (list g$0$19063)) (g$0$13224 g$0$19057)))) (quote #f))) ((lambda (g$0$19065) (list g$0$19065)) (g$0$13220 g$0$19057)))) (quote #f))) (g$0$13224 g$0$19051)))) (quote #f))) ((lambda (g$0$19067) (if (g$0$13226 g$0$19067) (if (g$0$13234 g$0$19067 (g$0$13479 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$19051)))) (quote #f))) g$0$18999))) g$0$18997)) g$0$18995)))) ((lambda (g$0$18823 g$0$18824 g$0$18825 g$0$18826 g$0$18827) (g$0$13513 (list (quote make-record-type-descriptor) (list (quote quote) g$0$18814) g$0$18823 g$0$18824 g$0$18825 g$0$18826 g$0$18827))) ((lambda (g$0$18829) ((lambda (g$0$18831) (if (if g$0$18831 (begin (quote #f) (apply (lambda (g$0$18841) (quote #t)) g$0$18831)) (quote #f)) (apply (lambda (g$0$18839) (list (quote record-type-descriptor) g$0$18839)) g$0$18831) ((lambda (g$0$18833) ((lambda (g$0$18835) (if (if g$0$18835 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18835)) (quote #f)) (apply (lambda () (quote #f)) g$0$18835) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$18833 (quote ()))))) ((lambda (g$0$18837) (quote ())) g$0$18833))) g$0$18829))) ((lambda (g$0$18843) (if (g$0$13212 g$0$18843) (begin (quote #f) ((lambda (g$0$18845) (if g$0$18845 (begin (quote #f) ((lambda (g$0$18847) (if g$0$18847 (begin (quote #f) (append g$0$18845 g$0$18847)) (quote #f))) ((lambda (g$0$18849) (if (g$0$13212 g$0$18849) (begin (quote #f) ((lambda (g$0$18851) (if g$0$18851 (begin (quote #f) ((lambda (g$0$18853) (if g$0$18853 (begin (quote #f) (append g$0$18851 g$0$18853)) (quote #f))) ((lambda (g$0$18855) (if (equal? (g$0$13246 g$0$18855) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18849)))) (quote #f))) ((lambda (g$0$18857) (list g$0$18857)) (g$0$13220 g$0$18849)))) (quote #f))) (g$0$13224 g$0$18843)))) (quote #f))) ((lambda (g$0$18859) (quote ())) (g$0$13220 g$0$18843)))) (quote #f))) g$0$18829))) (g$0$18197 (quote parent) g$0$18815)) ((lambda (g$0$18861) ((lambda (g$0$18863) (if (if g$0$18863 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18863)) (quote #f)) (apply (lambda () (list (quote quote) (gensym))) g$0$18863) ((lambda (g$0$18865) ((lambda (g$0$18867) (if (if g$0$18867 (begin (quote #f) (apply (lambda (g$0$18877) (quote #t)) g$0$18867)) (quote #f)) (apply (lambda (g$0$18875) (list (quote quote) g$0$18875)) g$0$18867) ((lambda (g$0$18869) ((lambda (g$0$18871) (if (if g$0$18871 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18871)) (quote #f)) (apply (lambda () (quote #f)) g$0$18871) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$18869 (quote ()))))) ((lambda (g$0$18873) (quote ())) g$0$18869))) g$0$18865))) ((lambda (g$0$18879) (if (g$0$13212 g$0$18879) (begin (quote #f) ((lambda (g$0$18881) (if g$0$18881 (begin (quote #f) ((lambda (g$0$18883) (if g$0$18883 (begin (quote #f) (append g$0$18881 g$0$18883)) (quote #f))) ((lambda (g$0$18885) (if (g$0$13212 g$0$18885) (begin (quote #f) ((lambda (g$0$18887) (if g$0$18887 (begin (quote #f) ((lambda (g$0$18889) (if g$0$18889 (begin (quote #f) (append g$0$18887 g$0$18889)) (quote #f))) ((lambda (g$0$18891) (if (equal? (g$0$13246 g$0$18891) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18885)))) (quote #f))) ((lambda (g$0$18893) (list g$0$18893)) (g$0$13220 g$0$18885)))) (quote #f))) (g$0$13224 g$0$18879)))) (quote #f))) ((lambda (g$0$18895) (quote ())) (g$0$13220 g$0$18879)))) (quote #f))) g$0$18865))) g$0$18861))) ((lambda (g$0$18897) (if (g$0$13212 g$0$18897) (begin (quote #f) ((lambda (g$0$18899) (if g$0$18899 (begin (quote #f) ((lambda (g$0$18901) (if g$0$18901 (begin (quote #f) (append g$0$18899 g$0$18901)) (quote #f))) ((lambda (g$0$18903) (if (equal? (g$0$13246 g$0$18903) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18897)))) (quote #f))) ((lambda (g$0$18905) (quote ())) (g$0$13220 g$0$18897)))) (quote #f))) g$0$18861))) (g$0$18197 (quote nongenerative) g$0$18815)) ((lambda (g$0$18907) ((lambda (g$0$18909) (if (if g$0$18909 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18909)) (quote #f)) (apply (lambda () (quote #t)) g$0$18909) ((lambda (g$0$18911) ((lambda (g$0$18913) (if (if g$0$18913 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18913)) (quote #f)) (apply (lambda () (quote #f)) g$0$18913) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$18911 (quote ()))))) ((lambda (g$0$18915) (quote ())) g$0$18911))) g$0$18907))) ((lambda (g$0$18917) (if (g$0$13212 g$0$18917) (begin (quote #f) ((lambda (g$0$18919) (if g$0$18919 (begin (quote #f) ((lambda (g$0$18921) (if g$0$18921 (begin (quote #f) (append g$0$18919 g$0$18921)) (quote #f))) ((lambda (g$0$18923) (if (g$0$13212 g$0$18923) (begin (quote #f) ((lambda (g$0$18925) (if g$0$18925 (begin (quote #f) ((lambda (g$0$18927) (if g$0$18927 (begin (quote #f) (append g$0$18925 g$0$18927)) (quote #f))) ((lambda (g$0$18929) (if (equal? (g$0$13246 g$0$18929) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18923)))) (quote #f))) ((lambda (g$0$18931) (if (equal? (g$0$13246 g$0$18931) (quote #t)) (begin (quote #f) (quote ())) (quote #f))) (g$0$13220 g$0$18923)))) (quote #f))) (g$0$13224 g$0$18917)))) (quote #f))) ((lambda (g$0$18933) (quote ())) (g$0$13220 g$0$18917)))) (quote #f))) g$0$18907))) (g$0$18197 (quote sealed?) g$0$18815)) ((lambda (g$0$18935) ((lambda (g$0$18937) (if (if g$0$18937 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18937)) (quote #f)) (apply (lambda () (quote #t)) g$0$18937) ((lambda (g$0$18939) ((lambda (g$0$18941) (if (if g$0$18941 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18941)) (quote #f)) (apply (lambda () (quote #f)) g$0$18941) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$18939 (quote ()))))) ((lambda (g$0$18943) (quote ())) g$0$18939))) g$0$18935))) ((lambda (g$0$18945) (if (g$0$13212 g$0$18945) (begin (quote #f) ((lambda (g$0$18947) (if g$0$18947 (begin (quote #f) ((lambda (g$0$18949) (if g$0$18949 (begin (quote #f) (append g$0$18947 g$0$18949)) (quote #f))) ((lambda (g$0$18951) (if (g$0$13212 g$0$18951) (begin (quote #f) ((lambda (g$0$18953) (if g$0$18953 (begin (quote #f) ((lambda (g$0$18955) (if g$0$18955 (begin (quote #f) (append g$0$18953 g$0$18955)) (quote #f))) ((lambda (g$0$18957) (if (equal? (g$0$13246 g$0$18957) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18951)))) (quote #f))) ((lambda (g$0$18959) (if (equal? (g$0$13246 g$0$18959) (quote #t)) (begin (quote #f) (quote ())) (quote #f))) (g$0$13220 g$0$18951)))) (quote #f))) (g$0$13224 g$0$18945)))) (quote #f))) ((lambda (g$0$18961) (quote ())) (g$0$13220 g$0$18945)))) (quote #f))) g$0$18935))) (g$0$18197 (quote opaque?) g$0$18815)) ((lambda (g$0$18963) ((lambda (g$0$18965) (if (if g$0$18965 (begin (quote #f) (apply (lambda (g$0$18975) (quote #t)) g$0$18965)) (quote #f)) (apply (lambda (g$0$18973) (list (quote quote) (g$0$18817 g$0$18973))) g$0$18965) ((lambda (g$0$18967) ((lambda (g$0$18969) (if (if g$0$18969 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18969)) (quote #f)) (apply (lambda () (quote (quote #()))) g$0$18969) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$18967 (quote ()))))) ((lambda (g$0$18971) (quote ())) g$0$18967))) g$0$18963))) ((lambda (g$0$18977) (if (g$0$13212 g$0$18977) (begin (quote #f) ((lambda (g$0$18979) (if g$0$18979 (begin (quote #f) ((lambda (g$0$18981) (if g$0$18981 (begin (quote #f) (append g$0$18979 g$0$18981)) (quote #f))) ((letrec ((g$0$18983 (lambda (g$0$18985) (if (g$0$13212 g$0$18985) ((lambda (g$0$18987) (if g$0$18987 (begin (quote #f) ((lambda (g$0$18989) (if g$0$18989 (begin (quote #f) (map cons g$0$18987 g$0$18989)) (quote #f))) (g$0$18983 (g$0$13224 g$0$18985)))) (quote #f))) ((lambda (g$0$18991) (list g$0$18991)) (g$0$13220 g$0$18985))) (if (g$0$13216 g$0$18985) (list (begin (quote field-spec*) (quote ()))) (quote #f)))))) g$0$18983) (g$0$13224 g$0$18977)))) (quote #f))) ((lambda (g$0$18993) (quote ())) (g$0$13220 g$0$18977)))) (quote #f))) g$0$18963))) (g$0$18197 (quote fields) g$0$18815))))) (quote #f)))) (set! g$0$18201 (lambda (g$0$18773 g$0$18774 g$0$18775) ((lambda (g$0$18777) (list (quote make-record-constructor-descriptor) g$0$18774 g$0$18777 g$0$18775)) ((lambda (g$0$18779) ((lambda (g$0$18781) (if (if g$0$18781 (begin (quote #f) (apply (lambda (g$0$18791) (quote #t)) g$0$18781)) (quote #f)) (apply (lambda (g$0$18789) (list (quote record-constructor-descriptor) g$0$18789)) g$0$18781) ((lambda (g$0$18783) ((lambda (g$0$18785) (if (if g$0$18785 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18785)) (quote #f)) (apply (lambda () (quote #f)) g$0$18785) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$18783 (quote ()))))) ((lambda (g$0$18787) (quote ())) g$0$18783))) g$0$18779))) ((lambda (g$0$18793) (if (g$0$13212 g$0$18793) (begin (quote #f) ((lambda (g$0$18795) (if g$0$18795 (begin (quote #f) ((lambda (g$0$18797) (if g$0$18797 (begin (quote #f) (append g$0$18795 g$0$18797)) (quote #f))) ((lambda (g$0$18799) (if (g$0$13212 g$0$18799) (begin (quote #f) ((lambda (g$0$18801) (if g$0$18801 (begin (quote #f) ((lambda (g$0$18803) (if g$0$18803 (begin (quote #f) (append g$0$18801 g$0$18803)) (quote #f))) ((lambda (g$0$18805) (if (equal? (g$0$13246 g$0$18805) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18799)))) (quote #f))) ((lambda (g$0$18807) (list g$0$18807)) (g$0$13220 g$0$18799)))) (quote #f))) (g$0$13224 g$0$18793)))) (quote #f))) ((lambda (g$0$18809) (quote ())) (g$0$13220 g$0$18793)))) (quote #f))) g$0$18779))) (g$0$18197 (quote parent) g$0$18773))))) (set! g$0$18203 (lambda (g$0$18737) ((lambda (g$0$18739) ((lambda (g$0$18741) (if (if g$0$18741 (begin (quote #f) (apply (lambda (g$0$18751) (quote #t)) g$0$18741)) (quote #f)) (apply (lambda (g$0$18749) g$0$18749) g$0$18741) ((lambda (g$0$18743) ((lambda (g$0$18745) (if (if g$0$18745 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18745)) (quote #f)) (apply (lambda () (quote #f)) g$0$18745) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$18743 (quote ()))))) ((lambda (g$0$18747) (quote ())) g$0$18743))) g$0$18739))) ((lambda (g$0$18753) (if (g$0$13212 g$0$18753) (begin (quote #f) ((lambda (g$0$18755) (if g$0$18755 (begin (quote #f) ((lambda (g$0$18757) (if g$0$18757 (begin (quote #f) (append g$0$18755 g$0$18757)) (quote #f))) ((lambda (g$0$18759) (if (g$0$13212 g$0$18759) (begin (quote #f) ((lambda (g$0$18761) (if g$0$18761 (begin (quote #f) ((lambda (g$0$18763) (if g$0$18763 (begin (quote #f) (append g$0$18761 g$0$18763)) (quote #f))) ((lambda (g$0$18765) (if (equal? (g$0$13246 g$0$18765) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18759)))) (quote #f))) ((lambda (g$0$18767) (list g$0$18767)) (g$0$13220 g$0$18759)))) (quote #f))) (g$0$13224 g$0$18753)))) (quote #f))) ((lambda (g$0$18769) (quote ())) (g$0$13220 g$0$18753)))) (quote #f))) g$0$18739))) (g$0$18197 (quote protocol) g$0$18737)))) (set! g$0$18205 (lambda (g$0$18677) ((lambda (g$0$18679) ((lambda (g$0$18681) (if (if g$0$18681 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18681)) (quote #f)) (apply (lambda () (quote ())) g$0$18681) ((lambda (g$0$18683) ((lambda (g$0$18685) (if (if g$0$18685 (begin (quote #f) (apply (lambda (g$0$18707) (quote #t)) g$0$18685)) (quote #f)) (apply (lambda (g$0$18705) g$0$18705) g$0$18685) ((lambda (g$0$18687) ((lambda (g$0$18689) (if (if g$0$18689 (begin (quote #f) (apply (lambda (g$0$18693) (quote #t)) g$0$18689)) (quote #f)) (apply (lambda (g$0$18691) (g$0$18205 g$0$18691)) g$0$18689) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$18687 (quote ()))))) ((lambda (g$0$18695) (if (g$0$13212 g$0$18695) (begin (quote #f) ((lambda (g$0$18697) (if g$0$18697 (begin (quote #f) ((lambda (g$0$18699) (if g$0$18699 (begin (quote #f) (append g$0$18697 g$0$18699)) (quote #f))) ((lambda (g$0$18701) (list g$0$18701)) (g$0$13224 g$0$18695)))) (quote #f))) ((lambda (g$0$18703) (quote ())) (g$0$13220 g$0$18695)))) (quote #f))) g$0$18687))) g$0$18683))) ((lambda (g$0$18709) (if (g$0$13212 g$0$18709) (begin (quote #f) ((lambda (g$0$18711) (if g$0$18711 (begin (quote #f) ((lambda (g$0$18713) (if g$0$18713 (begin (quote #f) (append g$0$18711 g$0$18713)) (quote #f))) ((lambda (g$0$18715) (quote ())) (g$0$13224 g$0$18709)))) (quote #f))) ((lambda (g$0$18717) (if (g$0$13212 g$0$18717) (begin (quote #f) ((lambda (g$0$18719) (if g$0$18719 (begin (quote #f) ((lambda (g$0$18721) (if g$0$18721 (begin (quote #f) (append g$0$18719 g$0$18721)) (quote #f))) ((letrec ((g$0$18723 (lambda (g$0$18725) (if (g$0$13212 g$0$18725) ((lambda (g$0$18727) (if g$0$18727 (begin (quote #f) ((lambda (g$0$18729) (if g$0$18729 (begin (quote #f) (map cons g$0$18727 g$0$18729)) (quote #f))) (g$0$18723 (g$0$13224 g$0$18725)))) (quote #f))) ((lambda (g$0$18731) (list g$0$18731)) (g$0$13220 g$0$18725))) (if (g$0$13216 g$0$18725) (list (begin (quote f*) (quote ()))) (quote #f)))))) g$0$18723) (g$0$13224 g$0$18717)))) (quote #f))) ((lambda (g$0$18733) (if (g$0$13226 g$0$18733) (if (g$0$13234 g$0$18733 (g$0$13479 (quote fields))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$18717)))) (quote #f))) (g$0$13220 g$0$18709)))) (quote #f))) g$0$18683))) g$0$18679))) ((lambda (g$0$18735) (if (equal? (g$0$13246 g$0$18735) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$18679))) g$0$18677))) (set! g$0$18207 (lambda (g$0$18619) (letrec ((g$0$18621 (lambda (g$0$18624 g$0$18625) ((lambda (g$0$18627) ((lambda (g$0$18629) (if (if g$0$18629 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18629)) (quote #f)) (apply (lambda () (quote ())) g$0$18629) ((lambda (g$0$18631) ((lambda (g$0$18633) (if (if g$0$18633 (begin (quote #f) (apply (lambda (g$0$18655) (quote #t)) g$0$18633)) (quote #f)) (apply (lambda (g$0$18653) (cons g$0$18625 (g$0$18621 g$0$18653 (+ g$0$18625 (quote 1))))) g$0$18633) ((lambda (g$0$18635) ((lambda (g$0$18637) (if (if g$0$18637 (begin (quote #f) (apply (lambda (g$0$18641) (quote #t)) g$0$18637)) (quote #f)) (apply (lambda (g$0$18639) (g$0$18621 g$0$18639 (+ g$0$18625 (quote 1)))) g$0$18637) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$18635 (quote ()))))) ((lambda (g$0$18643) (if (g$0$13212 g$0$18643) (begin (quote #f) ((lambda (g$0$18645) (if g$0$18645 (begin (quote #f) ((lambda (g$0$18647) (if g$0$18647 (begin (quote #f) (append g$0$18645 g$0$18647)) (quote #f))) ((lambda (g$0$18649) (list g$0$18649)) (g$0$13224 g$0$18643)))) (quote #f))) ((lambda (g$0$18651) (quote ())) (g$0$13220 g$0$18643)))) (quote #f))) g$0$18635))) g$0$18631))) ((lambda (g$0$18657) (if (g$0$13212 g$0$18657) (begin (quote #f) ((lambda (g$0$18659) (if g$0$18659 (begin (quote #f) ((lambda (g$0$18661) (if g$0$18661 (begin (quote #f) (append g$0$18659 g$0$18661)) (quote #f))) ((lambda (g$0$18663) (list g$0$18663)) (g$0$13224 g$0$18657)))) (quote #f))) ((lambda (g$0$18665) (if (g$0$13212 g$0$18665) (begin (quote #f) ((lambda (g$0$18667) (if g$0$18667 (begin (quote #f) ((lambda (g$0$18669) (if g$0$18669 (begin (quote #f) (append g$0$18667 g$0$18669)) (quote #f))) ((lambda (g$0$18671) (quote ())) (g$0$13224 g$0$18665)))) (quote #f))) ((lambda (g$0$18673) (if (g$0$13226 g$0$18673) (if (g$0$13234 g$0$18673 (g$0$13479 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$18665)))) (quote #f))) (g$0$13220 g$0$18657)))) (quote #f))) g$0$18631))) g$0$18627))) ((lambda (g$0$18675) (if (equal? (g$0$13246 g$0$18675) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$18627))) g$0$18624)))) (g$0$18621 g$0$18619 (quote 0))))) (set! g$0$18209 (lambda (g$0$18483 g$0$18484 g$0$18485) ((lambda (g$0$18487) (begin (set! g$0$18487 (lambda (g$0$18617) (g$0$13706 g$0$18485 (string->symbol (string-append (quote "set-") (symbol->string (g$0$13708 g$0$18483)) (quote "-") (symbol->string (g$0$13708 g$0$18617)) (quote "!")))))) (letrec ((g$0$18489 (lambda (g$0$18491) ((lambda (g$0$18493) ((lambda (g$0$18495) (if (if g$0$18495 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18495)) (quote #f)) (apply (lambda () (quote ())) g$0$18495) ((lambda (g$0$18497) ((lambda (g$0$18499) (if (if g$0$18499 (begin (quote #f) (apply (lambda (g$0$18568 g$0$18569 g$0$18570 g$0$18571) (quote #t)) g$0$18499)) (quote #f)) (apply (lambda (g$0$18560 g$0$18561 g$0$18562 g$0$18563) (cons g$0$18562 (g$0$18489 g$0$18563))) g$0$18499) ((lambda (g$0$18501) ((lambda (g$0$18503) (if (if g$0$18503 (begin (quote #f) (apply (lambda (g$0$18528 g$0$18529) (quote #t)) g$0$18503)) (quote #f)) (apply (lambda (g$0$18524 g$0$18525) (cons (g$0$18487 g$0$18524) (g$0$18489 g$0$18525))) g$0$18503) ((lambda (g$0$18505) ((lambda (g$0$18507) (if (if g$0$18507 (begin (quote #f) (apply (lambda (g$0$18511) (quote #t)) g$0$18507)) (quote #f)) (apply (lambda (g$0$18509) (g$0$18489 g$0$18509)) g$0$18507) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$18505 (quote ()))))) ((lambda (g$0$18513) (if (g$0$13212 g$0$18513) (begin (quote #f) ((lambda (g$0$18515) (if g$0$18515 (begin (quote #f) ((lambda (g$0$18517) (if g$0$18517 (begin (quote #f) (append g$0$18515 g$0$18517)) (quote #f))) ((lambda (g$0$18519) (list g$0$18519)) (g$0$13224 g$0$18513)))) (quote #f))) ((lambda (g$0$18521) (quote ())) (g$0$13220 g$0$18513)))) (quote #f))) g$0$18505))) g$0$18501))) ((lambda (g$0$18531) (if (g$0$13212 g$0$18531) (begin (quote #f) ((lambda (g$0$18533) (if g$0$18533 (begin (quote #f) ((lambda (g$0$18535) (if g$0$18535 (begin (quote #f) (append g$0$18533 g$0$18535)) (quote #f))) ((lambda (g$0$18537) (list g$0$18537)) (g$0$13224 g$0$18531)))) (quote #f))) ((lambda (g$0$18539) (if (g$0$13212 g$0$18539) (begin (quote #f) ((lambda (g$0$18541) (if g$0$18541 (begin (quote #f) ((lambda (g$0$18543) (if g$0$18543 (begin (quote #f) (append g$0$18541 g$0$18543)) (quote #f))) ((lambda (g$0$18545) (if (g$0$13212 g$0$18545) (begin (quote #f) ((lambda (g$0$18547) (if g$0$18547 (begin (quote #f) ((lambda (g$0$18549) (if g$0$18549 (begin (quote #f) (append g$0$18547 g$0$18549)) (quote #f))) ((lambda (g$0$18551) (if (equal? (g$0$13246 g$0$18551) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18545)))) (quote #f))) ((lambda (g$0$18553) (list g$0$18553)) (g$0$13220 g$0$18545)))) (quote #f))) (g$0$13224 g$0$18539)))) (quote #f))) ((lambda (g$0$18555) (if (g$0$13226 g$0$18555) (if (g$0$13234 g$0$18555 (g$0$13479 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$18539)))) (quote #f))) (g$0$13220 g$0$18531)))) (quote #f))) g$0$18501))) g$0$18497))) ((lambda (g$0$18573) (if (g$0$13212 g$0$18573) (begin (quote #f) ((lambda (g$0$18575) (if g$0$18575 (begin (quote #f) ((lambda (g$0$18577) (if g$0$18577 (begin (quote #f) (append g$0$18575 g$0$18577)) (quote #f))) ((lambda (g$0$18579) (list g$0$18579)) (g$0$13224 g$0$18573)))) (quote #f))) ((lambda (g$0$18581) (if (g$0$13212 g$0$18581) (begin (quote #f) ((lambda (g$0$18583) (if g$0$18583 (begin (quote #f) ((lambda (g$0$18585) (if g$0$18585 (begin (quote #f) (append g$0$18583 g$0$18585)) (quote #f))) ((lambda (g$0$18587) (if (g$0$13212 g$0$18587) (begin (quote #f) ((lambda (g$0$18589) (if g$0$18589 (begin (quote #f) ((lambda (g$0$18591) (if g$0$18591 (begin (quote #f) (append g$0$18589 g$0$18591)) (quote #f))) ((lambda (g$0$18593) (if (g$0$13212 g$0$18593) (begin (quote #f) ((lambda (g$0$18595) (if g$0$18595 (begin (quote #f) ((lambda (g$0$18597) (if g$0$18597 (begin (quote #f) (append g$0$18595 g$0$18597)) (quote #f))) ((lambda (g$0$18599) (if (g$0$13212 g$0$18599) (begin (quote #f) ((lambda (g$0$18601) (if g$0$18601 (begin (quote #f) ((lambda (g$0$18603) (if g$0$18603 (begin (quote #f) (append g$0$18601 g$0$18603)) (quote #f))) ((lambda (g$0$18605) (if (equal? (g$0$13246 g$0$18605) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18599)))) (quote #f))) ((lambda (g$0$18607) (list g$0$18607)) (g$0$13220 g$0$18599)))) (quote #f))) (g$0$13224 g$0$18593)))) (quote #f))) ((lambda (g$0$18609) (list g$0$18609)) (g$0$13220 g$0$18593)))) (quote #f))) (g$0$13224 g$0$18587)))) (quote #f))) ((lambda (g$0$18611) (list g$0$18611)) (g$0$13220 g$0$18587)))) (quote #f))) (g$0$13224 g$0$18581)))) (quote #f))) ((lambda (g$0$18613) (if (g$0$13226 g$0$18613) (if (g$0$13234 g$0$18613 (g$0$13479 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$18581)))) (quote #f))) (g$0$13220 g$0$18573)))) (quote #f))) g$0$18497))) g$0$18493))) ((lambda (g$0$18615) (if (equal? (g$0$13246 g$0$18615) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$18493))) g$0$18491)))) (g$0$18489 g$0$18484)))) (quote #f)))) (set! g$0$18211 (lambda (g$0$18311 g$0$18312 g$0$18313) ((lambda (g$0$18315) (begin (set! g$0$18315 (lambda (g$0$18479) (g$0$13706 g$0$18313 (string->symbol (string-append (symbol->string (g$0$13708 g$0$18311)) (quote "-") (symbol->string (g$0$13708 g$0$18479))))))) (map (lambda (g$0$18317) ((lambda (g$0$18319) ((lambda (g$0$18321) (if (if g$0$18321 (begin (quote #f) (apply (lambda (g$0$18441 g$0$18442 g$0$18443) (g$0$13226 g$0$18442)) g$0$18321)) (quote #f)) (apply (lambda (g$0$18435 g$0$18436 g$0$18437) g$0$18436) g$0$18321) ((lambda (g$0$18323) ((lambda (g$0$18325) (if (if g$0$18325 (begin (quote #f) (apply (lambda (g$0$18404 g$0$18405) (g$0$13226 g$0$18405)) g$0$18325)) (quote #f)) (apply (lambda (g$0$18400 g$0$18401) g$0$18401) g$0$18325) ((lambda (g$0$18327) ((lambda (g$0$18329) (if (if g$0$18329 (begin (quote #f) (apply (lambda (g$0$18379) (g$0$13226 g$0$18379)) g$0$18329)) (quote #f)) (apply (lambda (g$0$18377) (g$0$18315 g$0$18377)) g$0$18329) ((lambda (g$0$18331) ((lambda (g$0$18333) (if (if g$0$18333 (begin (quote #f) (apply (lambda (g$0$18357) (g$0$13226 g$0$18357)) g$0$18333)) (quote #f)) (apply (lambda (g$0$18355) (g$0$18315 g$0$18355)) g$0$18333) ((lambda (g$0$18335) ((lambda (g$0$18337) (if (if g$0$18337 (begin (quote #f) (apply (lambda (g$0$18351) (g$0$13226 g$0$18351)) g$0$18337)) (quote #f)) (apply (lambda (g$0$18349) (g$0$18315 g$0$18349)) g$0$18337) ((lambda (g$0$18339) ((lambda (g$0$18341) (if (if g$0$18341 (begin (quote #f) (apply (lambda (g$0$18345) (quote #t)) g$0$18341)) (quote #f)) (apply (lambda (g$0$18343) (error (quote expander) (quote "invalid field spec") (g$0$13244 g$0$18317 (quote ())))) g$0$18341) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$18339 (quote ()))))) ((lambda (g$0$18347) (list g$0$18347)) g$0$18339))) g$0$18335))) ((lambda (g$0$18353) (list g$0$18353)) g$0$18335))) g$0$18331))) ((lambda (g$0$18359) (if (g$0$13212 g$0$18359) (begin (quote #f) ((lambda (g$0$18361) (if g$0$18361 (begin (quote #f) ((lambda (g$0$18363) (if g$0$18363 (begin (quote #f) (append g$0$18361 g$0$18363)) (quote #f))) ((lambda (g$0$18365) (if (g$0$13212 g$0$18365) (begin (quote #f) ((lambda (g$0$18367) (if g$0$18367 (begin (quote #f) ((lambda (g$0$18369) (if g$0$18369 (begin (quote #f) (append g$0$18367 g$0$18369)) (quote #f))) ((lambda (g$0$18371) (if (equal? (g$0$13246 g$0$18371) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18365)))) (quote #f))) ((lambda (g$0$18373) (list g$0$18373)) (g$0$13220 g$0$18365)))) (quote #f))) (g$0$13224 g$0$18359)))) (quote #f))) ((lambda (g$0$18375) (if (g$0$13226 g$0$18375) (if (g$0$13234 g$0$18375 (g$0$13479 (quote immutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$18359)))) (quote #f))) g$0$18331))) g$0$18327))) ((lambda (g$0$18381) (if (g$0$13212 g$0$18381) (begin (quote #f) ((lambda (g$0$18383) (if g$0$18383 (begin (quote #f) ((lambda (g$0$18385) (if g$0$18385 (begin (quote #f) (append g$0$18383 g$0$18385)) (quote #f))) ((lambda (g$0$18387) (if (g$0$13212 g$0$18387) (begin (quote #f) ((lambda (g$0$18389) (if g$0$18389 (begin (quote #f) ((lambda (g$0$18391) (if g$0$18391 (begin (quote #f) (append g$0$18389 g$0$18391)) (quote #f))) ((lambda (g$0$18393) (if (equal? (g$0$13246 g$0$18393) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18387)))) (quote #f))) ((lambda (g$0$18395) (list g$0$18395)) (g$0$13220 g$0$18387)))) (quote #f))) (g$0$13224 g$0$18381)))) (quote #f))) ((lambda (g$0$18397) (if (g$0$13226 g$0$18397) (if (g$0$13234 g$0$18397 (g$0$13479 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$18381)))) (quote #f))) g$0$18327))) g$0$18323))) ((lambda (g$0$18407) (if (g$0$13212 g$0$18407) (begin (quote #f) ((lambda (g$0$18409) (if g$0$18409 (begin (quote #f) ((lambda (g$0$18411) (if g$0$18411 (begin (quote #f) (append g$0$18409 g$0$18411)) (quote #f))) ((lambda (g$0$18413) (if (g$0$13212 g$0$18413) (begin (quote #f) ((lambda (g$0$18415) (if g$0$18415 (begin (quote #f) ((lambda (g$0$18417) (if g$0$18417 (begin (quote #f) (append g$0$18415 g$0$18417)) (quote #f))) ((lambda (g$0$18419) (if (g$0$13212 g$0$18419) (begin (quote #f) ((lambda (g$0$18421) (if g$0$18421 (begin (quote #f) ((lambda (g$0$18423) (if g$0$18423 (begin (quote #f) (append g$0$18421 g$0$18423)) (quote #f))) ((lambda (g$0$18425) (if (equal? (g$0$13246 g$0$18425) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18419)))) (quote #f))) ((lambda (g$0$18427) (list g$0$18427)) (g$0$13220 g$0$18419)))) (quote #f))) (g$0$13224 g$0$18413)))) (quote #f))) ((lambda (g$0$18429) (list g$0$18429)) (g$0$13220 g$0$18413)))) (quote #f))) (g$0$13224 g$0$18407)))) (quote #f))) ((lambda (g$0$18431) (if (g$0$13226 g$0$18431) (if (g$0$13234 g$0$18431 (g$0$13479 (quote immutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$18407)))) (quote #f))) g$0$18323))) g$0$18319))) ((lambda (g$0$18445) (if (g$0$13212 g$0$18445) (begin (quote #f) ((lambda (g$0$18447) (if g$0$18447 (begin (quote #f) ((lambda (g$0$18449) (if g$0$18449 (begin (quote #f) (append g$0$18447 g$0$18449)) (quote #f))) ((lambda (g$0$18451) (if (g$0$13212 g$0$18451) (begin (quote #f) ((lambda (g$0$18453) (if g$0$18453 (begin (quote #f) ((lambda (g$0$18455) (if g$0$18455 (begin (quote #f) (append g$0$18453 g$0$18455)) (quote #f))) ((lambda (g$0$18457) (if (g$0$13212 g$0$18457) (begin (quote #f) ((lambda (g$0$18459) (if g$0$18459 (begin (quote #f) ((lambda (g$0$18461) (if g$0$18461 (begin (quote #f) (append g$0$18459 g$0$18461)) (quote #f))) ((lambda (g$0$18463) (if (g$0$13212 g$0$18463) (begin (quote #f) ((lambda (g$0$18465) (if g$0$18465 (begin (quote #f) ((lambda (g$0$18467) (if g$0$18467 (begin (quote #f) (append g$0$18465 g$0$18467)) (quote #f))) ((lambda (g$0$18469) (if (equal? (g$0$13246 g$0$18469) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$18463)))) (quote #f))) ((lambda (g$0$18471) (list g$0$18471)) (g$0$13220 g$0$18463)))) (quote #f))) (g$0$13224 g$0$18457)))) (quote #f))) ((lambda (g$0$18473) (list g$0$18473)) (g$0$13220 g$0$18457)))) (quote #f))) (g$0$13224 g$0$18451)))) (quote #f))) ((lambda (g$0$18475) (list g$0$18475)) (g$0$13220 g$0$18451)))) (quote #f))) (g$0$13224 g$0$18445)))) (quote #f))) ((lambda (g$0$18477) (if (g$0$13226 g$0$18477) (if (g$0$13234 g$0$18477 (g$0$13479 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13220 g$0$18445)))) (quote #f))) g$0$18319))) g$0$18317)) g$0$18312))) (quote #f)))) (set! g$0$18213 (lambda (g$0$18301) (letrec ((g$0$18303 (lambda (g$0$18306 g$0$18307) (if (null? g$0$18306) (quote ()) (cons g$0$18307 (g$0$18303 (cdr g$0$18306) (+ g$0$18307 (quote 1)))))))) (g$0$18303 g$0$18301 (quote 0))))) (set! g$0$18215 (lambda (g$0$18261 g$0$18262 g$0$18263) ((lambda (g$0$18265) ((lambda (g$0$18267) ((lambda (g$0$18269) ((lambda (g$0$18271) ((lambda (g$0$18273) ((lambda (g$0$18275) ((lambda (g$0$18277) ((lambda (g$0$18279) ((lambda (g$0$18281) ((lambda (g$0$18283) ((lambda (g$0$18285) ((lambda (g$0$18287) ((lambda (g$0$18289) ((lambda (g$0$18291) ((lambda () (g$0$13513 (cons (quote begin) (cons (list (quote define) g$0$18267 g$0$18287) (cons (list (quote define) g$0$18271 g$0$18291) (cons (list (quote define) g$0$18269 g$0$18289) (cons (list (quote define-syntax) g$0$18265 (list (quote list) (quote (quote $rtd)) (list (quote syntax) g$0$18267) (list (quote syntax) g$0$18269))) (cons (list (quote define) g$0$18285 (list (quote record-predicate) g$0$18267)) (cons (list (quote define) g$0$18273 (list (quote record-constructor) g$0$18269)) (append (map (lambda (g$0$18294 g$0$18295) (list (quote define) g$0$18294 (list (quote record-accessor) g$0$18267 g$0$18295))) g$0$18279 g$0$18277) (map (lambda (g$0$18298 g$0$18299) (list (quote define) g$0$18298 (list (quote record-mutator) g$0$18267 g$0$18299))) g$0$18281 g$0$18283))))))))))))) (g$0$18203 g$0$18263))) (g$0$18201 g$0$18263 g$0$18267 g$0$18271))) (g$0$18199 g$0$18261 g$0$18265 g$0$18263))) (g$0$18195 g$0$18262 g$0$18261))) (g$0$18207 g$0$18275))) (g$0$18209 g$0$18265 g$0$18275 g$0$18261))) (g$0$18211 g$0$18265 g$0$18275 g$0$18261))) (g$0$18213 g$0$18275))) (g$0$18205 g$0$18263))) (g$0$18193 g$0$18262 g$0$18261))) (gensym))) (gensym))) (gensym))) (g$0$18191 g$0$18262)))) ((lambda (g$0$18217) ((lambda (g$0$18219) (if (if g$0$18219 (begin (quote #f) (apply (lambda (g$0$18229 g$0$18230 g$0$18231) (quote #t)) g$0$18219)) (quote #f)) (apply (lambda (g$0$18223 g$0$18224 g$0$18225) (g$0$18215 g$0$18223 g$0$18224 g$0$18225)) g$0$18219) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$18217 (quote ()))))) ((lambda (g$0$18233) (if (g$0$13212 g$0$18233) (begin (quote #f) ((lambda (g$0$18235) (if g$0$18235 (begin (quote #f) ((lambda (g$0$18237) (if g$0$18237 (begin (quote #f) (append g$0$18235 g$0$18237)) (quote #f))) ((lambda (g$0$18239) (if (g$0$13212 g$0$18239) (begin (quote #f) ((lambda (g$0$18241) (if g$0$18241 (begin (quote #f) ((lambda (g$0$18243) (if g$0$18243 (begin (quote #f) (append g$0$18241 g$0$18243)) (quote #f))) ((letrec ((g$0$18245 (lambda (g$0$18247) (if (g$0$13212 g$0$18247) ((lambda (g$0$18249) (if g$0$18249 (begin (quote #f) ((lambda (g$0$18251) (if g$0$18251 (begin (quote #f) (map cons g$0$18249 g$0$18251)) (quote #f))) (g$0$18245 (g$0$13224 g$0$18247)))) (quote #f))) ((lambda (g$0$18253) (list g$0$18253)) (g$0$13220 g$0$18247))) (if (g$0$13216 g$0$18247) (list (begin (quote clause*) (quote ()))) (quote #f)))))) g$0$18245) (g$0$13224 g$0$18239)))) (quote #f))) ((lambda (g$0$18255) (list g$0$18255)) (g$0$13220 g$0$18239)))) (quote #f))) (g$0$13224 g$0$18233)))) (quote #f))) ((lambda (g$0$18257) (list g$0$18257)) (g$0$13220 g$0$18233)))) (quote #f))) g$0$18217))) g$0$18187))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$13559 (lambda (g$0$19285) ((lambda (g$0$19287) (begin (set! g$0$19287 (lambda (g$0$19400 g$0$19401) (g$0$13706 g$0$19400 (string->symbol (string-append (symbol->string (g$0$13708 g$0$19400)) g$0$19401))))) ((lambda (g$0$19289) ((lambda (g$0$19291) (if (if g$0$19291 (begin (quote #f) (apply (lambda (g$0$19325 g$0$19326 g$0$19327 g$0$19328 g$0$19329 g$0$19330 g$0$19331) (if (g$0$13226 g$0$19326) (if (g$0$13226 g$0$19327) (if (g$0$13226 g$0$19328) (if (g$0$13226 g$0$19329) (if (for-all g$0$13226 g$0$19330) (begin (quote #f) (for-all g$0$13226 g$0$19331)) (quote #f)) (quote #f)) (quote #f)) (quote #f)) (quote #f))) g$0$19291)) (quote #f)) (apply (lambda (g$0$19299 g$0$19300 g$0$19301 g$0$19302 g$0$19303 g$0$19304 g$0$19305) ((lambda (g$0$19307) (g$0$13513 (cons (quote begin) (cons (cons (quote define-record-type) (cons (list g$0$19300 g$0$19302 (gensym)) (cons (list (quote parent) g$0$19301) (cons (cons (quote fields) (map (lambda (g$0$19310 g$0$19311) (list (quote immutable) g$0$19310 g$0$19311)) g$0$19304 g$0$19307)) (quote ((nongenerative) (sealed #f) (opaque #f))))))) (cons (list (quote define) g$0$19303 (list (quote condition-predicate) (list (quote record-type-descriptor) g$0$19300))) (map (lambda (g$0$19314 g$0$19315) (list (quote define) g$0$19314 (list (quote condition-accessor) (list (quote record-type-descriptor) g$0$19300) g$0$19315))) g$0$19305 g$0$19307)))))) (map (lambda (g$0$19317) (gensym)) g$0$19305))) g$0$19291) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$19289 (quote ()))))) ((lambda (g$0$19333) (if (g$0$13212 g$0$19333) (begin (quote #f) ((lambda (g$0$19335) (if g$0$19335 (begin (quote #f) ((lambda (g$0$19337) (if g$0$19337 (begin (quote #f) (append g$0$19335 g$0$19337)) (quote #f))) ((lambda (g$0$19339) (if (g$0$13212 g$0$19339) (begin (quote #f) ((lambda (g$0$19341) (if g$0$19341 (begin (quote #f) ((lambda (g$0$19343) (if g$0$19343 (begin (quote #f) (append g$0$19341 g$0$19343)) (quote #f))) ((lambda (g$0$19345) (if (g$0$13212 g$0$19345) (begin (quote #f) ((lambda (g$0$19347) (if g$0$19347 (begin (quote #f) ((lambda (g$0$19349) (if g$0$19349 (begin (quote #f) (append g$0$19347 g$0$19349)) (quote #f))) ((lambda (g$0$19351) (if (g$0$13212 g$0$19351) (begin (quote #f) ((lambda (g$0$19353) (if g$0$19353 (begin (quote #f) ((lambda (g$0$19355) (if g$0$19355 (begin (quote #f) (append g$0$19353 g$0$19355)) (quote #f))) ((lambda (g$0$19357) (if (g$0$13212 g$0$19357) (begin (quote #f) ((lambda (g$0$19359) (if g$0$19359 (begin (quote #f) ((lambda (g$0$19361) (if g$0$19361 (begin (quote #f) (append g$0$19359 g$0$19361)) (quote #f))) ((letrec ((g$0$19363 (lambda (g$0$19365) (if (g$0$13212 g$0$19365) ((lambda (g$0$19367) (if g$0$19367 (begin (quote #f) ((lambda (g$0$19369) (if g$0$19369 (begin (quote #f) (map cons g$0$19367 g$0$19369)) (quote #f))) (g$0$19363 (g$0$13224 g$0$19365)))) (quote #f))) ((lambda (g$0$19371) (if (g$0$13212 g$0$19371) (begin (quote #f) ((lambda (g$0$19373) (if g$0$19373 (begin (quote #f) ((lambda (g$0$19375) (if g$0$19375 (begin (quote #f) (append g$0$19373 g$0$19375)) (quote #f))) ((lambda (g$0$19377) (if (g$0$13212 g$0$19377) (begin (quote #f) ((lambda (g$0$19379) (if g$0$19379 (begin (quote #f) ((lambda (g$0$19381) (if g$0$19381 (begin (quote #f) (append g$0$19379 g$0$19381)) (quote #f))) ((lambda (g$0$19383) (if (equal? (g$0$13246 g$0$19383) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$19377)))) (quote #f))) ((lambda (g$0$19385) (list g$0$19385)) (g$0$13220 g$0$19377)))) (quote #f))) (g$0$13224 g$0$19371)))) (quote #f))) ((lambda (g$0$19387) (list g$0$19387)) (g$0$13220 g$0$19371)))) (quote #f))) (g$0$13220 g$0$19365))) (if (g$0$13216 g$0$19365) (list (begin (quote field*) (quote ())) (begin (quote accessor*) (quote ()))) (quote #f)))))) g$0$19363) (g$0$13224 g$0$19357)))) (quote #f))) ((lambda (g$0$19389) (list g$0$19389)) (g$0$13220 g$0$19357)))) (quote #f))) (g$0$13224 g$0$19351)))) (quote #f))) ((lambda (g$0$19391) (list g$0$19391)) (g$0$13220 g$0$19351)))) (quote #f))) (g$0$13224 g$0$19345)))) (quote #f))) ((lambda (g$0$19393) (list g$0$19393)) (g$0$13220 g$0$19345)))) (quote #f))) (g$0$13224 g$0$19339)))) (quote #f))) ((lambda (g$0$19395) (list g$0$19395)) (g$0$13220 g$0$19339)))) (quote #f))) (g$0$13224 g$0$19333)))) (quote #f))) ((lambda (g$0$19397) (list g$0$19397)) (g$0$13220 g$0$19333)))) (quote #f))) g$0$19289))) g$0$19285))) (quote #f)))) (set! g$0$13561 (lambda (g$0$19403) (error (quote expander) (quote "incorrect usage of auxilary keyword") (g$0$13244 g$0$19403 (quote ()))))) (set! g$0$13563 (lambda (g$0$19407 g$0$19408 g$0$19409) ((lambda (g$0$19411) ((lambda (g$0$19413) (if (if g$0$19413 (begin (quote #f) (apply (lambda (g$0$19518 g$0$19519) (quote #t)) g$0$19413)) (quote #f)) (apply (lambda (g$0$19514 g$0$19515) (g$0$13613 (cons g$0$19514 g$0$19515) g$0$19408 g$0$19409)) g$0$19413) ((lambda (g$0$19415) ((lambda (g$0$19417) (if (if g$0$19417 (begin (quote #f) (apply (lambda (g$0$19450 g$0$19451 g$0$19452 g$0$19453) (quote #t)) g$0$19417)) (quote #f)) (apply (lambda (g$0$19422 g$0$19423 g$0$19424 g$0$19425) ((lambda (g$0$19430 g$0$19431 g$0$19432 g$0$19433) (g$0$13112 (quote #f) (append g$0$19430 g$0$19431) (append (g$0$13593 g$0$19422 g$0$19408 g$0$19409) (g$0$13593 g$0$19423 g$0$19408 g$0$19409)) (g$0$13112 (quote #f) (list g$0$19433) (list (g$0$13114 (quote #f) (quote ()) (g$0$13108 (quote #f) (map (lambda (g$0$19437 g$0$19438 g$0$19439) (g$0$13112 (quote #f) (list g$0$19437) (list (list g$0$19438)) (g$0$13108 (quote #f) (list (list g$0$19438 g$0$19439) (list (quote set!) g$0$19439 g$0$19437))))) g$0$19432 g$0$19430 g$0$19431)))) (list (quote (primitive dynamic-wind)) g$0$19433 (g$0$13114 (quote #f) (quote ()) (g$0$13613 (cons g$0$19424 g$0$19425) g$0$19408 g$0$19409)) g$0$19433)))) (map (lambda (g$0$19441) (g$0$13136 (quote lhs))) g$0$19422) (map (lambda (g$0$19443) (g$0$13136 (quote rhs))) g$0$19422) (map (lambda (g$0$19445) (g$0$13136 (quote t))) g$0$19422) (g$0$13136 (quote swap)))) g$0$19417) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$19415 (quote ()))))) ((lambda (g$0$19455) (if (g$0$13212 g$0$19455) (begin (quote #f) ((lambda (g$0$19457) (if g$0$19457 (begin (quote #f) ((lambda (g$0$19459) (if g$0$19459 (begin (quote #f) (append g$0$19457 g$0$19459)) (quote #f))) ((lambda (g$0$19461) (if (g$0$13212 g$0$19461) (begin (quote #f) ((lambda (g$0$19463) (if g$0$19463 (begin (quote #f) ((lambda (g$0$19465) (if g$0$19465 (begin (quote #f) (append g$0$19463 g$0$19465)) (quote #f))) ((lambda (g$0$19467) (if (g$0$13212 g$0$19467) (begin (quote #f) ((lambda (g$0$19469) (if g$0$19469 (begin (quote #f) ((lambda (g$0$19471) (if g$0$19471 (begin (quote #f) (append g$0$19469 g$0$19471)) (quote #f))) ((letrec ((g$0$19473 (lambda (g$0$19475) (if (g$0$13212 g$0$19475) ((lambda (g$0$19477) (if g$0$19477 (begin (quote #f) ((lambda (g$0$19479) (if g$0$19479 (begin (quote #f) (map cons g$0$19477 g$0$19479)) (quote #f))) (g$0$19473 (g$0$13224 g$0$19475)))) (quote #f))) ((lambda (g$0$19481) (list g$0$19481)) (g$0$13220 g$0$19475))) (if (g$0$13216 g$0$19475) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$19473) (g$0$13224 g$0$19467)))) (quote #f))) ((lambda (g$0$19483) (list g$0$19483)) (g$0$13220 g$0$19467)))) (quote #f))) (g$0$13224 g$0$19461)))) (quote #f))) ((letrec ((g$0$19485 (lambda (g$0$19487) (if (g$0$13212 g$0$19487) ((lambda (g$0$19489) (if g$0$19489 (begin (quote #f) ((lambda (g$0$19491) (if g$0$19491 (begin (quote #f) (map cons g$0$19489 g$0$19491)) (quote #f))) (g$0$19485 (g$0$13224 g$0$19487)))) (quote #f))) ((lambda (g$0$19493) (if (g$0$13212 g$0$19493) (begin (quote #f) ((lambda (g$0$19495) (if g$0$19495 (begin (quote #f) ((lambda (g$0$19497) (if g$0$19497 (begin (quote #f) (append g$0$19495 g$0$19497)) (quote #f))) ((lambda (g$0$19499) (if (g$0$13212 g$0$19499) (begin (quote #f) ((lambda (g$0$19501) (if g$0$19501 (begin (quote #f) ((lambda (g$0$19503) (if g$0$19503 (begin (quote #f) (append g$0$19501 g$0$19503)) (quote #f))) ((lambda (g$0$19505) (if (equal? (g$0$13246 g$0$19505) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$19499)))) (quote #f))) ((lambda (g$0$19507) (list g$0$19507)) (g$0$13220 g$0$19499)))) (quote #f))) (g$0$13224 g$0$19493)))) (quote #f))) ((lambda (g$0$19509) (list g$0$19509)) (g$0$13220 g$0$19493)))) (quote #f))) (g$0$13220 g$0$19487))) (if (g$0$13216 g$0$19487) (list (begin (quote olhs*) (quote ())) (begin (quote orhs*) (quote ()))) (quote #f)))))) g$0$19485) (g$0$13220 g$0$19461)))) (quote #f))) (g$0$13224 g$0$19455)))) (quote #f))) ((lambda (g$0$19511) (quote ())) (g$0$13220 g$0$19455)))) (quote #f))) g$0$19415))) g$0$19411))) ((lambda (g$0$19521) (if (g$0$13212 g$0$19521) (begin (quote #f) ((lambda (g$0$19523) (if g$0$19523 (begin (quote #f) ((lambda (g$0$19525) (if g$0$19525 (begin (quote #f) (append g$0$19523 g$0$19525)) (quote #f))) ((lambda (g$0$19527) (if (g$0$13212 g$0$19527) (begin (quote #f) ((lambda (g$0$19529) (if g$0$19529 (begin (quote #f) ((lambda (g$0$19531) (if g$0$19531 (begin (quote #f) (append g$0$19529 g$0$19531)) (quote #f))) ((lambda (g$0$19533) (if (g$0$13212 g$0$19533) (begin (quote #f) ((lambda (g$0$19535) (if g$0$19535 (begin (quote #f) ((lambda (g$0$19537) (if g$0$19537 (begin (quote #f) (append g$0$19535 g$0$19537)) (quote #f))) ((letrec ((g$0$19539 (lambda (g$0$19541) (if (g$0$13212 g$0$19541) ((lambda (g$0$19543) (if g$0$19543 (begin (quote #f) ((lambda (g$0$19545) (if g$0$19545 (begin (quote #f) (map cons g$0$19543 g$0$19545)) (quote #f))) (g$0$19539 (g$0$13224 g$0$19541)))) (quote #f))) ((lambda (g$0$19547) (list g$0$19547)) (g$0$13220 g$0$19541))) (if (g$0$13216 g$0$19541) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$19539) (g$0$13224 g$0$19533)))) (quote #f))) ((lambda (g$0$19549) (list g$0$19549)) (g$0$13220 g$0$19533)))) (quote #f))) (g$0$13224 g$0$19527)))) (quote #f))) ((lambda (g$0$19551) (if (equal? (g$0$13246 g$0$19551) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13220 g$0$19527)))) (quote #f))) (g$0$13224 g$0$19521)))) (quote #f))) ((lambda (g$0$19553) (quote ())) (g$0$13220 g$0$19521)))) (quote #f))) g$0$19411))) g$0$19407))) (set! g$0$13565 (lambda (g$0$19557 g$0$19558 g$0$19559) ((lambda (g$0$19561) ((lambda (g$0$19563) (if (if g$0$19563 (begin (quote #f) (apply (lambda (g$0$19570 g$0$19571) (quote #t)) g$0$19563)) (quote #f)) (apply (lambda (g$0$19566 g$0$19567) (cons (quote foreign-call) (cons (g$0$13597 g$0$19566 g$0$19558 g$0$19559) (g$0$13593 g$0$19567 g$0$19558 g$0$19559)))) g$0$19563) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$19561 (quote ()))))) ((lambda (g$0$19573) (if (g$0$13212 g$0$19573) (begin (quote #f) ((lambda (g$0$19575) (if g$0$19575 (begin (quote #f) ((lambda (g$0$19577) (if g$0$19577 (begin (quote #f) (append g$0$19575 g$0$19577)) (quote #f))) ((lambda (g$0$19579) (if (g$0$13212 g$0$19579) (begin (quote #f) ((lambda (g$0$19581) (if g$0$19581 (begin (quote #f) ((lambda (g$0$19583) (if g$0$19583 (begin (quote #f) (append g$0$19581 g$0$19583)) (quote #f))) ((letrec ((g$0$19585 (lambda (g$0$19587) (if (g$0$13212 g$0$19587) ((lambda (g$0$19589) (if g$0$19589 (begin (quote #f) ((lambda (g$0$19591) (if g$0$19591 (begin (quote #f) (map cons g$0$19589 g$0$19591)) (quote #f))) (g$0$19585 (g$0$13224 g$0$19587)))) (quote #f))) ((lambda (g$0$19593) (list g$0$19593)) (g$0$13220 g$0$19587))) (if (g$0$13216 g$0$19587) (list (begin (quote arg*) (quote ()))) (quote #f)))))) g$0$19585) (g$0$13224 g$0$19579)))) (quote #f))) ((lambda (g$0$19595) (list g$0$19595)) (g$0$13220 g$0$19579)))) (quote #f))) (g$0$13224 g$0$19573)))) (quote #f))) ((lambda (g$0$19597) (quote ())) (g$0$13220 g$0$19573)))) (quote #f))) g$0$19561))) g$0$19557))) (set! g$0$13567 (lambda (g$0$19600 g$0$19601) ((lambda (g$0$19603 g$0$19605) (begin (set! g$0$19603 (lambda (g$0$19795 g$0$19796 g$0$19797) (if (null? g$0$19795) (values (quote ()) g$0$19797) (call-with-values (lambda () (g$0$19603 (cdr g$0$19795) g$0$19796 g$0$19797)) (lambda (g$0$19800 g$0$19801) (call-with-values (lambda () (g$0$19605 (car g$0$19795) g$0$19796 g$0$19801)) (lambda (g$0$19804 g$0$19805) (values (cons g$0$19804 g$0$19800) g$0$19805)))))))) (set! g$0$19605 (lambda (g$0$19609 g$0$19610 g$0$19611) ((lambda (g$0$19613) ((lambda (g$0$19615) (if (if g$0$19615 (begin (quote #f) (apply (lambda (g$0$19789) (g$0$13226 g$0$19789)) g$0$19615)) (quote #f)) (apply (lambda (g$0$19787) (if (g$0$13240 g$0$19609 g$0$19601) (values (vector (quote free-id) g$0$19609) g$0$19611) (if (g$0$13234 g$0$19609 (g$0$13479 (quote _))) (values (quote _) g$0$19611) (values (quote any) (cons (cons g$0$19609 g$0$19610) g$0$19611))))) g$0$19615) ((lambda (g$0$19617) ((lambda (g$0$19619) (if (if g$0$19619 (begin (quote #f) (apply (lambda (g$0$19766 g$0$19767) (g$0$13571 g$0$19767)) g$0$19619)) (quote #f)) (apply (lambda (g$0$19758 g$0$19759) (call-with-values (lambda () (g$0$19605 g$0$19758 (+ g$0$19610 (quote 1)) g$0$19611)) (lambda (g$0$19762 g$0$19763) (values (if (eq? g$0$19762 (quote any)) (quote each-any) (vector (quote each) g$0$19762)) g$0$19763)))) g$0$19619) ((lambda (g$0$19621) ((lambda (g$0$19623) (if (if g$0$19623 (begin (quote #f) (apply (lambda (g$0$19718 g$0$19719 g$0$19720 g$0$19721) (g$0$13571 g$0$19719)) g$0$19623)) (quote #f)) (apply (lambda (g$0$19698 g$0$19699 g$0$19700 g$0$19701) (call-with-values (lambda () (g$0$19605 g$0$19701 g$0$19610 g$0$19611)) (lambda (g$0$19704 g$0$19705) (call-with-values (lambda () (g$0$19603 g$0$19700 g$0$19610 g$0$19705)) (lambda (g$0$19708 g$0$19709) (call-with-values (lambda () (g$0$19605 g$0$19698 (+ g$0$19610 (quote 1)) g$0$19709)) (lambda (g$0$19712 g$0$19713) (values (vector (quote each+) g$0$19712 (reverse g$0$19708) g$0$19704) g$0$19713)))))))) g$0$19623) ((lambda (g$0$19625) ((lambda (g$0$19627) (if (if g$0$19627 (begin (quote #f) (apply (lambda (g$0$19682 g$0$19683) (quote #t)) g$0$19627)) (quote #f)) (apply (lambda (g$0$19670 g$0$19671) (call-with-values (lambda () (g$0$19605 g$0$19671 g$0$19610 g$0$19611)) (lambda (g$0$19674 g$0$19675) (call-with-values (lambda () (g$0$19605 g$0$19670 g$0$19610 g$0$19675)) (lambda (g$0$19678 g$0$19679) (values (cons g$0$19678 g$0$19674) g$0$19679)))))) g$0$19627) ((lambda (g$0$19629) ((lambda (g$0$19631) (if (if g$0$19631 (begin (quote #f) (apply (lambda () (quote #t)) g$0$19631)) (quote #f)) (apply (lambda () (values (quote ()) g$0$19611)) g$0$19631) ((lambda (g$0$19633) ((lambda (g$0$19635) (if (if g$0$19635 (begin (quote #f) (apply (lambda (g$0$19653) (not (g$0$13178 g$0$19653))) g$0$19635)) (quote #f)) (apply (lambda (g$0$19647) (call-with-values (lambda () (g$0$19605 g$0$19647 g$0$19610 g$0$19611)) (lambda (g$0$19650 g$0$19651) (values (vector (quote vector) g$0$19650) g$0$19651)))) g$0$19635) ((lambda (g$0$19637) ((lambda (g$0$19639) (if (if g$0$19639 (begin (quote #f) (apply (lambda (g$0$19643) (quote #t)) g$0$19639)) (quote #f)) (apply (lambda (g$0$19641) (values (vector (quote atom) (g$0$13246 g$0$19641)) g$0$19611)) g$0$19639) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$19637 (quote ()))))) ((lambda (g$0$19645) (list g$0$19645)) g$0$19637))) g$0$19633))) ((lambda (g$0$19655) (if (g$0$13214 g$0$19655) (begin (quote #f) ((letrec ((g$0$19657 (lambda (g$0$19659) (if (g$0$13212 g$0$19659) ((lambda (g$0$19661) (if g$0$19661 (begin (quote #f) ((lambda (g$0$19663) (if g$0$19663 (begin (quote #f) (map cons g$0$19661 g$0$19663)) (quote #f))) (g$0$19657 (g$0$13224 g$0$19659)))) (quote #f))) ((lambda (g$0$19665) (list g$0$19665)) (g$0$13220 g$0$19659))) (if (g$0$13216 g$0$19659) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$19657) (g$0$13210 g$0$19655))) (quote #f))) g$0$19633))) g$0$19629))) ((lambda (g$0$19667) (if (equal? (g$0$13246 g$0$19667) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$19629))) g$0$19625))) ((lambda (g$0$19685) (if (g$0$13212 g$0$19685) (begin (quote #f) ((lambda (g$0$19687) (if g$0$19687 (begin (quote #f) ((lambda (g$0$19689) (if g$0$19689 (begin (quote #f) (append g$0$19687 g$0$19689)) (quote #f))) ((lambda (g$0$19691) (list g$0$19691)) (g$0$13224 g$0$19685)))) (quote #f))) ((lambda (g$0$19693) (list g$0$19693)) (g$0$13220 g$0$19685)))) (quote #f))) g$0$19625))) g$0$19621))) ((lambda (g$0$19723) (if (g$0$13212 g$0$19723) (begin (quote #f) ((lambda (g$0$19725) (if g$0$19725 (begin (quote #f) ((lambda (g$0$19727) (if g$0$19727 (begin (quote #f) (append g$0$19725 g$0$19727)) (quote #f))) ((lambda (g$0$19729) (if (g$0$13212 g$0$19729) (begin (quote #f) ((lambda (g$0$19731) (if g$0$19731 (begin (quote #f) ((lambda (g$0$19733) (if g$0$19733 (begin (quote #f) (append g$0$19731 g$0$19733)) (quote #f))) ((letrec ((g$0$19735 (lambda (g$0$19737) (if (g$0$13212 g$0$19737) ((lambda (g$0$19743) (if g$0$19743 (begin (quote #f) ((lambda (g$0$19745) (if g$0$19745 (begin (quote #f) (cons (map cons g$0$19743 (car g$0$19745)) (cdr g$0$19745))) (quote #f))) (g$0$19735 (g$0$13224 g$0$19737)))) (quote #f))) ((lambda (g$0$19747) (list g$0$19747)) (g$0$13220 g$0$19737))) ((lambda (g$0$19739) (if g$0$19739 (begin (quote #f) (cons (list (begin (quote ys) (quote ()))) g$0$19739)) (quote #f))) ((lambda (g$0$19741) (list g$0$19741)) g$0$19737)))))) (lambda (g$0$19749) ((lambda (g$0$19751) (if g$0$19751 (begin (quote #f) (append (car g$0$19751) (cdr g$0$19751))) (quote #f))) (g$0$19735 g$0$19749)))) (g$0$13224 g$0$19729)))) (quote #f))) ((lambda (g$0$19753) (list g$0$19753)) (g$0$13220 g$0$19729)))) (quote #f))) (g$0$13224 g$0$19723)))) (quote #f))) ((lambda (g$0$19755) (list g$0$19755)) (g$0$13220 g$0$19723)))) (quote #f))) g$0$19621))) g$0$19617))) ((lambda (g$0$19769) (if (g$0$13212 g$0$19769) (begin (quote #f) ((lambda (g$0$19771) (if g$0$19771 (begin (quote #f) ((lambda (g$0$19773) (if g$0$19773 (begin (quote #f) (append g$0$19771 g$0$19773)) (quote #f))) ((lambda (g$0$19775) (if (g$0$13212 g$0$19775) (begin (quote #f) ((lambda (g$0$19777) (if g$0$19777 (begin (quote #f) ((lambda (g$0$19779) (if g$0$19779 (begin (quote #f) (append g$0$19777 g$0$19779)) (quote #f))) ((lambda (g$0$19781) (if (equal? (g$0$13246 g$0$19781) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$19775)))) (quote #f))) ((lambda (g$0$19783) (list g$0$19783)) (g$0$13220 g$0$19775)))) (quote #f))) (g$0$13224 g$0$19769)))) (quote #f))) ((lambda (g$0$19785) (list g$0$19785)) (g$0$13220 g$0$19769)))) (quote #f))) g$0$19617))) g$0$19613))) ((lambda (g$0$19791) (list g$0$19791)) g$0$19613))) g$0$19609))) (g$0$19605 g$0$19600 (quote 0) (quote ())))) (quote #f) (quote #f)))) (set! g$0$13569 (lambda (g$0$19808 g$0$19809) ((lambda (g$0$19811 g$0$19813 g$0$19815 g$0$19817 g$0$19819 g$0$19821 g$0$19823 g$0$19825) (begin (set! g$0$19811 (lambda (g$0$19935 g$0$19936 g$0$19937) (if (if (null? g$0$19936) (begin (quote #f) (null? g$0$19937)) (quote #f)) g$0$19935 (g$0$13202 g$0$19935 g$0$19936 g$0$19937)))) (set! g$0$19813 (lambda (g$0$19920 g$0$19921 g$0$19922 g$0$19923) (if (pair? g$0$19920) ((lambda (g$0$19929) (if g$0$19929 (begin (quote #f) ((lambda (g$0$19931) (if g$0$19931 (begin (quote #f) (cons g$0$19929 g$0$19931)) (quote #f))) (g$0$19813 (cdr g$0$19920) g$0$19921 g$0$19922 g$0$19923))) (quote #f))) (g$0$19825 (car g$0$19920) g$0$19921 g$0$19922 g$0$19923 (quote ()))) (if (null? g$0$19920) (quote ()) (if (g$0$13178 g$0$19920) (call-with-values (lambda () (g$0$13200 g$0$19922 g$0$19923 g$0$19920)) (lambda (g$0$19926 g$0$19927) (g$0$19813 (g$0$13180 g$0$19920) g$0$19921 g$0$19926 g$0$19927))) (quote #f)))))) (set! g$0$19815 (lambda (g$0$19889 g$0$19890 g$0$19891 g$0$19892 g$0$19893 g$0$19894 g$0$19895) (letrec ((g$0$19897 (lambda (g$0$19901 g$0$19902 g$0$19903) (if (pair? g$0$19901) (call-with-values (lambda () (g$0$19897 (cdr g$0$19901) g$0$19902 g$0$19903)) (lambda (g$0$19911 g$0$19912 g$0$19913) (if g$0$19913 (if (null? g$0$19912) ((lambda (g$0$19915) (if g$0$19915 (values (cons g$0$19915 g$0$19911) g$0$19912 g$0$19913) (values (quote #f) (quote #f) (quote #f)))) (g$0$19825 (car g$0$19901) g$0$19890 g$0$19902 g$0$19903 (quote ()))) (values (quote ()) (cdr g$0$19912) (g$0$19825 (car g$0$19901) (car g$0$19912) g$0$19902 g$0$19903 g$0$19913))) (values (quote #f) (quote #f) (quote #f))))) (if (g$0$13178 g$0$19901) (call-with-values (lambda () (g$0$13200 g$0$19902 g$0$19903 g$0$19901)) (lambda (g$0$19906 g$0$19907) (g$0$19897 (g$0$13180 g$0$19901) g$0$19906 g$0$19907))) (values (quote ()) g$0$19891 (g$0$19825 g$0$19901 g$0$19892 g$0$19902 g$0$19903 g$0$19895))))))) (g$0$19897 g$0$19889 g$0$19893 g$0$19894)))) (set! g$0$19817 (lambda (g$0$19873 g$0$19874 g$0$19875) (if (pair? g$0$19873) ((lambda (g$0$19881) (if g$0$19881 (begin (quote #f) (cons (g$0$19811 (car g$0$19873) g$0$19874 g$0$19875) g$0$19881)) (quote #f))) (g$0$19817 (cdr g$0$19873) g$0$19874 g$0$19875)) (if (null? g$0$19873) (quote ()) (if (g$0$13178 g$0$19873) (call-with-values (lambda () (g$0$13200 g$0$19874 g$0$19875 g$0$19873)) (lambda (g$0$19878 g$0$19879) (g$0$19817 (g$0$13180 g$0$19873) g$0$19878 g$0$19879))) (quote #f)))))) (set! g$0$19819 (lambda (g$0$19867 g$0$19868) (if (null? g$0$19867) g$0$19868 (if (eq? g$0$19867 (quote _)) g$0$19868 (if (eq? g$0$19867 (quote any)) (cons (quote ()) g$0$19868) (if (pair? g$0$19867) (g$0$19819 (car g$0$19867) (g$0$19819 (cdr g$0$19867) g$0$19868)) (if (eq? g$0$19867 (quote each-any)) (cons (quote ()) g$0$19868) ((lambda (g$0$19869) (if (memv g$0$19869 (quote (each))) (g$0$19819 (vector-ref g$0$19867 (quote 1)) g$0$19868) (if (memv g$0$19869 (quote (each+))) (g$0$19819 (vector-ref g$0$19867 (quote 1)) (g$0$19819 (reverse (vector-ref g$0$19867 (quote 2))) (g$0$19819 (vector-ref g$0$19867 (quote 3)) g$0$19868))) (if (memv g$0$19869 (quote (free-id atom))) g$0$19868 (if (memv g$0$19869 (quote (vector))) (g$0$19819 (vector-ref g$0$19867 (quote 1)) g$0$19868) (error (quote syntax-dispatch) (quote "invalid pattern") g$0$19867)))))) (vector-ref g$0$19867 (quote 0)))))))))) (set! g$0$19821 (lambda (g$0$19863 g$0$19864) (if (null? (car g$0$19863)) g$0$19864 (cons (map car g$0$19863) (g$0$19821 (map cdr g$0$19863) g$0$19864))))) (set! g$0$19823 (lambda (g$0$19845 g$0$19846 g$0$19847 g$0$19848 g$0$19849) (if (null? g$0$19846) (if (null? g$0$19845) (begin (quote #f) g$0$19849) (quote #f)) (if (pair? g$0$19846) (if (pair? g$0$19845) (begin (quote #f) (g$0$19825 (car g$0$19845) (car g$0$19846) g$0$19847 g$0$19848 (g$0$19825 (cdr g$0$19845) (cdr g$0$19846) g$0$19847 g$0$19848 g$0$19849))) (quote #f)) (if (eq? g$0$19846 (quote each-any)) ((lambda (g$0$19860) (if g$0$19860 (begin (quote #f) (cons g$0$19860 g$0$19849)) (quote #f))) (g$0$19817 g$0$19845 g$0$19847 g$0$19848)) ((lambda (g$0$19850) (if (memv g$0$19850 (quote (each))) (if (null? g$0$19845) (g$0$19819 (vector-ref g$0$19846 (quote 1)) g$0$19849) ((lambda (g$0$19858) (if g$0$19858 (begin (quote #f) (g$0$19821 g$0$19858 g$0$19849)) (quote #f))) (g$0$19813 g$0$19845 (vector-ref g$0$19846 (quote 1)) g$0$19847 g$0$19848))) (if (memv g$0$19850 (quote (free-id))) (if (symbol? g$0$19845) (if (g$0$13234 (g$0$19811 g$0$19845 g$0$19847 g$0$19848) (vector-ref g$0$19846 (quote 1))) (begin (quote #f) g$0$19849) (quote #f)) (quote #f)) (if (memv g$0$19850 (quote (each+))) (call-with-values (lambda () (g$0$19815 g$0$19845 (vector-ref g$0$19846 (quote 1)) (vector-ref g$0$19846 (quote 2)) (vector-ref g$0$19846 (quote 3)) g$0$19847 g$0$19848 g$0$19849)) (lambda (g$0$19854 g$0$19855 g$0$19856) (if g$0$19856 (if (null? g$0$19855) (begin (quote #f) (if (null? g$0$19854) (g$0$19819 (vector-ref g$0$19846 (quote 1)) g$0$19856) (g$0$19821 g$0$19854 g$0$19856))) (quote #f)) (quote #f)))) (if (memv g$0$19850 (quote (atom))) (if (equal? (vector-ref g$0$19846 (quote 1)) (g$0$13244 g$0$19845 g$0$19847)) (begin (quote #f) g$0$19849) (quote #f)) (if (memv g$0$19850 (quote (vector))) (if (vector? g$0$19845) (begin (quote #f) (g$0$19825 (vector->list g$0$19845) (vector-ref g$0$19846 (quote 1)) g$0$19847 g$0$19848 g$0$19849)) (quote #f)) (error (quote syntax-dispatch) (quote "invalid pattern") g$0$19846))))))) (vector-ref g$0$19846 (quote 0)))))))) (set! g$0$19825 (lambda (g$0$19831 g$0$19832 g$0$19833 g$0$19834 g$0$19835) (if (not g$0$19835) (quote #f) (if (eq? g$0$19832 (quote _)) g$0$19835 (if (eq? g$0$19832 (quote any)) (cons (g$0$19811 g$0$19831 g$0$19833 g$0$19834) g$0$19835) (if (g$0$13178 g$0$19831) (call-with-values (lambda () (g$0$13200 g$0$19833 g$0$19834 g$0$19831)) (lambda (g$0$19838 g$0$19839) (g$0$19825 (g$0$13180 g$0$19831) g$0$19832 g$0$19838 g$0$19839 g$0$19835))) (g$0$19823 g$0$19831 g$0$19832 g$0$19833 g$0$19834 g$0$19835))))))) (g$0$19825 g$0$19808 g$0$19809 (quote ()) (quote ()) (quote ())))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$13571 (lambda (g$0$19939) (if (g$0$13226 g$0$19939) (begin (quote #f) (g$0$13234 g$0$19939 (g$0$13479 (quote ...)))) (quote #f)))) (set! g$0$13573 ((lambda () ((lambda (g$0$19941 g$0$19943 g$0$19945 g$0$19947) (begin (set! g$0$19941 (lambda (g$0$20155 g$0$20156 g$0$20157 g$0$20158 g$0$20159) ((lambda (g$0$20162 g$0$20163) ((lambda (g$0$20166 g$0$20167) ((lambda (g$0$20169) (list (quote (primitive apply)) (g$0$13114 (quote #f) g$0$20167 g$0$20169) g$0$20157)) (g$0$13597 (g$0$13206 (g$0$13173 g$0$20162 g$0$20166) g$0$20156) (append (map (lambda (g$0$20173 g$0$20174 g$0$20175) (cons g$0$20173 (g$0$13252 (quote syntax) (cons g$0$20174 g$0$20175)))) g$0$20166 g$0$20167 (map cdr g$0$20155)) g$0$20158) g$0$20159))) (map g$0$13140 g$0$20162) (map g$0$13136 g$0$20162))) (map car g$0$20155) (map cdr g$0$20155)))) (set! g$0$19943 (lambda (g$0$20141 g$0$20142 g$0$20143) (letrec ((g$0$20145 (lambda (g$0$20148 g$0$20149) (if (null? g$0$20148) (error (quote expander) (quote "invalid syntax") (g$0$13246 g$0$20142)) (if (g$0$13226 (car g$0$20148)) (if (g$0$13240 (car g$0$20148) g$0$20149) (g$0$13702 (car g$0$20148) (quote "duplicate ") g$0$20143) (g$0$20145 (cdr g$0$20148) (cons (car g$0$20148) g$0$20149))) (g$0$13702 (car g$0$20148) (quote "invalid ") g$0$20143)))))) (g$0$20145 g$0$20141 (quote ()))))) (set! g$0$19945 (lambda (g$0$20114 g$0$20115 g$0$20116 g$0$20117 g$0$20118 g$0$20119 g$0$20120 g$0$20121) (call-with-values (lambda () (g$0$13567 g$0$20119 g$0$20115)) (lambda (g$0$20124 g$0$20125) (if (not (g$0$13238 (map car g$0$20125))) (g$0$19943 (map car g$0$20125) g$0$20119 (quote "pattern variable")) (if (not (for-all (lambda (g$0$20137) (not (g$0$13571 (car g$0$20137)))) g$0$20125)) (error (quote expander) (quote "misplaced ellipsis in syntax-case pattern") (g$0$13244 g$0$20119 (quote ()))) ((lambda (g$0$20127) ((lambda (g$0$20129) ((lambda (g$0$20131) ((lambda (g$0$20133) (list (g$0$13114 (quote #f) (list g$0$20127) (list (quote if) g$0$20129 g$0$20131 g$0$20133)) (list (quote (primitive syntax-dispatch)) g$0$20114 (list (quote quote) g$0$20124)))) (g$0$19947 g$0$20114 g$0$20115 g$0$20116 g$0$20117 g$0$20118))) (g$0$19941 g$0$20125 g$0$20121 g$0$20127 g$0$20117 g$0$20118))) (if (eq? g$0$20120 (quote #t)) g$0$20127 ((lambda (g$0$20135) (list (quote if) g$0$20127 g$0$20135 (list (quote quote) (quote #f)))) (g$0$19941 g$0$20125 g$0$20120 g$0$20127 g$0$20117 g$0$20118))))) (g$0$13136 (quote tmp))))))))) (set! g$0$19947 (lambda (g$0$20023 g$0$20024 g$0$20025 g$0$20026 g$0$20027) (if (null? g$0$20025) (list (quote (primitive syntax-error)) g$0$20023) ((lambda (g$0$20029) ((lambda (g$0$20031) (if (if g$0$20031 (begin (quote #f) (apply (lambda (g$0$20086 g$0$20087) (quote #t)) g$0$20031)) (quote #f)) (apply (lambda (g$0$20076 g$0$20077) (if (if (g$0$13226 g$0$20076) (if (not (g$0$13240 g$0$20076 g$0$20024)) (begin (quote #f) (not (g$0$13571 g$0$20076))) (quote #f)) (quote #f)) (if (g$0$13234 g$0$20076 (g$0$13479 (quote _))) (g$0$13597 g$0$20077 g$0$20026 g$0$20027) ((lambda (g$0$20080 g$0$20081) ((lambda (g$0$20083) (list (g$0$13114 (quote #f) (list g$0$20081) g$0$20083) g$0$20023)) (g$0$13597 (g$0$13206 (g$0$13173 (list g$0$20076) (list g$0$20080)) g$0$20077) (cons (cons g$0$20080 (g$0$13252 (quote syntax) (cons g$0$20081 (quote 0)))) g$0$20026) g$0$20027))) (g$0$13140 g$0$20076) (g$0$13136 g$0$20076))) (g$0$19945 g$0$20023 g$0$20024 (cdr g$0$20025) g$0$20026 g$0$20027 g$0$20076 (quote #t) g$0$20077))) g$0$20031) ((lambda (g$0$20033) ((lambda (g$0$20035) (if (if g$0$20035 (begin (quote #f) (apply (lambda (g$0$20045 g$0$20046 g$0$20047) (quote #t)) g$0$20035)) (quote #f)) (apply (lambda (g$0$20039 g$0$20040 g$0$20041) (g$0$19945 g$0$20023 g$0$20024 (cdr g$0$20025) g$0$20026 g$0$20027 g$0$20039 g$0$20040 g$0$20041)) g$0$20035) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$20033 (quote ()))))) ((lambda (g$0$20049) (if (g$0$13212 g$0$20049) (begin (quote #f) ((lambda (g$0$20051) (if g$0$20051 (begin (quote #f) ((lambda (g$0$20053) (if g$0$20053 (begin (quote #f) (append g$0$20051 g$0$20053)) (quote #f))) ((lambda (g$0$20055) (if (g$0$13212 g$0$20055) (begin (quote #f) ((lambda (g$0$20057) (if g$0$20057 (begin (quote #f) ((lambda (g$0$20059) (if g$0$20059 (begin (quote #f) (append g$0$20057 g$0$20059)) (quote #f))) ((lambda (g$0$20061) (if (g$0$13212 g$0$20061) (begin (quote #f) ((lambda (g$0$20063) (if g$0$20063 (begin (quote #f) ((lambda (g$0$20065) (if g$0$20065 (begin (quote #f) (append g$0$20063 g$0$20065)) (quote #f))) ((lambda (g$0$20067) (if (equal? (g$0$13246 g$0$20067) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$20061)))) (quote #f))) ((lambda (g$0$20069) (list g$0$20069)) (g$0$13220 g$0$20061)))) (quote #f))) (g$0$13224 g$0$20055)))) (quote #f))) ((lambda (g$0$20071) (list g$0$20071)) (g$0$13220 g$0$20055)))) (quote #f))) (g$0$13224 g$0$20049)))) (quote #f))) ((lambda (g$0$20073) (list g$0$20073)) (g$0$13220 g$0$20049)))) (quote #f))) g$0$20033))) g$0$20029))) ((lambda (g$0$20089) (if (g$0$13212 g$0$20089) (begin (quote #f) ((lambda (g$0$20091) (if g$0$20091 (begin (quote #f) ((lambda (g$0$20093) (if g$0$20093 (begin (quote #f) (append g$0$20091 g$0$20093)) (quote #f))) ((lambda (g$0$20095) (if (g$0$13212 g$0$20095) (begin (quote #f) ((lambda (g$0$20097) (if g$0$20097 (begin (quote #f) ((lambda (g$0$20099) (if g$0$20099 (begin (quote #f) (append g$0$20097 g$0$20099)) (quote #f))) ((lambda (g$0$20101) (if (equal? (g$0$13246 g$0$20101) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$20095)))) (quote #f))) ((lambda (g$0$20103) (list g$0$20103)) (g$0$13220 g$0$20095)))) (quote #f))) (g$0$13224 g$0$20089)))) (quote #f))) ((lambda (g$0$20105) (list g$0$20105)) (g$0$13220 g$0$20089)))) (quote #f))) g$0$20029))) (car g$0$20025))))) (lambda (g$0$19951 g$0$19952 g$0$19953) ((lambda (g$0$19955) ((lambda (g$0$19957) (if (if g$0$19957 (begin (quote #f) (apply (lambda (g$0$19973 g$0$19974 g$0$19975) (quote #t)) g$0$19957)) (quote #f)) (apply (lambda (g$0$19961 g$0$19962 g$0$19963) (begin (if (for-all (lambda (g$0$19965) (if (g$0$13226 g$0$19965) (begin (quote #f) (not (g$0$13571 g$0$19965))) (quote #f))) g$0$19962) (void) (error (quote expander) (quote "invalid literals") (g$0$13244 g$0$19951 (quote ())))) ((lambda (g$0$19967) ((lambda (g$0$19969) (list (g$0$13114 (quote #f) (list g$0$19967) g$0$19969) (g$0$13597 g$0$19961 g$0$19952 g$0$19953))) (g$0$19947 g$0$19967 g$0$19962 g$0$19963 g$0$19952 g$0$19953))) (g$0$13136 (quote tmp))))) g$0$19957) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$19955 (quote ()))))) ((lambda (g$0$19977) (if (g$0$13212 g$0$19977) (begin (quote #f) ((lambda (g$0$19979) (if g$0$19979 (begin (quote #f) ((lambda (g$0$19981) (if g$0$19981 (begin (quote #f) (append g$0$19979 g$0$19981)) (quote #f))) ((lambda (g$0$19983) (if (g$0$13212 g$0$19983) (begin (quote #f) ((lambda (g$0$19985) (if g$0$19985 (begin (quote #f) ((lambda (g$0$19987) (if g$0$19987 (begin (quote #f) (append g$0$19985 g$0$19987)) (quote #f))) ((lambda (g$0$19989) (if (g$0$13212 g$0$19989) (begin (quote #f) ((lambda (g$0$19991) (if g$0$19991 (begin (quote #f) ((lambda (g$0$19993) (if g$0$19993 (begin (quote #f) (append g$0$19991 g$0$19993)) (quote #f))) ((letrec ((g$0$19995 (lambda (g$0$19997) (if (g$0$13212 g$0$19997) ((lambda (g$0$19999) (if g$0$19999 (begin (quote #f) ((lambda (g$0$20001) (if g$0$20001 (begin (quote #f) (map cons g$0$19999 g$0$20001)) (quote #f))) (g$0$19995 (g$0$13224 g$0$19997)))) (quote #f))) ((lambda (g$0$20003) (list g$0$20003)) (g$0$13220 g$0$19997))) (if (g$0$13216 g$0$19997) (list (begin (quote clauses) (quote ()))) (quote #f)))))) g$0$19995) (g$0$13224 g$0$19989)))) (quote #f))) ((letrec ((g$0$20005 (lambda (g$0$20007) (if (g$0$13212 g$0$20007) ((lambda (g$0$20009) (if g$0$20009 (begin (quote #f) ((lambda (g$0$20011) (if g$0$20011 (begin (quote #f) (map cons g$0$20009 g$0$20011)) (quote #f))) (g$0$20005 (g$0$13224 g$0$20007)))) (quote #f))) ((lambda (g$0$20013) (list g$0$20013)) (g$0$13220 g$0$20007))) (if (g$0$13216 g$0$20007) (list (begin (quote keys) (quote ()))) (quote #f)))))) g$0$20005) (g$0$13220 g$0$19989)))) (quote #f))) (g$0$13224 g$0$19983)))) (quote #f))) ((lambda (g$0$20015) (list g$0$20015)) (g$0$13220 g$0$19983)))) (quote #f))) (g$0$13224 g$0$19977)))) (quote #f))) ((lambda (g$0$20017) (quote ())) (g$0$13220 g$0$19977)))) (quote #f))) g$0$19955))) g$0$19951)))) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$0$13575 ((lambda () ((lambda (g$0$20177 g$0$20179 g$0$20181 g$0$20183 g$0$20185 g$0$20187 g$0$20189 g$0$20191) (begin (set! g$0$20177 (lambda (g$0$20304 g$0$20305 g$0$20306 g$0$20307 g$0$20308 g$0$20309) ((lambda (g$0$20311) ((lambda (g$0$20313) (if (if g$0$20313 (begin (quote #f) (apply (lambda (g$0$20523) (g$0$20308 g$0$20523)) g$0$20313)) (quote #f)) (apply (lambda (g$0$20521) (error (quote expander) (quote "misplaced ellipsis in syntax form") (g$0$13244 g$0$20304 (quote ())))) g$0$20313) ((lambda (g$0$20315) ((lambda (g$0$20317) (if (if g$0$20317 (begin (quote #f) (apply (lambda (g$0$20517) (g$0$13226 g$0$20517)) g$0$20317)) (quote #f)) (apply (lambda (g$0$20505) ((lambda (g$0$20507) ((lambda (g$0$20509) ((lambda () (if (eq? (g$0$13254 g$0$20509) (quote syntax)) (call-with-values (lambda () ((lambda (g$0$20511) (g$0$20179 g$0$20304 (car g$0$20511) (cdr g$0$20511) g$0$20307)) (g$0$13256 g$0$20509))) (lambda (g$0$20514 g$0$20515) (values (list (quote ref) g$0$20514) g$0$20515))) (values (list (quote quote) g$0$20305) g$0$20307))))) (g$0$13250 g$0$20507 g$0$20306))) (g$0$13248 g$0$20305))) g$0$20317) ((lambda (g$0$20319) ((lambda (g$0$20321) (if (if g$0$20321 (begin (quote #f) (apply (lambda (g$0$20484 g$0$20485) (g$0$20308 g$0$20484)) g$0$20321)) (quote #f)) (apply (lambda (g$0$20478 g$0$20479) (if g$0$20309 (error (quote expander) (quote "misplaced ellipsis in syntax form") (g$0$13244 g$0$20304 (quote ()))) (g$0$20177 g$0$20304 g$0$20479 g$0$20306 g$0$20307 (lambda (g$0$20481) (quote #f)) (quote #f)))) g$0$20321) ((lambda (g$0$20323) ((lambda (g$0$20325) (if (if g$0$20325 (begin (quote #f) (apply (lambda (g$0$20455 g$0$20456 g$0$20457) (g$0$20308 g$0$20456)) g$0$20325)) (quote #f)) (apply (lambda (g$0$20389 g$0$20390 g$0$20391) (letrec ((g$0$20393 (lambda (g$0$20396 g$0$20397) ((lambda (g$0$20399) ((lambda (g$0$20401) (if (if g$0$20401 (begin (quote #f) (apply (lambda () (quote #t)) g$0$20401)) (quote #f)) (apply (lambda () (g$0$20397 g$0$20307)) g$0$20401) ((lambda (g$0$20403) ((lambda (g$0$20405) (if (if g$0$20405 (begin (quote #f) (apply (lambda (g$0$20432 g$0$20433) (g$0$20308 g$0$20432)) g$0$20405)) (quote #f)) (apply (lambda (g$0$20422 g$0$20423) (g$0$20393 g$0$20423 (lambda (g$0$20425) (call-with-values (lambda () (g$0$20397 (cons (quote ()) g$0$20425))) (lambda (g$0$20428 g$0$20429) (if (null? (car g$0$20429)) (error (quote expander) (quote "extra ellipsis in syntax form") (g$0$13244 g$0$20304 (quote ()))) (values (g$0$20183 g$0$20428 (car g$0$20429)) (cdr g$0$20429)))))))) g$0$20405) ((lambda (g$0$20407) ((lambda (g$0$20409) (if (if g$0$20409 (begin (quote #f) (apply (lambda () (quote #t)) g$0$20409)) (quote #f)) (apply (lambda () (call-with-values (lambda () (g$0$20177 g$0$20304 g$0$20396 g$0$20306 g$0$20307 g$0$20308 g$0$20309)) (lambda (g$0$20412 g$0$20413) (call-with-values (lambda () (g$0$20397 g$0$20413)) (lambda (g$0$20416 g$0$20417) (values (g$0$20181 g$0$20416 g$0$20412) g$0$20417)))))) g$0$20409) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$20407 (quote ()))))) ((lambda (g$0$20419) (quote ())) g$0$20407))) g$0$20403))) ((lambda (g$0$20435) (if (g$0$13212 g$0$20435) (begin (quote #f) ((lambda (g$0$20437) (if g$0$20437 (begin (quote #f) ((lambda (g$0$20439) (if g$0$20439 (begin (quote #f) (append g$0$20437 g$0$20439)) (quote #f))) ((lambda (g$0$20441) (list g$0$20441)) (g$0$13224 g$0$20435)))) (quote #f))) ((lambda (g$0$20443) (list g$0$20443)) (g$0$13220 g$0$20435)))) (quote #f))) g$0$20403))) g$0$20399))) ((lambda (g$0$20445) (if (equal? (g$0$13246 g$0$20445) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$20399))) g$0$20396)))) (g$0$20393 g$0$20391 (lambda (g$0$20447) (call-with-values (lambda () (g$0$20177 g$0$20304 g$0$20389 g$0$20306 (cons (quote ()) g$0$20447) g$0$20308 (quote #f))) (lambda (g$0$20450 g$0$20451) (if (null? (car g$0$20451)) (error (quote expander) (quote "extra ellipsis in syntax form") (g$0$13244 g$0$20304 (quote ()))) (values (g$0$20185 g$0$20450 (car g$0$20451)) (cdr g$0$20451))))))))) g$0$20325) ((lambda (g$0$20327) ((lambda (g$0$20329) (if (if g$0$20329 (begin (quote #f) (apply (lambda (g$0$20374 g$0$20375) (quote #t)) g$0$20329)) (quote #f)) (apply (lambda (g$0$20362 g$0$20363) (call-with-values (lambda () (g$0$20177 g$0$20304 g$0$20362 g$0$20306 g$0$20307 g$0$20308 (quote #f))) (lambda (g$0$20366 g$0$20367) (call-with-values (lambda () (g$0$20177 g$0$20304 g$0$20363 g$0$20306 g$0$20367 g$0$20308 g$0$20309)) (lambda (g$0$20370 g$0$20371) (values (g$0$20187 g$0$20305 g$0$20362 g$0$20363 g$0$20366 g$0$20370) g$0$20371)))))) g$0$20329) ((lambda (g$0$20331) ((lambda (g$0$20333) (if (if g$0$20333 (begin (quote #f) (apply (lambda (g$0$20347) (not (g$0$13178 g$0$20305))) g$0$20333)) (quote #f)) (apply (lambda (g$0$20341) (call-with-values (lambda () (g$0$20177 g$0$20304 g$0$20341 g$0$20306 g$0$20307 g$0$20308 (quote #t))) (lambda (g$0$20344 g$0$20345) (values (g$0$20189 g$0$20305 g$0$20341 g$0$20344) g$0$20345)))) g$0$20333) ((lambda (g$0$20335) ((lambda (g$0$20337) (if (if g$0$20337 (begin (quote #f) (apply (lambda () (quote #t)) g$0$20337)) (quote #f)) (apply (lambda () (values (list (quote quote) g$0$20305) g$0$20307)) g$0$20337) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$20335 (quote ()))))) ((lambda (g$0$20339) (quote ())) g$0$20335))) g$0$20331))) ((lambda (g$0$20349) (if (g$0$13214 g$0$20349) (begin (quote #f) ((letrec ((g$0$20351 (lambda (g$0$20353) (if (g$0$13212 g$0$20353) ((lambda (g$0$20355) (if g$0$20355 (begin (quote #f) ((lambda (g$0$20357) (if g$0$20357 (begin (quote #f) (map cons g$0$20355 g$0$20357)) (quote #f))) (g$0$20351 (g$0$13224 g$0$20353)))) (quote #f))) ((lambda (g$0$20359) (list g$0$20359)) (g$0$13220 g$0$20353))) (if (g$0$13216 g$0$20353) (list (begin (quote ls) (quote ()))) (quote #f)))))) g$0$20351) (g$0$13210 g$0$20349))) (quote #f))) g$0$20331))) g$0$20327))) ((lambda (g$0$20377) (if (g$0$13212 g$0$20377) (begin (quote #f) ((lambda (g$0$20379) (if g$0$20379 (begin (quote #f) ((lambda (g$0$20381) (if g$0$20381 (begin (quote #f) (append g$0$20379 g$0$20381)) (quote #f))) ((lambda (g$0$20383) (list g$0$20383)) (g$0$13224 g$0$20377)))) (quote #f))) ((lambda (g$0$20385) (list g$0$20385)) (g$0$13220 g$0$20377)))) (quote #f))) g$0$20327))) g$0$20323))) ((lambda (g$0$20459) (if (g$0$13212 g$0$20459) (begin (quote #f) ((lambda (g$0$20461) (if g$0$20461 (begin (quote #f) ((lambda (g$0$20463) (if g$0$20463 (begin (quote #f) (append g$0$20461 g$0$20463)) (quote #f))) ((lambda (g$0$20465) (if (g$0$13212 g$0$20465) (begin (quote #f) ((lambda (g$0$20467) (if g$0$20467 (begin (quote #f) ((lambda (g$0$20469) (if g$0$20469 (begin (quote #f) (append g$0$20467 g$0$20469)) (quote #f))) ((lambda (g$0$20471) (list g$0$20471)) (g$0$13224 g$0$20465)))) (quote #f))) ((lambda (g$0$20473) (list g$0$20473)) (g$0$13220 g$0$20465)))) (quote #f))) (g$0$13224 g$0$20459)))) (quote #f))) ((lambda (g$0$20475) (list g$0$20475)) (g$0$13220 g$0$20459)))) (quote #f))) g$0$20323))) g$0$20319))) ((lambda (g$0$20487) (if (g$0$13212 g$0$20487) (begin (quote #f) ((lambda (g$0$20489) (if g$0$20489 (begin (quote #f) ((lambda (g$0$20491) (if g$0$20491 (begin (quote #f) (append g$0$20489 g$0$20491)) (quote #f))) ((lambda (g$0$20493) (if (g$0$13212 g$0$20493) (begin (quote #f) ((lambda (g$0$20495) (if g$0$20495 (begin (quote #f) ((lambda (g$0$20497) (if g$0$20497 (begin (quote #f) (append g$0$20495 g$0$20497)) (quote #f))) ((lambda (g$0$20499) (if (equal? (g$0$13246 g$0$20499) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$20493)))) (quote #f))) ((lambda (g$0$20501) (list g$0$20501)) (g$0$13220 g$0$20493)))) (quote #f))) (g$0$13224 g$0$20487)))) (quote #f))) ((lambda (g$0$20503) (list g$0$20503)) (g$0$13220 g$0$20487)))) (quote #f))) g$0$20319))) g$0$20315))) ((lambda (g$0$20519) (list g$0$20519)) g$0$20315))) g$0$20311))) ((lambda (g$0$20525) (list g$0$20525)) g$0$20311))) g$0$20305))) (set! g$0$20179 (lambda (g$0$20284 g$0$20285 g$0$20286 g$0$20287) (if (= g$0$20286 (quote 0)) (values g$0$20285 g$0$20287) (if (null? g$0$20287) (error (quote expander) (quote "missing ellipsis in syntax form") (g$0$13244 g$0$20284 (quote ()))) (call-with-values (lambda () (g$0$20179 g$0$20284 g$0$20285 (- g$0$20286 (quote 1)) (cdr g$0$20287))) (lambda (g$0$20290 g$0$20291) ((lambda (g$0$20293) (if g$0$20293 ((lambda (g$0$20297) (values (cdr g$0$20297) g$0$20287)) g$0$20293) ((lambda (g$0$20295) (values g$0$20295 (cons (cons (cons g$0$20290 g$0$20295) (car g$0$20287)) g$0$20291))) (g$0$13136 (quote tmp))))) (assq g$0$20290 (car g$0$20287))))))))) (set! g$0$20181 (lambda (g$0$20278 g$0$20279) (if (equal? g$0$20279 (quote (quote ()))) g$0$20278 (list (quote append) g$0$20278 g$0$20279)))) (set! g$0$20183 (lambda (g$0$20274 g$0$20275) (list (quote apply) (quote (primitive append)) (g$0$20185 g$0$20274 g$0$20275)))) (set! g$0$20185 (lambda (g$0$20256 g$0$20257) ((lambda (g$0$20260 g$0$20261) (if (eq? (car g$0$20256) (quote ref)) (car g$0$20261) (if (for-all (lambda (g$0$20269) (if (eq? (car g$0$20269) (quote ref)) (begin (quote #f) (memq (cadr g$0$20269) g$0$20260)) (quote #f))) (cdr g$0$20256)) ((lambda (g$0$20263) (cons (quote map) (cons (list (quote primitive) (car g$0$20256)) g$0$20263))) (map ((lambda (g$0$20265) (lambda (g$0$20267) (cdr (assq (cadr g$0$20267) g$0$20265)))) (map cons g$0$20260 g$0$20261)) (cdr g$0$20256))) (cons* (quote map) (list (quote lambda) g$0$20260 g$0$20256) g$0$20261)))) (map cdr g$0$20257) (map (lambda (g$0$20271) (list (quote ref) (car g$0$20271))) g$0$20257)))) (set! g$0$20187 (lambda (g$0$20244 g$0$20245 g$0$20246 g$0$20247 g$0$20248) ((lambda (g$0$20249) (if (memv g$0$20249 (quote (quote))) (if (eq? (car g$0$20247) (quote quote)) ((lambda (g$0$20252 g$0$20253) (if (if (eq? g$0$20252 g$0$20245) (begin (quote #f) (eq? g$0$20253 g$0$20246)) (quote #f)) (list (quote quote) g$0$20244) (list (quote quote) (cons g$0$20252 g$0$20253)))) (cadr g$0$20247) (cadr g$0$20248)) (if (null? (cadr g$0$20248)) (list (quote list) g$0$20247) (list (quote cons) g$0$20247 g$0$20248))) (if (memv g$0$20249 (quote (list))) (cons (quote list) (cons g$0$20247 (cdr g$0$20248))) (list (quote cons) g$0$20247 g$0$20248)))) (car g$0$20248)))) (set! g$0$20189 (lambda (g$0$20236 g$0$20237 g$0$20238) (if (eq? (car g$0$20238) (quote quote)) (if (eq? (cadr g$0$20238) g$0$20237) (list (quote quote) g$0$20236) (list (quote quote) (list->vector (cadr g$0$20238)))) (if (eq? (car g$0$20238) (quote list)) (cons (quote vector) (cdr g$0$20238)) (list (quote list->vector) g$0$20238))))) (set! g$0$20191 (lambda (g$0$20229) ((lambda (g$0$20230) (if (memv g$0$20230 (quote (ref))) (cadr g$0$20229) (if (memv g$0$20230 (quote (primitive))) (list (quote primitive) (cadr g$0$20229)) (if (memv g$0$20230 (quote (quote))) (list (quote quote) (cadr g$0$20229)) (if (memv g$0$20230 (quote (lambda))) (g$0$13114 (quote #f) (cadr g$0$20229) (g$0$20191 (caddr g$0$20229))) (if (memv g$0$20230 (quote (map))) ((lambda (g$0$20232) (cons (quote (primitive map)) g$0$20232)) (map g$0$20191 (cdr g$0$20229))) (cons (list (quote primitive) (car g$0$20229)) (map g$0$20191 (cdr g$0$20229))))))))) (car g$0$20229)))) (lambda (g$0$20195 g$0$20196 g$0$20197) ((lambda (g$0$20199) ((lambda (g$0$20201) (if (if g$0$20201 (begin (quote #f) (apply (lambda (g$0$20209) (quote #t)) g$0$20201)) (quote #f)) (apply (lambda (g$0$20203) (call-with-values (lambda () (g$0$20177 g$0$20195 g$0$20203 g$0$20196 (quote ()) g$0$13571 (quote #f))) (lambda (g$0$20206 g$0$20207) (g$0$20191 g$0$20206)))) g$0$20201) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$20199 (quote ()))))) ((lambda (g$0$20211) (if (g$0$13212 g$0$20211) (begin (quote #f) ((lambda (g$0$20213) (if g$0$20213 (begin (quote #f) ((lambda (g$0$20215) (if g$0$20215 (begin (quote #f) (append g$0$20213 g$0$20215)) (quote #f))) ((lambda (g$0$20217) (if (g$0$13212 g$0$20217) (begin (quote #f) ((lambda (g$0$20219) (if g$0$20219 (begin (quote #f) ((lambda (g$0$20221) (if g$0$20221 (begin (quote #f) (append g$0$20219 g$0$20221)) (quote #f))) ((lambda (g$0$20223) (if (equal? (g$0$13246 g$0$20223) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$20217)))) (quote #f))) ((lambda (g$0$20225) (list g$0$20225)) (g$0$13220 g$0$20217)))) (quote #f))) (g$0$13224 g$0$20211)))) (quote #f))) ((lambda (g$0$20227) (quote ())) (g$0$13220 g$0$20211)))) (quote #f))) g$0$20199))) g$0$20195)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$0$13577 (lambda (g$0$20527) ((lambda (g$0$20528) (if (memv g$0$20528 (quote (quote))) g$0$13507 (if (memv g$0$20528 (quote (lambda))) g$0$13511 (if (memv g$0$20528 (quote (case-lambda))) g$0$13509 (if (memv g$0$20528 (quote (let-values))) g$0$13485 (if (memv g$0$20528 (quote (letrec))) g$0$13489 (if (memv g$0$20528 (quote (letrec*))) g$0$13491 (if (memv g$0$20528 (quote (case))) g$0$13505 (if (memv g$0$20528 (quote (if))) g$0$13503 (if (memv g$0$20528 (quote (when))) g$0$13499 (if (memv g$0$20528 (quote (unless))) g$0$13501 (if (memv g$0$20528 (quote (parameterize))) g$0$13563 (if (memv g$0$20528 (quote (foreign-call))) g$0$13565 (if (memv g$0$20528 (quote (syntax-case))) g$0$13573 (if (memv g$0$20528 (quote (syntax))) g$0$13575 (if (memv g$0$20528 (quote (type-descriptor))) g$0$13493 (if (memv g$0$20528 (quote (record-type-descriptor))) g$0$13495 (if (memv g$0$20528 (quote (record-constructor-descriptor))) g$0$13497 (error (quote macro-transformer) (quote "cannot find transformer") g$0$20527))))))))))))))))))) g$0$20527))) (set! g$0$13579 (lambda (g$0$20530) ((lambda (g$0$20532) ((lambda (g$0$20534) (if (if g$0$20534 (begin (quote #f) (apply (lambda (g$0$20538) (if (for-all g$0$13226 g$0$20538) (begin (quote #f) (g$0$12315 (map g$0$13228 g$0$20538))) (quote #f))) g$0$20534)) (quote #f)) (apply (lambda (g$0$20536) (g$0$13513 (list (quote quote) (g$0$12315 (map g$0$13228 g$0$20536))))) g$0$20534) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$20532 (quote ()))))) ((lambda (g$0$20540) (if (g$0$13212 g$0$20540) (begin (quote #f) ((lambda (g$0$20542) (if g$0$20542 (begin (quote #f) ((lambda (g$0$20544) (if g$0$20544 (begin (quote #f) (append g$0$20542 g$0$20544)) (quote #f))) ((letrec ((g$0$20546 (lambda (g$0$20548) (if (g$0$13212 g$0$20548) ((lambda (g$0$20550) (if g$0$20550 (begin (quote #f) ((lambda (g$0$20552) (if g$0$20552 (begin (quote #f) (map cons g$0$20550 g$0$20552)) (quote #f))) (g$0$20546 (g$0$13224 g$0$20548)))) (quote #f))) ((lambda (g$0$20554) (list g$0$20554)) (g$0$13220 g$0$20548))) (if (g$0$13216 g$0$20548) (list (begin (quote opt*) (quote ()))) (quote #f)))))) g$0$20546) (g$0$13224 g$0$20540)))) (quote #f))) ((lambda (g$0$20556) (quote ())) (g$0$13220 g$0$20540)))) (quote #f))) g$0$20532))) g$0$20530))) (set! g$0$13581 (lambda (g$0$20559 g$0$20560) ((lambda (g$0$20562) ((lambda (g$0$20564) (if (if g$0$20564 (begin (quote #f) (apply (lambda (g$0$20568) (if (g$0$13226 g$0$20568) (begin (quote #f) (memq (g$0$13228 g$0$20568) g$0$20560)) (quote #f))) g$0$20564)) (quote #f)) (apply (lambda (g$0$20566) (g$0$13513 (list (quote quote) g$0$20566))) g$0$20564) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$20562 (quote ()))))) ((lambda (g$0$20570) (if (g$0$13212 g$0$20570) (begin (quote #f) ((lambda (g$0$20572) (if g$0$20572 (begin (quote #f) ((lambda (g$0$20574) (if g$0$20574 (begin (quote #f) (append g$0$20572 g$0$20574)) (quote #f))) ((lambda (g$0$20576) (if (g$0$13212 g$0$20576) (begin (quote #f) ((lambda (g$0$20578) (if g$0$20578 (begin (quote #f) ((lambda (g$0$20580) (if g$0$20580 (begin (quote #f) (append g$0$20578 g$0$20580)) (quote #f))) ((lambda (g$0$20582) (if (equal? (g$0$13246 g$0$20582) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$20576)))) (quote #f))) ((lambda (g$0$20584) (list g$0$20584)) (g$0$13220 g$0$20576)))) (quote #f))) (g$0$13224 g$0$20570)))) (quote #f))) ((lambda (g$0$20586) (quote ())) (g$0$13220 g$0$20570)))) (quote #f))) g$0$20562))) g$0$20559))) (set! g$0$13583 (lambda (g$0$20588) (if (procedure? g$0$20588) g$0$20588 (if (symbol? g$0$20588) ((lambda (g$0$20589) (if (memv g$0$20589 (quote (define-record-type))) g$0$13557 (if (memv g$0$20589 (quote (define-struct))) g$0$13555 (if (memv g$0$20589 (quote (include))) g$0$13547 (if (memv g$0$20589 (quote (cond))) g$0$13545 (if (memv g$0$20589 (quote (let))) g$0$13517 (if (memv g$0$20589 (quote (do))) g$0$13537 (if (memv g$0$20589 (quote (or))) g$0$13541 (if (memv g$0$20589 (quote (and))) g$0$13543 (if (memv g$0$20589 (quote (let*))) g$0$13539 (if (memv g$0$20589 (quote (syntax-rules))) g$0$13549 (if (memv g$0$20589 (quote (quasiquote))) g$0$13551 (if (memv g$0$20589 (quote (quasisyntax))) g$0$13553 (if (memv g$0$20589 (quote (with-syntax))) g$0$13515 (if (memv g$0$20589 (quote (identifier-syntax))) g$0$13535 (if (memv g$0$20589 (quote (time))) g$0$13527 (if (memv g$0$20589 (quote (delay))) g$0$13529 (if (memv g$0$20589 (quote (assert))) g$0$13531 (if (memv g$0$20589 (quote (endianness))) g$0$13533 (if (memv g$0$20589 (quote (guard))) g$0$13523 (if (memv g$0$20589 (quote (define-enumeration))) g$0$13525 (if (memv g$0$20589 (quote (trace-lambda))) g$0$13519 (if (memv g$0$20589 (quote (trace-define))) g$0$13521 (if (memv g$0$20589 (quote (define-condition-type))) g$0$13559 (if (memv g$0$20589 (quote (eol-style))) (lambda (g$0$20595) (g$0$13581 g$0$20595 (quote (none lf cr crlf nel crnel ls)))) (if (memv g$0$20589 (quote (error-handling-mode))) (lambda (g$0$20593) (g$0$13581 g$0$20593 (quote (ignore raise replace)))) (if (memv g$0$20589 (quote (buffer-mode))) (lambda (g$0$20591) (g$0$13581 g$0$20591 (quote (none line block)))) (if (memv g$0$20589 (quote (file-options))) g$0$13579 (if (memv g$0$20589 (quote (... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd))) g$0$13561 (error (quote macro-transformer) (quote "invalid macro") g$0$20588)))))))))))))))))))))))))))))) g$0$20588) (error (quote core-macro-transformer) (quote "invalid macro") g$0$20588))))) (set! g$0$13585 (lambda (g$0$20597) (car g$0$20597))) (set! g$0$13587 (lambda (g$0$20600 g$0$20601) ((lambda (g$0$20603) (g$0$13204 (g$0$13194) g$0$20603)) ((g$0$13583 g$0$20600) (g$0$13204 g$0$13196 g$0$20601))))) (set! g$0$13589 (lambda (g$0$20606 g$0$20607) ((lambda (g$0$20609) (g$0$13204 (g$0$13194) g$0$20609)) ((g$0$13585 g$0$20606) (g$0$13204 g$0$13196 g$0$20607))))) (set! g$0$13591 (lambda (g$0$20612 g$0$20613) ((lambda (g$0$20616 g$0$20617) (begin (g$0$12829 g$0$20616) ((lambda (g$0$20619) ((lambda (g$0$20621) ((lambda (g$0$20623) (g$0$13204 (g$0$13194) g$0$20623)) (g$0$20621 (g$0$13204 g$0$13196 g$0$20613)))) (if (procedure? g$0$20619) g$0$20619 (error (quote chi-global-macro) (quote "not a procedure"))))) (symbol-value g$0$20617)))) (car g$0$20612) (cdr g$0$20612)))) (set! g$0$13593 (lambda (g$0$20627 g$0$20628 g$0$20629) (if (null? g$0$20627) (quote ()) ((lambda (g$0$20631) (cons g$0$20631 (g$0$13593 (cdr g$0$20627) g$0$20628 g$0$20629))) (g$0$13597 (car g$0$20627) g$0$20628 g$0$20629))))) (set! g$0$13595 (lambda (g$0$20635 g$0$20636 g$0$20637) ((lambda (g$0$20639) ((lambda (g$0$20641) (if (if g$0$20641 (begin (quote #f) (apply (lambda (g$0$20650 g$0$20651) (quote #t)) g$0$20641)) (quote #f)) (apply (lambda (g$0$20644 g$0$20645) ((lambda (g$0$20647) (cons g$0$20647 (g$0$13593 g$0$20645 g$0$20636 g$0$20637))) (g$0$13597 g$0$20644 g$0$20636 g$0$20637))) g$0$20641) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$20639 (quote ()))))) ((lambda (g$0$20653) (if (g$0$13212 g$0$20653) (begin (quote #f) ((lambda (g$0$20655) (if g$0$20655 (begin (quote #f) ((lambda (g$0$20657) (if g$0$20657 (begin (quote #f) (append g$0$20655 g$0$20657)) (quote #f))) ((letrec ((g$0$20659 (lambda (g$0$20661) (if (g$0$13212 g$0$20661) ((lambda (g$0$20663) (if g$0$20663 (begin (quote #f) ((lambda (g$0$20665) (if g$0$20665 (begin (quote #f) (map cons g$0$20663 g$0$20665)) (quote #f))) (g$0$20659 (g$0$13224 g$0$20661)))) (quote #f))) ((lambda (g$0$20667) (list g$0$20667)) (g$0$13220 g$0$20661))) (if (g$0$13216 g$0$20661) (list (begin (quote rands) (quote ()))) (quote #f)))))) g$0$20659) (g$0$13224 g$0$20653)))) (quote #f))) ((lambda (g$0$20669) (list g$0$20669)) (g$0$13220 g$0$20653)))) (quote #f))) g$0$20639))) g$0$20635))) (set! g$0$13597 (lambda (g$0$20673 g$0$20674 g$0$20675) (call-with-values (lambda () (g$0$13258 g$0$20673 g$0$20674)) (lambda (g$0$20679 g$0$20680 g$0$20681) ((lambda (g$0$20682) (if (memv g$0$20682 (quote (core-macro))) ((lambda (g$0$20820) (g$0$20820 g$0$20673 g$0$20674 g$0$20675)) (g$0$13577 g$0$20680)) (if (memv g$0$20682 (quote (global))) ((lambda (g$0$20816) ((lambda (g$0$20818) ((lambda () (begin ((g$0$13645) g$0$20816) g$0$20818)))) (cdr g$0$20680))) (car g$0$20680)) (if (memv g$0$20682 (quote (core-prim))) ((lambda (g$0$20814) (list (quote primitive) g$0$20814)) g$0$20680) (if (memv g$0$20682 (quote (call))) (g$0$13595 g$0$20673 g$0$20674 g$0$20675) (if (memv g$0$20682 (quote (lexical))) ((lambda (g$0$20812) g$0$20812) g$0$20680) (if (memv g$0$20682 (quote (global-macro global-macro!))) (g$0$13597 (g$0$13591 g$0$20680 g$0$20673) g$0$20674 g$0$20675) (if (memv g$0$20682 (quote (local-macro local-macro!))) (g$0$13597 (g$0$13589 g$0$20680 g$0$20673) g$0$20674 g$0$20675) (if (memv g$0$20682 (quote (macro macro!))) (g$0$13597 (g$0$13587 g$0$20680 g$0$20673) g$0$20674 g$0$20675) (if (memv g$0$20682 (quote (constant))) ((lambda (g$0$20810) (list (quote quote) g$0$20810)) g$0$20680) (if (memv g$0$20682 (quote (set!))) (g$0$13599 g$0$20673 g$0$20674 g$0$20675) (if (memv g$0$20682 (quote (begin))) ((lambda (g$0$20772) ((lambda (g$0$20774) (if (if g$0$20774 (begin (quote #f) (apply (lambda (g$0$20781 g$0$20782) (quote #t)) g$0$20774)) (quote #f)) (apply (lambda (g$0$20777 g$0$20778) (g$0$13108 (quote #f) (g$0$13593 (cons g$0$20777 g$0$20778) g$0$20674 g$0$20675))) g$0$20774) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$20772 (quote ()))))) ((lambda (g$0$20784) (if (g$0$13212 g$0$20784) (begin (quote #f) ((lambda (g$0$20786) (if g$0$20786 (begin (quote #f) ((lambda (g$0$20788) (if g$0$20788 (begin (quote #f) (append g$0$20786 g$0$20788)) (quote #f))) ((lambda (g$0$20790) (if (g$0$13212 g$0$20790) (begin (quote #f) ((lambda (g$0$20792) (if g$0$20792 (begin (quote #f) ((lambda (g$0$20794) (if g$0$20794 (begin (quote #f) (append g$0$20792 g$0$20794)) (quote #f))) ((letrec ((g$0$20796 (lambda (g$0$20798) (if (g$0$13212 g$0$20798) ((lambda (g$0$20800) (if g$0$20800 (begin (quote #f) ((lambda (g$0$20802) (if g$0$20802 (begin (quote #f) (map cons g$0$20800 g$0$20802)) (quote #f))) (g$0$20796 (g$0$13224 g$0$20798)))) (quote #f))) ((lambda (g$0$20804) (list g$0$20804)) (g$0$13220 g$0$20798))) (if (g$0$13216 g$0$20798) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$20796) (g$0$13224 g$0$20790)))) (quote #f))) ((lambda (g$0$20806) (list g$0$20806)) (g$0$13220 g$0$20790)))) (quote #f))) (g$0$13224 g$0$20784)))) (quote #f))) ((lambda (g$0$20808) (quote ())) (g$0$13220 g$0$20784)))) (quote #f))) g$0$20772))) g$0$20673) (if (memv g$0$20682 (quote (let-syntax letrec-syntax))) ((lambda (g$0$20684) ((lambda (g$0$20686) (if (if g$0$20686 (begin (quote #f) (apply (lambda (g$0$20709 g$0$20710 g$0$20711 g$0$20712) (if (g$0$13236 g$0$20709) (void) (error (quote expander) (quote "invalid identifiers") (g$0$13244 g$0$20673 (quote ()))))) g$0$20686)) (quote #f)) (apply (lambda (g$0$20691 g$0$20692 g$0$20693 g$0$20694) ((lambda (g$0$20696) ((lambda (g$0$20698) ((lambda (g$0$20700) ((lambda () (g$0$13108 (quote #f) (g$0$13593 (map (lambda (g$0$20702) (g$0$13206 g$0$20698 g$0$20702)) (cons g$0$20693 g$0$20694)) (append (map cons g$0$20696 g$0$20700) g$0$20674) (append (map cons g$0$20696 g$0$20700) g$0$20675)))))) (map (lambda (g$0$20704) (g$0$13276 (g$0$13631 (if (eq? g$0$20679 (quote let-syntax)) g$0$20704 (g$0$13206 g$0$20698 g$0$20704)) g$0$20675))) g$0$20692))) (g$0$13173 g$0$20691 g$0$20696))) (map g$0$13140 g$0$20691))) g$0$20686) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$20684 (quote ()))))) ((lambda (g$0$20714) (if (g$0$13212 g$0$20714) (begin (quote #f) ((lambda (g$0$20716) (if g$0$20716 (begin (quote #f) ((lambda (g$0$20718) (if g$0$20718 (begin (quote #f) (append g$0$20716 g$0$20718)) (quote #f))) ((lambda (g$0$20720) (if (g$0$13212 g$0$20720) (begin (quote #f) ((lambda (g$0$20722) (if g$0$20722 (begin (quote #f) ((lambda (g$0$20724) (if g$0$20724 (begin (quote #f) (append g$0$20722 g$0$20724)) (quote #f))) ((lambda (g$0$20726) (if (g$0$13212 g$0$20726) (begin (quote #f) ((lambda (g$0$20728) (if g$0$20728 (begin (quote #f) ((lambda (g$0$20730) (if g$0$20730 (begin (quote #f) (append g$0$20728 g$0$20730)) (quote #f))) ((letrec ((g$0$20732 (lambda (g$0$20734) (if (g$0$13212 g$0$20734) ((lambda (g$0$20736) (if g$0$20736 (begin (quote #f) ((lambda (g$0$20738) (if g$0$20738 (begin (quote #f) (map cons g$0$20736 g$0$20738)) (quote #f))) (g$0$20732 (g$0$13224 g$0$20734)))) (quote #f))) ((lambda (g$0$20740) (list g$0$20740)) (g$0$13220 g$0$20734))) (if (g$0$13216 g$0$20734) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) g$0$20732) (g$0$13224 g$0$20726)))) (quote #f))) ((lambda (g$0$20742) (list g$0$20742)) (g$0$13220 g$0$20726)))) (quote #f))) (g$0$13224 g$0$20720)))) (quote #f))) ((letrec ((g$0$20744 (lambda (g$0$20746) (if (g$0$13212 g$0$20746) ((lambda (g$0$20748) (if g$0$20748 (begin (quote #f) ((lambda (g$0$20750) (if g$0$20750 (begin (quote #f) (map cons g$0$20748 g$0$20750)) (quote #f))) (g$0$20744 (g$0$13224 g$0$20746)))) (quote #f))) ((lambda (g$0$20752) (if (g$0$13212 g$0$20752) (begin (quote #f) ((lambda (g$0$20754) (if g$0$20754 (begin (quote #f) ((lambda (g$0$20756) (if g$0$20756 (begin (quote #f) (append g$0$20754 g$0$20756)) (quote #f))) ((lambda (g$0$20758) (if (g$0$13212 g$0$20758) (begin (quote #f) ((lambda (g$0$20760) (if g$0$20760 (begin (quote #f) ((lambda (g$0$20762) (if g$0$20762 (begin (quote #f) (append g$0$20760 g$0$20762)) (quote #f))) ((lambda (g$0$20764) (if (equal? (g$0$13246 g$0$20764) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$20758)))) (quote #f))) ((lambda (g$0$20766) (list g$0$20766)) (g$0$13220 g$0$20758)))) (quote #f))) (g$0$13224 g$0$20752)))) (quote #f))) ((lambda (g$0$20768) (list g$0$20768)) (g$0$13220 g$0$20752)))) (quote #f))) (g$0$13220 g$0$20746))) (if (g$0$13216 g$0$20746) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) g$0$20744) (g$0$13220 g$0$20720)))) (quote #f))) (g$0$13224 g$0$20714)))) (quote #f))) ((lambda (g$0$20770) (quote ())) (g$0$13220 g$0$20714)))) (quote #f))) g$0$20684))) g$0$20673) (if (memv g$0$20682 (quote (displaced-lexical))) (error (quote expander) (quote "identifier out of context") (g$0$13244 g$0$20673 (quote ()))) (if (memv g$0$20682 (quote (syntax))) (error (quote expander) (quote "reference to pattern variable outside a syntax form") (g$0$13244 g$0$20673 (quote ()))) (if (memv g$0$20682 (quote (define define-syntax module import))) (error (quote expander) (quote "invalid expression") (g$0$13244 g$0$20673 (quote ()))) (error (quote expander) (quote "invalid expression") (g$0$13244 g$0$20673 (quote ()))))))))))))))))))) g$0$20679))))) (set! g$0$13599 (lambda (g$0$20824 g$0$20825 g$0$20826) ((lambda (g$0$20828) ((lambda (g$0$20830) (if (if g$0$20830 (begin (quote #f) (apply (lambda (g$0$20844 g$0$20845) (g$0$13226 g$0$20844)) g$0$20830)) (quote #f)) (apply (lambda (g$0$20833 g$0$20834) (call-with-values (lambda () (g$0$13258 g$0$20833 g$0$20825)) (lambda (g$0$20838 g$0$20839 g$0$20840) ((lambda (g$0$20841) (if (memv g$0$20841 (quote (lexical))) (list (quote set!) g$0$20839 (g$0$13597 g$0$20834 g$0$20825 g$0$20826)) (if (memv g$0$20841 (quote (global core-prim))) (error (quote expander) (quote "cannot modify imported identifier in") (g$0$13244 g$0$20824 (quote ()))) (if (memv g$0$20841 (quote (global-macro!))) (g$0$13597 (g$0$13591 g$0$20839 g$0$20824) g$0$20825 g$0$20826) (if (memv g$0$20841 (quote (local-macro!))) (g$0$13597 (g$0$13589 g$0$20839 g$0$20824) g$0$20825 g$0$20826) (error (quote expander) (quote "invalid syntax") (g$0$13246 g$0$20824))))))) g$0$20838)))) g$0$20830) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$20828 (quote ()))))) ((lambda (g$0$20847) (if (g$0$13212 g$0$20847) (begin (quote #f) ((lambda (g$0$20849) (if g$0$20849 (begin (quote #f) ((lambda (g$0$20851) (if g$0$20851 (begin (quote #f) (append g$0$20849 g$0$20851)) (quote #f))) ((lambda (g$0$20853) (if (g$0$13212 g$0$20853) (begin (quote #f) ((lambda (g$0$20855) (if g$0$20855 (begin (quote #f) ((lambda (g$0$20857) (if g$0$20857 (begin (quote #f) (append g$0$20855 g$0$20857)) (quote #f))) ((lambda (g$0$20859) (if (g$0$13212 g$0$20859) (begin (quote #f) ((lambda (g$0$20861) (if g$0$20861 (begin (quote #f) ((lambda (g$0$20863) (if g$0$20863 (begin (quote #f) (append g$0$20861 g$0$20863)) (quote #f))) ((lambda (g$0$20865) (if (equal? (g$0$13246 g$0$20865) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$20859)))) (quote #f))) ((lambda (g$0$20867) (list g$0$20867)) (g$0$13220 g$0$20859)))) (quote #f))) (g$0$13224 g$0$20853)))) (quote #f))) ((lambda (g$0$20869) (list g$0$20869)) (g$0$13220 g$0$20853)))) (quote #f))) (g$0$13224 g$0$20847)))) (quote #f))) ((lambda (g$0$20871) (quote ())) (g$0$13220 g$0$20847)))) (quote #f))) g$0$20828))) g$0$20824))) (set! g$0$13601 (lambda (g$0$20876 g$0$20877 g$0$20878 g$0$20879) ((lambda (g$0$20881) ((lambda (g$0$20883) (if (if g$0$20883 (begin (quote #f) (apply (lambda (g$0$20935) (quote #t)) g$0$20883)) (quote #f)) (apply (lambda (g$0$20929) (if (g$0$13236 g$0$20929) ((lambda (g$0$20932 g$0$20933) (values g$0$20932 (g$0$13613 (g$0$13206 (g$0$13173 g$0$20929 g$0$20933) g$0$20877) (g$0$13483 g$0$20933 g$0$20932 g$0$20878) g$0$20879))) (map g$0$13136 g$0$20929) (map g$0$13140 g$0$20929)) (error (quote expander) (quote "invalid fmls") (g$0$13244 g$0$20876 (quote ()))))) g$0$20883) ((lambda (g$0$20885) ((lambda (g$0$20887) (if (if g$0$20887 (begin (quote #f) (apply (lambda (g$0$20908 g$0$20909) (quote #t)) g$0$20887)) (quote #f)) (apply (lambda (g$0$20896 g$0$20897) (if (g$0$13236 (cons g$0$20897 g$0$20896)) ((lambda (g$0$20902 g$0$20903 g$0$20904 g$0$20905) (values (append g$0$20902 g$0$20904) (g$0$13613 (g$0$13206 (g$0$13173 (cons g$0$20897 g$0$20896) (cons g$0$20905 g$0$20903)) g$0$20877) (g$0$13483 (cons g$0$20905 g$0$20903) (cons g$0$20904 g$0$20902) g$0$20878) g$0$20879))) (map g$0$13136 g$0$20896) (map g$0$13140 g$0$20896) (g$0$13136 g$0$20897) (g$0$13140 g$0$20897)) (error (quote expander) (quote "invalid fmls") (g$0$13244 g$0$20876 (quote ()))))) g$0$20887) ((lambda (g$0$20889) ((lambda (g$0$20891) (if (if g$0$20891 (begin (quote #f) (apply (lambda () (quote #t)) g$0$20891)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid fmls") (g$0$13244 g$0$20876 (quote ())))) g$0$20891) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$20889 (quote ()))))) ((lambda (g$0$20893) (quote ())) g$0$20889))) g$0$20885))) ((letrec ((g$0$20911 (lambda (g$0$20913) (if (g$0$13212 g$0$20913) ((lambda (g$0$20919) (if g$0$20919 (begin (quote #f) ((lambda (g$0$20921) (if g$0$20921 (begin (quote #f) (cons (map cons g$0$20919 (car g$0$20921)) (cdr g$0$20921))) (quote #f))) (g$0$20911 (g$0$13224 g$0$20913)))) (quote #f))) ((lambda (g$0$20923) (list g$0$20923)) (g$0$13220 g$0$20913))) ((lambda (g$0$20915) (if g$0$20915 (begin (quote #f) (cons (list (begin (quote x*) (quote ()))) g$0$20915)) (quote #f))) ((lambda (g$0$20917) (list g$0$20917)) g$0$20913)))))) (lambda (g$0$20925) ((lambda (g$0$20927) (if g$0$20927 (begin (quote #f) (append (car g$0$20927) (cdr g$0$20927))) (quote #f))) (g$0$20911 g$0$20925)))) g$0$20885))) g$0$20881))) ((letrec ((g$0$20937 (lambda (g$0$20939) (if (g$0$13212 g$0$20939) ((lambda (g$0$20941) (if g$0$20941 (begin (quote #f) ((lambda (g$0$20943) (if g$0$20943 (begin (quote #f) (map cons g$0$20941 g$0$20943)) (quote #f))) (g$0$20937 (g$0$13224 g$0$20939)))) (quote #f))) ((lambda (g$0$20945) (list g$0$20945)) (g$0$13220 g$0$20939))) (if (g$0$13216 g$0$20939) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$20937) g$0$20881))) g$0$20876))) (set! g$0$13603 (lambda (g$0$20950 g$0$20951 g$0$20952 g$0$20953) (if (null? g$0$20950) (values (quote ()) (quote ())) (call-with-values (lambda () (g$0$13601 (car g$0$20950) (car g$0$20951) g$0$20952 g$0$20953)) (lambda (g$0$20956 g$0$20957) (call-with-values (lambda () (g$0$13603 (cdr g$0$20950) (cdr g$0$20951) g$0$20952 g$0$20953)) (lambda (g$0$20960 g$0$20961) (values (cons g$0$20956 g$0$20960) (cons g$0$20957 g$0$20961))))))))) (set! g$0$13605 (lambda (g$0$20965 g$0$20966 g$0$20967) ((lambda (g$0$20968) (if (memv g$0$20968 (quote (defun))) ((lambda (g$0$20974) ((lambda (g$0$20977 g$0$20978) (call-with-values (lambda () (g$0$13601 g$0$20977 g$0$20978 g$0$20966 g$0$20967)) (lambda (g$0$20981 g$0$20982) (g$0$13114 (quote #f) g$0$20981 g$0$20982)))) (car g$0$20974) (cdr g$0$20974))) (cdr g$0$20965)) (if (memv g$0$20968 (quote (expr))) ((lambda (g$0$20972) (g$0$13597 g$0$20972 g$0$20966 g$0$20967)) (cdr g$0$20965)) (if (memv g$0$20968 (quote (top-expr))) ((lambda (g$0$20970) (g$0$13108 (quote #f) (list (g$0$13597 g$0$20970 g$0$20966 g$0$20967) (g$0$13107)))) (cdr g$0$20965)) (error (quote chi-rhs) (quote "invalid rhs") g$0$20965))))) (car g$0$20965)))) (set! g$0$13607 (lambda (g$0$20986 g$0$20987 g$0$20988) (letrec ((g$0$20990 (lambda (g$0$20992) (if (null? g$0$20992) (quote ()) ((lambda (g$0$20994) (cons g$0$20994 (g$0$20990 (cdr g$0$20992)))) (g$0$13605 (car g$0$20992) g$0$20987 g$0$20988)))))) (g$0$20990 g$0$20986)))) (set! g$0$13609 (lambda (g$0$20998 g$0$20999 g$0$21000) (if (null? g$0$20999) (quote #f) (if (g$0$13232 g$0$20998 (car g$0$20999)) (car g$0$21000) (g$0$13609 g$0$20998 (cdr g$0$20999) (cdr g$0$21000)))))) (set! g$0$13611 (lambda (g$0$21002) (letrec ((g$0$21004 (lambda (g$0$21007 g$0$21008) (if (null? g$0$21007) g$0$21008 ((lambda (g$0$21010) (if g$0$21010 ((lambda (g$0$21012) (g$0$21004 (cdr g$0$21007) (cons (list (car g$0$21007) g$0$21012) g$0$21008))) g$0$21010) (g$0$21004 (cdr g$0$21007) g$0$21008))) (g$0$13609 (car g$0$21007) (cdr g$0$21007) (cdr g$0$21007))))))) (g$0$21004 g$0$21002 (quote ()))))) (set! g$0$13613 (lambda (g$0$21016 g$0$21017 g$0$21018) ((lambda (g$0$21020) (call-with-values (lambda () (g$0$13619 (map (lambda (g$0$21022) (g$0$13206 g$0$21020 g$0$21022)) (g$0$13222 g$0$21016)) g$0$21017 g$0$21018 (quote ()) (quote ()) (quote ()) (quote ()) g$0$21020 (quote #f))) (lambda (g$0$21030 g$0$21031 g$0$21032 g$0$21033 g$0$21034 g$0$21035 g$0$21036) (begin (if (null? g$0$21030) (error (quote expander) (quote "no expression in body") (g$0$13244 g$0$21030 (quote ()))) (void)) ((lambda (g$0$21039 g$0$21040) (g$0$13105 (quote #f) (reverse g$0$21033) (reverse g$0$21039) (g$0$13108 (quote #f) g$0$21040))) (g$0$13607 g$0$21034 g$0$21031 g$0$21032) (g$0$13593 (append (apply append (reverse g$0$21035)) g$0$21030) g$0$21031 g$0$21032)))))) (g$0$13163)))) (set! g$0$13615 (lambda (g$0$21042) ((lambda (g$0$21044) ((lambda (g$0$21046) (if (if g$0$21046 (begin (quote #f) (apply (lambda (g$0$21111 g$0$21112) (quote #t)) g$0$21046)) (quote #f)) (apply (lambda (g$0$21107 g$0$21108) (begin (if (for-all g$0$13226 g$0$21107) (void) (error (quote expander) (quote "module exports must be identifiers") (g$0$13244 g$0$21042 (quote ())))) (values (quote #f) g$0$21107 g$0$21108))) g$0$21046) ((lambda (g$0$21048) ((lambda (g$0$21050) (if (if g$0$21050 (begin (quote #f) (apply (lambda (g$0$21060 g$0$21061 g$0$21062) (quote #t)) g$0$21050)) (quote #f)) (apply (lambda (g$0$21054 g$0$21055 g$0$21056) (begin (if (g$0$13226 g$0$21054) (void) (error (quote expander) (quote "module name must be an identifier") (g$0$13244 g$0$21042 (quote ())))) (if (for-all g$0$13226 g$0$21055) (void) (error (quote expander) (quote "module exports must be identifiers") (g$0$13244 g$0$21042 (quote ())))) (values g$0$21054 g$0$21055 g$0$21056))) g$0$21050) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$21048 (quote ()))))) ((lambda (g$0$21064) (if (g$0$13212 g$0$21064) (begin (quote #f) ((lambda (g$0$21066) (if g$0$21066 (begin (quote #f) ((lambda (g$0$21068) (if g$0$21068 (begin (quote #f) (append g$0$21066 g$0$21068)) (quote #f))) ((lambda (g$0$21070) (if (g$0$13212 g$0$21070) (begin (quote #f) ((lambda (g$0$21072) (if g$0$21072 (begin (quote #f) ((lambda (g$0$21074) (if g$0$21074 (begin (quote #f) (append g$0$21072 g$0$21074)) (quote #f))) ((lambda (g$0$21076) (if (g$0$13212 g$0$21076) (begin (quote #f) ((lambda (g$0$21078) (if g$0$21078 (begin (quote #f) ((lambda (g$0$21080) (if g$0$21080 (begin (quote #f) (append g$0$21078 g$0$21080)) (quote #f))) ((letrec ((g$0$21082 (lambda (g$0$21084) (if (g$0$13212 g$0$21084) ((lambda (g$0$21086) (if g$0$21086 (begin (quote #f) ((lambda (g$0$21088) (if g$0$21088 (begin (quote #f) (map cons g$0$21086 g$0$21088)) (quote #f))) (g$0$21082 (g$0$13224 g$0$21084)))) (quote #f))) ((lambda (g$0$21090) (list g$0$21090)) (g$0$13220 g$0$21084))) (if (g$0$13216 g$0$21084) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$21082) (g$0$13224 g$0$21076)))) (quote #f))) ((letrec ((g$0$21092 (lambda (g$0$21094) (if (g$0$13212 g$0$21094) ((lambda (g$0$21096) (if g$0$21096 (begin (quote #f) ((lambda (g$0$21098) (if g$0$21098 (begin (quote #f) (map cons g$0$21096 g$0$21098)) (quote #f))) (g$0$21092 (g$0$13224 g$0$21094)))) (quote #f))) ((lambda (g$0$21100) (list g$0$21100)) (g$0$13220 g$0$21094))) (if (g$0$13216 g$0$21094) (list (begin (quote export*) (quote ()))) (quote #f)))))) g$0$21092) (g$0$13220 g$0$21076)))) (quote #f))) (g$0$13224 g$0$21070)))) (quote #f))) ((lambda (g$0$21102) (list g$0$21102)) (g$0$13220 g$0$21070)))) (quote #f))) (g$0$13224 g$0$21064)))) (quote #f))) ((lambda (g$0$21104) (quote ())) (g$0$13220 g$0$21064)))) (quote #f))) g$0$21048))) g$0$21044))) ((lambda (g$0$21114) (if (g$0$13212 g$0$21114) (begin (quote #f) ((lambda (g$0$21116) (if g$0$21116 (begin (quote #f) ((lambda (g$0$21118) (if g$0$21118 (begin (quote #f) (append g$0$21116 g$0$21118)) (quote #f))) ((lambda (g$0$21120) (if (g$0$13212 g$0$21120) (begin (quote #f) ((lambda (g$0$21122) (if g$0$21122 (begin (quote #f) ((lambda (g$0$21124) (if g$0$21124 (begin (quote #f) (append g$0$21122 g$0$21124)) (quote #f))) ((letrec ((g$0$21126 (lambda (g$0$21128) (if (g$0$13212 g$0$21128) ((lambda (g$0$21130) (if g$0$21130 (begin (quote #f) ((lambda (g$0$21132) (if g$0$21132 (begin (quote #f) (map cons g$0$21130 g$0$21132)) (quote #f))) (g$0$21126 (g$0$13224 g$0$21128)))) (quote #f))) ((lambda (g$0$21134) (list g$0$21134)) (g$0$13220 g$0$21128))) (if (g$0$13216 g$0$21128) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$21126) (g$0$13224 g$0$21120)))) (quote #f))) ((letrec ((g$0$21136 (lambda (g$0$21138) (if (g$0$13212 g$0$21138) ((lambda (g$0$21140) (if g$0$21140 (begin (quote #f) ((lambda (g$0$21142) (if g$0$21142 (begin (quote #f) (map cons g$0$21140 g$0$21142)) (quote #f))) (g$0$21136 (g$0$13224 g$0$21138)))) (quote #f))) ((lambda (g$0$21144) (list g$0$21144)) (g$0$13220 g$0$21138))) (if (g$0$13216 g$0$21138) (list (begin (quote export*) (quote ()))) (quote #f)))))) g$0$21136) (g$0$13220 g$0$21120)))) (quote #f))) (g$0$13224 g$0$21114)))) (quote #f))) ((lambda (g$0$21146) (quote ())) (g$0$13220 g$0$21114)))) (quote #f))) g$0$21044))) g$0$21042))) (set! g$0$13617 (lambda (g$0$21154 g$0$21155 g$0$21156 g$0$21157 g$0$21158 g$0$21159 g$0$21160) (call-with-values (lambda () (g$0$13615 g$0$21154)) (lambda (g$0$21164 g$0$21165 g$0$21166) ((lambda (g$0$21168) ((lambda (g$0$21170) ((lambda () (call-with-values (lambda () (g$0$13619 g$0$21170 g$0$21155 g$0$21156 g$0$21157 g$0$21158 g$0$21159 g$0$21160 g$0$21168 (quote #f))) (lambda (g$0$21178 g$0$21179 g$0$21180 g$0$21181 g$0$21182 g$0$21183 g$0$21184) ((lambda (g$0$21187 g$0$21188) (if (not g$0$21164) (values g$0$21181 g$0$21182 g$0$21165 g$0$21187 g$0$21179 g$0$21180 g$0$21188 g$0$21184) ((lambda (g$0$21191 g$0$21192) (values g$0$21181 g$0$21182 (list g$0$21164) (list g$0$21191) (cons (cons g$0$21191 (cons (quote $module) g$0$21192)) g$0$21179) (cons (cons g$0$21191 (cons (quote $module) g$0$21192)) g$0$21180) g$0$21188 g$0$21184)) (g$0$13140 (quote module)) (cons g$0$21165 g$0$21187)))) (map (lambda (g$0$21194) ((lambda (g$0$21196) (if g$0$21196 g$0$21196 (begin (quote #f) (error (quote expander) (quote "cannot find module export") (g$0$13244 g$0$21194 (quote ())))))) (g$0$13248 (g$0$13202 (g$0$13228 g$0$21194) (g$0$13182 g$0$21194) (list g$0$21168))))) g$0$21165) (cons g$0$21178 g$0$21183))))))) (map (lambda (g$0$21198) (g$0$13206 g$0$21168 g$0$21198)) (g$0$13222 g$0$21166)))) (g$0$13163)))))) (set! g$0$13619 (lambda (g$0$21208 g$0$21209 g$0$21210 g$0$21211 g$0$21212 g$0$21213 g$0$21214 g$0$21215 g$0$21216) (if (null? g$0$21208) (values g$0$21208 g$0$21209 g$0$21210 g$0$21211 g$0$21212 g$0$21213 g$0$21214) ((lambda (g$0$21218) (call-with-values (lambda () (g$0$13258 g$0$21218 g$0$21209)) (lambda (g$0$21222 g$0$21223 g$0$21224) ((lambda (g$0$21226) ((lambda (g$0$21227) (if (memv g$0$21227 (quote (define))) (call-with-values (lambda () (g$0$13475 g$0$21218)) (lambda (g$0$21415 g$0$21416) (begin (if (g$0$13240 g$0$21415 g$0$21226) (error (quote expander) (quote "cannot redefine keyword") (g$0$13244 g$0$21218 (quote ()))) (void)) ((lambda (g$0$21419 g$0$21420) (begin (g$0$13165 g$0$21215 g$0$21415 g$0$21420) (g$0$13619 (cdr g$0$21208) (g$0$13481 g$0$21420 g$0$21419 g$0$21209) g$0$21210 (cons g$0$21419 g$0$21211) (cons g$0$21416 g$0$21212) g$0$21213 g$0$21226 g$0$21215 g$0$21216))) (g$0$13136 g$0$21415) (g$0$13140 g$0$21415))))) (if (memv g$0$21227 (quote (define-syntax))) (call-with-values (lambda () (g$0$13477 g$0$21218)) (lambda (g$0$21405 g$0$21406) (begin (if (g$0$13240 g$0$21405 g$0$21226) (error (quote expander) (quote "cannot redefine keyword") (g$0$13244 g$0$21218 (quote ()))) (void)) ((lambda (g$0$21409 g$0$21410) (begin (g$0$13165 g$0$21215 g$0$21405 g$0$21409) ((lambda (g$0$21412) (g$0$13619 (cdr g$0$21208) (cons (cons g$0$21409 g$0$21412) g$0$21209) (cons (cons g$0$21409 g$0$21412) g$0$21210) g$0$21211 g$0$21212 g$0$21213 g$0$21226 g$0$21215 g$0$21216)) (g$0$13276 g$0$21410)))) (g$0$13140 g$0$21405) (g$0$13631 g$0$21406 g$0$21210))))) (if (memv g$0$21227 (quote (let-syntax letrec-syntax))) ((lambda (g$0$21328) ((lambda (g$0$21330) (if (if g$0$21330 (begin (quote #f) (apply (lambda (g$0$21350 g$0$21351 g$0$21352) (if (g$0$13236 g$0$21350) (void) (error (quote expander) (quote "invalid identifiers") (g$0$13244 g$0$21218 (quote ()))))) g$0$21330)) (quote #f)) (apply (lambda (g$0$21334 g$0$21335 g$0$21336) ((lambda (g$0$21338) ((lambda (g$0$21340) ((lambda (g$0$21342) ((lambda () (g$0$13619 (append (map (lambda (g$0$21344) (g$0$13206 g$0$21340 g$0$21344)) g$0$21336) (cdr g$0$21208)) (append (map cons g$0$21338 g$0$21342) g$0$21209) (append (map cons g$0$21338 g$0$21342) g$0$21210) g$0$21211 g$0$21212 g$0$21213 g$0$21226 g$0$21215 g$0$21216)))) (map (lambda (g$0$21346) (g$0$13276 (g$0$13631 (if (eq? g$0$21222 (quote let-syntax)) g$0$21346 (g$0$13206 g$0$21340 g$0$21346)) g$0$21210))) g$0$21335))) (g$0$13173 g$0$21334 g$0$21338))) (map g$0$13140 g$0$21334))) g$0$21330) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$21328 (quote ()))))) ((lambda (g$0$21354) (if (g$0$13212 g$0$21354) (begin (quote #f) ((lambda (g$0$21356) (if g$0$21356 (begin (quote #f) ((lambda (g$0$21358) (if g$0$21358 (begin (quote #f) (append g$0$21356 g$0$21358)) (quote #f))) ((lambda (g$0$21360) (if (g$0$13212 g$0$21360) (begin (quote #f) ((lambda (g$0$21362) (if g$0$21362 (begin (quote #f) ((lambda (g$0$21364) (if g$0$21364 (begin (quote #f) (append g$0$21362 g$0$21364)) (quote #f))) ((letrec ((g$0$21366 (lambda (g$0$21368) (if (g$0$13212 g$0$21368) ((lambda (g$0$21370) (if g$0$21370 (begin (quote #f) ((lambda (g$0$21372) (if g$0$21372 (begin (quote #f) (map cons g$0$21370 g$0$21372)) (quote #f))) (g$0$21366 (g$0$13224 g$0$21368)))) (quote #f))) ((lambda (g$0$21374) (list g$0$21374)) (g$0$13220 g$0$21368))) (if (g$0$13216 g$0$21368) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) g$0$21366) (g$0$13224 g$0$21360)))) (quote #f))) ((letrec ((g$0$21376 (lambda (g$0$21378) (if (g$0$13212 g$0$21378) ((lambda (g$0$21380) (if g$0$21380 (begin (quote #f) ((lambda (g$0$21382) (if g$0$21382 (begin (quote #f) (map cons g$0$21380 g$0$21382)) (quote #f))) (g$0$21376 (g$0$13224 g$0$21378)))) (quote #f))) ((lambda (g$0$21384) (if (g$0$13212 g$0$21384) (begin (quote #f) ((lambda (g$0$21386) (if g$0$21386 (begin (quote #f) ((lambda (g$0$21388) (if g$0$21388 (begin (quote #f) (append g$0$21386 g$0$21388)) (quote #f))) ((lambda (g$0$21390) (if (g$0$13212 g$0$21390) (begin (quote #f) ((lambda (g$0$21392) (if g$0$21392 (begin (quote #f) ((lambda (g$0$21394) (if g$0$21394 (begin (quote #f) (append g$0$21392 g$0$21394)) (quote #f))) ((lambda (g$0$21396) (if (equal? (g$0$13246 g$0$21396) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$21390)))) (quote #f))) ((lambda (g$0$21398) (list g$0$21398)) (g$0$13220 g$0$21390)))) (quote #f))) (g$0$13224 g$0$21384)))) (quote #f))) ((lambda (g$0$21400) (list g$0$21400)) (g$0$13220 g$0$21384)))) (quote #f))) (g$0$13220 g$0$21378))) (if (g$0$13216 g$0$21378) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) g$0$21376) (g$0$13220 g$0$21360)))) (quote #f))) (g$0$13224 g$0$21354)))) (quote #f))) ((lambda (g$0$21402) (quote ())) (g$0$13220 g$0$21354)))) (quote #f))) g$0$21328))) g$0$21218) (if (memv g$0$21227 (quote (begin))) ((lambda (g$0$21302) ((lambda (g$0$21304) (if (if g$0$21304 (begin (quote #f) (apply (lambda (g$0$21308) (quote #t)) g$0$21304)) (quote #f)) (apply (lambda (g$0$21306) (g$0$13619 (append g$0$21306 (cdr g$0$21208)) g$0$21209 g$0$21210 g$0$21211 g$0$21212 g$0$21213 g$0$21226 g$0$21215 g$0$21216)) g$0$21304) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$21302 (quote ()))))) ((lambda (g$0$21310) (if (g$0$13212 g$0$21310) (begin (quote #f) ((lambda (g$0$21312) (if g$0$21312 (begin (quote #f) ((lambda (g$0$21314) (if g$0$21314 (begin (quote #f) (append g$0$21312 g$0$21314)) (quote #f))) ((letrec ((g$0$21316 (lambda (g$0$21318) (if (g$0$13212 g$0$21318) ((lambda (g$0$21320) (if g$0$21320 (begin (quote #f) ((lambda (g$0$21322) (if g$0$21322 (begin (quote #f) (map cons g$0$21320 g$0$21322)) (quote #f))) (g$0$21316 (g$0$13224 g$0$21318)))) (quote #f))) ((lambda (g$0$21324) (list g$0$21324)) (g$0$13220 g$0$21318))) (if (g$0$13216 g$0$21318) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$21316) (g$0$13224 g$0$21310)))) (quote #f))) ((lambda (g$0$21326) (quote ())) (g$0$13220 g$0$21310)))) (quote #f))) g$0$21302))) g$0$21218) (if (memv g$0$21227 (quote (global-macro global-macro!))) (g$0$13619 (cons (g$0$13206 g$0$21215 (g$0$13591 g$0$21223 g$0$21218)) (cdr g$0$21208)) g$0$21209 g$0$21210 g$0$21211 g$0$21212 g$0$21213 g$0$21226 g$0$21215 g$0$21216) (if (memv g$0$21227 (quote (local-macro local-macro!))) (g$0$13619 (cons (g$0$13206 g$0$21215 (g$0$13589 g$0$21223 g$0$21218)) (cdr g$0$21208)) g$0$21209 g$0$21210 g$0$21211 g$0$21212 g$0$21213 g$0$21226 g$0$21215 g$0$21216) (if (memv g$0$21227 (quote (macro macro!))) (g$0$13619 (cons (g$0$13206 g$0$21215 (g$0$13587 g$0$21223 g$0$21218)) (cdr g$0$21208)) g$0$21209 g$0$21210 g$0$21211 g$0$21212 g$0$21213 g$0$21226 g$0$21215 g$0$21216) (if (memv g$0$21227 (quote (module))) (call-with-values (lambda () (g$0$13617 g$0$21218 g$0$21209 g$0$21210 g$0$21211 g$0$21212 g$0$21213 g$0$21226)) (lambda (g$0$21289 g$0$21290 g$0$21291 g$0$21292 g$0$21293 g$0$21294 g$0$21295 g$0$21296) (begin (for-each (lambda (g$0$21299 g$0$21300) (g$0$13165 g$0$21215 g$0$21299 g$0$21300)) g$0$21291 g$0$21292) (g$0$13619 (cdr g$0$21208) g$0$21293 g$0$21294 g$0$21289 g$0$21290 g$0$21295 g$0$21296 g$0$21215 g$0$21216)))) (if (memv g$0$21227 (quote (import))) (begin ((lambda () ((lambda (g$0$21229) (begin (set! g$0$21229 (lambda (g$0$21240 g$0$21241) ((lambda (g$0$21243) ((lambda (g$0$21245) (if (if g$0$21245 (begin (quote #f) (apply (lambda (g$0$21262) (g$0$13226 g$0$21262)) g$0$21245)) (quote #f)) (apply (lambda (g$0$21247) (call-with-values (lambda () (g$0$13258 g$0$21247 g$0$21241)) (lambda (g$0$21251 g$0$21252 g$0$21253) ((lambda (g$0$21254) (if (memv g$0$21254 (quote ($module))) ((lambda (g$0$21256) ((lambda (g$0$21259 g$0$21260) (values g$0$21259 g$0$21260)) (car g$0$21256) (cdr g$0$21256))) g$0$21252) (error (quote expander) (quote "invalid import") (g$0$13244 g$0$21240 (quote ()))))) g$0$21251)))) g$0$21245) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$21243 (quote ()))))) ((lambda (g$0$21264) (if (g$0$13212 g$0$21264) (begin (quote #f) ((lambda (g$0$21266) (if g$0$21266 (begin (quote #f) ((lambda (g$0$21268) (if g$0$21268 (begin (quote #f) (append g$0$21266 g$0$21268)) (quote #f))) ((lambda (g$0$21270) (if (g$0$13212 g$0$21270) (begin (quote #f) ((lambda (g$0$21272) (if g$0$21272 (begin (quote #f) ((lambda (g$0$21274) (if g$0$21274 (begin (quote #f) (append g$0$21272 g$0$21274)) (quote #f))) ((lambda (g$0$21276) (if (equal? (g$0$13246 g$0$21276) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$21270)))) (quote #f))) ((lambda (g$0$21278) (list g$0$21278)) (g$0$13220 g$0$21270)))) (quote #f))) (g$0$13224 g$0$21264)))) (quote #f))) ((lambda (g$0$21280) (quote ())) (g$0$13220 g$0$21264)))) (quote #f))) g$0$21243))) g$0$21240))) (call-with-values (lambda () (g$0$21229 g$0$21218 g$0$21209)) (lambda (g$0$21232 g$0$21233) (for-each (lambda (g$0$21236 g$0$21237) (g$0$13165 g$0$21215 g$0$21236 g$0$21237)) g$0$21232 g$0$21233))))) (quote #f)))) (g$0$13619 (cdr g$0$21208) g$0$21209 g$0$21210 g$0$21211 g$0$21212 g$0$21213 g$0$21226 g$0$21215 g$0$21216)) (if g$0$21216 (g$0$13619 (cdr g$0$21208) g$0$21209 g$0$21210 (cons (g$0$13136 (quote dummy)) g$0$21211) (cons (cons (quote top-expr) g$0$21218) g$0$21212) g$0$21213 g$0$21226 g$0$21215 g$0$21216) (values g$0$21208 g$0$21209 g$0$21210 g$0$21211 g$0$21212 g$0$21213 g$0$21226)))))))))))) g$0$21222)) (if (g$0$13226 g$0$21224) (cons g$0$21224 g$0$21214) g$0$21214))))) (car g$0$21208))))) (set! g$0$13621 (lambda (g$0$21424 g$0$21425 g$0$21426) (begin (g$0$12833 (g$0$13712) g$0$21424 g$0$21425) (g$0$12832 (g$0$13712) g$0$21425 g$0$21426)))) (set! g$0$13623 (lambda (g$0$21429 g$0$21430) (g$0$13625 g$0$21429 g$0$21430))) (set! g$0$13625 (lambda (g$0$21433 g$0$21434) ((lambda (g$0$21436) ((lambda (g$0$21438) ((lambda (g$0$21439) (if (memv g$0$21439 (quote (global))) ((lambda (g$0$21441) ((lambda (g$0$21444 g$0$21445) (if (eq? g$0$21444 (g$0$13712)) g$0$21445 (error (quote expander) (quote "cannot modify imported binding") (g$0$13244 g$0$21434 (quote ()))))) (car g$0$21441) (cdr g$0$21441))) (g$0$13256 g$0$21438)) (error (quote expander) (quote "cannot modify binding in") (g$0$13244 g$0$21434 (quote ()))))) (g$0$13254 g$0$21438))) (g$0$12831 g$0$21436))) (g$0$13248 g$0$21433)))) (set! g$0$13627 (lambda (g$0$21447) ((lambda (g$0$21449) ((lambda (g$0$21451) (if (if g$0$21451 (begin (quote #f) (apply (lambda (g$0$21462 g$0$21463) (g$0$13226 g$0$21462)) g$0$21451)) (quote #f)) (apply (lambda (g$0$21454 g$0$21455) ((lambda (g$0$21457) ((lambda (g$0$21459) (values g$0$21457 g$0$21459)) (g$0$13597 g$0$21455 (quote ()) (quote ())))) (g$0$13625 g$0$21454 g$0$21447))) g$0$21451) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$21449 (quote ()))))) ((lambda (g$0$21465) (if (g$0$13212 g$0$21465) (begin (quote #f) ((lambda (g$0$21467) (if g$0$21467 (begin (quote #f) ((lambda (g$0$21469) (if g$0$21469 (begin (quote #f) (append g$0$21467 g$0$21469)) (quote #f))) ((lambda (g$0$21471) (if (g$0$13212 g$0$21471) (begin (quote #f) ((lambda (g$0$21473) (if g$0$21473 (begin (quote #f) ((lambda (g$0$21475) (if g$0$21475 (begin (quote #f) (append g$0$21473 g$0$21475)) (quote #f))) ((lambda (g$0$21477) (if (g$0$13212 g$0$21477) (begin (quote #f) ((lambda (g$0$21479) (if g$0$21479 (begin (quote #f) ((lambda (g$0$21481) (if g$0$21481 (begin (quote #f) (append g$0$21479 g$0$21481)) (quote #f))) ((lambda (g$0$21483) (if (equal? (g$0$13246 g$0$21483) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$21477)))) (quote #f))) ((lambda (g$0$21485) (list g$0$21485)) (g$0$13220 g$0$21477)))) (quote #f))) (g$0$13224 g$0$21471)))) (quote #f))) ((lambda (g$0$21487) (list g$0$21487)) (g$0$13220 g$0$21471)))) (quote #f))) (g$0$13224 g$0$21465)))) (quote #f))) ((lambda (g$0$21489) (quote ())) (g$0$13220 g$0$21465)))) (quote #f))) g$0$21449))) g$0$21447))) (set! g$0$13629 (lambda (g$0$21492 g$0$21493) (if (null? g$0$21492) g$0$21493 ((lambda (g$0$21495) (call-with-values (lambda () (g$0$13258 g$0$21495 (quote ()))) (lambda (g$0$21499 g$0$21500 g$0$21501) ((lambda (g$0$21502) (if (memv g$0$21502 (quote (define))) (call-with-values (lambda () (g$0$13475 g$0$21495)) (lambda (g$0$21545 g$0$21546) ((lambda (g$0$21548) ((lambda (g$0$21550) (g$0$13629 (cdr g$0$21492) (cons (cons g$0$21548 g$0$21550) g$0$21493))) (g$0$13605 g$0$21546 (quote ()) (quote ())))) (g$0$13625 g$0$21545 g$0$21495)))) (if (memv g$0$21502 (quote (set!))) (call-with-values (lambda () (g$0$13627 g$0$21495)) (lambda (g$0$21541 g$0$21542) (g$0$13629 (cdr g$0$21492) (cons (cons g$0$21541 g$0$21542) g$0$21493)))) (if (memv g$0$21502 (quote (define-syntax))) (call-with-values (lambda () (g$0$13477 g$0$21495)) (lambda (g$0$21531 g$0$21532) ((lambda (g$0$21534) ((lambda (g$0$21536) ((lambda (g$0$21538) (begin (g$0$13621 (g$0$13228 g$0$21531) g$0$21534 g$0$21538) (g$0$13629 (cdr g$0$21492) g$0$21493))) (g$0$13276 g$0$21536))) (g$0$13631 g$0$21532 (quote ())))) (g$0$13623 g$0$21531 g$0$21495)))) (if (memv g$0$21502 (quote (let-syntax letrec-syntax))) (error (quote chi-top*) (quote "not supported yet at top level") g$0$21499) (if (memv g$0$21502 (quote (begin))) ((lambda (g$0$21504) ((lambda (g$0$21506) (if (if g$0$21506 (begin (quote #f) (apply (lambda (g$0$21510) (quote #t)) g$0$21506)) (quote #f)) (apply (lambda (g$0$21508) (g$0$13629 (append g$0$21508 (cdr g$0$21492)) g$0$21493)) g$0$21506) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$21504 (quote ()))))) ((lambda (g$0$21512) (if (g$0$13212 g$0$21512) (begin (quote #f) ((lambda (g$0$21514) (if g$0$21514 (begin (quote #f) ((lambda (g$0$21516) (if g$0$21516 (begin (quote #f) (append g$0$21514 g$0$21516)) (quote #f))) ((letrec ((g$0$21518 (lambda (g$0$21520) (if (g$0$13212 g$0$21520) ((lambda (g$0$21522) (if g$0$21522 (begin (quote #f) ((lambda (g$0$21524) (if g$0$21524 (begin (quote #f) (map cons g$0$21522 g$0$21524)) (quote #f))) (g$0$21518 (g$0$13224 g$0$21520)))) (quote #f))) ((lambda (g$0$21526) (list g$0$21526)) (g$0$13220 g$0$21520))) (if (g$0$13216 g$0$21520) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$21518) (g$0$13224 g$0$21512)))) (quote #f))) ((lambda (g$0$21528) (quote ())) (g$0$13220 g$0$21512)))) (quote #f))) g$0$21504))) g$0$21495) (if (memv g$0$21502 (quote (global-macro global-macro!))) (g$0$13629 (cons (g$0$13591 g$0$21500 g$0$21495) (cdr g$0$21492)) g$0$21493) (if (memv g$0$21502 (quote (local-macro local-macro!))) (g$0$13629 (cons (g$0$13589 g$0$21500 g$0$21495) (cdr g$0$21492)) g$0$21493) (if (memv g$0$21502 (quote (macro macro!))) (g$0$13629 (cons (g$0$13587 g$0$21500 g$0$21495) (cdr g$0$21492)) g$0$21493) (g$0$13629 (cdr g$0$21492) (cons (cons (quote #f) (g$0$13597 g$0$21495 (quote ()) (quote ()))) g$0$21493))))))))))) g$0$21499)))) (car g$0$21492))))) (set! g$0$13631 (lambda (g$0$21553 g$0$21554) ((lambda (g$0$21556) ((lambda (g$0$21558) (begin (for-each ((lambda (g$0$21560) (lambda (g$0$21562) (begin (g$0$12830 g$0$21562) (g$0$21560 g$0$21562)))) (g$0$13647)) (g$0$21556)) g$0$21558)) ((lambda (g$0$21571 g$0$21572 g$0$21573 g$0$21574) ((lambda (g$0$21576) (dynamic-wind g$0$21576 (lambda () (g$0$13597 g$0$21553 g$0$21554 g$0$21554)) g$0$21576)) (lambda () (begin ((lambda (g$0$21578) (begin (g$0$21571 g$0$21573) (set! g$0$21573 g$0$21578))) (g$0$21571)) ((lambda (g$0$21580) (begin (g$0$21572 g$0$21574) (set! g$0$21574 g$0$21580))) (g$0$21572)))))) g$0$13645 g$0$13647 g$0$21556 (lambda (g$0$21582) (values))))) (g$0$13643)))) (set! g$0$13633 (lambda (g$0$21584) (letrec ((g$0$21586 (lambda (g$0$21590 g$0$21591 g$0$21592) (if (null? g$0$21590) (begin ((lambda (g$0$21654) (if (g$0$13236 g$0$21654) (void) (error (quote expander) (quote "invalid exports") (g$0$13611 g$0$21654)))) (map (lambda (g$0$21656) (g$0$13202 g$0$21656 g$0$13132 (quote ()))) g$0$21592)) (values g$0$21591 g$0$21592)) ((lambda (g$0$21594) ((lambda (g$0$21596) (if (if g$0$21596 (begin (quote #f) (apply (lambda (g$0$21616 g$0$21617 g$0$21618) (quote #t)) g$0$21596)) (quote #f)) (apply (lambda (g$0$21610 g$0$21611 g$0$21612) (begin (if (if (eq? g$0$21610 (quote rename)) (if (for-all symbol? g$0$21611) (begin (quote #f) (for-all symbol? g$0$21612)) (quote #f)) (quote #f)) (void) (error (quote expander) (quote "invalid export specifier") (car g$0$21590))) (g$0$21586 (cdr g$0$21590) (append g$0$21611 g$0$21591) (append g$0$21612 g$0$21592)))) g$0$21596) ((lambda (g$0$21598) ((lambda (g$0$21600) (if (if g$0$21600 (begin (quote #f) (apply (lambda (g$0$21604) (quote #t)) g$0$21600)) (quote #f)) (apply (lambda (g$0$21602) (begin (if (symbol? g$0$21602) (void) (error (quote expander) (quote "invalid export") g$0$21602)) (g$0$21586 (cdr g$0$21590) (cons g$0$21602 g$0$21591) (cons g$0$21602 g$0$21592)))) g$0$21600) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$21598 (quote ()))))) ((lambda (g$0$21606) (list g$0$21606)) g$0$21598))) g$0$21594))) ((lambda (g$0$21620) (if (g$0$13212 g$0$21620) (begin (quote #f) ((lambda (g$0$21622) (if g$0$21622 (begin (quote #f) ((lambda (g$0$21624) (if g$0$21624 (begin (quote #f) (append g$0$21622 g$0$21624)) (quote #f))) ((letrec ((g$0$21626 (lambda (g$0$21628) (if (g$0$13212 g$0$21628) ((lambda (g$0$21630) (if g$0$21630 (begin (quote #f) ((lambda (g$0$21632) (if g$0$21632 (begin (quote #f) (map cons g$0$21630 g$0$21632)) (quote #f))) (g$0$21626 (g$0$13224 g$0$21628)))) (quote #f))) ((lambda (g$0$21634) (if (g$0$13212 g$0$21634) (begin (quote #f) ((lambda (g$0$21636) (if g$0$21636 (begin (quote #f) ((lambda (g$0$21638) (if g$0$21638 (begin (quote #f) (append g$0$21636 g$0$21638)) (quote #f))) ((lambda (g$0$21640) (if (g$0$13212 g$0$21640) (begin (quote #f) ((lambda (g$0$21642) (if g$0$21642 (begin (quote #f) ((lambda (g$0$21644) (if g$0$21644 (begin (quote #f) (append g$0$21642 g$0$21644)) (quote #f))) ((lambda (g$0$21646) (if (equal? (g$0$13246 g$0$21646) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$21640)))) (quote #f))) ((lambda (g$0$21648) (list g$0$21648)) (g$0$13220 g$0$21640)))) (quote #f))) (g$0$13224 g$0$21634)))) (quote #f))) ((lambda (g$0$21650) (list g$0$21650)) (g$0$13220 g$0$21634)))) (quote #f))) (g$0$13220 g$0$21628))) (if (g$0$13216 g$0$21628) (list (begin (quote i*) (quote ())) (begin (quote e*) (quote ()))) (quote #f)))))) g$0$21626) (g$0$13224 g$0$21620)))) (quote #f))) ((lambda (g$0$21652) (list g$0$21652)) (g$0$13220 g$0$21620)))) (quote #f))) g$0$21594))) (car g$0$21590)))))) (g$0$21586 g$0$21584 (quote ()) (quote ()))))) (set! g$0$13635 (lambda (g$0$21658) ((lambda (g$0$21660) (begin (set! g$0$21660 (lambda (g$0$21666) ((lambda (g$0$21668) ((lambda (g$0$21670) (if (if g$0$21670 (begin (quote #f) (apply (lambda (g$0$21712) (for-all (lambda (g$0$21714) (if (integer? g$0$21714) (begin (quote #f) (exact? g$0$21714)) (quote #f))) g$0$21712)) g$0$21670)) (quote #f)) (apply (lambda (g$0$21710) (values (quote ()) g$0$21710)) g$0$21670) ((lambda (g$0$21672) ((lambda (g$0$21674) (if (if g$0$21674 (begin (quote #f) (apply (lambda (g$0$21697 g$0$21698) (symbol? g$0$21697)) g$0$21674)) (quote #f)) (apply (lambda (g$0$21689 g$0$21690) (call-with-values (lambda () (g$0$21660 g$0$21690)) (lambda (g$0$21693 g$0$21694) (values (cons g$0$21689 g$0$21693) g$0$21694)))) g$0$21674) ((lambda (g$0$21676) ((lambda (g$0$21678) (if (if g$0$21678 (begin (quote #f) (apply (lambda () (quote #t)) g$0$21678)) (quote #f)) (apply (lambda () (values (quote ()) (quote ()))) g$0$21678) ((lambda (g$0$21680) ((lambda (g$0$21682) (if (if g$0$21682 (begin (quote #f) (apply (lambda () (quote #t)) g$0$21682)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid library name") (g$0$13244 g$0$21658 (quote ())))) g$0$21682) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$21680 (quote ()))))) ((lambda (g$0$21684) (quote ())) g$0$21680))) g$0$21676))) ((lambda (g$0$21686) (if (equal? (g$0$13246 g$0$21686) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$21676))) g$0$21672))) ((lambda (g$0$21700) (if (g$0$13212 g$0$21700) (begin (quote #f) ((lambda (g$0$21702) (if g$0$21702 (begin (quote #f) ((lambda (g$0$21704) (if g$0$21704 (begin (quote #f) (append g$0$21702 g$0$21704)) (quote #f))) ((lambda (g$0$21706) (list g$0$21706)) (g$0$13224 g$0$21700)))) (quote #f))) ((lambda (g$0$21708) (list g$0$21708)) (g$0$13220 g$0$21700)))) (quote #f))) g$0$21672))) g$0$21668))) ((lambda (g$0$21716) (if (g$0$13212 g$0$21716) (begin (quote #f) ((lambda (g$0$21718) (if g$0$21718 (begin (quote #f) ((lambda (g$0$21720) (if g$0$21720 (begin (quote #f) (append g$0$21718 g$0$21720)) (quote #f))) ((lambda (g$0$21722) (if (equal? (g$0$13246 g$0$21722) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$21716)))) (quote #f))) ((letrec ((g$0$21724 (lambda (g$0$21726) (if (g$0$13212 g$0$21726) ((lambda (g$0$21728) (if g$0$21728 (begin (quote #f) ((lambda (g$0$21730) (if g$0$21730 (begin (quote #f) (map cons g$0$21728 g$0$21730)) (quote #f))) (g$0$21724 (g$0$13224 g$0$21726)))) (quote #f))) ((lambda (g$0$21732) (list g$0$21732)) (g$0$13220 g$0$21726))) (if (g$0$13216 g$0$21726) (list (begin (quote v*) (quote ()))) (quote #f)))))) g$0$21724) (g$0$13220 g$0$21716)))) (quote #f))) g$0$21668))) g$0$21666))) (call-with-values (lambda () (g$0$21660 g$0$21658)) (lambda (g$0$21663 g$0$21664) (begin (if (null? g$0$21663) (error (quote expander) (quote "empty library name") (g$0$13244 g$0$21658 (quote ()))) (void)) (values g$0$21663 g$0$21664)))))) (quote #f)))) (set! g$0$13637 (lambda (g$0$21734) ((lambda (g$0$21736) ((lambda (g$0$21738) (if (if g$0$21738 (begin (quote #f) (apply (lambda (g$0$21766 g$0$21767 g$0$21768 g$0$21769 g$0$21770 g$0$21771 g$0$21772) (if (eq? g$0$21768 (quote export)) (if (eq? g$0$21770 (quote import)) (begin (quote #f) (eq? g$0$21766 (quote library))) (quote #f)) (quote #f))) g$0$21738)) (quote #f)) (apply (lambda (g$0$21752 g$0$21753 g$0$21754 g$0$21755 g$0$21756 g$0$21757 g$0$21758) (values g$0$21753 g$0$21755 g$0$21757 g$0$21758)) g$0$21738) ((lambda (g$0$21740) ((lambda (g$0$21742) (if (if g$0$21742 (begin (quote #f) (apply (lambda () (quote #t)) g$0$21742)) (quote #f)) (apply (lambda () (error (quote expander) (quote "malformed library") (g$0$13244 g$0$21734 (quote ())))) g$0$21742) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$21740 (quote ()))))) ((lambda (g$0$21744) (quote ())) g$0$21740))) g$0$21736))) ((lambda (g$0$21774) (if (g$0$13212 g$0$21774) (begin (quote #f) ((lambda (g$0$21776) (if g$0$21776 (begin (quote #f) ((lambda (g$0$21778) (if g$0$21778 (begin (quote #f) (append g$0$21776 g$0$21778)) (quote #f))) ((lambda (g$0$21780) (if (g$0$13212 g$0$21780) (begin (quote #f) ((lambda (g$0$21782) (if g$0$21782 (begin (quote #f) ((lambda (g$0$21784) (if g$0$21784 (begin (quote #f) (append g$0$21782 g$0$21784)) (quote #f))) ((lambda (g$0$21786) (if (g$0$13212 g$0$21786) (begin (quote #f) ((lambda (g$0$21788) (if g$0$21788 (begin (quote #f) ((lambda (g$0$21790) (if g$0$21790 (begin (quote #f) (append g$0$21788 g$0$21790)) (quote #f))) ((lambda (g$0$21792) (if (g$0$13212 g$0$21792) (begin (quote #f) ((lambda (g$0$21794) (if g$0$21794 (begin (quote #f) ((lambda (g$0$21796) (if g$0$21796 (begin (quote #f) (append g$0$21794 g$0$21796)) (quote #f))) ((letrec ((g$0$21798 (lambda (g$0$21800) (if (g$0$13212 g$0$21800) ((lambda (g$0$21802) (if g$0$21802 (begin (quote #f) ((lambda (g$0$21804) (if g$0$21804 (begin (quote #f) (map cons g$0$21802 g$0$21804)) (quote #f))) (g$0$21798 (g$0$13224 g$0$21800)))) (quote #f))) ((lambda (g$0$21806) (list g$0$21806)) (g$0$13220 g$0$21800))) (if (g$0$13216 g$0$21800) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$21798) (g$0$13224 g$0$21792)))) (quote #f))) ((lambda (g$0$21808) (if (g$0$13212 g$0$21808) (begin (quote #f) ((lambda (g$0$21810) (if g$0$21810 (begin (quote #f) ((lambda (g$0$21812) (if g$0$21812 (begin (quote #f) (append g$0$21810 g$0$21812)) (quote #f))) ((letrec ((g$0$21814 (lambda (g$0$21816) (if (g$0$13212 g$0$21816) ((lambda (g$0$21818) (if g$0$21818 (begin (quote #f) ((lambda (g$0$21820) (if g$0$21820 (begin (quote #f) (map cons g$0$21818 g$0$21820)) (quote #f))) (g$0$21814 (g$0$13224 g$0$21816)))) (quote #f))) ((lambda (g$0$21822) (list g$0$21822)) (g$0$13220 g$0$21816))) (if (g$0$13216 g$0$21816) (list (begin (quote imp*) (quote ()))) (quote #f)))))) g$0$21814) (g$0$13224 g$0$21808)))) (quote #f))) ((lambda (g$0$21824) (list g$0$21824)) (g$0$13220 g$0$21808)))) (quote #f))) (g$0$13220 g$0$21792)))) (quote #f))) (g$0$13224 g$0$21786)))) (quote #f))) ((lambda (g$0$21826) (if (g$0$13212 g$0$21826) (begin (quote #f) ((lambda (g$0$21828) (if g$0$21828 (begin (quote #f) ((lambda (g$0$21830) (if g$0$21830 (begin (quote #f) (append g$0$21828 g$0$21830)) (quote #f))) ((letrec ((g$0$21832 (lambda (g$0$21834) (if (g$0$13212 g$0$21834) ((lambda (g$0$21836) (if g$0$21836 (begin (quote #f) ((lambda (g$0$21838) (if g$0$21838 (begin (quote #f) (map cons g$0$21836 g$0$21838)) (quote #f))) (g$0$21832 (g$0$13224 g$0$21834)))) (quote #f))) ((lambda (g$0$21840) (list g$0$21840)) (g$0$13220 g$0$21834))) (if (g$0$13216 g$0$21834) (list (begin (quote exp*) (quote ()))) (quote #f)))))) g$0$21832) (g$0$13224 g$0$21826)))) (quote #f))) ((lambda (g$0$21842) (list g$0$21842)) (g$0$13220 g$0$21826)))) (quote #f))) (g$0$13220 g$0$21786)))) (quote #f))) (g$0$13224 g$0$21780)))) (quote #f))) ((letrec ((g$0$21844 (lambda (g$0$21846) (if (g$0$13212 g$0$21846) ((lambda (g$0$21848) (if g$0$21848 (begin (quote #f) ((lambda (g$0$21850) (if g$0$21850 (begin (quote #f) (map cons g$0$21848 g$0$21850)) (quote #f))) (g$0$21844 (g$0$13224 g$0$21846)))) (quote #f))) ((lambda (g$0$21852) (list g$0$21852)) (g$0$13220 g$0$21846))) (if (g$0$13216 g$0$21846) (list (begin (quote name*) (quote ()))) (quote #f)))))) g$0$21844) (g$0$13220 g$0$21780)))) (quote #f))) (g$0$13224 g$0$21774)))) (quote #f))) ((lambda (g$0$21854) (list g$0$21854)) (g$0$13220 g$0$21774)))) (quote #f))) g$0$21736))) g$0$21734))) (set! g$0$13639 (lambda (g$0$21856) ((lambda (g$0$21858 g$0$21860 g$0$21862 g$0$21864 g$0$21866 g$0$21868 g$0$21870 g$0$21872) (begin (set! g$0$21858 (g$0$13643)) (set! g$0$21860 (lambda (g$0$22635 g$0$22636) ((lambda (g$0$22638) (begin (set! g$0$22638 (lambda (g$0$22641 g$0$22642) ((lambda (g$0$22645 g$0$22646) ((lambda (g$0$22648) (if g$0$22648 ((lambda (g$0$22650) (if (eq? (cdr g$0$22650) g$0$22646) g$0$22642 (error (quote import) (quote "two imports with different bindings") g$0$22645))) g$0$22648) (cons g$0$22641 g$0$22642))) (assq g$0$22645 g$0$22642))) (car g$0$22641) (cdr g$0$22641)))) (if (null? g$0$22635) g$0$22636 (g$0$22638 (car g$0$22635) (g$0$21860 (cdr g$0$22635) g$0$22636))))) (quote #f)))) (set! g$0$21862 (lambda (g$0$22611 g$0$22612) ((lambda (g$0$22614) (begin (set! g$0$22614 (lambda (g$0$22625 g$0$22626) (if (null? g$0$22626) (error (quote import) (quote "cannot rename unbound identifier") g$0$22625) (if (eq? g$0$22625 (caar g$0$22626)) (values (cdar g$0$22626) (cdr g$0$22626)) ((lambda (g$0$22628) (call-with-values (lambda () (g$0$22614 g$0$22625 (cdr g$0$22626))) (lambda (g$0$22631 g$0$22632) (values g$0$22631 (cons g$0$22628 g$0$22632))))) (car g$0$22626)))))) (if (null? g$0$22611) (values (quote ()) g$0$22612) (call-with-values (lambda () (g$0$22614 (car g$0$22611) g$0$22612)) (lambda (g$0$22617 g$0$22618) (call-with-values (lambda () (g$0$21862 (cdr g$0$22611) g$0$22618)) (lambda (g$0$22621 g$0$22622) (values (cons g$0$22617 g$0$22621) g$0$22622)))))))) (quote #f)))) (set! g$0$21864 (lambda (g$0$22603 g$0$22604) (map (lambda (g$0$22606) ((lambda (g$0$22608) (if g$0$22608 (cdr g$0$22608) (error (quote import) (quote "cannot find identifier") g$0$22606))) (assq g$0$22606 g$0$22604))) g$0$22603))) (set! g$0$21866 (lambda (g$0$22595 g$0$22596) (letrec ((g$0$22598 (lambda (g$0$22600) (if (null? g$0$22600) (quote ()) (if (memq (caar g$0$22600) g$0$22595) (g$0$22598 (cdr g$0$22600)) (cons (car g$0$22600) (g$0$22598 (cdr g$0$22600)))))))) (g$0$22598 g$0$22596)))) (set! g$0$21868 (lambda (g$0$22592) (if (null? g$0$22592) (quote ()) (if (memq (car g$0$22592) (cdr g$0$22592)) (g$0$21868 (cdr g$0$22592)) (cons (car g$0$22592) (g$0$21868 (cdr g$0$22592))))))) (set! g$0$21870 (lambda (g$0$22172) ((lambda (g$0$22174 g$0$22176 g$0$22178) (begin (set! g$0$22174 (lambda (g$0$22590) (if (integer? g$0$22590) (if (exact? g$0$22590) (begin (quote #f) (>= g$0$22590 (quote 0))) (quote #f)) (quote #f)))) (set! g$0$22176 (lambda (g$0$22400) ((lambda (g$0$22402) ((lambda (g$0$22404) (if (if g$0$22404 (begin (quote #f) (apply (lambda (g$0$22586) (g$0$22174 g$0$22586)) g$0$22404)) (quote #f)) (apply (lambda (g$0$22582) (lambda (g$0$22584) (= g$0$22584 g$0$22582))) g$0$22404) ((lambda (g$0$22406) ((lambda (g$0$22408) (if (if g$0$22408 (begin (quote #f) (apply (lambda (g$0$22561 g$0$22562) (eq? g$0$22561 (quote and))) g$0$22408)) (quote #f)) (apply (lambda (g$0$22551 g$0$22552) ((lambda (g$0$22554) (lambda (g$0$22556) (for-all (lambda (g$0$22558) (g$0$22558 g$0$22556)) g$0$22554))) (map g$0$22176 g$0$22552))) g$0$22408) ((lambda (g$0$22410) ((lambda (g$0$22412) (if (if g$0$22412 (begin (quote #f) (apply (lambda (g$0$22529 g$0$22530) (eq? g$0$22529 (quote or))) g$0$22412)) (quote #f)) (apply (lambda (g$0$22519 g$0$22520) ((lambda (g$0$22522) (lambda (g$0$22524) (exists (lambda (g$0$22526) (g$0$22526 g$0$22524)) g$0$22522))) (map g$0$22176 g$0$22520))) g$0$22412) ((lambda (g$0$22414) ((lambda (g$0$22416) (if (if g$0$22416 (begin (quote #f) (apply (lambda (g$0$22497 g$0$22498) (eq? g$0$22497 (quote not))) g$0$22416)) (quote #f)) (apply (lambda (g$0$22489 g$0$22490) ((lambda (g$0$22492) (lambda (g$0$22494) (not (g$0$22492 g$0$22494)))) (g$0$22176 g$0$22490))) g$0$22416) ((lambda (g$0$22418) ((lambda (g$0$22420) (if (if g$0$22420 (begin (quote #f) (apply (lambda (g$0$22467 g$0$22468) (if (eq? g$0$22467 (quote <=)) (begin (quote #f) (g$0$22174 g$0$22468)) (quote #f))) g$0$22420)) (quote #f)) (apply (lambda (g$0$22461 g$0$22462) (lambda (g$0$22464) (<= g$0$22464 g$0$22462))) g$0$22420) ((lambda (g$0$22422) ((lambda (g$0$22424) (if (if g$0$22424 (begin (quote #f) (apply (lambda (g$0$22439 g$0$22440) (if (eq? g$0$22439 (quote >=)) (begin (quote #f) (g$0$22174 g$0$22440)) (quote #f))) g$0$22424)) (quote #f)) (apply (lambda (g$0$22433 g$0$22434) (lambda (g$0$22436) (>= g$0$22436 g$0$22434))) g$0$22424) ((lambda (g$0$22426) ((lambda (g$0$22428) (if (if g$0$22428 (begin (quote #f) (apply (lambda () (quote #t)) g$0$22428)) (quote #f)) (apply (lambda () (error (quote import) (quote "invalid sub-version spec") g$0$22400 g$0$22172)) g$0$22428) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$22426 (quote ()))))) ((lambda (g$0$22430) (quote ())) g$0$22426))) g$0$22422))) ((lambda (g$0$22442) (if (g$0$13212 g$0$22442) (begin (quote #f) ((lambda (g$0$22444) (if g$0$22444 (begin (quote #f) ((lambda (g$0$22446) (if g$0$22446 (begin (quote #f) (append g$0$22444 g$0$22446)) (quote #f))) ((lambda (g$0$22448) (if (g$0$13212 g$0$22448) (begin (quote #f) ((lambda (g$0$22450) (if g$0$22450 (begin (quote #f) ((lambda (g$0$22452) (if g$0$22452 (begin (quote #f) (append g$0$22450 g$0$22452)) (quote #f))) ((lambda (g$0$22454) (if (equal? (g$0$13246 g$0$22454) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$22448)))) (quote #f))) ((lambda (g$0$22456) (list g$0$22456)) (g$0$13220 g$0$22448)))) (quote #f))) (g$0$13224 g$0$22442)))) (quote #f))) ((lambda (g$0$22458) (list g$0$22458)) (g$0$13220 g$0$22442)))) (quote #f))) g$0$22422))) g$0$22418))) ((lambda (g$0$22470) (if (g$0$13212 g$0$22470) (begin (quote #f) ((lambda (g$0$22472) (if g$0$22472 (begin (quote #f) ((lambda (g$0$22474) (if g$0$22474 (begin (quote #f) (append g$0$22472 g$0$22474)) (quote #f))) ((lambda (g$0$22476) (if (g$0$13212 g$0$22476) (begin (quote #f) ((lambda (g$0$22478) (if g$0$22478 (begin (quote #f) ((lambda (g$0$22480) (if g$0$22480 (begin (quote #f) (append g$0$22478 g$0$22480)) (quote #f))) ((lambda (g$0$22482) (if (equal? (g$0$13246 g$0$22482) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$22476)))) (quote #f))) ((lambda (g$0$22484) (list g$0$22484)) (g$0$13220 g$0$22476)))) (quote #f))) (g$0$13224 g$0$22470)))) (quote #f))) ((lambda (g$0$22486) (list g$0$22486)) (g$0$13220 g$0$22470)))) (quote #f))) g$0$22418))) g$0$22414))) ((lambda (g$0$22500) (if (g$0$13212 g$0$22500) (begin (quote #f) ((lambda (g$0$22502) (if g$0$22502 (begin (quote #f) ((lambda (g$0$22504) (if g$0$22504 (begin (quote #f) (append g$0$22502 g$0$22504)) (quote #f))) ((lambda (g$0$22506) (if (g$0$13212 g$0$22506) (begin (quote #f) ((lambda (g$0$22508) (if g$0$22508 (begin (quote #f) ((lambda (g$0$22510) (if g$0$22510 (begin (quote #f) (append g$0$22508 g$0$22510)) (quote #f))) ((lambda (g$0$22512) (if (equal? (g$0$13246 g$0$22512) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$22506)))) (quote #f))) ((lambda (g$0$22514) (list g$0$22514)) (g$0$13220 g$0$22506)))) (quote #f))) (g$0$13224 g$0$22500)))) (quote #f))) ((lambda (g$0$22516) (list g$0$22516)) (g$0$13220 g$0$22500)))) (quote #f))) g$0$22414))) g$0$22410))) ((lambda (g$0$22532) (if (g$0$13212 g$0$22532) (begin (quote #f) ((lambda (g$0$22534) (if g$0$22534 (begin (quote #f) ((lambda (g$0$22536) (if g$0$22536 (begin (quote #f) (append g$0$22534 g$0$22536)) (quote #f))) ((letrec ((g$0$22538 (lambda (g$0$22540) (if (g$0$13212 g$0$22540) ((lambda (g$0$22542) (if g$0$22542 (begin (quote #f) ((lambda (g$0$22544) (if g$0$22544 (begin (quote #f) (map cons g$0$22542 g$0$22544)) (quote #f))) (g$0$22538 (g$0$13224 g$0$22540)))) (quote #f))) ((lambda (g$0$22546) (list g$0$22546)) (g$0$13220 g$0$22540))) (if (g$0$13216 g$0$22540) (list (begin (quote sub*) (quote ()))) (quote #f)))))) g$0$22538) (g$0$13224 g$0$22532)))) (quote #f))) ((lambda (g$0$22548) (list g$0$22548)) (g$0$13220 g$0$22532)))) (quote #f))) g$0$22410))) g$0$22406))) ((lambda (g$0$22564) (if (g$0$13212 g$0$22564) (begin (quote #f) ((lambda (g$0$22566) (if g$0$22566 (begin (quote #f) ((lambda (g$0$22568) (if g$0$22568 (begin (quote #f) (append g$0$22566 g$0$22568)) (quote #f))) ((letrec ((g$0$22570 (lambda (g$0$22572) (if (g$0$13212 g$0$22572) ((lambda (g$0$22574) (if g$0$22574 (begin (quote #f) ((lambda (g$0$22576) (if g$0$22576 (begin (quote #f) (map cons g$0$22574 g$0$22576)) (quote #f))) (g$0$22570 (g$0$13224 g$0$22572)))) (quote #f))) ((lambda (g$0$22578) (list g$0$22578)) (g$0$13220 g$0$22572))) (if (g$0$13216 g$0$22572) (list (begin (quote sub*) (quote ()))) (quote #f)))))) g$0$22570) (g$0$13224 g$0$22564)))) (quote #f))) ((lambda (g$0$22580) (list g$0$22580)) (g$0$13220 g$0$22564)))) (quote #f))) g$0$22406))) g$0$22402))) ((lambda (g$0$22588) (list g$0$22588)) g$0$22402))) g$0$22400))) (set! g$0$22178 (lambda (g$0$22250) ((lambda (g$0$22252) ((lambda (g$0$22254) (if (if g$0$22254 (begin (quote #f) (apply (lambda () (quote #t)) g$0$22254)) (quote #f)) (apply (lambda () (lambda (g$0$22396) (quote #t))) g$0$22254) ((lambda (g$0$22256) ((lambda (g$0$22258) (if (if g$0$22258 (begin (quote #f) (apply (lambda (g$0$22375 g$0$22376) (eq? g$0$22375 (quote and))) g$0$22258)) (quote #f)) (apply (lambda (g$0$22365 g$0$22366) ((lambda (g$0$22368) (lambda (g$0$22370) (for-all (lambda (g$0$22372) (g$0$22372 g$0$22370)) g$0$22368))) (map g$0$22178 g$0$22366))) g$0$22258) ((lambda (g$0$22260) ((lambda (g$0$22262) (if (if g$0$22262 (begin (quote #f) (apply (lambda (g$0$22343 g$0$22344) (eq? g$0$22343 (quote or))) g$0$22262)) (quote #f)) (apply (lambda (g$0$22333 g$0$22334) ((lambda (g$0$22336) (lambda (g$0$22338) (exists (lambda (g$0$22340) (g$0$22340 g$0$22338)) g$0$22336))) (map g$0$22178 g$0$22334))) g$0$22262) ((lambda (g$0$22264) ((lambda (g$0$22266) (if (if g$0$22266 (begin (quote #f) (apply (lambda (g$0$22311 g$0$22312) (eq? g$0$22311 (quote not))) g$0$22266)) (quote #f)) (apply (lambda (g$0$22303 g$0$22304) ((lambda (g$0$22306) (lambda (g$0$22308) (not (g$0$22306 g$0$22308)))) (g$0$22178 g$0$22304))) g$0$22266) ((lambda (g$0$22268) ((lambda (g$0$22270) (if (if g$0$22270 (begin (quote #f) (apply (lambda (g$0$22290) (quote #t)) g$0$22270)) (quote #f)) (apply (lambda (g$0$22278) ((lambda (g$0$22280) (lambda (g$0$22282) (letrec ((g$0$22284 (lambda (g$0$22287 g$0$22288) (if (null? g$0$22287) (quote #t) (if (null? g$0$22288) (quote #f) (if ((car g$0$22287) (car g$0$22288)) (begin (quote #f) (g$0$22284 (cdr g$0$22287) (cdr g$0$22250))) (quote #f))))))) (g$0$22284 g$0$22280 g$0$22282)))) (map g$0$22176 g$0$22278))) g$0$22270) ((lambda (g$0$22272) ((lambda (g$0$22274) (if (if g$0$22274 (begin (quote #f) (apply (lambda () (quote #t)) g$0$22274)) (quote #f)) (apply (lambda () (error (quote import) (quote "invalid version spec") g$0$22250 g$0$22172)) g$0$22274) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$22272 (quote ()))))) ((lambda (g$0$22276) (quote ())) g$0$22272))) g$0$22268))) ((letrec ((g$0$22292 (lambda (g$0$22294) (if (g$0$13212 g$0$22294) ((lambda (g$0$22296) (if g$0$22296 (begin (quote #f) ((lambda (g$0$22298) (if g$0$22298 (begin (quote #f) (map cons g$0$22296 g$0$22298)) (quote #f))) (g$0$22292 (g$0$13224 g$0$22294)))) (quote #f))) ((lambda (g$0$22300) (list g$0$22300)) (g$0$13220 g$0$22294))) (if (g$0$13216 g$0$22294) (list (begin (quote sub*) (quote ()))) (quote #f)))))) g$0$22292) g$0$22268))) g$0$22264))) ((lambda (g$0$22314) (if (g$0$13212 g$0$22314) (begin (quote #f) ((lambda (g$0$22316) (if g$0$22316 (begin (quote #f) ((lambda (g$0$22318) (if g$0$22318 (begin (quote #f) (append g$0$22316 g$0$22318)) (quote #f))) ((lambda (g$0$22320) (if (g$0$13212 g$0$22320) (begin (quote #f) ((lambda (g$0$22322) (if g$0$22322 (begin (quote #f) ((lambda (g$0$22324) (if g$0$22324 (begin (quote #f) (append g$0$22322 g$0$22324)) (quote #f))) ((lambda (g$0$22326) (if (equal? (g$0$13246 g$0$22326) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$22320)))) (quote #f))) ((lambda (g$0$22328) (list g$0$22328)) (g$0$13220 g$0$22320)))) (quote #f))) (g$0$13224 g$0$22314)))) (quote #f))) ((lambda (g$0$22330) (list g$0$22330)) (g$0$13220 g$0$22314)))) (quote #f))) g$0$22264))) g$0$22260))) ((lambda (g$0$22346) (if (g$0$13212 g$0$22346) (begin (quote #f) ((lambda (g$0$22348) (if g$0$22348 (begin (quote #f) ((lambda (g$0$22350) (if g$0$22350 (begin (quote #f) (append g$0$22348 g$0$22350)) (quote #f))) ((letrec ((g$0$22352 (lambda (g$0$22354) (if (g$0$13212 g$0$22354) ((lambda (g$0$22356) (if g$0$22356 (begin (quote #f) ((lambda (g$0$22358) (if g$0$22358 (begin (quote #f) (map cons g$0$22356 g$0$22358)) (quote #f))) (g$0$22352 (g$0$13224 g$0$22354)))) (quote #f))) ((lambda (g$0$22360) (list g$0$22360)) (g$0$13220 g$0$22354))) (if (g$0$13216 g$0$22354) (list (begin (quote ver*) (quote ()))) (quote #f)))))) g$0$22352) (g$0$13224 g$0$22346)))) (quote #f))) ((lambda (g$0$22362) (list g$0$22362)) (g$0$13220 g$0$22346)))) (quote #f))) g$0$22260))) g$0$22256))) ((lambda (g$0$22378) (if (g$0$13212 g$0$22378) (begin (quote #f) ((lambda (g$0$22380) (if g$0$22380 (begin (quote #f) ((lambda (g$0$22382) (if g$0$22382 (begin (quote #f) (append g$0$22380 g$0$22382)) (quote #f))) ((letrec ((g$0$22384 (lambda (g$0$22386) (if (g$0$13212 g$0$22386) ((lambda (g$0$22388) (if g$0$22388 (begin (quote #f) ((lambda (g$0$22390) (if g$0$22390 (begin (quote #f) (map cons g$0$22388 g$0$22390)) (quote #f))) (g$0$22384 (g$0$13224 g$0$22386)))) (quote #f))) ((lambda (g$0$22392) (list g$0$22392)) (g$0$13220 g$0$22386))) (if (g$0$13216 g$0$22386) (list (begin (quote ver*) (quote ()))) (quote #f)))))) g$0$22384) (g$0$13224 g$0$22378)))) (quote #f))) ((lambda (g$0$22394) (list g$0$22394)) (g$0$13220 g$0$22378)))) (quote #f))) g$0$22256))) g$0$22252))) ((lambda (g$0$22398) (if (equal? (g$0$13246 g$0$22398) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$22252))) g$0$22250))) (letrec ((g$0$22180 (lambda (g$0$22182) ((lambda (g$0$22184) ((lambda (g$0$22186) (if (if g$0$22186 (begin (quote #f) (apply (lambda (g$0$22230) (quote #t)) g$0$22186)) (quote #f)) (apply (lambda (g$0$22228) (values (quote ()) (g$0$22178 g$0$22228))) g$0$22186) ((lambda (g$0$22188) ((lambda (g$0$22190) (if (if g$0$22190 (begin (quote #f) (apply (lambda (g$0$22215 g$0$22216) (symbol? g$0$22215)) g$0$22190)) (quote #f)) (apply (lambda (g$0$22207 g$0$22208) (call-with-values (lambda () (g$0$22180 g$0$22208)) (lambda (g$0$22211 g$0$22212) (values (cons g$0$22207 g$0$22211) g$0$22212)))) g$0$22190) ((lambda (g$0$22192) ((lambda (g$0$22194) (if (if g$0$22194 (begin (quote #f) (apply (lambda () (quote #t)) g$0$22194)) (quote #f)) (apply (lambda () (values (quote ()) (lambda (g$0$22202) (quote #t)))) g$0$22194) ((lambda (g$0$22196) ((lambda (g$0$22198) (if (if g$0$22198 (begin (quote #f) (apply (lambda () (quote #t)) g$0$22198)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid import spec") (g$0$13244 g$0$22172 (quote ())))) g$0$22198) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$22196 (quote ()))))) ((lambda (g$0$22200) (quote ())) g$0$22196))) g$0$22192))) ((lambda (g$0$22204) (if (equal? (g$0$13246 g$0$22204) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$22192))) g$0$22188))) ((lambda (g$0$22218) (if (g$0$13212 g$0$22218) (begin (quote #f) ((lambda (g$0$22220) (if g$0$22220 (begin (quote #f) ((lambda (g$0$22222) (if g$0$22222 (begin (quote #f) (append g$0$22220 g$0$22222)) (quote #f))) ((lambda (g$0$22224) (list g$0$22224)) (g$0$13224 g$0$22218)))) (quote #f))) ((lambda (g$0$22226) (list g$0$22226)) (g$0$13220 g$0$22218)))) (quote #f))) g$0$22188))) g$0$22184))) ((lambda (g$0$22232) (if (g$0$13212 g$0$22232) (begin (quote #f) ((lambda (g$0$22234) (if g$0$22234 (begin (quote #f) ((lambda (g$0$22236) (if g$0$22236 (begin (quote #f) (append g$0$22234 g$0$22236)) (quote #f))) ((lambda (g$0$22238) (if (equal? (g$0$13246 g$0$22238) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$22232)))) (quote #f))) ((letrec ((g$0$22240 (lambda (g$0$22242) (if (g$0$13212 g$0$22242) ((lambda (g$0$22244) (if g$0$22244 (begin (quote #f) ((lambda (g$0$22246) (if g$0$22246 (begin (quote #f) (map cons g$0$22244 g$0$22246)) (quote #f))) (g$0$22240 (g$0$13224 g$0$22242)))) (quote #f))) ((lambda (g$0$22248) (list g$0$22248)) (g$0$13220 g$0$22242))) (if (g$0$13216 g$0$22242) (list (begin (quote version-spec*) (quote ()))) (quote #f)))))) g$0$22240) (g$0$13220 g$0$22232)))) (quote #f))) g$0$22184))) g$0$22182)))) (g$0$22180 g$0$22172)))) (quote #f) (quote #f) (quote #f)))) (set! g$0$21872 (lambda (g$0$21880) ((lambda (g$0$21882) ((lambda (g$0$21884) (if (if g$0$21884 (begin (quote #f) (apply (lambda (g$0$22125 g$0$22126 g$0$22127 g$0$22128) (if (eq? g$0$22125 (quote rename)) (if (for-all symbol? g$0$22127) (begin (quote #f) (for-all symbol? g$0$22128)) (quote #f)) (quote #f))) g$0$21884)) (quote #f)) (apply (lambda (g$0$22111 g$0$22112 g$0$22113 g$0$22114) ((lambda (g$0$22116) ((lambda (g$0$22118) ((lambda (g$0$22120) (g$0$21860 (map cons g$0$22114 g$0$22118) g$0$22120)) (g$0$21866 g$0$22113 g$0$22116))) (g$0$21864 g$0$22113 g$0$22116))) (g$0$21872 g$0$22112))) g$0$21884) ((lambda (g$0$21886) ((lambda (g$0$21888) (if (if g$0$21888 (begin (quote #f) (apply (lambda (g$0$22078 g$0$22079 g$0$22080) (if (eq? g$0$22078 (quote except)) (begin (quote #f) (for-all symbol? g$0$22080)) (quote #f))) g$0$21888)) (quote #f)) (apply (lambda (g$0$22070 g$0$22071 g$0$22072) ((lambda (g$0$22074) (g$0$21866 g$0$22072 g$0$22074)) (g$0$21872 g$0$22071))) g$0$21888) ((lambda (g$0$21890) ((lambda (g$0$21892) (if (if g$0$21892 (begin (quote #f) (apply (lambda (g$0$22038 g$0$22039 g$0$22040) (if (eq? g$0$22038 (quote only)) (begin (quote #f) (for-all symbol? g$0$22040)) (quote #f))) g$0$21892)) (quote #f)) (apply (lambda (g$0$22026 g$0$22027 g$0$22028) ((lambda (g$0$22030) ((lambda (g$0$22032) ((lambda (g$0$22034) (map cons g$0$22032 g$0$22034)) (g$0$21864 g$0$22032 g$0$22030))) (g$0$21868 g$0$22028))) (g$0$21872 g$0$22027))) g$0$21892) ((lambda (g$0$21894) ((lambda (g$0$21896) (if (if g$0$21896 (begin (quote #f) (apply (lambda (g$0$21994 g$0$21995 g$0$21996) (if (eq? g$0$21994 (quote prefix)) (begin (quote #f) (symbol? g$0$21996)) (quote #f))) g$0$21896)) (quote #f)) (apply (lambda (g$0$21984 g$0$21985 g$0$21986) ((lambda (g$0$21988) (map (lambda (g$0$21990) (cons (string->symbol (string-append (symbol->string g$0$21986) (symbol->string (car g$0$21990)))) (cdr g$0$21990))) g$0$21988)) (g$0$21872 g$0$21985))) g$0$21896) ((lambda (g$0$21898) ((lambda (g$0$21900) (if (if g$0$21900 (begin (quote #f) (apply (lambda (g$0$21953 g$0$21954) (eq? g$0$21953 (quote library))) g$0$21900)) (quote #f)) (apply (lambda (g$0$21943 g$0$21944) (call-with-values (lambda () (g$0$21870 g$0$21944)) (lambda (g$0$21947 g$0$21948) (begin (if (null? g$0$21947) (error (quote import) (quote "empty library name") g$0$21944) (void)) ((lambda (g$0$21950) (begin (if g$0$21950 (void) (error (quote import) (quote "cannot find library with required name") g$0$21947)) (if (g$0$21948 (g$0$12868 g$0$21950)) (void) (error (quote import) (quote "library does not satisfy version specification") g$0$21950 g$0$21944)) (g$0$21858 g$0$21950) (g$0$12864 g$0$21950))) (g$0$12839 g$0$21947)))))) g$0$21900) ((lambda (g$0$21902) ((lambda (g$0$21904) (if (if g$0$21904 (begin (quote #f) (apply (lambda (g$0$21921 g$0$21922) (not (memq g$0$21921 (quote (rename except only prefix library))))) g$0$21904)) (quote #f)) (apply (lambda (g$0$21917 g$0$21918) (g$0$21872 (list (quote library) (cons g$0$21917 g$0$21918)))) g$0$21904) ((lambda (g$0$21906) ((lambda (g$0$21908) (if (if g$0$21908 (begin (quote #f) (apply (lambda (g$0$21912) (quote #t)) g$0$21908)) (quote #f)) (apply (lambda (g$0$21910) (error (quote import) (quote "invalid import spec") g$0$21910)) g$0$21908) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$21906 (quote ()))))) ((lambda (g$0$21914) (list g$0$21914)) g$0$21906))) g$0$21902))) ((lambda (g$0$21924) (if (g$0$13212 g$0$21924) (begin (quote #f) ((lambda (g$0$21926) (if g$0$21926 (begin (quote #f) ((lambda (g$0$21928) (if g$0$21928 (begin (quote #f) (append g$0$21926 g$0$21928)) (quote #f))) ((letrec ((g$0$21930 (lambda (g$0$21932) (if (g$0$13212 g$0$21932) ((lambda (g$0$21934) (if g$0$21934 (begin (quote #f) ((lambda (g$0$21936) (if g$0$21936 (begin (quote #f) (map cons g$0$21934 g$0$21936)) (quote #f))) (g$0$21930 (g$0$13224 g$0$21932)))) (quote #f))) ((lambda (g$0$21938) (list g$0$21938)) (g$0$13220 g$0$21932))) (if (g$0$13216 g$0$21932) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$21930) (g$0$13224 g$0$21924)))) (quote #f))) ((lambda (g$0$21940) (list g$0$21940)) (g$0$13220 g$0$21924)))) (quote #f))) g$0$21902))) g$0$21898))) ((lambda (g$0$21956) (if (g$0$13212 g$0$21956) (begin (quote #f) ((lambda (g$0$21958) (if g$0$21958 (begin (quote #f) ((lambda (g$0$21960) (if g$0$21960 (begin (quote #f) (append g$0$21958 g$0$21960)) (quote #f))) ((lambda (g$0$21962) (if (g$0$13212 g$0$21962) (begin (quote #f) ((lambda (g$0$21964) (if g$0$21964 (begin (quote #f) ((lambda (g$0$21966) (if g$0$21966 (begin (quote #f) (append g$0$21964 g$0$21966)) (quote #f))) ((lambda (g$0$21968) (if (equal? (g$0$13246 g$0$21968) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$21962)))) (quote #f))) ((letrec ((g$0$21970 (lambda (g$0$21972) (if (g$0$13212 g$0$21972) ((lambda (g$0$21974) (if g$0$21974 (begin (quote #f) ((lambda (g$0$21976) (if g$0$21976 (begin (quote #f) (map cons g$0$21974 g$0$21976)) (quote #f))) (g$0$21970 (g$0$13224 g$0$21972)))) (quote #f))) ((lambda (g$0$21978) (list g$0$21978)) (g$0$13220 g$0$21972))) (if (g$0$13216 g$0$21972) (list (begin (quote spec*) (quote ()))) (quote #f)))))) g$0$21970) (g$0$13220 g$0$21962)))) (quote #f))) (g$0$13224 g$0$21956)))) (quote #f))) ((lambda (g$0$21980) (list g$0$21980)) (g$0$13220 g$0$21956)))) (quote #f))) g$0$21898))) g$0$21894))) ((lambda (g$0$21998) (if (g$0$13212 g$0$21998) (begin (quote #f) ((lambda (g$0$22000) (if g$0$22000 (begin (quote #f) ((lambda (g$0$22002) (if g$0$22002 (begin (quote #f) (append g$0$22000 g$0$22002)) (quote #f))) ((lambda (g$0$22004) (if (g$0$13212 g$0$22004) (begin (quote #f) ((lambda (g$0$22006) (if g$0$22006 (begin (quote #f) ((lambda (g$0$22008) (if g$0$22008 (begin (quote #f) (append g$0$22006 g$0$22008)) (quote #f))) ((lambda (g$0$22010) (if (g$0$13212 g$0$22010) (begin (quote #f) ((lambda (g$0$22012) (if g$0$22012 (begin (quote #f) ((lambda (g$0$22014) (if g$0$22014 (begin (quote #f) (append g$0$22012 g$0$22014)) (quote #f))) ((lambda (g$0$22016) (if (equal? (g$0$13246 g$0$22016) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$22010)))) (quote #f))) ((lambda (g$0$22018) (list g$0$22018)) (g$0$13220 g$0$22010)))) (quote #f))) (g$0$13224 g$0$22004)))) (quote #f))) ((lambda (g$0$22020) (list g$0$22020)) (g$0$13220 g$0$22004)))) (quote #f))) (g$0$13224 g$0$21998)))) (quote #f))) ((lambda (g$0$22022) (list g$0$22022)) (g$0$13220 g$0$21998)))) (quote #f))) g$0$21894))) g$0$21890))) ((lambda (g$0$22042) (if (g$0$13212 g$0$22042) (begin (quote #f) ((lambda (g$0$22044) (if g$0$22044 (begin (quote #f) ((lambda (g$0$22046) (if g$0$22046 (begin (quote #f) (append g$0$22044 g$0$22046)) (quote #f))) ((lambda (g$0$22048) (if (g$0$13212 g$0$22048) (begin (quote #f) ((lambda (g$0$22050) (if g$0$22050 (begin (quote #f) ((lambda (g$0$22052) (if g$0$22052 (begin (quote #f) (append g$0$22050 g$0$22052)) (quote #f))) ((letrec ((g$0$22054 (lambda (g$0$22056) (if (g$0$13212 g$0$22056) ((lambda (g$0$22058) (if g$0$22058 (begin (quote #f) ((lambda (g$0$22060) (if g$0$22060 (begin (quote #f) (map cons g$0$22058 g$0$22060)) (quote #f))) (g$0$22054 (g$0$13224 g$0$22056)))) (quote #f))) ((lambda (g$0$22062) (list g$0$22062)) (g$0$13220 g$0$22056))) (if (g$0$13216 g$0$22056) (list (begin (quote sym*) (quote ()))) (quote #f)))))) g$0$22054) (g$0$13224 g$0$22048)))) (quote #f))) ((lambda (g$0$22064) (list g$0$22064)) (g$0$13220 g$0$22048)))) (quote #f))) (g$0$13224 g$0$22042)))) (quote #f))) ((lambda (g$0$22066) (list g$0$22066)) (g$0$13220 g$0$22042)))) (quote #f))) g$0$21890))) g$0$21886))) ((lambda (g$0$22082) (if (g$0$13212 g$0$22082) (begin (quote #f) ((lambda (g$0$22084) (if g$0$22084 (begin (quote #f) ((lambda (g$0$22086) (if g$0$22086 (begin (quote #f) (append g$0$22084 g$0$22086)) (quote #f))) ((lambda (g$0$22088) (if (g$0$13212 g$0$22088) (begin (quote #f) ((lambda (g$0$22090) (if g$0$22090 (begin (quote #f) ((lambda (g$0$22092) (if g$0$22092 (begin (quote #f) (append g$0$22090 g$0$22092)) (quote #f))) ((letrec ((g$0$22094 (lambda (g$0$22096) (if (g$0$13212 g$0$22096) ((lambda (g$0$22098) (if g$0$22098 (begin (quote #f) ((lambda (g$0$22100) (if g$0$22100 (begin (quote #f) (map cons g$0$22098 g$0$22100)) (quote #f))) (g$0$22094 (g$0$13224 g$0$22096)))) (quote #f))) ((lambda (g$0$22102) (list g$0$22102)) (g$0$13220 g$0$22096))) (if (g$0$13216 g$0$22096) (list (begin (quote sym*) (quote ()))) (quote #f)))))) g$0$22094) (g$0$13224 g$0$22088)))) (quote #f))) ((lambda (g$0$22104) (list g$0$22104)) (g$0$13220 g$0$22088)))) (quote #f))) (g$0$13224 g$0$22082)))) (quote #f))) ((lambda (g$0$22106) (list g$0$22106)) (g$0$13220 g$0$22082)))) (quote #f))) g$0$21886))) g$0$21882))) ((lambda (g$0$22130) (if (g$0$13212 g$0$22130) (begin (quote #f) ((lambda (g$0$22132) (if g$0$22132 (begin (quote #f) ((lambda (g$0$22134) (if g$0$22134 (begin (quote #f) (append g$0$22132 g$0$22134)) (quote #f))) ((lambda (g$0$22136) (if (g$0$13212 g$0$22136) (begin (quote #f) ((lambda (g$0$22138) (if g$0$22138 (begin (quote #f) ((lambda (g$0$22140) (if g$0$22140 (begin (quote #f) (append g$0$22138 g$0$22140)) (quote #f))) ((letrec ((g$0$22142 (lambda (g$0$22144) (if (g$0$13212 g$0$22144) ((lambda (g$0$22146) (if g$0$22146 (begin (quote #f) ((lambda (g$0$22148) (if g$0$22148 (begin (quote #f) (map cons g$0$22146 g$0$22148)) (quote #f))) (g$0$22142 (g$0$13224 g$0$22144)))) (quote #f))) ((lambda (g$0$22150) (if (g$0$13212 g$0$22150) (begin (quote #f) ((lambda (g$0$22152) (if g$0$22152 (begin (quote #f) ((lambda (g$0$22154) (if g$0$22154 (begin (quote #f) (append g$0$22152 g$0$22154)) (quote #f))) ((lambda (g$0$22156) (if (g$0$13212 g$0$22156) (begin (quote #f) ((lambda (g$0$22158) (if g$0$22158 (begin (quote #f) ((lambda (g$0$22160) (if g$0$22160 (begin (quote #f) (append g$0$22158 g$0$22160)) (quote #f))) ((lambda (g$0$22162) (if (equal? (g$0$13246 g$0$22162) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13224 g$0$22156)))) (quote #f))) ((lambda (g$0$22164) (list g$0$22164)) (g$0$13220 g$0$22156)))) (quote #f))) (g$0$13224 g$0$22150)))) (quote #f))) ((lambda (g$0$22166) (list g$0$22166)) (g$0$13220 g$0$22150)))) (quote #f))) (g$0$13220 g$0$22144))) (if (g$0$13216 g$0$22144) (list (begin (quote old*) (quote ())) (begin (quote new*) (quote ()))) (quote #f)))))) g$0$22142) (g$0$13224 g$0$22136)))) (quote #f))) ((lambda (g$0$22168) (list g$0$22168)) (g$0$13220 g$0$22136)))) (quote #f))) (g$0$13224 g$0$22130)))) (quote #f))) ((lambda (g$0$22170) (list g$0$22170)) (g$0$13220 g$0$22130)))) (quote #f))) g$0$21882))) g$0$21880))) (letrec ((g$0$21874 (lambda (g$0$21877 g$0$21878) (if (null? g$0$21877) (values g$0$21878 (g$0$21858)) (g$0$21874 (cdr g$0$21877) (g$0$21860 (g$0$21872 (car g$0$21877)) g$0$21878)))))) (g$0$21874 g$0$21856 (quote ()))))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$13641 (lambda (g$0$22652) ((lambda (g$0$22654) (begin (for-each (lambda (g$0$22656) ((lambda (g$0$22659 g$0$22660) (g$0$13165 g$0$22654 (g$0$13202 g$0$22659 g$0$13132 (quote ())) g$0$22660)) (car g$0$22656) (cdr g$0$22656))) g$0$22652) g$0$22654)) (g$0$13163)))) (set! g$0$13643 (lambda () ((lambda (g$0$22662) (lambda g$0$22666 ((lambda (g$0$22665) (if (= g$0$22665 (quote 0)) (apply (lambda () g$0$22662) g$0$22666) (if (= g$0$22665 (quote 1)) (apply (lambda (g$0$22664) (set! g$0$22662 (g$0$13125 g$0$22664 g$0$22662))) g$0$22666) (error (quote apply) (quote "invalid arg count"))))) (length g$0$22666)))) (quote ())))) (set! g$0$13645 (g$0$12318 (lambda g$0$22668 (error (quote inv-collector) (quote "not initialized"))) (lambda (g$0$22670) (begin (if (procedure? g$0$22670) (void) (error (quote inv-collector) (quote "not a procedure") g$0$22670)) g$0$22670)))) (set! g$0$13647 (g$0$12318 (lambda g$0$22672 (error (quote vis-collector) (quote "not initialized"))) (lambda (g$0$22674) (begin (if (procedure? g$0$22674) (void) (error (quote vis-collector) (quote "not a procedure") g$0$22674)) g$0$22674)))) (set! g$0$13649 (lambda (g$0$22678 g$0$22679 g$0$22680) (call-with-values (lambda () (g$0$13619 g$0$22678 (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) g$0$22679 g$0$22680)) (lambda (g$0$22688 g$0$22689 g$0$22690 g$0$22691 g$0$22692 g$0$22693 g$0$22694) (values (append (apply append (reverse g$0$22693)) g$0$22688) g$0$22689 g$0$22690 (reverse g$0$22691) (reverse g$0$22692)))))) (set! g$0$13651 (lambda (g$0$22698 g$0$22699 g$0$22700) (call-with-values (lambda () (g$0$13633 g$0$22698)) (lambda (g$0$22705 g$0$22706) (call-with-values (lambda () (g$0$13639 g$0$22699)) (lambda (g$0$22707 g$0$22708) ((lambda (g$0$22710) ((lambda (g$0$22714 g$0$22715 g$0$22716) ((lambda (g$0$22725 g$0$22726 g$0$22727 g$0$22728) ((lambda (g$0$22730) (dynamic-wind g$0$22730 (lambda () (call-with-values (lambda () (g$0$13649 g$0$22714 g$0$22710 (quote #f))) (lambda (g$0$22736 g$0$22737 g$0$22738 g$0$22739 g$0$22740) (begin (g$0$13167 g$0$22710) ((lambda (g$0$22743 g$0$22744) (begin (g$0$13169 g$0$22710) ((lambda (g$0$22746) (call-with-values (lambda () (g$0$13694 g$0$22737)) (lambda (g$0$22750 g$0$22751 g$0$22752) ((lambda (g$0$22755 g$0$22756) (values g$0$22708 (g$0$22715) (g$0$22716) (g$0$13108 (quote #f) (append g$0$22756 (list g$0$22755))) g$0$22752 g$0$22746 g$0$22750)) (g$0$13105 (quote #f) g$0$22739 g$0$22743 (g$0$13690 g$0$22751 g$0$22744)) (map g$0$13122 (map cdr g$0$22751)))))) (g$0$13692 g$0$22705 g$0$22706 g$0$22710)))) (g$0$13607 g$0$22740 g$0$22737 g$0$22738) (g$0$13593 g$0$22736 g$0$22737 g$0$22738)))))) g$0$22730)) (lambda () (begin ((lambda (g$0$22758) (begin (g$0$22725 g$0$22727) (set! g$0$22727 g$0$22758))) (g$0$22725)) ((lambda (g$0$22760) (begin (g$0$22726 g$0$22728) (set! g$0$22728 g$0$22760))) (g$0$22726)))))) g$0$13645 g$0$13647 g$0$22715 g$0$22716)) (map (lambda (g$0$22762) (g$0$13202 g$0$22762 g$0$13132 (list g$0$22710))) g$0$22700) (g$0$13643) (g$0$13643))) (g$0$13641 g$0$22707)))))))) (set! g$0$13653 (lambda (g$0$22764) (call-with-values (lambda () (g$0$13637 g$0$22764)) (lambda (g$0$22769 g$0$22770 g$0$22771 g$0$22772) (call-with-values (lambda () (g$0$13635 g$0$22769)) (lambda (g$0$22775 g$0$22776) (call-with-values (lambda () (g$0$13651 g$0$22770 g$0$22771 g$0$22772)) (lambda (g$0$22784 g$0$22785 g$0$22786 g$0$22787 g$0$22788 g$0$22789 g$0$22790) (values g$0$22775 g$0$22776 g$0$22784 g$0$22785 g$0$22786 g$0$22787 g$0$22788 g$0$22789 g$0$22790))))))))) (set! g$0$13655 (lambda (g$0$22792) ((lambda (g$0$22794) ((lambda (g$0$22796) (if (if g$0$22796 (begin (quote #f) (apply (lambda (g$0$22812 g$0$22813 g$0$22814) (eq? g$0$22812 (quote import))) g$0$22796)) (quote #f)) (apply (lambda (g$0$22806 g$0$22807 g$0$22808) (values g$0$22807 g$0$22808)) g$0$22796) ((lambda (g$0$22798) ((lambda (g$0$22800) (if (if g$0$22800 (begin (quote #f) (apply (lambda () (quote #t)) g$0$22800)) (quote #f)) (apply (lambda () (error (quote "invalid syntax of top-level program"))) g$0$22800) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$22798 (quote ()))))) ((lambda (g$0$22802) (quote ())) g$0$22798))) g$0$22794))) ((lambda (g$0$22816) (if (g$0$13212 g$0$22816) (begin (quote #f) ((lambda (g$0$22818) (if g$0$22818 (begin (quote #f) ((lambda (g$0$22820) (if g$0$22820 (begin (quote #f) (append g$0$22818 g$0$22820)) (quote #f))) ((letrec ((g$0$22822 (lambda (g$0$22824) (if (g$0$13212 g$0$22824) ((lambda (g$0$22826) (if g$0$22826 (begin (quote #f) ((lambda (g$0$22828) (if g$0$22828 (begin (quote #f) (map cons g$0$22826 g$0$22828)) (quote #f))) (g$0$22822 (g$0$13224 g$0$22824)))) (quote #f))) ((lambda (g$0$22830) (list g$0$22830)) (g$0$13220 g$0$22824))) (if (g$0$13216 g$0$22824) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$22822) (g$0$13224 g$0$22816)))) (quote #f))) ((lambda (g$0$22832) (if (g$0$13212 g$0$22832) (begin (quote #f) ((lambda (g$0$22834) (if g$0$22834 (begin (quote #f) ((lambda (g$0$22836) (if g$0$22836 (begin (quote #f) (append g$0$22834 g$0$22836)) (quote #f))) ((letrec ((g$0$22838 (lambda (g$0$22840) (if (g$0$13212 g$0$22840) ((lambda (g$0$22842) (if g$0$22842 (begin (quote #f) ((lambda (g$0$22844) (if g$0$22844 (begin (quote #f) (map cons g$0$22842 g$0$22844)) (quote #f))) (g$0$22838 (g$0$13224 g$0$22840)))) (quote #f))) ((lambda (g$0$22846) (list g$0$22846)) (g$0$13220 g$0$22840))) (if (g$0$13216 g$0$22840) (list (begin (quote imp*) (quote ()))) (quote #f)))))) g$0$22838) (g$0$13224 g$0$22832)))) (quote #f))) ((lambda (g$0$22848) (list g$0$22848)) (g$0$13220 g$0$22832)))) (quote #f))) (g$0$13220 g$0$22816)))) (quote #f))) g$0$22794))) g$0$22792))) (set! g$0$13657 (lambda (g$0$22850) (call-with-values (lambda () (g$0$13655 g$0$22850)) (lambda (g$0$22853 g$0$22854) (call-with-values (lambda () (g$0$13651 (quote ()) g$0$22853 g$0$22854)) (lambda (g$0$22862 g$0$22863 g$0$22864 g$0$22865 g$0$22866 g$0$22867 g$0$22868) (values g$0$22863 g$0$22865))))))) (set! g$0$13660 (lambda (g$0$22871 g$0$22872) (vector (quote g$0$13658) g$0$22871 g$0$22872))) (set! g$0$13662 (lambda (g$0$22874) (if (vector? g$0$22874) (if (= (vector-length g$0$22874) (+ (quote 1) (length (quote (subst imp*))))) (begin (quote #f) (eq? (vector-ref g$0$22874 (quote 0)) (quote g$0$13658))) (quote #f)) (quote #f)))) (set! g$0$13664 (lambda (g$0$22876) (if (g$0$13662 g$0$22876) (vector-ref g$0$22876 (quote 1)) (error (quote env-subst) (quote "~s is not of type ~s") g$0$22876 (quote env))))) (set! g$0$13666 (lambda (g$0$22878) (if (g$0$13662 g$0$22878) (vector-ref g$0$22878 (quote 2)) (error (quote env-imp*) (quote "~s is not of type ~s") g$0$22878 (quote env))))) (set! g$0$13668 (lambda (g$0$22881 g$0$22882) (if (g$0$13662 g$0$22881) (vector-set! g$0$22881 (quote 1) g$0$22882) (error (quote set-env-subst!) (quote "~s is not of type ~s") g$0$22881 (quote env))))) (set! g$0$13670 (lambda (g$0$22885 g$0$22886) (if (g$0$13662 g$0$22885) (vector-set! g$0$22885 (quote 2) g$0$22886) (error (quote set-env-imp*!) (quote "~s is not of type ~s") g$0$22885 (quote env))))) (set! g$0$13672 (lambda (g$0$22888) (g$0$13662 g$0$22888))) (set! g$0$13674 (lambda g$0$22890 (call-with-values (lambda () (g$0$13639 g$0$22890)) (lambda (g$0$22893 g$0$22894) (g$0$13660 g$0$22893 g$0$22894))))) (set! g$0$13676 (lambda (g$0$22896) (begin (if (eqv? g$0$22896 (quote 5)) (void) (error (quote null-environment) (quote "not 5") g$0$22896)) (g$0$13674 (quote (psyntax null-environment-5)))))) (set! g$0$13678 (lambda (g$0$22898) (begin (if (eqv? g$0$22898 (quote 5)) (void) (error (quote scheme-report-environment) (quote "not 5") g$0$22898)) (g$0$13674 (quote (psyntax scheme-report-environment-5)))))) (set! g$0$13680 (lambda (g$0$22901 g$0$22902) (begin (if (g$0$13662 g$0$22902) (void) (error (quote expand) (quote "not an environment") g$0$22902)) ((lambda (g$0$22904) ((lambda (g$0$22906) ((lambda (g$0$22910 g$0$22911 g$0$22912) ((lambda (g$0$22914) (begin (g$0$13167 g$0$22906) (values g$0$22914 (g$0$22911)))) ((lambda (g$0$22923 g$0$22924 g$0$22925 g$0$22926) ((lambda (g$0$22928) (dynamic-wind g$0$22928 (lambda () (g$0$13597 g$0$22910 (quote ()) (quote ()))) g$0$22928)) (lambda () (begin ((lambda (g$0$22930) (begin (g$0$22923 g$0$22925) (set! g$0$22925 g$0$22930))) (g$0$22923)) ((lambda (g$0$22932) (begin (g$0$22924 g$0$22926) (set! g$0$22926 g$0$22932))) (g$0$22924)))))) g$0$13645 g$0$13647 g$0$22911 g$0$22912))) (g$0$13202 g$0$22901 g$0$13132 (list g$0$22906)) (g$0$13643) (g$0$13643))) (g$0$13641 g$0$22904))) (g$0$13664 g$0$22902))))) (set! g$0$13682 (lambda (g$0$22935 g$0$22936) (begin (if (g$0$13662 g$0$22936) (void) (error (quote eval) (quote "not an environment") g$0$22936)) (call-with-values (lambda () (g$0$13680 g$0$22935 g$0$22936)) (lambda (g$0$22939 g$0$22940) (begin (for-each g$0$12830 g$0$22940) (eval-core (g$0$12392 g$0$22939)))))))) (set! g$0$13684 (lambda (g$0$22942) ((lambda (g$0$22944 g$0$22946) (begin (set! g$0$22944 (lambda (g$0$22986) (if (null? g$0$22986) (g$0$13107) (g$0$13108 (quote #f) (map (lambda (g$0$22988) ((lambda (g$0$22991 g$0$22992) (list (quote set!) g$0$22991 g$0$22992)) (car g$0$22988) (cddr g$0$22988))) g$0$22986))))) (set! g$0$22946 (lambda (g$0$22978) (for-each (lambda (g$0$22980) ((lambda (g$0$22983 g$0$22984) (set-symbol-value! g$0$22983 g$0$22984)) (car g$0$22980) (cadr g$0$22980))) g$0$22978))) (call-with-values (lambda () (g$0$13653 g$0$22942)) (lambda (g$0$22956 g$0$22957 g$0$22958 g$0$22959 g$0$22960 g$0$22961 g$0$22962 g$0$22963 g$0$22964) ((lambda (g$0$22971 g$0$22972 g$0$22973 g$0$22974 g$0$22975 g$0$22976) (begin (g$0$12834 g$0$22971 g$0$22972 g$0$22973 g$0$22974 g$0$22975 g$0$22976 g$0$22963 g$0$22964 (lambda () (g$0$22946 g$0$22962)) (lambda () (eval-core (g$0$12392 g$0$22961))) (quote #t)) (values g$0$22961 (g$0$22944 g$0$22962) g$0$22963 g$0$22964))) (gensym) g$0$22956 g$0$22957 (map g$0$12826 g$0$22958) (map g$0$12826 g$0$22960) (map g$0$12826 g$0$22959)))))) (quote #f) (quote #f)))) (set! g$0$13686 (lambda (g$0$22994) (call-with-values (lambda () (g$0$13684 g$0$22994)) (lambda (g$0$22999 g$0$23000 g$0$23001 g$0$23002) (values g$0$22999 g$0$23001 g$0$23002))))) (set! g$0$13688 (lambda (g$0$23006 g$0$23007 g$0$23008) (if (null? g$0$23007) g$0$23008 (g$0$13688 g$0$23006 (cdr g$0$23007) (cons (g$0$23006 (car g$0$23007)) g$0$23008))))) (set! g$0$13690 (lambda (g$0$23011 g$0$23012) (g$0$13108 (quote #f) (cons (g$0$13107) (g$0$13688 (lambda (g$0$23014) (list (quote set!) (cdr g$0$23014) (car g$0$23014))) g$0$23011 g$0$23012))))) (set! g$0$13692 (lambda (g$0$23018 g$0$23019 g$0$23020) (map (lambda (g$0$23023 g$0$23024) ((lambda (g$0$23026) ((lambda (g$0$23028) ((lambda () (begin (if g$0$23028 (void) (error (quote expander) (quote "cannot export unbound identifier") (g$0$13244 g$0$23026 (quote ())))) (cons g$0$23024 g$0$23028))))) (g$0$13248 g$0$23026))) (g$0$13202 g$0$23023 g$0$13132 (list g$0$23020)))) g$0$23018 g$0$23019))) (set! g$0$13694 (lambda (g$0$23030) (letrec ((g$0$23032 (lambda (g$0$23037 g$0$23038 g$0$23039 g$0$23040) (if (null? g$0$23037) (values g$0$23038 g$0$23039 g$0$23040) ((lambda (g$0$23042) ((lambda (g$0$23045 g$0$23046) ((lambda (g$0$23047) (if (memv g$0$23047 (quote (lexical))) ((lambda (g$0$23053) (g$0$23032 (cdr g$0$23037) (cons (cons* g$0$23045 (quote global) g$0$23053) g$0$23038) (cons (cons (g$0$13256 g$0$23046) g$0$23053) g$0$23039) g$0$23040)) (g$0$13138 (g$0$13256 g$0$23046))) (if (memv g$0$23047 (quote (local-macro))) ((lambda (g$0$23051) (g$0$23032 (cdr g$0$23037) (cons (cons* g$0$23045 (quote global-macro) g$0$23051) g$0$23038) g$0$23039 (cons (cons g$0$23051 (g$0$13256 g$0$23046)) g$0$23040))) (gensym)) (if (memv g$0$23047 (quote (local-macro!))) ((lambda (g$0$23049) (g$0$23032 (cdr g$0$23037) (cons (cons* g$0$23045 (quote global-macro!) g$0$23049) g$0$23038) g$0$23039 (cons (cons g$0$23049 (g$0$13256 g$0$23046)) g$0$23040))) (gensym)) (if (memv g$0$23047 (quote ($rtd $module))) (g$0$23032 (cdr g$0$23037) (cons g$0$23042 g$0$23038) g$0$23039 g$0$23040) (error (quote expander) (quote "BUG: do not know how to export") (g$0$13254 g$0$23046) (g$0$13256 g$0$23046))))))) (g$0$13254 g$0$23046))) (car g$0$23042) (cdr g$0$23042))) (car g$0$23037)))))) (g$0$23032 g$0$23030 (quote ()) (quote ()) (quote ()))))) (set! g$0$13696 (lambda (g$0$23055) ((lambda (g$0$23057) ((lambda (g$0$23059) (if (if g$0$23059 (begin (quote #f) (apply (lambda (g$0$23071) (quote #t)) g$0$23059)) (quote #f)) (apply (lambda (g$0$23067) (map (lambda (g$0$23069) (g$0$13176 (gensym (quote t)) g$0$13132 (quote ()))) g$0$23067)) g$0$23059) ((lambda (g$0$23061) ((lambda (g$0$23063) (if (if g$0$23063 (begin (quote #f) (apply (lambda () (quote #t)) g$0$23063)) (quote #f)) (apply (lambda () (error (quote generate-temporaries) (quote "not a list"))) g$0$23063) (error (quote expander) (quote "invalid syntax") (g$0$13244 g$0$23061 (quote ()))))) ((lambda (g$0$23065) (quote ())) g$0$23061))) g$0$23057))) ((letrec ((g$0$23073 (lambda (g$0$23075) (if (g$0$13212 g$0$23075) ((lambda (g$0$23077) (if g$0$23077 (begin (quote #f) ((lambda (g$0$23079) (if g$0$23079 (begin (quote #f) (map cons g$0$23077 g$0$23079)) (quote #f))) (g$0$23073 (g$0$13224 g$0$23075)))) (quote #f))) ((lambda (g$0$23081) (list g$0$23081)) (g$0$13220 g$0$23075))) (if (g$0$13216 g$0$23075) (list (begin (quote ls) (quote ()))) (quote #f)))))) g$0$23073) g$0$23057))) g$0$23055))) (set! g$0$13698 (lambda (g$0$23084 g$0$23085) (if (g$0$13226 g$0$23084) (if (g$0$13226 g$0$23085) (g$0$13234 g$0$23084 g$0$23085) (error (quote free-identifier=?) (quote "not an identifier") g$0$23085)) (error (quote free-identifier=?) (quote "not an identifier") g$0$23084)))) (set! g$0$13700 (lambda (g$0$23088 g$0$23089) (if (g$0$13226 g$0$23088) (if (g$0$13226 g$0$23089) (g$0$13232 g$0$23088 g$0$23089) (error (quote bound-identifier=?) (quote "not an identifier") g$0$23089)) (error (quote bound-identifier=?) (quote "not an identifier") g$0$23088)))) (set! g$0$13702 (lambda (g$0$23093 . g$0$23091) (begin (if (for-all string? g$0$23091) (void) (error (quote syntax-error) (quote "invalid argument") g$0$23091)) (error (quote expander) (quote "invalid syntax") (g$0$13246 g$0$23093) (apply string-append g$0$23091))))) (set! g$0$13704 (lambda (g$0$23095) (g$0$13226 g$0$23095))) (set! g$0$13706 (lambda (g$0$23098 g$0$23099) (if (g$0$13226 g$0$23098) (g$0$13192 g$0$23098 g$0$23099) (error (quote datum->syntax) (quote "not an identifier") g$0$23098)))) (set! g$0$13708 (lambda (g$0$23101) (g$0$13246 g$0$23101))) (set! g$0$13710 (lambda (g$0$23103) (call-with-values (lambda () (g$0$13657 g$0$23103)) (lambda (g$0$23106 g$0$23107) (begin (for-each g$0$12830 g$0$23106) (eval-core (g$0$12392 g$0$23107))))))) (set! g$0$13712 (g$0$12318 (quote #f))) (set! g$0$13714 (lambda (g$0$23109) ((lambda (g$0$23111) (if g$0$23111 ((lambda (g$0$23113) ((lambda (g$0$23115) (if g$0$23115 (cdr g$0$23115) ((lambda (g$0$23117) ((lambda (g$0$23119) (if g$0$23119 ((lambda (g$0$23123) ((lambda (g$0$23125) (begin (g$0$12833 g$0$23113 g$0$23109 g$0$23125) g$0$23125)) (cdr g$0$23123))) g$0$23119) ((lambda (g$0$23121) (begin (g$0$12833 g$0$23113 g$0$23109 g$0$23121) (g$0$12832 g$0$23113 g$0$23121 (cons (quote global) (cons g$0$23113 (g$0$13138 g$0$23109)))) g$0$23121)) (g$0$13140 g$0$23109)))) (assq g$0$23109 g$0$23117))) (if (g$0$12838 (quote (ikarus))) (g$0$12864 (g$0$12839 (quote (ikarus)))) (quote ()))))) (assq g$0$23109 (g$0$12864 g$0$23113)))) g$0$23111) (quote #f))) (g$0$13712)))) (set! g$0$13716 (lambda (g$0$23127) ((lambda (g$0$23129) (begin (set! g$0$23129 (lambda (g$0$23163) ((lambda (g$0$23166 g$0$23167) (if g$0$23166 (set-symbol-value! g$0$23166 (eval-core (g$0$12392 g$0$23167))) (eval-core (g$0$12392 g$0$23167)))) (car g$0$23163) (cdr g$0$23163)))) ((lambda (g$0$23132 g$0$23133) ((lambda (g$0$23135) (begin (for-each g$0$12830 (g$0$23132)) (if (null? g$0$23135) (void) (begin (for-each g$0$23129 (reverse (cdr g$0$23135))) (g$0$23129 (car g$0$23135)))))) ((lambda (g$0$23148 g$0$23149 g$0$23150 g$0$23151 g$0$23152 g$0$23153) ((lambda (g$0$23155) (dynamic-wind g$0$23155 (lambda () (g$0$13629 (list (g$0$13202 g$0$23127 g$0$13132 (quote ()))) (quote ()))) g$0$23155)) (lambda () (begin ((lambda (g$0$23157) (begin (g$0$23148 g$0$23151) (set! g$0$23151 g$0$23157))) (g$0$23148)) ((lambda (g$0$23159) (begin (g$0$23149 g$0$23152) (set! g$0$23152 g$0$23159))) (g$0$23149)) ((lambda (g$0$23161) (begin (g$0$23150 g$0$23153) (set! g$0$23153 g$0$23161))) (g$0$23150)))))) g$0$13645 g$0$13647 g$0$13712 g$0$23132 g$0$23133 (g$0$12839 (quote (ikarus interaction)))))) (g$0$13643) (g$0$13643)))) (quote #f)))) (begin (set! g$0$23168 g$0$13716) (set! g$0$23169 g$0$13714) (set! g$0$23170 g$0$13712) (set! g$0$23171 g$0$13710) (set! g$0$23172 g$0$13708) (set! g$0$23173 g$0$13706) (set! g$0$23174 g$0$13704) (set! g$0$23175 g$0$13702) (set! g$0$23176 g$0$13700) (set! g$0$23177 g$0$13698) (set! g$0$23178 g$0$13696) (set! g$0$23179 g$0$13694) (set! g$0$23180 g$0$13692) (set! g$0$23181 g$0$13690) (set! g$0$23182 g$0$13688) (set! g$0$23183 g$0$13686) (set! g$0$23184 g$0$13684) (set! g$0$23185 g$0$13682) (set! g$0$23186 g$0$13680) (set! g$0$23187 g$0$13678) (set! g$0$23188 g$0$13676) (set! g$0$23189 g$0$13674) (set! g$0$23190 g$0$13672) (set! g$0$23191 g$0$13670) (set! g$0$23192 g$0$13668) (set! g$0$23193 g$0$13666) (set! g$0$23194 g$0$13664) (set! g$0$23195 g$0$13662) (set! g$0$23196 g$0$13660) (set! g$0$23197 g$0$13657) (set! g$0$23198 g$0$13655) (set! g$0$23199 g$0$13653) (set! g$0$23200 g$0$13651) (set! g$0$23201 g$0$13649) (set! g$0$23202 g$0$13647) (set! g$0$23203 g$0$13645) (set! g$0$23204 g$0$13643) (set! g$0$23205 g$0$13641) (set! g$0$23206 g$0$13639) (set! g$0$23207 g$0$13637) (set! g$0$23208 g$0$13635) (set! g$0$23209 g$0$13633) (set! g$0$23210 g$0$13631) (set! g$0$23211 g$0$13629) (set! g$0$23212 g$0$13627) (set! g$0$23213 g$0$13625) (set! g$0$23214 g$0$13623) (set! g$0$23215 g$0$13621) (set! g$0$23216 g$0$13619) (set! g$0$23217 g$0$13617) (set! g$0$23218 g$0$13615) (set! g$0$23219 g$0$13613) (set! g$0$23220 g$0$13611) (set! g$0$23221 g$0$13609) (set! g$0$23222 g$0$13607) (set! g$0$23223 g$0$13605) (set! g$0$23224 g$0$13603) (set! g$0$23225 g$0$13601) (set! g$0$23226 g$0$13599) (set! g$0$23227 g$0$13597) (set! g$0$23228 g$0$13595) (set! g$0$23229 g$0$13593) (set! g$0$23230 g$0$13591) (set! g$0$23231 g$0$13589) (set! g$0$23232 g$0$13587) (set! g$0$23233 g$0$13585) (set! g$0$23234 g$0$13583) (set! g$0$23235 g$0$13581) (set! g$0$23236 g$0$13579) (set! g$0$23237 g$0$13577) (set! g$0$23238 g$0$13575) (set! g$0$23239 g$0$13573) (set! g$0$23240 g$0$13571) (set! g$0$23241 g$0$13569) (set! g$0$23242 g$0$13567) (set! g$0$23243 g$0$13565) (set! g$0$23244 g$0$13563) (set! g$0$23245 g$0$13561) (set! g$0$23246 g$0$13559) (set! g$0$23247 g$0$13557) (set! g$0$23248 g$0$13555) (set! g$0$23249 g$0$13553) (set! g$0$23250 g$0$13551) (set! g$0$23251 g$0$13549) (set! g$0$23252 g$0$13547) (set! g$0$23253 g$0$13545) (set! g$0$23254 g$0$13543) (set! g$0$23255 g$0$13541) (set! g$0$23256 g$0$13539) (set! g$0$23257 g$0$13537) (set! g$0$23258 g$0$13535) (set! g$0$23259 g$0$13533) (set! g$0$23260 g$0$13531) (set! g$0$23261 g$0$13529) (set! g$0$23262 g$0$13527) (set! g$0$23263 g$0$13525) (set! g$0$23264 g$0$13523) (set! g$0$23265 g$0$13521) (set! g$0$23266 g$0$13519) (set! g$0$23267 g$0$13517) (set! g$0$23268 g$0$13515) (set! g$0$23269 g$0$13513) (set! g$0$23270 g$0$13511) (set! g$0$23271 g$0$13509) (set! g$0$23272 g$0$13507) (set! g$0$23273 g$0$13505) (set! g$0$23274 g$0$13503) (set! g$0$23275 g$0$13501) (set! g$0$23276 g$0$13499) (set! g$0$23277 g$0$13497) (set! g$0$23278 g$0$13495) (set! g$0$23279 g$0$13493) (set! g$0$23280 g$0$13491) (set! g$0$23281 g$0$13489) (set! g$0$23282 g$0$13487) (set! g$0$23283 g$0$13485) (set! g$0$23284 g$0$13483) (set! g$0$23285 g$0$13481) (set! g$0$23286 g$0$13479) (set! g$0$23287 g$0$13477) (set! g$0$23288 g$0$13475) (set! g$0$23290 g$0$13276) (set! g$0$23291 g$0$13274) (set! g$0$23292 g$0$13272) (set! g$0$23294 g$0$13258) (set! g$0$23295 g$0$13256) (set! g$0$23296 g$0$13254) (set! g$0$23297 g$0$13252) (set! g$0$23298 g$0$13250) (set! g$0$23299 g$0$13248) (set! g$0$23300 g$0$13246) (set! g$0$23301 g$0$13244) (set! g$0$23302 g$0$13242) (set! g$0$23303 g$0$13240) (set! g$0$23304 g$0$13238) (set! g$0$23305 g$0$13236) (set! g$0$23306 g$0$13234) (set! g$0$23307 g$0$13232) (set! g$0$23308 g$0$13230) (set! g$0$23309 g$0$13228) (set! g$0$23310 g$0$13226) (set! g$0$23311 g$0$13224) (set! g$0$23312 g$0$13222) (set! g$0$23313 g$0$13220) (set! g$0$23314 g$0$13218) (set! g$0$23315 g$0$13216) (set! g$0$23316 g$0$13214) (set! g$0$23317 g$0$13212) (set! g$0$23318 g$0$13210) (set! g$0$23319 g$0$13208) (set! g$0$23320 g$0$13206) (set! g$0$23321 g$0$13204) (set! g$0$23322 g$0$13202) (set! g$0$23323 g$0$13200) (set! g$0$23324 g$0$13198) (set! g$0$23325 g$0$13196) (set! g$0$23326 g$0$13194) (set! g$0$23327 g$0$13192) (set! g$0$23328 g$0$13190) (set! g$0$23329 g$0$13188) (set! g$0$23330 g$0$13186) (set! g$0$23331 g$0$13184) (set! g$0$23332 g$0$13182) (set! g$0$23333 g$0$13180) (set! g$0$23334 g$0$13178) (set! g$0$23335 g$0$13176) (set! g$0$23336 g$0$13173) (set! g$0$23337 g$0$13171) (set! g$0$23338 g$0$13169) (set! g$0$23339 g$0$13167) (set! g$0$23340 g$0$13165) (set! g$0$23341 g$0$13163) (set! g$0$23342 g$0$13161) (set! g$0$23343 g$0$13159) (set! g$0$23344 g$0$13157) (set! g$0$23345 g$0$13155) (set! g$0$23346 g$0$13153) (set! g$0$23347 g$0$13151) (set! g$0$23348 g$0$13149) (set! g$0$23349 g$0$13147) (set! g$0$23350 g$0$13145) (set! g$0$23351 g$0$13143) (set! g$0$23352 g$0$13140) (set! g$0$23353 g$0$13138) (set! g$0$23354 g$0$13136) (set! g$0$23355 g$0$13134) (set! g$0$23356 g$0$13132) (set! g$0$23358 g$0$13127) (set! g$0$23359 g$0$13125) (g$0$12842 g$0$13684)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (g$0$12396 (lambda (g$0$24123) ((lambda (g$0$24125) (if g$0$24125 (cdr g$0$24125) (quote #f))) (assq g$0$24123 (quote ((syntax-error . g$0$23175) (syntax-dispatch . g$0$23241) (make-variable-transformer . g$0$23291) (identifier? . g$0$23174) (generate-temporaries . g$0$23178) (free-identifier=? . g$0$23177) (syntax->datum . g$0$23172) (datum->syntax . g$0$23173) (bound-identifier=? . g$0$23176) (null-environment . g$0$23188) (eval . g$0$23185) (environment . g$0$23189))))))) (g$0$12834 (quote g$0$24089) (quote (ikarus interaction)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24090) (quote (psyntax null-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((unquote-splicing . g$0$23426) (unquote . g$0$23425) (delay . g$0$23418) (or . g$0$23416) (and . g$0$23415) (do . g$0$23414) (cond . g$0$23413) (let* . g$0$23412) (let . g$0$23411) (quasiquote . g$0$23407) (syntax-rules . g$0$23406) (case . g$0$23400) (if . g$0$23396) (letrec . g$0$23394) (lambda . g$0$23391) (quote . g$0$23388) (letrec-syntax . g$0$23386) (let-syntax . g$0$23385) (set! . g$0$23384) (begin . g$0$23382) (define-syntax . g$0$23380) (define . g$0$23379))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24091) (quote (psyntax scheme-report-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-ci>? . g$0$24071) (string-ci>=? . g$0$24070) (string-ci=? . g$0$24069) (string-ci<? . g$0$24068) (string-ci<=? . g$0$24067) (char-whitespace? . g$0$24066) (char-upper-case? . g$0$24065) (char-numeric? . g$0$24063) (char-lower-case? . g$0$24062) (char-upcase . g$0$24060) (char-downcase . g$0$24057) (char-ci>? . g$0$24056) (char-ci>=? . g$0$24055) (char-ci=? . g$0$24054) (char-ci<? . g$0$24053) (char-ci<=? . g$0$24052) (char-alphabetic? . g$0$24051) (call-with-output-file . g$0$24007) (call-with-input-file . g$0$24006) (write-char . g$0$24005) (write . g$0$24004) (with-output-to-file . g$0$24003) (with-input-from-file . g$0$24002) (read-char . g$0$24001) (read . g$0$24000) (peek-char . g$0$23999) (open-output-file . g$0$23998) (open-input-file . g$0$23997) (newline . g$0$23996) (display . g$0$23995) (close-output-port . g$0$23994) (close-input-port . g$0$23993) (eof-object . g$0$23991) (current-output-port . g$0$23989) (current-input-port . g$0$23988) (output-port? . g$0$23987) (input-port? . g$0$23986) (scheme-report-environment . g$0$23901) (quotient . g$0$23900) (null-environment . g$0$13675) (remainder . g$0$23899) (modulo . g$0$23898) (inexact->exact . g$0$23897) (force . g$0$23896) (exact->inexact . g$0$23895) (string-fill! . g$0$23892) (string-set! . g$0$23891) (set-cdr! . g$0$23890) (set-car! . g$0$23889) (memv . g$0$23883) (memq . g$0$23882) (member . g$0$23880) (assv . g$0$23872) (assq . g$0$23871) (assoc . g$0$23869) (eval . g$0$13681) (zero? . g$0$23638) (vector? . g$0$23637) (vector-set! . g$0$23636) (vector-ref . g$0$23635) (vector-length . g$0$23633) (vector-fill! . g$0$23631) (vector->list . g$0$23630) (vector . g$0$23629) (values . g$0$23628) (truncate . g$0$23627) (tan . g$0$23626) (symbol? . g$0$23625) (symbol->string . g$0$23623) (substring . g$0$23622) (string? . g$0$23621) (string>? . g$0$23620) (string>=? . g$0$23619) (string=? . g$0$23618) (string<? . g$0$23617) (string<=? . g$0$23616) (string-ref . g$0$23615) (string-length . g$0$23614) (string-copy . g$0$23612) (string-append . g$0$23611) (string->symbol . g$0$23610) (string->number . g$0$23609) (string->list . g$0$23608) (string . g$0$23607) (sqrt . g$0$23606) (sin . g$0$23605) (round . g$0$23604) (reverse . g$0$23603) (real? . g$0$23602) (real-part . g$0$23600) (rationalize . g$0$23599) (rational? . g$0$23598) (procedure? . g$0$23596) (positive? . g$0$23595) (pair? . g$0$23594) (odd? . g$0$23593) (numerator . g$0$23592) (number? . g$0$23591) (number->string . g$0$23590) (not . g$0$23588) (negative? . g$0$23587) (min . g$0$23585) (max . g$0$23584) (map . g$0$23583) (make-vector . g$0$23582) (make-string . g$0$23581) (make-rectangular . g$0$23580) (make-polar . g$0$23579) (magnitude . g$0$23578) (log . g$0$23577) (list? . g$0$23576) (list-tail . g$0$23575) (list-ref . g$0$23574) (list->vector . g$0$23573) (list->string . g$0$23572) (list . g$0$23571) (length . g$0$23570) (lcm . g$0$23569) (integer? . g$0$23568) (integer->char . g$0$23566) (inexact? . g$0$23564) (imag-part . g$0$23562) (gcd . g$0$23561) (for-each . g$0$23560) (floor . g$0$23559) (expt . g$0$23557) (exp . g$0$23556) (exact? . g$0$23555) (even? . g$0$23552) (eqv? . g$0$23550) (equal? . g$0$23549) (eq? . g$0$23548) (dynamic-wind . g$0$23547) (denominator . g$0$23540) (cos . g$0$23539) (cons . g$0$23538) (complex? . g$0$23537) (char? . g$0$23536) (char>? . g$0$23535) (char>=? . g$0$23534) (char=? . g$0$23533) (char<? . g$0$23532) (char<=? . g$0$23531) (char->integer . g$0$23530) (ceiling . g$0$23529) (call-with-values . g$0$23528) (call-with-current-continuation . g$0$23526) (cddddr . g$0$23525) (cdddar . g$0$23524) (cddadr . g$0$23523) (cddaar . g$0$23522) (cdaddr . g$0$23521) (cdadar . g$0$23520) (cdaadr . g$0$23519) (cdaaar . g$0$23518) (cadddr . g$0$23517) (caddar . g$0$23516) (cadadr . g$0$23515) (cadaar . g$0$23514) (caaddr . g$0$23513) (caadar . g$0$23512) (caaadr . g$0$23511) (caaaar . g$0$23510) (cdddr . g$0$23509) (cddar . g$0$23508) (cdadr . g$0$23507) (cdaar . g$0$23506) (caddr . g$0$23505) (cadar . g$0$23504) (caadr . g$0$23503) (caaar . g$0$23502) (cddr . g$0$23501) (cdar . g$0$23500) (cadr . g$0$23499) (caar . g$0$23498) (cdr . g$0$23497) (car . g$0$23496) (boolean? . g$0$23495) (atan . g$0$23493) (asin . g$0$23491) (apply . g$0$23490) (append . g$0$23489) (angle . g$0$23488) (acos . g$0$23487) (abs . g$0$23486) (/ . g$0$23485) (* . g$0$23484) (- . g$0$23483) (+ . g$0$23482) (>= . g$0$23481) (> . g$0$23480) (= . g$0$23479) (<= . g$0$23478) (< . g$0$23477) (unquote-splicing . g$0$23426) (unquote . g$0$23425) (delay . g$0$23418) (or . g$0$23416) (and . g$0$23415) (do . g$0$23414) (cond . g$0$23413) (let* . g$0$23412) (let . g$0$23411) (quasiquote . g$0$23407) (syntax-rules . g$0$23406) (case . g$0$23400) (if . g$0$23396) (letrec . g$0$23394) (lambda . g$0$23391) (quote . g$0$23388) (letrec-syntax . g$0$23386) (let-syntax . g$0$23385) (set! . g$0$23384) (begin . g$0$23382) (define-syntax . g$0$23380) (define . g$0$23379))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24092) (quote (psyntax modules)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((module . g$0$23381))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24093) (quote (chez parameters)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24094) (quote (rnrs)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$0$24079) (string-titlecase . g$0$24078) (string-normalize-nfkd . g$0$24077) (string-normalize-nfkc . g$0$24076) (string-normalize-nfd . g$0$24075) (string-normalize-nfc . g$0$24074) (string-foldcase . g$0$24073) (string-downcase . g$0$24072) (string-ci>? . g$0$24071) (string-ci>=? . g$0$24070) (string-ci=? . g$0$24069) (string-ci<? . g$0$24068) (string-ci<=? . g$0$24067) (char-whitespace? . g$0$24066) (char-upper-case? . g$0$24065) (char-title-case? . g$0$24064) (char-numeric? . g$0$24063) (char-lower-case? . g$0$24062) (char-general-category . g$0$24061) (char-upcase . g$0$24060) (char-titlecase . g$0$24059) (char-foldcase . g$0$24058) (char-downcase . g$0$24057) (char-ci>? . g$0$24056) (char-ci>=? . g$0$24055) (char-ci=? . g$0$24054) (char-ci<? . g$0$24053) (char-ci<=? . g$0$24052) (char-alphabetic? . g$0$24051) (make-variable-transformer . g$0$13273) (identifier? . g$0$13703) (generate-temporaries . g$0$13695) (free-identifier=? . g$0$13697) (syntax->datum . g$0$13707) (datum->syntax . g$0$13705) (bound-identifier=? . g$0$13699) (record-type-descriptor? . g$0$24050) (record-predicate . g$0$24049) (record-mutator . g$0$24048) (record-constructor . g$0$24047) (record-accessor . g$0$24046) (make-record-type-descriptor . g$0$24045) (make-record-constructor-descriptor . g$0$24044) (record? . g$0$24043) (record-type-uid . g$0$24042) (record-type-sealed? . g$0$24041) (record-type-parent . g$0$24040) (record-type-opaque? . g$0$24039) (record-type-name . g$0$24038) (record-type-generative? . g$0$24037) (record-type-field-names . g$0$24036) (record-rtd . g$0$24035) (record-field-mutable? . g$0$24034) (delete-file . g$0$24033) (file-exists? . g$0$24032) (vector-sort! . g$0$24031) (vector-sort . g$0$24030) (list-sort . g$0$24029) (symbol-hash . g$0$24028) (string-ci-hash . g$0$24027) (string-hash . g$0$24026) (equal-hash . g$0$24025) (hashtable-equivalence-function . g$0$24024) (make-hashtable . g$0$24023) (hashtable-hash-function . g$0$24022) (make-eqv-hashtable . g$0$24021) (make-eq-hashtable . g$0$24020) (hashtable? . g$0$24019) (hashtable-update! . g$0$24018) (hashtable-size . g$0$24017) (hashtable-set! . g$0$24016) (hashtable-ref . g$0$24015) (hashtable-mutable? . g$0$24014) (hashtable-keys . g$0$24013) (hashtable-entries . g$0$24012) (hashtable-delete! . g$0$24011) (hashtable-copy . g$0$24010) (hashtable-contains? . g$0$24009) (hashtable-clear! . g$0$24008) (call-with-output-file . g$0$24007) (call-with-input-file . g$0$24006) (write-char . g$0$24005) (write . g$0$24004) (with-output-to-file . g$0$24003) (with-input-from-file . g$0$24002) (read-char . g$0$24001) (read . g$0$24000) (peek-char . g$0$23999) (open-output-file . g$0$23998) (open-input-file . g$0$23997) (newline . g$0$23996) (display . g$0$23995) (close-output-port . g$0$23994) (close-input-port . g$0$23993) (eof-object? . g$0$23992) (eof-object . g$0$23991) (current-error-port . g$0$23990) (current-output-port . g$0$23989) (current-input-port . g$0$23988) (output-port? . g$0$23987) (input-port? . g$0$23986) (utf-8-codec . g$0$23985) (utf-16-codec . g$0$23984) (transcoder-error-handling-mode . g$0$23983) (transcoder-eol-style . g$0$23982) (transcoder-codec . g$0$23981) (transcoded-port . g$0$23980) (textual-port? . g$0$23979) (string->bytevector . g$0$23978) (standard-output-port . g$0$23977) (standard-input-port . g$0$23976) (standard-error-port . g$0$23975) (set-port-position! . g$0$23974) (put-u8 . g$0$23973) (put-string . g$0$23972) (put-datum . g$0$23971) (put-char . g$0$23970) (put-bytevector . g$0$23969) (port? . g$0$23968) (port-transcoder . g$0$23967) (port-position . g$0$23966) (port-has-set-port-position!? . g$0$23965) (port-has-port-position? . g$0$23964) (port-eof? . g$0$23963) (output-port-buffer-mode . g$0$23962) (open-string-output-port . g$0$23961) (open-string-input-port . g$0$23960) (open-file-output-port . g$0$23959) (open-file-input/output-port . g$0$23958) (open-file-input-port . g$0$23957) (open-bytevector-output-port . g$0$23956) (open-bytevector-input-port . g$0$23955) (native-transcoder . g$0$23954) (native-eol-style . g$0$23953) (make-transcoder . g$0$23952) (latin-1-codec . g$0$23951) (make-i/o-write-error . g$0$23950) (make-i/o-read-error . g$0$23949) (make-i/o-port-error . g$0$23948) (make-i/o-invalid-position-error . g$0$23947) (make-i/o-filename-error . g$0$23946) (make-i/o-file-protection-error . g$0$23945) (make-i/o-file-is-read-only-error . g$0$23944) (make-i/o-file-does-not-exist-error . g$0$23943) (make-i/o-file-already-exists-error . g$0$23942) (make-i/o-error . g$0$23941) (make-i/o-encoding-error . g$0$23940) (make-i/o-decoding-error . g$0$23939) (make-custom-textual-output-port . g$0$23938) (make-custom-textual-input/output-port . g$0$23937) (make-custom-textual-input-port . g$0$23936) (make-custom-binary-output-port . g$0$23935) (make-custom-binary-input/output-port . g$0$23934) (make-custom-binary-input-port . g$0$23933) (make-bytevector . g$0$23932) (lookahead-u8 . g$0$23931) (lookahead-char . g$0$23930) (i/o-write-error? . g$0$23929) (i/o-read-error? . g$0$23928) (i/o-port-error? . g$0$23927) (i/o-invalid-position-error? . g$0$23926) (i/o-filename-error? . g$0$23925) (i/o-file-protection-error? . g$0$23924) (i/o-file-is-read-only-error? . g$0$23923) (i/o-file-does-not-exist-error? . g$0$23922) (i/o-file-already-exists-error? . g$0$23921) (i/o-error? . g$0$23920) (i/o-error-port . g$0$23919) (i/o-error-filename . g$0$23918) (i/o-encoding-error? . g$0$23917) (i/o-encoding-error-char . g$0$23916) (i/o-decoding-error? . g$0$23915) (get-u8 . g$0$23914) (get-string-n! . g$0$23913) (get-string-n . g$0$23912) (get-string-all . g$0$23911) (get-line . g$0$23910) (get-datum . g$0$23909) (get-char . g$0$23908) (get-bytevector-some . g$0$23907) (get-bytevector-n! . g$0$23906) (get-bytevector-n . g$0$23905) (get-bytevector-all . g$0$23904) (flush-output-port . g$0$23903) (close-port . g$0$23902) (exit . g$0$23894) (command-line . g$0$23893) (remove . g$0$23888) (remv . g$0$23887) (remp . g$0$23886) (remq . g$0$23885) (partition . g$0$23884) (memv . g$0$23883) (memq . g$0$23882) (memp . g$0$23881) (member . g$0$23880) (exists . g$0$23879) (for-all . g$0$23878) (fold-right . g$0$23877) (fold-left . g$0$23876) (find . g$0$23875) (filter . g$0$23874) (cons* . g$0$23873) (assv . g$0$23872) (assq . g$0$23871) (assp . g$0$23870) (assoc . g$0$23869) (call-with-string-output-port . g$0$23868) (call-with-port . g$0$23867) (call-with-bytevector-output-port . g$0$23866) (bytevector->string . g$0$23865) (buffer-mode? . g$0$23864) (binary-port? . g$0$23863) (with-exception-handler . g$0$23862) (raise-continuable . g$0$23861) (raise . g$0$23860) (make-enumeration . g$0$23859) (enum-set=? . g$0$23858) (enum-set-universe . g$0$23857) (enum-set-union . g$0$23856) (enum-set-subset? . g$0$23855) (enum-set-projection . g$0$23854) (enum-set-member? . g$0$23853) (enum-set-intersection . g$0$23852) (enum-set-indexer . g$0$23851) (enum-set-difference . g$0$23850) (enum-set-constructor . g$0$23849) (enum-set-complement . g$0$23848) (enum-set->list . g$0$23847) (who-condition? . g$0$23846) (warning? . g$0$23845) (violation? . g$0$23844) (undefined-violation? . g$0$23843) (syntax-violation? . g$0$23842) (syntax-violation-subform . g$0$23841) (syntax-violation-form . g$0$23840) (syntax-violation . g$0$23839) (simple-conditions . g$0$23838) (serious-condition? . g$0$23837) (non-continuable-violation? . g$0$23836) (&non-continuable . g$0$23835) (message-condition? . g$0$23834) (make-who-condition . g$0$23833) (make-warning . g$0$23832) (make-violation . g$0$23831) (make-undefined-violation . g$0$23830) (make-syntax-violation . g$0$23829) (make-serious-condition . g$0$23828) (make-non-continuable-violation . g$0$23827) (make-message-condition . g$0$23826) (make-lexical-violation . g$0$23825) (make-irritants-condition . g$0$23824) (make-implementation-restriction-violation . g$0$23823) (make-error . g$0$23822) (make-assertion-violation . g$0$23821) (lexical-violation? . g$0$23820) (irritants-condition? . g$0$23819) (implementation-restriction-violation? . g$0$23818) (&implementation-restriction . g$0$23817) (error? . g$0$23816) (condition-who . g$0$23815) (condition-predicate . g$0$23814) (condition-message . g$0$23813) (condition-irritants . g$0$23812) (condition-accessor . g$0$23811) (condition . g$0$23810) (assertion-violation? . g$0$23809) (condition? . g$0$23808) (utf32->string . g$0$23807) (utf16->string . g$0$23806) (utf8->string . g$0$23805) (uint-list->bytevector . g$0$23804) (u8-list->bytevector . g$0$23803) (string->utf8 . g$0$23802) (string->utf32 . g$0$23801) (string->utf16 . g$0$23800) (sint-list->bytevector . g$0$23799) (native-endianness . g$0$23798) (bytevector? . g$0$23797) (bytevector=? . g$0$23796) (bytevector-uint-set! . g$0$23795) (bytevector-uint-ref . g$0$23794) (bytevector-u8-set! . g$0$23793) (bytevector-u8-ref . g$0$23792) (bytevector-u64-set! . g$0$23791) (bytevector-u64-ref . g$0$23790) (bytevector-u64-native-set! . g$0$23789) (bytevector-u64-native-ref . g$0$23788) (bytevector-u32-set! . g$0$23787) (bytevector-u32-ref . g$0$23786) (bytevector-u32-native-set! . g$0$23785) (bytevector-u32-native-ref . g$0$23784) (bytevector-u16-set! . g$0$23783) (bytevector-u16-ref . g$0$23782) (bytevector-u16-native-set! . g$0$23781) (bytevector-u16-native-ref . g$0$23780) (bytevector-sint-set! . g$0$23779) (bytevector-sint-ref . g$0$23778) (bytevector-s8-set! . g$0$23777) (bytevector-s8-ref . g$0$23776) (bytevector-s64-set! . g$0$23775) (bytevector-s64-ref . g$0$23774) (bytevector-s64-native-set! . g$0$23773) (bytevector-s64-native-ref . g$0$23772) (bytevector-s32-set! . g$0$23771) (bytevector-s32-ref . g$0$23770) (bytevector-s32-native-set! . g$0$23769) (bytevector-s32-native-ref . g$0$23768) (bytevector-s16-set! . g$0$23767) (bytevector-s16-ref . g$0$23766) (bytevector-s16-native-set! . g$0$23765) (bytevector-s16-native-ref . g$0$23764) (bytevector-length . g$0$23763) (bytevector-ieee-single-ref . g$0$23762) (bytevector-ieee-single-native-set! . g$0$23761) (bytevector-ieee-single-native-ref . g$0$23760) (bytevector-ieee-double-ref . g$0$23759) (bytevector-ieee-double-native-set! . g$0$23758) (bytevector-ieee-double-native-ref . g$0$23757) (bytevector-fill! . g$0$23756) (bytevector-copy! . g$0$23755) (bytevector-copy . g$0$23754) (bytevector->uint-list . g$0$23753) (bytevector->u8-list . g$0$23752) (bytevector->sint-list . g$0$23751) (no-nans-violation? . g$0$23750) (no-infinities-violation? . g$0$23749) (make-no-nans-violation . g$0$23748) (make-no-infinities-violation . g$0$23747) (real->flonum . g$0$23746) (flzero? . g$0$23745) (fltruncate . g$0$23744) (fltan . g$0$23743) (flsqrt . g$0$23742) (flsin . g$0$23741) (flround . g$0$23740) (flpositive? . g$0$23739) (flonum? . g$0$23738) (flodd? . g$0$23737) (flnumerator . g$0$23736) (flnegative? . g$0$23735) (flnan? . g$0$23734) (flmod0 . g$0$23733) (flmod . g$0$23732) (flmin . g$0$23731) (flmax . g$0$23730) (fllog . g$0$23729) (flinteger? . g$0$23728) (flinfinite? . g$0$23727) (flfloor . g$0$23726) (flfinite? . g$0$23725) (flexpt . g$0$23724) (flexp . g$0$23723) (fleven? . g$0$23722) (fldiv0-and-mod0 . g$0$23721) (fldiv0 . g$0$23720) (fldiv-and-mod . g$0$23719) (fldiv . g$0$23718) (fldenominator . g$0$23717) (flcos . g$0$23716) (flceiling . g$0$23715) (flatan . g$0$23714) (flasin . g$0$23713) (flacos . g$0$23712) (flabs . g$0$23711) (fl>? . g$0$23710) (fl>=? . g$0$23709) (fl=? . g$0$23708) (fl<? . g$0$23707) (fl<=? . g$0$23706) (fl/ . g$0$23705) (fl- . g$0$23704) (fl+ . g$0$23703) (fl* . g$0$23702) (fixnum->flonum . g$0$23701) (fxzero? . g$0$23700) (fxxor . g$0$23699) (fxrotate-bit-field . g$0$23698) (fxreverse-bit-field . g$0$23697) (fxpositive? . g$0$23696) (fxodd? . g$0$23695) (fxnot . g$0$23694) (fxnegative? . g$0$23693) (fxmod0 . g$0$23692) (fxmod . g$0$23691) (fxmin . g$0$23690) (fxmax . g$0$23689) (fxlength . g$0$23688) (fxior . g$0$23687) (fxif . g$0$23686) (fxfirst-bit-set . g$0$23685) (fxeven? . g$0$23684) (fxdiv0-and-mod0 . g$0$23683) (fxdiv0 . g$0$23682) (fxdiv-and-mod . g$0$23681) (fxdiv . g$0$23680) (fxcopy-bit-field . g$0$23679) (fxcopy-bit . g$0$23678) (fxbit-set? . g$0$23677) (fxbit-field . g$0$23676) (fxbit-count . g$0$23675) (fxarithmetic-shift-right . g$0$23674) (fxarithmetic-shift-left . g$0$23673) (fxarithmetic-shift . g$0$23672) (fxand . g$0$23671) (fx>? . g$0$23670) (fx>=? . g$0$23669) (fx=? . g$0$23668) (fx<? . g$0$23667) (fx<=? . g$0$23666) (fx-/carry . g$0$23665) (fx- . g$0$23664) (fx+/carry . g$0$23663) (fx+ . g$0$23662) (fx*/carry . g$0$23661) (fx* . g$0$23660) (greatest-fixnum . g$0$23659) (least-fixnum . g$0$23658) (fixnum-width . g$0$23657) (fixnum? . g$0$23656) (bitwise-rotate-bit-field . g$0$23655) (bitwise-reverse-bit-field . g$0$23654) (bitwise-length . g$0$23653) (bitwise-if . g$0$23652) (bitwise-first-bit-set . g$0$23651) (bitwise-copy-bit-field . g$0$23650) (bitwise-copy-bit . g$0$23649) (bitwise-bit-set? . g$0$23648) (bitwise-bit-field . g$0$23647) (bitwise-bit-count . g$0$23646) (bitwise-xor . g$0$23645) (bitwise-ior . g$0$23644) (bitwise-and . g$0$23643) (bitwise-not . g$0$23642) (bitwise-arithmetic-shift-right . g$0$23641) (bitwise-arithmetic-shift-left . g$0$23640) (bitwise-arithmetic-shift . g$0$23639) (zero? . g$0$23638) (vector? . g$0$23637) (vector-set! . g$0$23636) (vector-ref . g$0$23635) (vector-map . g$0$23634) (vector-length . g$0$23633) (vector-for-each . g$0$23632) (vector-fill! . g$0$23631) (vector->list . g$0$23630) (vector . g$0$23629) (values . g$0$23628) (truncate . g$0$23627) (tan . g$0$23626) (symbol? . g$0$23625) (symbol=? . g$0$23624) (symbol->string . g$0$23623) (substring . g$0$23622) (string? . g$0$23621) (string>? . g$0$23620) (string>=? . g$0$23619) (string=? . g$0$23618) (string<? . g$0$23617) (string<=? . g$0$23616) (string-ref . g$0$23615) (string-length . g$0$23614) (string-for-each . g$0$23613) (string-copy . g$0$23612) (string-append . g$0$23611) (string->symbol . g$0$23610) (string->number . g$0$23609) (string->list . g$0$23608) (string . g$0$23607) (sqrt . g$0$23606) (sin . g$0$23605) (round . g$0$23604) (reverse . g$0$23603) (real? . g$0$23602) (real-valued? . g$0$23601) (real-part . g$0$23600) (rationalize . g$0$23599) (rational? . g$0$23598) (rational-valued? . g$0$23597) (procedure? . g$0$23596) (positive? . g$0$23595) (pair? . g$0$23594) (odd? . g$0$23593) (numerator . g$0$23592) (number? . g$0$23591) (number->string . g$0$23590) (null? . g$0$23589) (not . g$0$23588) (negative? . g$0$23587) (nan? . g$0$23586) (min . g$0$23585) (max . g$0$23584) (map . g$0$23583) (make-vector . g$0$23582) (make-string . g$0$23581) (make-rectangular . g$0$23580) (make-polar . g$0$23579) (magnitude . g$0$23578) (log . g$0$23577) (list? . g$0$23576) (list-tail . g$0$23575) (list-ref . g$0$23574) (list->vector . g$0$23573) (list->string . g$0$23572) (list . g$0$23571) (length . g$0$23570) (lcm . g$0$23569) (integer? . g$0$23568) (integer-valued? . g$0$23567) (integer->char . g$0$23566) (infinite? . g$0$23565) (inexact? . g$0$23564) (inexact . g$0$23563) (imag-part . g$0$23562) (gcd . g$0$23561) (for-each . g$0$23560) (floor . g$0$23559) (finite? . g$0$23558) (expt . g$0$23557) (exp . g$0$23556) (exact? . g$0$23555) (exact-integer-sqrt . g$0$23554) (exact . g$0$23553) (even? . g$0$23552) (error . g$0$23551) (eqv? . g$0$23550) (equal? . g$0$23549) (eq? . g$0$23548) (dynamic-wind . g$0$23547) (div0-and-mod0 . g$0$23546) (mod0 . g$0$23545) (div0 . g$0$23544) (div-and-mod . g$0$23543) (mod . g$0$23542) (div . g$0$23541) (denominator . g$0$23540) (cos . g$0$23539) (cons . g$0$23538) (complex? . g$0$23537) (char? . g$0$23536) (char>? . g$0$23535) (char>=? . g$0$23534) (char=? . g$0$23533) (char<? . g$0$23532) (char<=? . g$0$23531) (char->integer . g$0$23530) (ceiling . g$0$23529) (call-with-values . g$0$23528) (call/cc . g$0$23527) (call-with-current-continuation . g$0$23526) (cddddr . g$0$23525) (cdddar . g$0$23524) (cddadr . g$0$23523) (cddaar . g$0$23522) (cdaddr . g$0$23521) (cdadar . g$0$23520) (cdaadr . g$0$23519) (cdaaar . g$0$23518) (cadddr . g$0$23517) (caddar . g$0$23516) (cadadr . g$0$23515) (cadaar . g$0$23514) (caaddr . g$0$23513) (caadar . g$0$23512) (caaadr . g$0$23511) (caaaar . g$0$23510) (cdddr . g$0$23509) (cddar . g$0$23508) (cdadr . g$0$23507) (cdaar . g$0$23506) (caddr . g$0$23505) (cadar . g$0$23504) (caadr . g$0$23503) (caaar . g$0$23502) (cddr . g$0$23501) (cdar . g$0$23500) (cadr . g$0$23499) (caar . g$0$23498) (cdr . g$0$23497) (car . g$0$23496) (boolean? . g$0$23495) (boolean=? . g$0$23494) (atan . g$0$23493) (assertion-violation . g$0$23492) (asin . g$0$23491) (apply . g$0$23490) (append . g$0$23489) (angle . g$0$23488) (acos . g$0$23487) (abs . g$0$23486) (/ . g$0$23485) (* . g$0$23484) (- . g$0$23483) (+ . g$0$23482) (>= . g$0$23481) (> . g$0$23480) (= . g$0$23479) (<= . g$0$23478) (< . g$0$23477) (let*-values . g$0$23476) (&no-nans . g$0$23475) (&no-infinities . g$0$23474) (&i/o-encoding . g$0$23473) (&i/o-decoding . g$0$23472) (&i/o-port . g$0$23471) (&i/o-file-does-not-exist . g$0$23470) (&i/o-file-already-exists . g$0$23469) (&i/o-file-is-read-only . g$0$23468) (&i/o-file-protection . g$0$23467) (&i/o-filename . g$0$23466) (&i/o-invalid-position . g$0$23465) (&i/o-write . g$0$23464) (&i/o-read . g$0$23463) (&i/o . g$0$23462) (&undefined . g$0$23461) (&syntax . g$0$23460) (&lexical . g$0$23459) (&who . g$0$23456) (&irritants . g$0$23455) (&assertion . g$0$23454) (&violation . g$0$23453) (&error . g$0$23452) (&serious . g$0$23451) (&warning . g$0$23450) (&message . g$0$23449) (&condition . g$0$23448) (define-condition-type . g$0$23447) (define-enumeration . g$0$23446) (define-record-type . g$0$23445) (parent-rtd . g$0$23444) (nongenerative . g$0$23443) (opaque . g$0$23442) (sealed . g$0$23441) (protocol . g$0$23440) (parent . g$0$23439) (immutable . g$0$23438) (mutable . g$0$23437) (fields . g$0$23436) (error-handling-mode . g$0$23435) (file-options . g$0$23434) (buffer-mode . g$0$23433) (eol-style . g$0$23432) (guard . g$0$23431) (unsyntax-splicing . g$0$23428) (unsyntax . g$0$23427) (unquote-splicing . g$0$23426) (unquote . g$0$23425) (_ . g$0$23424) (else . g$0$23423) (=> . g$0$23422) (... . g$0$23421) (assert . g$0$23420) (endianness . g$0$23419) (or . g$0$23416) (and . g$0$23415) (do . g$0$23414) (cond . g$0$23413) (let* . g$0$23412) (let . g$0$23411) (identifier-syntax . g$0$23410) (with-syntax . g$0$23409) (quasisyntax . g$0$23408) (quasiquote . g$0$23407) (syntax-rules . g$0$23406) (record-constructor-descriptor . g$0$23403) (record-type-descriptor . g$0$23402) (let-values . g$0$23401) (case . g$0$23400) (unless . g$0$23398) (when . g$0$23397) (if . g$0$23396) (letrec* . g$0$23395) (letrec . g$0$23394) (case-lambda . g$0$23392) (lambda . g$0$23391) (syntax . g$0$23390) (syntax-case . g$0$23389) (quote . g$0$23388) (letrec-syntax . g$0$23386) (let-syntax . g$0$23385) (set! . g$0$23384) (begin . g$0$23382) (define-syntax . g$0$23380) (define . g$0$23379))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24095) (quote (rnrs r5rs)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((scheme-report-environment . g$0$23901) (quotient . g$0$23900) (null-environment . g$0$13675) (remainder . g$0$23899) (modulo . g$0$23898) (inexact->exact . g$0$23897) (force . g$0$23896) (exact->inexact . g$0$23895) (delay . g$0$23418))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24096) (quote (rnrs control)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((do . g$0$23414) (unless . g$0$23398) (when . g$0$23397) (case-lambda . g$0$23392))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24097) (quote (rnrs eval)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((eval . g$0$13681) (environment . g$0$13673))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24098) (quote (rnrs mutable-pairs)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((set-cdr! . g$0$23890) (set-car! . g$0$23889))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24099) (quote (rnrs mutable-strings)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((string-fill! . g$0$23892) (string-set! . g$0$23891))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24100) (quote (rnrs programs)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((exit . g$0$23894) (command-line . g$0$23893))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24101) (quote (rnrs syntax-case)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((make-variable-transformer . g$0$13273) (identifier? . g$0$13703) (generate-temporaries . g$0$13695) (free-identifier=? . g$0$13697) (syntax->datum . g$0$13707) (datum->syntax . g$0$13705) (bound-identifier=? . g$0$13699) (syntax-violation . g$0$23839) (unsyntax-splicing . g$0$23428) (unsyntax . g$0$23427) (_ . g$0$23424) (... . g$0$23421) (with-syntax . g$0$23409) (quasisyntax . g$0$23408) (syntax . g$0$23390) (syntax-case . g$0$23389))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24102) (quote (rnrs files)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((delete-file . g$0$24033) (file-exists? . g$0$24032) (make-i/o-write-error . g$0$23950) (make-i/o-read-error . g$0$23949) (make-i/o-port-error . g$0$23948) (make-i/o-invalid-position-error . g$0$23947) (make-i/o-filename-error . g$0$23946) (make-i/o-file-protection-error . g$0$23945) (make-i/o-file-is-read-only-error . g$0$23944) (make-i/o-file-does-not-exist-error . g$0$23943) (make-i/o-file-already-exists-error . g$0$23942) (make-i/o-error . g$0$23941) (i/o-write-error? . g$0$23929) (i/o-read-error? . g$0$23928) (i/o-port-error? . g$0$23927) (i/o-invalid-position-error? . g$0$23926) (i/o-filename-error? . g$0$23925) (i/o-file-protection-error? . g$0$23924) (i/o-file-is-read-only-error? . g$0$23923) (i/o-file-does-not-exist-error? . g$0$23922) (i/o-file-already-exists-error? . g$0$23921) (i/o-error? . g$0$23920) (i/o-error-port . g$0$23919) (i/o-error-filename . g$0$23918) (&i/o-port . g$0$23471) (&i/o-file-does-not-exist . g$0$23470) (&i/o-file-already-exists . g$0$23469) (&i/o-file-is-read-only . g$0$23468) (&i/o-file-protection . g$0$23467) (&i/o-filename . g$0$23466) (&i/o-invalid-position . g$0$23465) (&i/o-write . g$0$23464) (&i/o-read . g$0$23463) (&i/o . g$0$23462))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24103) (quote (rnrs sorting)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((vector-sort! . g$0$24031) (vector-sort . g$0$24030) (list-sort . g$0$24029))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24104) (quote (rnrs base)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((zero? . g$0$23638) (vector? . g$0$23637) (vector-set! . g$0$23636) (vector-ref . g$0$23635) (vector-map . g$0$23634) (vector-length . g$0$23633) (vector-for-each . g$0$23632) (vector-fill! . g$0$23631) (vector->list . g$0$23630) (vector . g$0$23629) (values . g$0$23628) (truncate . g$0$23627) (tan . g$0$23626) (symbol? . g$0$23625) (symbol=? . g$0$23624) (symbol->string . g$0$23623) (substring . g$0$23622) (string? . g$0$23621) (string>? . g$0$23620) (string>=? . g$0$23619) (string=? . g$0$23618) (string<? . g$0$23617) (string<=? . g$0$23616) (string-ref . g$0$23615) (string-length . g$0$23614) (string-for-each . g$0$23613) (string-copy . g$0$23612) (string-append . g$0$23611) (string->symbol . g$0$23610) (string->number . g$0$23609) (string->list . g$0$23608) (string . g$0$23607) (sqrt . g$0$23606) (sin . g$0$23605) (round . g$0$23604) (reverse . g$0$23603) (real? . g$0$23602) (real-valued? . g$0$23601) (real-part . g$0$23600) (rationalize . g$0$23599) (rational? . g$0$23598) (rational-valued? . g$0$23597) (procedure? . g$0$23596) (positive? . g$0$23595) (pair? . g$0$23594) (odd? . g$0$23593) (numerator . g$0$23592) (number? . g$0$23591) (number->string . g$0$23590) (null? . g$0$23589) (not . g$0$23588) (negative? . g$0$23587) (nan? . g$0$23586) (min . g$0$23585) (max . g$0$23584) (map . g$0$23583) (make-vector . g$0$23582) (make-string . g$0$23581) (make-rectangular . g$0$23580) (make-polar . g$0$23579) (magnitude . g$0$23578) (log . g$0$23577) (list? . g$0$23576) (list-tail . g$0$23575) (list-ref . g$0$23574) (list->vector . g$0$23573) (list->string . g$0$23572) (list . g$0$23571) (length . g$0$23570) (lcm . g$0$23569) (integer? . g$0$23568) (integer-valued? . g$0$23567) (integer->char . g$0$23566) (infinite? . g$0$23565) (inexact? . g$0$23564) (inexact . g$0$23563) (imag-part . g$0$23562) (gcd . g$0$23561) (for-each . g$0$23560) (floor . g$0$23559) (finite? . g$0$23558) (expt . g$0$23557) (exp . g$0$23556) (exact? . g$0$23555) (exact-integer-sqrt . g$0$23554) (exact . g$0$23553) (even? . g$0$23552) (error . g$0$23551) (eqv? . g$0$23550) (equal? . g$0$23549) (eq? . g$0$23548) (dynamic-wind . g$0$23547) (div0-and-mod0 . g$0$23546) (mod0 . g$0$23545) (div0 . g$0$23544) (div-and-mod . g$0$23543) (mod . g$0$23542) (div . g$0$23541) (denominator . g$0$23540) (cos . g$0$23539) (cons . g$0$23538) (complex? . g$0$23537) (char? . g$0$23536) (char>? . g$0$23535) (char>=? . g$0$23534) (char=? . g$0$23533) (char<? . g$0$23532) (char<=? . g$0$23531) (char->integer . g$0$23530) (ceiling . g$0$23529) (call-with-values . g$0$23528) (call/cc . g$0$23527) (call-with-current-continuation . g$0$23526) (cddddr . g$0$23525) (cdddar . g$0$23524) (cddadr . g$0$23523) (cddaar . g$0$23522) (cdaddr . g$0$23521) (cdadar . g$0$23520) (cdaadr . g$0$23519) (cdaaar . g$0$23518) (cadddr . g$0$23517) (caddar . g$0$23516) (cadadr . g$0$23515) (cadaar . g$0$23514) (caaddr . g$0$23513) (caadar . g$0$23512) (caaadr . g$0$23511) (caaaar . g$0$23510) (cdddr . g$0$23509) (cddar . g$0$23508) (cdadr . g$0$23507) (cdaar . g$0$23506) (caddr . g$0$23505) (cadar . g$0$23504) (caadr . g$0$23503) (caaar . g$0$23502) (cddr . g$0$23501) (cdar . g$0$23500) (cadr . g$0$23499) (caar . g$0$23498) (cdr . g$0$23497) (car . g$0$23496) (boolean? . g$0$23495) (boolean=? . g$0$23494) (atan . g$0$23493) (assertion-violation . g$0$23492) (asin . g$0$23491) (apply . g$0$23490) (append . g$0$23489) (angle . g$0$23488) (acos . g$0$23487) (abs . g$0$23486) (/ . g$0$23485) (* . g$0$23484) (- . g$0$23483) (+ . g$0$23482) (>= . g$0$23481) (> . g$0$23480) (= . g$0$23479) (<= . g$0$23478) (< . g$0$23477) (let*-values . g$0$23476) (unquote-splicing . g$0$23426) (unquote . g$0$23425) (_ . g$0$23424) (else . g$0$23423) (=> . g$0$23422) (... . g$0$23421) (assert . g$0$23420) (or . g$0$23416) (and . g$0$23415) (cond . g$0$23413) (let* . g$0$23412) (let . g$0$23411) (identifier-syntax . g$0$23410) (quasiquote . g$0$23407) (syntax-rules . g$0$23406) (let-values . g$0$23401) (case . g$0$23400) (if . g$0$23396) (letrec* . g$0$23395) (letrec . g$0$23394) (lambda . g$0$23391) (quote . g$0$23388) (letrec-syntax . g$0$23386) (let-syntax . g$0$23385) (set! . g$0$23384) (begin . g$0$23382) (define-syntax . g$0$23380) (define . g$0$23379))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24105) (quote (rnrs lists)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((remove . g$0$23888) (remv . g$0$23887) (remp . g$0$23886) (remq . g$0$23885) (partition . g$0$23884) (memv . g$0$23883) (memq . g$0$23882) (memp . g$0$23881) (member . g$0$23880) (exists . g$0$23879) (for-all . g$0$23878) (fold-right . g$0$23877) (fold-left . g$0$23876) (find . g$0$23875) (filter . g$0$23874) (cons* . g$0$23873) (assv . g$0$23872) (assq . g$0$23871) (assp . g$0$23870) (assoc . g$0$23869))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24106) (quote (rnrs io simple)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((call-with-output-file . g$0$24007) (call-with-input-file . g$0$24006) (write-char . g$0$24005) (write . g$0$24004) (with-output-to-file . g$0$24003) (with-input-from-file . g$0$24002) (read-char . g$0$24001) (read . g$0$24000) (peek-char . g$0$23999) (open-output-file . g$0$23998) (open-input-file . g$0$23997) (newline . g$0$23996) (display . g$0$23995) (close-output-port . g$0$23994) (close-input-port . g$0$23993) (eof-object? . g$0$23992) (eof-object . g$0$23991) (current-error-port . g$0$23990) (current-output-port . g$0$23989) (current-input-port . g$0$23988) (output-port? . g$0$23987) (input-port? . g$0$23986) (make-i/o-write-error . g$0$23950) (make-i/o-read-error . g$0$23949) (make-i/o-port-error . g$0$23948) (make-i/o-invalid-position-error . g$0$23947) (make-i/o-filename-error . g$0$23946) (make-i/o-file-protection-error . g$0$23945) (make-i/o-file-is-read-only-error . g$0$23944) (make-i/o-file-does-not-exist-error . g$0$23943) (make-i/o-file-already-exists-error . g$0$23942) (make-i/o-error . g$0$23941) (i/o-write-error? . g$0$23929) (i/o-read-error? . g$0$23928) (i/o-port-error? . g$0$23927) (i/o-invalid-position-error? . g$0$23926) (i/o-filename-error? . g$0$23925) (i/o-file-protection-error? . g$0$23924) (i/o-file-is-read-only-error? . g$0$23923) (i/o-file-does-not-exist-error? . g$0$23922) (i/o-file-already-exists-error? . g$0$23921) (i/o-error? . g$0$23920) (i/o-error-port . g$0$23919) (i/o-error-filename . g$0$23918) (&i/o-port . g$0$23471) (&i/o-file-does-not-exist . g$0$23470) (&i/o-file-already-exists . g$0$23469) (&i/o-file-is-read-only . g$0$23468) (&i/o-file-protection . g$0$23467) (&i/o-filename . g$0$23466) (&i/o-invalid-position . g$0$23465) (&i/o-write . g$0$23464) (&i/o-read . g$0$23463) (&i/o . g$0$23462))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24107) (quote (rnrs bytevectors)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((make-bytevector . g$0$23932) (utf32->string . g$0$23807) (utf16->string . g$0$23806) (utf8->string . g$0$23805) (uint-list->bytevector . g$0$23804) (u8-list->bytevector . g$0$23803) (string->utf8 . g$0$23802) (string->utf32 . g$0$23801) (string->utf16 . g$0$23800) (sint-list->bytevector . g$0$23799) (native-endianness . g$0$23798) (bytevector? . g$0$23797) (bytevector=? . g$0$23796) (bytevector-uint-set! . g$0$23795) (bytevector-uint-ref . g$0$23794) (bytevector-u8-set! . g$0$23793) (bytevector-u8-ref . g$0$23792) (bytevector-u64-set! . g$0$23791) (bytevector-u64-ref . g$0$23790) (bytevector-u64-native-set! . g$0$23789) (bytevector-u64-native-ref . g$0$23788) (bytevector-u32-set! . g$0$23787) (bytevector-u32-ref . g$0$23786) (bytevector-u32-native-set! . g$0$23785) (bytevector-u32-native-ref . g$0$23784) (bytevector-u16-set! . g$0$23783) (bytevector-u16-ref . g$0$23782) (bytevector-u16-native-set! . g$0$23781) (bytevector-u16-native-ref . g$0$23780) (bytevector-sint-set! . g$0$23779) (bytevector-sint-ref . g$0$23778) (bytevector-s8-set! . g$0$23777) (bytevector-s8-ref . g$0$23776) (bytevector-s64-set! . g$0$23775) (bytevector-s64-ref . g$0$23774) (bytevector-s64-native-set! . g$0$23773) (bytevector-s64-native-ref . g$0$23772) (bytevector-s32-set! . g$0$23771) (bytevector-s32-ref . g$0$23770) (bytevector-s32-native-set! . g$0$23769) (bytevector-s32-native-ref . g$0$23768) (bytevector-s16-set! . g$0$23767) (bytevector-s16-ref . g$0$23766) (bytevector-s16-native-set! . g$0$23765) (bytevector-s16-native-ref . g$0$23764) (bytevector-length . g$0$23763) (bytevector-ieee-single-ref . g$0$23762) (bytevector-ieee-single-native-set! . g$0$23761) (bytevector-ieee-single-native-ref . g$0$23760) (bytevector-ieee-double-ref . g$0$23759) (bytevector-ieee-double-native-set! . g$0$23758) (bytevector-ieee-double-native-ref . g$0$23757) (bytevector-fill! . g$0$23756) (bytevector-copy! . g$0$23755) (bytevector-copy . g$0$23754) (bytevector->uint-list . g$0$23753) (bytevector->u8-list . g$0$23752) (bytevector->sint-list . g$0$23751) (endianness . g$0$23419))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24108) (quote (rnrs unicode)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$0$24079) (string-titlecase . g$0$24078) (string-normalize-nfkd . g$0$24077) (string-normalize-nfkc . g$0$24076) (string-normalize-nfd . g$0$24075) (string-normalize-nfc . g$0$24074) (string-foldcase . g$0$24073) (string-downcase . g$0$24072) (string-ci>? . g$0$24071) (string-ci>=? . g$0$24070) (string-ci=? . g$0$24069) (string-ci<? . g$0$24068) (string-ci<=? . g$0$24067) (char-whitespace? . g$0$24066) (char-upper-case? . g$0$24065) (char-title-case? . g$0$24064) (char-numeric? . g$0$24063) (char-lower-case? . g$0$24062) (char-general-category . g$0$24061) (char-upcase . g$0$24060) (char-titlecase . g$0$24059) (char-foldcase . g$0$24058) (char-downcase . g$0$24057) (char-ci>? . g$0$24056) (char-ci>=? . g$0$24055) (char-ci=? . g$0$24054) (char-ci<? . g$0$24053) (char-ci<=? . g$0$24052) (char-alphabetic? . g$0$24051))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24109) (quote (rnrs exceptions)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((with-exception-handler . g$0$23862) (raise-continuable . g$0$23861) (raise . g$0$23860) (guard . g$0$23431) (else . g$0$23423) (=> . g$0$23422))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24110) (quote (rnrs arithmetic bitwise)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((bitwise-rotate-bit-field . g$0$23655) (bitwise-reverse-bit-field . g$0$23654) (bitwise-length . g$0$23653) (bitwise-if . g$0$23652) (bitwise-first-bit-set . g$0$23651) (bitwise-copy-bit-field . g$0$23650) (bitwise-copy-bit . g$0$23649) (bitwise-bit-set? . g$0$23648) (bitwise-bit-field . g$0$23647) (bitwise-bit-count . g$0$23646) (bitwise-xor . g$0$23645) (bitwise-ior . g$0$23644) (bitwise-and . g$0$23643) (bitwise-not . g$0$23642) (bitwise-arithmetic-shift-right . g$0$23641) (bitwise-arithmetic-shift-left . g$0$23640) (bitwise-arithmetic-shift . g$0$23639))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24111) (quote (rnrs arithmetic fixnums)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((fxzero? . g$0$23700) (fxxor . g$0$23699) (fxrotate-bit-field . g$0$23698) (fxreverse-bit-field . g$0$23697) (fxpositive? . g$0$23696) (fxodd? . g$0$23695) (fxnot . g$0$23694) (fxnegative? . g$0$23693) (fxmod0 . g$0$23692) (fxmod . g$0$23691) (fxmin . g$0$23690) (fxmax . g$0$23689) (fxlength . g$0$23688) (fxior . g$0$23687) (fxif . g$0$23686) (fxfirst-bit-set . g$0$23685) (fxeven? . g$0$23684) (fxdiv0-and-mod0 . g$0$23683) (fxdiv0 . g$0$23682) (fxdiv-and-mod . g$0$23681) (fxdiv . g$0$23680) (fxcopy-bit-field . g$0$23679) (fxcopy-bit . g$0$23678) (fxbit-set? . g$0$23677) (fxbit-field . g$0$23676) (fxbit-count . g$0$23675) (fxarithmetic-shift-right . g$0$23674) (fxarithmetic-shift-left . g$0$23673) (fxarithmetic-shift . g$0$23672) (fxand . g$0$23671) (fx>? . g$0$23670) (fx>=? . g$0$23669) (fx=? . g$0$23668) (fx<? . g$0$23667) (fx<=? . g$0$23666) (fx-/carry . g$0$23665) (fx- . g$0$23664) (fx+/carry . g$0$23663) (fx+ . g$0$23662) (fx*/carry . g$0$23661) (fx* . g$0$23660) (greatest-fixnum . g$0$23659) (least-fixnum . g$0$23658) (fixnum-width . g$0$23657) (fixnum? . g$0$23656))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24112) (quote (rnrs arithmetic flonums)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((no-nans-violation? . g$0$23750) (no-infinities-violation? . g$0$23749) (make-no-nans-violation . g$0$23748) (make-no-infinities-violation . g$0$23747) (real->flonum . g$0$23746) (flzero? . g$0$23745) (fltruncate . g$0$23744) (fltan . g$0$23743) (flsqrt . g$0$23742) (flsin . g$0$23741) (flround . g$0$23740) (flpositive? . g$0$23739) (flonum? . g$0$23738) (flodd? . g$0$23737) (flnumerator . g$0$23736) (flnegative? . g$0$23735) (flnan? . g$0$23734) (flmod0 . g$0$23733) (flmod . g$0$23732) (flmin . g$0$23731) (flmax . g$0$23730) (fllog . g$0$23729) (flinteger? . g$0$23728) (flinfinite? . g$0$23727) (flfloor . g$0$23726) (flfinite? . g$0$23725) (flexpt . g$0$23724) (flexp . g$0$23723) (fleven? . g$0$23722) (fldiv0-and-mod0 . g$0$23721) (fldiv0 . g$0$23720) (fldiv-and-mod . g$0$23719) (fldiv . g$0$23718) (fldenominator . g$0$23717) (flcos . g$0$23716) (flceiling . g$0$23715) (flatan . g$0$23714) (flasin . g$0$23713) (flacos . g$0$23712) (flabs . g$0$23711) (fl>? . g$0$23710) (fl>=? . g$0$23709) (fl=? . g$0$23708) (fl<? . g$0$23707) (fl<=? . g$0$23706) (fl/ . g$0$23705) (fl- . g$0$23704) (fl+ . g$0$23703) (fl* . g$0$23702) (fixnum->flonum . g$0$23701) (&no-nans . g$0$23475) (&no-infinities . g$0$23474))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24113) (quote (rnrs hashtables)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((symbol-hash . g$0$24028) (string-ci-hash . g$0$24027) (string-hash . g$0$24026) (equal-hash . g$0$24025) (hashtable-equivalence-function . g$0$24024) (make-hashtable . g$0$24023) (hashtable-hash-function . g$0$24022) (make-eqv-hashtable . g$0$24021) (make-eq-hashtable . g$0$24020) (hashtable? . g$0$24019) (hashtable-update! . g$0$24018) (hashtable-size . g$0$24017) (hashtable-set! . g$0$24016) (hashtable-ref . g$0$24015) (hashtable-mutable? . g$0$24014) (hashtable-keys . g$0$24013) (hashtable-entries . g$0$24012) (hashtable-delete! . g$0$24011) (hashtable-copy . g$0$24010) (hashtable-contains? . g$0$24009) (hashtable-clear! . g$0$24008))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24114) (quote (rnrs io ports)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((eof-object? . g$0$23992) (eof-object . g$0$23991) (current-error-port . g$0$23990) (current-output-port . g$0$23989) (current-input-port . g$0$23988) (output-port? . g$0$23987) (input-port? . g$0$23986) (utf-8-codec . g$0$23985) (utf-16-codec . g$0$23984) (transcoder-error-handling-mode . g$0$23983) (transcoder-eol-style . g$0$23982) (transcoder-codec . g$0$23981) (transcoded-port . g$0$23980) (textual-port? . g$0$23979) (string->bytevector . g$0$23978) (standard-output-port . g$0$23977) (standard-input-port . g$0$23976) (standard-error-port . g$0$23975) (set-port-position! . g$0$23974) (put-u8 . g$0$23973) (put-string . g$0$23972) (put-datum . g$0$23971) (put-char . g$0$23970) (put-bytevector . g$0$23969) (port? . g$0$23968) (port-transcoder . g$0$23967) (port-position . g$0$23966) (port-has-set-port-position!? . g$0$23965) (port-has-port-position? . g$0$23964) (port-eof? . g$0$23963) (output-port-buffer-mode . g$0$23962) (open-string-output-port . g$0$23961) (open-string-input-port . g$0$23960) (open-file-output-port . g$0$23959) (open-file-input/output-port . g$0$23958) (open-file-input-port . g$0$23957) (open-bytevector-output-port . g$0$23956) (open-bytevector-input-port . g$0$23955) (native-transcoder . g$0$23954) (native-eol-style . g$0$23953) (make-transcoder . g$0$23952) (latin-1-codec . g$0$23951) (make-i/o-write-error . g$0$23950) (make-i/o-read-error . g$0$23949) (make-i/o-port-error . g$0$23948) (make-i/o-invalid-position-error . g$0$23947) (make-i/o-filename-error . g$0$23946) (make-i/o-file-protection-error . g$0$23945) (make-i/o-file-is-read-only-error . g$0$23944) (make-i/o-file-does-not-exist-error . g$0$23943) (make-i/o-file-already-exists-error . g$0$23942) (make-i/o-error . g$0$23941) (make-i/o-encoding-error . g$0$23940) (make-i/o-decoding-error . g$0$23939) (make-custom-textual-output-port . g$0$23938) (make-custom-textual-input/output-port . g$0$23937) (make-custom-textual-input-port . g$0$23936) (make-custom-binary-output-port . g$0$23935) (make-custom-binary-input/output-port . g$0$23934) (make-custom-binary-input-port . g$0$23933) (lookahead-u8 . g$0$23931) (lookahead-char . g$0$23930) (i/o-write-error? . g$0$23929) (i/o-read-error? . g$0$23928) (i/o-port-error? . g$0$23927) (i/o-invalid-position-error? . g$0$23926) (i/o-filename-error? . g$0$23925) (i/o-file-protection-error? . g$0$23924) (i/o-file-is-read-only-error? . g$0$23923) (i/o-file-does-not-exist-error? . g$0$23922) (i/o-file-already-exists-error? . g$0$23921) (i/o-error? . g$0$23920) (i/o-error-port . g$0$23919) (i/o-error-filename . g$0$23918) (i/o-encoding-error? . g$0$23917) (i/o-encoding-error-char . g$0$23916) (i/o-decoding-error? . g$0$23915) (get-u8 . g$0$23914) (get-string-n! . g$0$23913) (get-string-n . g$0$23912) (get-string-all . g$0$23911) (get-line . g$0$23910) (get-datum . g$0$23909) (get-char . g$0$23908) (get-bytevector-some . g$0$23907) (get-bytevector-n! . g$0$23906) (get-bytevector-n . g$0$23905) (get-bytevector-all . g$0$23904) (flush-output-port . g$0$23903) (close-port . g$0$23902) (call-with-string-output-port . g$0$23868) (call-with-port . g$0$23867) (call-with-bytevector-output-port . g$0$23866) (bytevector->string . g$0$23865) (buffer-mode? . g$0$23864) (binary-port? . g$0$23863) (&i/o-encoding . g$0$23473) (&i/o-decoding . g$0$23472) (&i/o-port . g$0$23471) (&i/o-file-does-not-exist . g$0$23470) (&i/o-file-already-exists . g$0$23469) (&i/o-file-is-read-only . g$0$23468) (&i/o-file-protection . g$0$23467) (&i/o-filename . g$0$23466) (&i/o-invalid-position . g$0$23465) (&i/o-write . g$0$23464) (&i/o-read . g$0$23463) (&i/o . g$0$23462) (error-handling-mode . g$0$23435) (file-options . g$0$23434) (buffer-mode . g$0$23433) (eol-style . g$0$23432))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24115) (quote (rnrs enums)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((make-enumeration . g$0$23859) (enum-set=? . g$0$23858) (enum-set-universe . g$0$23857) (enum-set-union . g$0$23856) (enum-set-subset? . g$0$23855) (enum-set-projection . g$0$23854) (enum-set-member? . g$0$23853) (enum-set-intersection . g$0$23852) (enum-set-indexer . g$0$23851) (enum-set-difference . g$0$23850) (enum-set-constructor . g$0$23849) (enum-set-complement . g$0$23848) (enum-set->list . g$0$23847) (define-enumeration . g$0$23446))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24116) (quote (rnrs conditions)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((who-condition? . g$0$23846) (warning? . g$0$23845) (violation? . g$0$23844) (undefined-violation? . g$0$23843) (syntax-violation? . g$0$23842) (syntax-violation-subform . g$0$23841) (syntax-violation-form . g$0$23840) (syntax-violation . g$0$23839) (simple-conditions . g$0$23838) (serious-condition? . g$0$23837) (non-continuable-violation? . g$0$23836) (&non-continuable . g$0$23835) (message-condition? . g$0$23834) (make-who-condition . g$0$23833) (make-warning . g$0$23832) (make-violation . g$0$23831) (make-undefined-violation . g$0$23830) (make-syntax-violation . g$0$23829) (make-serious-condition . g$0$23828) (make-non-continuable-violation . g$0$23827) (make-message-condition . g$0$23826) (make-lexical-violation . g$0$23825) (make-irritants-condition . g$0$23824) (make-implementation-restriction-violation . g$0$23823) (make-error . g$0$23822) (make-assertion-violation . g$0$23821) (lexical-violation? . g$0$23820) (irritants-condition? . g$0$23819) (implementation-restriction-violation? . g$0$23818) (&implementation-restriction . g$0$23817) (error? . g$0$23816) (condition-who . g$0$23815) (condition-predicate . g$0$23814) (condition-message . g$0$23813) (condition-irritants . g$0$23812) (condition-accessor . g$0$23811) (condition . g$0$23810) (assertion-violation? . g$0$23809) (condition? . g$0$23808) (&undefined . g$0$23461) (&syntax . g$0$23460) (&lexical . g$0$23459) (&who . g$0$23456) (&irritants . g$0$23455) (&assertion . g$0$23454) (&violation . g$0$23453) (&error . g$0$23452) (&serious . g$0$23451) (&warning . g$0$23450) (&message . g$0$23449) (&condition . g$0$23448) (define-condition-type . g$0$23447))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24117) (quote (rnrs records inspection)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((record? . g$0$24043) (record-type-uid . g$0$24042) (record-type-sealed? . g$0$24041) (record-type-parent . g$0$24040) (record-type-opaque? . g$0$24039) (record-type-name . g$0$24038) (record-type-generative? . g$0$24037) (record-type-field-names . g$0$24036) (record-rtd . g$0$24035) (record-field-mutable? . g$0$24034))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24118) (quote (rnrs records procedural)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((record-type-descriptor? . g$0$24050) (record-predicate . g$0$24049) (record-mutator . g$0$24048) (record-constructor . g$0$24047) (record-accessor . g$0$24046) (make-record-type-descriptor . g$0$24045) (make-record-constructor-descriptor . g$0$24044))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24119) (quote (rnrs records syntactic)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((define-record-type . g$0$23445) (parent-rtd . g$0$23444) (nongenerative . g$0$23443) (opaque . g$0$23442) (sealed . g$0$23441) (protocol . g$0$23440) (parent . g$0$23439) (immutable . g$0$23438) (mutable . g$0$23437) (fields . g$0$23436) (record-constructor-descriptor . g$0$23403) (record-type-descriptor . g$0$23402))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24120) (quote (psyntax system $all)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((syntax-error . g$0$13701) (syntax-dispatch . g$0$13568) (pretty-print . g$0$24088) (eval-core . g$0$24087) (set-symbol-value! . g$0$24086) (symbol-value . g$0$24085) (gensym . g$0$24084) (void . g$0$24083) (load . g$0$24082) (interaction-environment . g$0$24081) (char-ready? . g$0$24080) (string-upcase . g$0$24079) (string-titlecase . g$0$24078) (string-normalize-nfkd . g$0$24077) (string-normalize-nfkc . g$0$24076) (string-normalize-nfd . g$0$24075) (string-normalize-nfc . g$0$24074) (string-foldcase . g$0$24073) (string-downcase . g$0$24072) (string-ci>? . g$0$24071) (string-ci>=? . g$0$24070) (string-ci=? . g$0$24069) (string-ci<? . g$0$24068) (string-ci<=? . g$0$24067) (char-whitespace? . g$0$24066) (char-upper-case? . g$0$24065) (char-title-case? . g$0$24064) (char-numeric? . g$0$24063) (char-lower-case? . g$0$24062) (char-general-category . g$0$24061) (char-upcase . g$0$24060) (char-titlecase . g$0$24059) (char-foldcase . g$0$24058) (char-downcase . g$0$24057) (char-ci>? . g$0$24056) (char-ci>=? . g$0$24055) (char-ci=? . g$0$24054) (char-ci<? . g$0$24053) (char-ci<=? . g$0$24052) (char-alphabetic? . g$0$24051) (make-variable-transformer . g$0$13273) (identifier? . g$0$13703) (generate-temporaries . g$0$13695) (free-identifier=? . g$0$13697) (syntax->datum . g$0$13707) (datum->syntax . g$0$13705) (bound-identifier=? . g$0$13699) (record-type-descriptor? . g$0$24050) (record-predicate . g$0$24049) (record-mutator . g$0$24048) (record-constructor . g$0$24047) (record-accessor . g$0$24046) (make-record-type-descriptor . g$0$24045) (make-record-constructor-descriptor . g$0$24044) (record? . g$0$24043) (record-type-uid . g$0$24042) (record-type-sealed? . g$0$24041) (record-type-parent . g$0$24040) (record-type-opaque? . g$0$24039) (record-type-name . g$0$24038) (record-type-generative? . g$0$24037) (record-type-field-names . g$0$24036) (record-rtd . g$0$24035) (record-field-mutable? . g$0$24034) (delete-file . g$0$24033) (file-exists? . g$0$24032) (vector-sort! . g$0$24031) (vector-sort . g$0$24030) (list-sort . g$0$24029) (symbol-hash . g$0$24028) (string-ci-hash . g$0$24027) (string-hash . g$0$24026) (equal-hash . g$0$24025) (hashtable-equivalence-function . g$0$24024) (make-hashtable . g$0$24023) (hashtable-hash-function . g$0$24022) (make-eqv-hashtable . g$0$24021) (make-eq-hashtable . g$0$24020) (hashtable? . g$0$24019) (hashtable-update! . g$0$24018) (hashtable-size . g$0$24017) (hashtable-set! . g$0$24016) (hashtable-ref . g$0$24015) (hashtable-mutable? . g$0$24014) (hashtable-keys . g$0$24013) (hashtable-entries . g$0$24012) (hashtable-delete! . g$0$24011) (hashtable-copy . g$0$24010) (hashtable-contains? . g$0$24009) (hashtable-clear! . g$0$24008) (call-with-output-file . g$0$24007) (call-with-input-file . g$0$24006) (write-char . g$0$24005) (write . g$0$24004) (with-output-to-file . g$0$24003) (with-input-from-file . g$0$24002) (read-char . g$0$24001) (read . g$0$24000) (peek-char . g$0$23999) (open-output-file . g$0$23998) (open-input-file . g$0$23997) (newline . g$0$23996) (display . g$0$23995) (close-output-port . g$0$23994) (close-input-port . g$0$23993) (eof-object? . g$0$23992) (eof-object . g$0$23991) (current-error-port . g$0$23990) (current-output-port . g$0$23989) (current-input-port . g$0$23988) (output-port? . g$0$23987) (input-port? . g$0$23986) (utf-8-codec . g$0$23985) (utf-16-codec . g$0$23984) (transcoder-error-handling-mode . g$0$23983) (transcoder-eol-style . g$0$23982) (transcoder-codec . g$0$23981) (transcoded-port . g$0$23980) (textual-port? . g$0$23979) (string->bytevector . g$0$23978) (standard-output-port . g$0$23977) (standard-input-port . g$0$23976) (standard-error-port . g$0$23975) (set-port-position! . g$0$23974) (put-u8 . g$0$23973) (put-string . g$0$23972) (put-datum . g$0$23971) (put-char . g$0$23970) (put-bytevector . g$0$23969) (port? . g$0$23968) (port-transcoder . g$0$23967) (port-position . g$0$23966) (port-has-set-port-position!? . g$0$23965) (port-has-port-position? . g$0$23964) (port-eof? . g$0$23963) (output-port-buffer-mode . g$0$23962) (open-string-output-port . g$0$23961) (open-string-input-port . g$0$23960) (open-file-output-port . g$0$23959) (open-file-input/output-port . g$0$23958) (open-file-input-port . g$0$23957) (open-bytevector-output-port . g$0$23956) (open-bytevector-input-port . g$0$23955) (native-transcoder . g$0$23954) (native-eol-style . g$0$23953) (make-transcoder . g$0$23952) (latin-1-codec . g$0$23951) (make-i/o-write-error . g$0$23950) (make-i/o-read-error . g$0$23949) (make-i/o-port-error . g$0$23948) (make-i/o-invalid-position-error . g$0$23947) (make-i/o-filename-error . g$0$23946) (make-i/o-file-protection-error . g$0$23945) (make-i/o-file-is-read-only-error . g$0$23944) (make-i/o-file-does-not-exist-error . g$0$23943) (make-i/o-file-already-exists-error . g$0$23942) (make-i/o-error . g$0$23941) (make-i/o-encoding-error . g$0$23940) (make-i/o-decoding-error . g$0$23939) (make-custom-textual-output-port . g$0$23938) (make-custom-textual-input/output-port . g$0$23937) (make-custom-textual-input-port . g$0$23936) (make-custom-binary-output-port . g$0$23935) (make-custom-binary-input/output-port . g$0$23934) (make-custom-binary-input-port . g$0$23933) (make-bytevector . g$0$23932) (lookahead-u8 . g$0$23931) (lookahead-char . g$0$23930) (i/o-write-error? . g$0$23929) (i/o-read-error? . g$0$23928) (i/o-port-error? . g$0$23927) (i/o-invalid-position-error? . g$0$23926) (i/o-filename-error? . g$0$23925) (i/o-file-protection-error? . g$0$23924) (i/o-file-is-read-only-error? . g$0$23923) (i/o-file-does-not-exist-error? . g$0$23922) (i/o-file-already-exists-error? . g$0$23921) (i/o-error? . g$0$23920) (i/o-error-port . g$0$23919) (i/o-error-filename . g$0$23918) (i/o-encoding-error? . g$0$23917) (i/o-encoding-error-char . g$0$23916) (i/o-decoding-error? . g$0$23915) (get-u8 . g$0$23914) (get-string-n! . g$0$23913) (get-string-n . g$0$23912) (get-string-all . g$0$23911) (get-line . g$0$23910) (get-datum . g$0$23909) (get-char . g$0$23908) (get-bytevector-some . g$0$23907) (get-bytevector-n! . g$0$23906) (get-bytevector-n . g$0$23905) (get-bytevector-all . g$0$23904) (flush-output-port . g$0$23903) (close-port . g$0$23902) (scheme-report-environment . g$0$23901) (quotient . g$0$23900) (null-environment . g$0$13675) (remainder . g$0$23899) (modulo . g$0$23898) (inexact->exact . g$0$23897) (force . g$0$23896) (exact->inexact . g$0$23895) (exit . g$0$23894) (command-line . g$0$23893) (string-fill! . g$0$23892) (string-set! . g$0$23891) (set-cdr! . g$0$23890) (set-car! . g$0$23889) (remove . g$0$23888) (remv . g$0$23887) (remp . g$0$23886) (remq . g$0$23885) (partition . g$0$23884) (memv . g$0$23883) (memq . g$0$23882) (memp . g$0$23881) (member . g$0$23880) (exists . g$0$23879) (for-all . g$0$23878) (fold-right . g$0$23877) (fold-left . g$0$23876) (find . g$0$23875) (filter . g$0$23874) (cons* . g$0$23873) (assv . g$0$23872) (assq . g$0$23871) (assp . g$0$23870) (assoc . g$0$23869) (call-with-string-output-port . g$0$23868) (call-with-port . g$0$23867) (call-with-bytevector-output-port . g$0$23866) (bytevector->string . g$0$23865) (buffer-mode? . g$0$23864) (binary-port? . g$0$23863) (with-exception-handler . g$0$23862) (raise-continuable . g$0$23861) (raise . g$0$23860) (eval . g$0$13681) (environment . g$0$13673) (make-enumeration . g$0$23859) (enum-set=? . g$0$23858) (enum-set-universe . g$0$23857) (enum-set-union . g$0$23856) (enum-set-subset? . g$0$23855) (enum-set-projection . g$0$23854) (enum-set-member? . g$0$23853) (enum-set-intersection . g$0$23852) (enum-set-indexer . g$0$23851) (enum-set-difference . g$0$23850) (enum-set-constructor . g$0$23849) (enum-set-complement . g$0$23848) (enum-set->list . g$0$23847) (who-condition? . g$0$23846) (warning? . g$0$23845) (violation? . g$0$23844) (undefined-violation? . g$0$23843) (syntax-violation? . g$0$23842) (syntax-violation-subform . g$0$23841) (syntax-violation-form . g$0$23840) (syntax-violation . g$0$23839) (simple-conditions . g$0$23838) (serious-condition? . g$0$23837) (non-continuable-violation? . g$0$23836) (&non-continuable . g$0$23835) (message-condition? . g$0$23834) (make-who-condition . g$0$23833) (make-warning . g$0$23832) (make-violation . g$0$23831) (make-undefined-violation . g$0$23830) (make-syntax-violation . g$0$23829) (make-serious-condition . g$0$23828) (make-non-continuable-violation . g$0$23827) (make-message-condition . g$0$23826) (make-lexical-violation . g$0$23825) (make-irritants-condition . g$0$23824) (make-implementation-restriction-violation . g$0$23823) (make-error . g$0$23822) (make-assertion-violation . g$0$23821) (lexical-violation? . g$0$23820) (irritants-condition? . g$0$23819) (implementation-restriction-violation? . g$0$23818) (&implementation-restriction . g$0$23817) (error? . g$0$23816) (condition-who . g$0$23815) (condition-predicate . g$0$23814) (condition-message . g$0$23813) (condition-irritants . g$0$23812) (condition-accessor . g$0$23811) (condition . g$0$23810) (assertion-violation? . g$0$23809) (condition? . g$0$23808) (utf32->string . g$0$23807) (utf16->string . g$0$23806) (utf8->string . g$0$23805) (uint-list->bytevector . g$0$23804) (u8-list->bytevector . g$0$23803) (string->utf8 . g$0$23802) (string->utf32 . g$0$23801) (string->utf16 . g$0$23800) (sint-list->bytevector . g$0$23799) (native-endianness . g$0$23798) (bytevector? . g$0$23797) (bytevector=? . g$0$23796) (bytevector-uint-set! . g$0$23795) (bytevector-uint-ref . g$0$23794) (bytevector-u8-set! . g$0$23793) (bytevector-u8-ref . g$0$23792) (bytevector-u64-set! . g$0$23791) (bytevector-u64-ref . g$0$23790) (bytevector-u64-native-set! . g$0$23789) (bytevector-u64-native-ref . g$0$23788) (bytevector-u32-set! . g$0$23787) (bytevector-u32-ref . g$0$23786) (bytevector-u32-native-set! . g$0$23785) (bytevector-u32-native-ref . g$0$23784) (bytevector-u16-set! . g$0$23783) (bytevector-u16-ref . g$0$23782) (bytevector-u16-native-set! . g$0$23781) (bytevector-u16-native-ref . g$0$23780) (bytevector-sint-set! . g$0$23779) (bytevector-sint-ref . g$0$23778) (bytevector-s8-set! . g$0$23777) (bytevector-s8-ref . g$0$23776) (bytevector-s64-set! . g$0$23775) (bytevector-s64-ref . g$0$23774) (bytevector-s64-native-set! . g$0$23773) (bytevector-s64-native-ref . g$0$23772) (bytevector-s32-set! . g$0$23771) (bytevector-s32-ref . g$0$23770) (bytevector-s32-native-set! . g$0$23769) (bytevector-s32-native-ref . g$0$23768) (bytevector-s16-set! . g$0$23767) (bytevector-s16-ref . g$0$23766) (bytevector-s16-native-set! . g$0$23765) (bytevector-s16-native-ref . g$0$23764) (bytevector-length . g$0$23763) (bytevector-ieee-single-ref . g$0$23762) (bytevector-ieee-single-native-set! . g$0$23761) (bytevector-ieee-single-native-ref . g$0$23760) (bytevector-ieee-double-ref . g$0$23759) (bytevector-ieee-double-native-set! . g$0$23758) (bytevector-ieee-double-native-ref . g$0$23757) (bytevector-fill! . g$0$23756) (bytevector-copy! . g$0$23755) (bytevector-copy . g$0$23754) (bytevector->uint-list . g$0$23753) (bytevector->u8-list . g$0$23752) (bytevector->sint-list . g$0$23751) (no-nans-violation? . g$0$23750) (no-infinities-violation? . g$0$23749) (make-no-nans-violation . g$0$23748) (make-no-infinities-violation . g$0$23747) (real->flonum . g$0$23746) (flzero? . g$0$23745) (fltruncate . g$0$23744) (fltan . g$0$23743) (flsqrt . g$0$23742) (flsin . g$0$23741) (flround . g$0$23740) (flpositive? . g$0$23739) (flonum? . g$0$23738) (flodd? . g$0$23737) (flnumerator . g$0$23736) (flnegative? . g$0$23735) (flnan? . g$0$23734) (flmod0 . g$0$23733) (flmod . g$0$23732) (flmin . g$0$23731) (flmax . g$0$23730) (fllog . g$0$23729) (flinteger? . g$0$23728) (flinfinite? . g$0$23727) (flfloor . g$0$23726) (flfinite? . g$0$23725) (flexpt . g$0$23724) (flexp . g$0$23723) (fleven? . g$0$23722) (fldiv0-and-mod0 . g$0$23721) (fldiv0 . g$0$23720) (fldiv-and-mod . g$0$23719) (fldiv . g$0$23718) (fldenominator . g$0$23717) (flcos . g$0$23716) (flceiling . g$0$23715) (flatan . g$0$23714) (flasin . g$0$23713) (flacos . g$0$23712) (flabs . g$0$23711) (fl>? . g$0$23710) (fl>=? . g$0$23709) (fl=? . g$0$23708) (fl<? . g$0$23707) (fl<=? . g$0$23706) (fl/ . g$0$23705) (fl- . g$0$23704) (fl+ . g$0$23703) (fl* . g$0$23702) (fixnum->flonum . g$0$23701) (fxzero? . g$0$23700) (fxxor . g$0$23699) (fxrotate-bit-field . g$0$23698) (fxreverse-bit-field . g$0$23697) (fxpositive? . g$0$23696) (fxodd? . g$0$23695) (fxnot . g$0$23694) (fxnegative? . g$0$23693) (fxmod0 . g$0$23692) (fxmod . g$0$23691) (fxmin . g$0$23690) (fxmax . g$0$23689) (fxlength . g$0$23688) (fxior . g$0$23687) (fxif . g$0$23686) (fxfirst-bit-set . g$0$23685) (fxeven? . g$0$23684) (fxdiv0-and-mod0 . g$0$23683) (fxdiv0 . g$0$23682) (fxdiv-and-mod . g$0$23681) (fxdiv . g$0$23680) (fxcopy-bit-field . g$0$23679) (fxcopy-bit . g$0$23678) (fxbit-set? . g$0$23677) (fxbit-field . g$0$23676) (fxbit-count . g$0$23675) (fxarithmetic-shift-right . g$0$23674) (fxarithmetic-shift-left . g$0$23673) (fxarithmetic-shift . g$0$23672) (fxand . g$0$23671) (fx>? . g$0$23670) (fx>=? . g$0$23669) (fx=? . g$0$23668) (fx<? . g$0$23667) (fx<=? . g$0$23666) (fx-/carry . g$0$23665) (fx- . g$0$23664) (fx+/carry . g$0$23663) (fx+ . g$0$23662) (fx*/carry . g$0$23661) (fx* . g$0$23660) (greatest-fixnum . g$0$23659) (least-fixnum . g$0$23658) (fixnum-width . g$0$23657) (fixnum? . g$0$23656) (bitwise-rotate-bit-field . g$0$23655) (bitwise-reverse-bit-field . g$0$23654) (bitwise-length . g$0$23653) (bitwise-if . g$0$23652) (bitwise-first-bit-set . g$0$23651) (bitwise-copy-bit-field . g$0$23650) (bitwise-copy-bit . g$0$23649) (bitwise-bit-set? . g$0$23648) (bitwise-bit-field . g$0$23647) (bitwise-bit-count . g$0$23646) (bitwise-xor . g$0$23645) (bitwise-ior . g$0$23644) (bitwise-and . g$0$23643) (bitwise-not . g$0$23642) (bitwise-arithmetic-shift-right . g$0$23641) (bitwise-arithmetic-shift-left . g$0$23640) (bitwise-arithmetic-shift . g$0$23639) (zero? . g$0$23638) (vector? . g$0$23637) (vector-set! . g$0$23636) (vector-ref . g$0$23635) (vector-map . g$0$23634) (vector-length . g$0$23633) (vector-for-each . g$0$23632) (vector-fill! . g$0$23631) (vector->list . g$0$23630) (vector . g$0$23629) (values . g$0$23628) (truncate . g$0$23627) (tan . g$0$23626) (symbol? . g$0$23625) (symbol=? . g$0$23624) (symbol->string . g$0$23623) (substring . g$0$23622) (string? . g$0$23621) (string>? . g$0$23620) (string>=? . g$0$23619) (string=? . g$0$23618) (string<? . g$0$23617) (string<=? . g$0$23616) (string-ref . g$0$23615) (string-length . g$0$23614) (string-for-each . g$0$23613) (string-copy . g$0$23612) (string-append . g$0$23611) (string->symbol . g$0$23610) (string->number . g$0$23609) (string->list . g$0$23608) (string . g$0$23607) (sqrt . g$0$23606) (sin . g$0$23605) (round . g$0$23604) (reverse . g$0$23603) (real? . g$0$23602) (real-valued? . g$0$23601) (real-part . g$0$23600) (rationalize . g$0$23599) (rational? . g$0$23598) (rational-valued? . g$0$23597) (procedure? . g$0$23596) (positive? . g$0$23595) (pair? . g$0$23594) (odd? . g$0$23593) (numerator . g$0$23592) (number? . g$0$23591) (number->string . g$0$23590) (null? . g$0$23589) (not . g$0$23588) (negative? . g$0$23587) (nan? . g$0$23586) (min . g$0$23585) (max . g$0$23584) (map . g$0$23583) (make-vector . g$0$23582) (make-string . g$0$23581) (make-rectangular . g$0$23580) (make-polar . g$0$23579) (magnitude . g$0$23578) (log . g$0$23577) (list? . g$0$23576) (list-tail . g$0$23575) (list-ref . g$0$23574) (list->vector . g$0$23573) (list->string . g$0$23572) (list . g$0$23571) (length . g$0$23570) (lcm . g$0$23569) (integer? . g$0$23568) (integer-valued? . g$0$23567) (integer->char . g$0$23566) (infinite? . g$0$23565) (inexact? . g$0$23564) (inexact . g$0$23563) (imag-part . g$0$23562) (gcd . g$0$23561) (for-each . g$0$23560) (floor . g$0$23559) (finite? . g$0$23558) (expt . g$0$23557) (exp . g$0$23556) (exact? . g$0$23555) (exact-integer-sqrt . g$0$23554) (exact . g$0$23553) (even? . g$0$23552) (error . g$0$23551) (eqv? . g$0$23550) (equal? . g$0$23549) (eq? . g$0$23548) (dynamic-wind . g$0$23547) (div0-and-mod0 . g$0$23546) (mod0 . g$0$23545) (div0 . g$0$23544) (div-and-mod . g$0$23543) (mod . g$0$23542) (div . g$0$23541) (denominator . g$0$23540) (cos . g$0$23539) (cons . g$0$23538) (complex? . g$0$23537) (char? . g$0$23536) (char>? . g$0$23535) (char>=? . g$0$23534) (char=? . g$0$23533) (char<? . g$0$23532) (char<=? . g$0$23531) (char->integer . g$0$23530) (ceiling . g$0$23529) (call-with-values . g$0$23528) (call/cc . g$0$23527) (call-with-current-continuation . g$0$23526) (cddddr . g$0$23525) (cdddar . g$0$23524) (cddadr . g$0$23523) (cddaar . g$0$23522) (cdaddr . g$0$23521) (cdadar . g$0$23520) (cdaadr . g$0$23519) (cdaaar . g$0$23518) (cadddr . g$0$23517) (caddar . g$0$23516) (cadadr . g$0$23515) (cadaar . g$0$23514) (caaddr . g$0$23513) (caadar . g$0$23512) (caaadr . g$0$23511) (caaaar . g$0$23510) (cdddr . g$0$23509) (cddar . g$0$23508) (cdadr . g$0$23507) (cdaar . g$0$23506) (caddr . g$0$23505) (cadar . g$0$23504) (caadr . g$0$23503) (caaar . g$0$23502) (cddr . g$0$23501) (cdar . g$0$23500) (cadr . g$0$23499) (caar . g$0$23498) (cdr . g$0$23497) (car . g$0$23496) (boolean? . g$0$23495) (boolean=? . g$0$23494) (atan . g$0$23493) (assertion-violation . g$0$23492) (asin . g$0$23491) (apply . g$0$23490) (append . g$0$23489) (angle . g$0$23488) (acos . g$0$23487) (abs . g$0$23486) (/ . g$0$23485) (* . g$0$23484) (- . g$0$23483) (+ . g$0$23482) (>= . g$0$23481) (> . g$0$23480) (= . g$0$23479) (<= . g$0$23478) (< . g$0$23477) (let*-values . g$0$23476) (&no-nans . g$0$23475) (&no-infinities . g$0$23474) (&i/o-encoding . g$0$23473) (&i/o-decoding . g$0$23472) (&i/o-port . g$0$23471) (&i/o-file-does-not-exist . g$0$23470) (&i/o-file-already-exists . g$0$23469) (&i/o-file-is-read-only . g$0$23468) (&i/o-file-protection . g$0$23467) (&i/o-filename . g$0$23466) (&i/o-invalid-position . g$0$23465) (&i/o-write . g$0$23464) (&i/o-read . g$0$23463) (&i/o . g$0$23462) (&undefined . g$0$23461) (&syntax . g$0$23460) (&lexical . g$0$23459) (&implementation . g$0$23458) (&non . g$0$23457) (&who . g$0$23456) (&irritants . g$0$23455) (&assertion . g$0$23454) (&violation . g$0$23453) (&error . g$0$23452) (&serious . g$0$23451) (&warning . g$0$23450) (&message . g$0$23449) (&condition . g$0$23448) (define-condition-type . g$0$23447) (define-enumeration . g$0$23446) (define-record-type . g$0$23445) (parent-rtd . g$0$23444) (nongenerative . g$0$23443) (opaque . g$0$23442) (sealed . g$0$23441) (protocol . g$0$23440) (parent . g$0$23439) (immutable . g$0$23438) (mutable . g$0$23437) (fields . g$0$23436) (error-handling-mode . g$0$23435) (file-options . g$0$23434) (buffer-mode . g$0$23433) (eol-style . g$0$23432) (guard . g$0$23431) (trace-define . g$0$23430) (trace-lambda . g$0$23429) (unsyntax-splicing . g$0$23428) (unsyntax . g$0$23427) (unquote-splicing . g$0$23426) (unquote . g$0$23425) (_ . g$0$23424) (else . g$0$23423) (=> . g$0$23422) (... . g$0$23421) (assert . g$0$23420) (endianness . g$0$23419) (delay . g$0$23418) (time . g$0$23417) (or . g$0$23416) (and . g$0$23415) (do . g$0$23414) (cond . g$0$23413) (let* . g$0$23412) (let . g$0$23411) (identifier-syntax . g$0$23410) (with-syntax . g$0$23409) (quasisyntax . g$0$23408) (quasiquote . g$0$23407) (syntax-rules . g$0$23406) (include . g$0$23405) (define-struct . g$0$23404) (record-constructor-descriptor . g$0$23403) (record-type-descriptor . g$0$23402) (let-values . g$0$23401) (case . g$0$23400) (parameterize . g$0$23399) (unless . g$0$23398) (when . g$0$23397) (if . g$0$23396) (letrec* . g$0$23395) (letrec . g$0$23394) (type-descriptor . g$0$23393) (case-lambda . g$0$23392) (lambda . g$0$23391) (syntax . g$0$23390) (syntax-case . g$0$23389) (quote . g$0$23388) (foreign-call . g$0$23387) (letrec-syntax . g$0$23386) (let-syntax . g$0$23385) (set! . g$0$23384) (import . g$0$23383) (begin . g$0$23382) (module . g$0$23381) (define-syntax . g$0$23380) (define . g$0$23379))) (quote ((g$0$13701 core-prim . syntax-error) (g$0$13568 core-prim . syntax-dispatch) (g$0$24088 core-prim . pretty-print) (g$0$24087 core-prim . eval-core) (g$0$24086 core-prim . set-symbol-value!) (g$0$24085 core-prim . symbol-value) (g$0$24084 core-prim . gensym) (g$0$24083 core-prim . void) (g$0$24082 core-prim . load) (g$0$24081 core-prim . interaction-environment) (g$0$24080 core-prim . char-ready?) (g$0$24079 core-prim . string-upcase) (g$0$24078 core-prim . string-titlecase) (g$0$24077 core-prim . string-normalize-nfkd) (g$0$24076 core-prim . string-normalize-nfkc) (g$0$24075 core-prim . string-normalize-nfd) (g$0$24074 core-prim . string-normalize-nfc) (g$0$24073 core-prim . string-foldcase) (g$0$24072 core-prim . string-downcase) (g$0$24071 core-prim . string-ci>?) (g$0$24070 core-prim . string-ci>=?) (g$0$24069 core-prim . string-ci=?) (g$0$24068 core-prim . string-ci<?) (g$0$24067 core-prim . string-ci<=?) (g$0$24066 core-prim . char-whitespace?) (g$0$24065 core-prim . char-upper-case?) (g$0$24064 core-prim . char-title-case?) (g$0$24063 core-prim . char-numeric?) (g$0$24062 core-prim . char-lower-case?) (g$0$24061 core-prim . char-general-category) (g$0$24060 core-prim . char-upcase) (g$0$24059 core-prim . char-titlecase) (g$0$24058 core-prim . char-foldcase) (g$0$24057 core-prim . char-downcase) (g$0$24056 core-prim . char-ci>?) (g$0$24055 core-prim . char-ci>=?) (g$0$24054 core-prim . char-ci=?) (g$0$24053 core-prim . char-ci<?) (g$0$24052 core-prim . char-ci<=?) (g$0$24051 core-prim . char-alphabetic?) (g$0$13273 core-prim . make-variable-transformer) (g$0$13703 core-prim . identifier?) (g$0$13695 core-prim . generate-temporaries) (g$0$13697 core-prim . free-identifier=?) (g$0$13707 core-prim . syntax->datum) (g$0$13705 core-prim . datum->syntax) (g$0$13699 core-prim . bound-identifier=?) (g$0$24050 core-prim . record-type-descriptor?) (g$0$24049 core-prim . record-predicate) (g$0$24048 core-prim . record-mutator) (g$0$24047 core-prim . record-constructor) (g$0$24046 core-prim . record-accessor) (g$0$24045 core-prim . make-record-type-descriptor) (g$0$24044 core-prim . make-record-constructor-descriptor) (g$0$24043 core-prim . record?) (g$0$24042 core-prim . record-type-uid) (g$0$24041 core-prim . record-type-sealed?) (g$0$24040 core-prim . record-type-parent) (g$0$24039 core-prim . record-type-opaque?) (g$0$24038 core-prim . record-type-name) (g$0$24037 core-prim . record-type-generative?) (g$0$24036 core-prim . record-type-field-names) (g$0$24035 core-prim . record-rtd) (g$0$24034 core-prim . record-field-mutable?) (g$0$24033 core-prim . delete-file) (g$0$24032 core-prim . file-exists?) (g$0$24031 core-prim . vector-sort!) (g$0$24030 core-prim . vector-sort) (g$0$24029 core-prim . list-sort) (g$0$24028 core-prim . symbol-hash) (g$0$24027 core-prim . string-ci-hash) (g$0$24026 core-prim . string-hash) (g$0$24025 core-prim . equal-hash) (g$0$24024 core-prim . hashtable-equivalence-function) (g$0$24023 core-prim . make-hashtable) (g$0$24022 core-prim . hashtable-hash-function) (g$0$24021 core-prim . make-eqv-hashtable) (g$0$24020 core-prim . make-eq-hashtable) (g$0$24019 core-prim . hashtable?) (g$0$24018 core-prim . hashtable-update!) (g$0$24017 core-prim . hashtable-size) (g$0$24016 core-prim . hashtable-set!) (g$0$24015 core-prim . hashtable-ref) (g$0$24014 core-prim . hashtable-mutable?) (g$0$24013 core-prim . hashtable-keys) (g$0$24012 core-prim . hashtable-entries) (g$0$24011 core-prim . hashtable-delete!) (g$0$24010 core-prim . hashtable-copy) (g$0$24009 core-prim . hashtable-contains?) (g$0$24008 core-prim . hashtable-clear!) (g$0$24007 core-prim . call-with-output-file) (g$0$24006 core-prim . call-with-input-file) (g$0$24005 core-prim . write-char) (g$0$24004 core-prim . write) (g$0$24003 core-prim . with-output-to-file) (g$0$24002 core-prim . with-input-from-file) (g$0$24001 core-prim . read-char) (g$0$24000 core-prim . read) (g$0$23999 core-prim . peek-char) (g$0$23998 core-prim . open-output-file) (g$0$23997 core-prim . open-input-file) (g$0$23996 core-prim . newline) (g$0$23995 core-prim . display) (g$0$23994 core-prim . close-output-port) (g$0$23993 core-prim . close-input-port) (g$0$23992 core-prim . eof-object?) (g$0$23991 core-prim . eof-object) (g$0$23990 core-prim . current-error-port) (g$0$23989 core-prim . current-output-port) (g$0$23988 core-prim . current-input-port) (g$0$23987 core-prim . output-port?) (g$0$23986 core-prim . input-port?) (g$0$23985 core-prim . utf-8-codec) (g$0$23984 core-prim . utf-16-codec) (g$0$23983 core-prim . transcoder-error-handling-mode) (g$0$23982 core-prim . transcoder-eol-style) (g$0$23981 core-prim . transcoder-codec) (g$0$23980 core-prim . transcoded-port) (g$0$23979 core-prim . textual-port?) (g$0$23978 core-prim . string->bytevector) (g$0$23977 core-prim . standard-output-port) (g$0$23976 core-prim . standard-input-port) (g$0$23975 core-prim . standard-error-port) (g$0$23974 core-prim . set-port-position!) (g$0$23973 core-prim . put-u8) (g$0$23972 core-prim . put-string) (g$0$23971 core-prim . put-datum) (g$0$23970 core-prim . put-char) (g$0$23969 core-prim . put-bytevector) (g$0$23968 core-prim . port?) (g$0$23967 core-prim . port-transcoder) (g$0$23966 core-prim . port-position) (g$0$23965 core-prim . port-has-set-port-position!?) (g$0$23964 core-prim . port-has-port-position?) (g$0$23963 core-prim . port-eof?) (g$0$23962 core-prim . output-port-buffer-mode) (g$0$23961 core-prim . open-string-output-port) (g$0$23960 core-prim . open-string-input-port) (g$0$23959 core-prim . open-file-output-port) (g$0$23958 core-prim . open-file-input/output-port) (g$0$23957 core-prim . open-file-input-port) (g$0$23956 core-prim . open-bytevector-output-port) (g$0$23955 core-prim . open-bytevector-input-port) (g$0$23954 core-prim . native-transcoder) (g$0$23953 core-prim . native-eol-style) (g$0$23952 core-prim . make-transcoder) (g$0$23951 core-prim . latin-1-codec) (g$0$23950 core-prim . make-i/o-write-error) (g$0$23949 core-prim . make-i/o-read-error) (g$0$23948 core-prim . make-i/o-port-error) (g$0$23947 core-prim . make-i/o-invalid-position-error) (g$0$23946 core-prim . make-i/o-filename-error) (g$0$23945 core-prim . make-i/o-file-protection-error) (g$0$23944 core-prim . make-i/o-file-is-read-only-error) (g$0$23943 core-prim . make-i/o-file-does-not-exist-error) (g$0$23942 core-prim . make-i/o-file-already-exists-error) (g$0$23941 core-prim . make-i/o-error) (g$0$23940 core-prim . make-i/o-encoding-error) (g$0$23939 core-prim . make-i/o-decoding-error) (g$0$23938 core-prim . make-custom-textual-output-port) (g$0$23937 core-prim . make-custom-textual-input/output-port) (g$0$23936 core-prim . make-custom-textual-input-port) (g$0$23935 core-prim . make-custom-binary-output-port) (g$0$23934 core-prim . make-custom-binary-input/output-port) (g$0$23933 core-prim . make-custom-binary-input-port) (g$0$23932 core-prim . make-bytevector) (g$0$23931 core-prim . lookahead-u8) (g$0$23930 core-prim . lookahead-char) (g$0$23929 core-prim . i/o-write-error?) (g$0$23928 core-prim . i/o-read-error?) (g$0$23927 core-prim . i/o-port-error?) (g$0$23926 core-prim . i/o-invalid-position-error?) (g$0$23925 core-prim . i/o-filename-error?) (g$0$23924 core-prim . i/o-file-protection-error?) (g$0$23923 core-prim . i/o-file-is-read-only-error?) (g$0$23922 core-prim . i/o-file-does-not-exist-error?) (g$0$23921 core-prim . i/o-file-already-exists-error?) (g$0$23920 core-prim . i/o-error?) (g$0$23919 core-prim . i/o-error-port) (g$0$23918 core-prim . i/o-error-filename) (g$0$23917 core-prim . i/o-encoding-error?) (g$0$23916 core-prim . i/o-encoding-error-char) (g$0$23915 core-prim . i/o-decoding-error?) (g$0$23914 core-prim . get-u8) (g$0$23913 core-prim . get-string-n!) (g$0$23912 core-prim . get-string-n) (g$0$23911 core-prim . get-string-all) (g$0$23910 core-prim . get-line) (g$0$23909 core-prim . get-datum) (g$0$23908 core-prim . get-char) (g$0$23907 core-prim . get-bytevector-some) (g$0$23906 core-prim . get-bytevector-n!) (g$0$23905 core-prim . get-bytevector-n) (g$0$23904 core-prim . get-bytevector-all) (g$0$23903 core-prim . flush-output-port) (g$0$23902 core-prim . close-port) (g$0$23901 core-prim . scheme-report-environment) (g$0$23900 core-prim . quotient) (g$0$13675 core-prim . null-environment) (g$0$23899 core-prim . remainder) (g$0$23898 core-prim . modulo) (g$0$23897 core-prim . inexact->exact) (g$0$23896 core-prim . force) (g$0$23895 core-prim . exact->inexact) (g$0$23894 core-prim . exit) (g$0$23893 core-prim . command-line) (g$0$23892 core-prim . string-fill!) (g$0$23891 core-prim . string-set!) (g$0$23890 core-prim . set-cdr!) (g$0$23889 core-prim . set-car!) (g$0$23888 core-prim . remove) (g$0$23887 core-prim . remv) (g$0$23886 core-prim . remp) (g$0$23885 core-prim . remq) (g$0$23884 core-prim . partition) (g$0$23883 core-prim . memv) (g$0$23882 core-prim . memq) (g$0$23881 core-prim . memp) (g$0$23880 core-prim . member) (g$0$23879 core-prim . exists) (g$0$23878 core-prim . for-all) (g$0$23877 core-prim . fold-right) (g$0$23876 core-prim . fold-left) (g$0$23875 core-prim . find) (g$0$23874 core-prim . filter) (g$0$23873 core-prim . cons*) (g$0$23872 core-prim . assv) (g$0$23871 core-prim . assq) (g$0$23870 core-prim . assp) (g$0$23869 core-prim . assoc) (g$0$23868 core-prim . call-with-string-output-port) (g$0$23867 core-prim . call-with-port) (g$0$23866 core-prim . call-with-bytevector-output-port) (g$0$23865 core-prim . bytevector->string) (g$0$23864 core-prim . buffer-mode?) (g$0$23863 core-prim . binary-port?) (g$0$23862 core-prim . with-exception-handler) (g$0$23861 core-prim . raise-continuable) (g$0$23860 core-prim . raise) (g$0$13681 core-prim . eval) (g$0$13673 core-prim . environment) (g$0$23859 core-prim . make-enumeration) (g$0$23858 core-prim . enum-set=?) (g$0$23857 core-prim . enum-set-universe) (g$0$23856 core-prim . enum-set-union) (g$0$23855 core-prim . enum-set-subset?) (g$0$23854 core-prim . enum-set-projection) (g$0$23853 core-prim . enum-set-member?) (g$0$23852 core-prim . enum-set-intersection) (g$0$23851 core-prim . enum-set-indexer) (g$0$23850 core-prim . enum-set-difference) (g$0$23849 core-prim . enum-set-constructor) (g$0$23848 core-prim . enum-set-complement) (g$0$23847 core-prim . enum-set->list) (g$0$23846 core-prim . who-condition?) (g$0$23845 core-prim . warning?) (g$0$23844 core-prim . violation?) (g$0$23843 core-prim . undefined-violation?) (g$0$23842 core-prim . syntax-violation?) (g$0$23841 core-prim . syntax-violation-subform) (g$0$23840 core-prim . syntax-violation-form) (g$0$23839 core-prim . syntax-violation) (g$0$23838 core-prim . simple-conditions) (g$0$23837 core-prim . serious-condition?) (g$0$23836 core-prim . non-continuable-violation?) (g$0$23835 core-prim . &non-continuable) (g$0$23834 core-prim . message-condition?) (g$0$23833 core-prim . make-who-condition) (g$0$23832 core-prim . make-warning) (g$0$23831 core-prim . make-violation) (g$0$23830 core-prim . make-undefined-violation) (g$0$23829 core-prim . make-syntax-violation) (g$0$23828 core-prim . make-serious-condition) (g$0$23827 core-prim . make-non-continuable-violation) (g$0$23826 core-prim . make-message-condition) (g$0$23825 core-prim . make-lexical-violation) (g$0$23824 core-prim . make-irritants-condition) (g$0$23823 core-prim . make-implementation-restriction-violation) (g$0$23822 core-prim . make-error) (g$0$23821 core-prim . make-assertion-violation) (g$0$23820 core-prim . lexical-violation?) (g$0$23819 core-prim . irritants-condition?) (g$0$23818 core-prim . implementation-restriction-violation?) (g$0$23817 core-prim . &implementation-restriction) (g$0$23816 core-prim . error?) (g$0$23815 core-prim . condition-who) (g$0$23814 core-prim . condition-predicate) (g$0$23813 core-prim . condition-message) (g$0$23812 core-prim . condition-irritants) (g$0$23811 core-prim . condition-accessor) (g$0$23810 core-prim . condition) (g$0$23809 core-prim . assertion-violation?) (g$0$23808 core-prim . condition?) (g$0$23807 core-prim . utf32->string) (g$0$23806 core-prim . utf16->string) (g$0$23805 core-prim . utf8->string) (g$0$23804 core-prim . uint-list->bytevector) (g$0$23803 core-prim . u8-list->bytevector) (g$0$23802 core-prim . string->utf8) (g$0$23801 core-prim . string->utf32) (g$0$23800 core-prim . string->utf16) (g$0$23799 core-prim . sint-list->bytevector) (g$0$23798 core-prim . native-endianness) (g$0$23797 core-prim . bytevector?) (g$0$23796 core-prim . bytevector=?) (g$0$23795 core-prim . bytevector-uint-set!) (g$0$23794 core-prim . bytevector-uint-ref) (g$0$23793 core-prim . bytevector-u8-set!) (g$0$23792 core-prim . bytevector-u8-ref) (g$0$23791 core-prim . bytevector-u64-set!) (g$0$23790 core-prim . bytevector-u64-ref) (g$0$23789 core-prim . bytevector-u64-native-set!) (g$0$23788 core-prim . bytevector-u64-native-ref) (g$0$23787 core-prim . bytevector-u32-set!) (g$0$23786 core-prim . bytevector-u32-ref) (g$0$23785 core-prim . bytevector-u32-native-set!) (g$0$23784 core-prim . bytevector-u32-native-ref) (g$0$23783 core-prim . bytevector-u16-set!) (g$0$23782 core-prim . bytevector-u16-ref) (g$0$23781 core-prim . bytevector-u16-native-set!) (g$0$23780 core-prim . bytevector-u16-native-ref) (g$0$23779 core-prim . bytevector-sint-set!) (g$0$23778 core-prim . bytevector-sint-ref) (g$0$23777 core-prim . bytevector-s8-set!) (g$0$23776 core-prim . bytevector-s8-ref) (g$0$23775 core-prim . bytevector-s64-set!) (g$0$23774 core-prim . bytevector-s64-ref) (g$0$23773 core-prim . bytevector-s64-native-set!) (g$0$23772 core-prim . bytevector-s64-native-ref) (g$0$23771 core-prim . bytevector-s32-set!) (g$0$23770 core-prim . bytevector-s32-ref) (g$0$23769 core-prim . bytevector-s32-native-set!) (g$0$23768 core-prim . bytevector-s32-native-ref) (g$0$23767 core-prim . bytevector-s16-set!) (g$0$23766 core-prim . bytevector-s16-ref) (g$0$23765 core-prim . bytevector-s16-native-set!) (g$0$23764 core-prim . bytevector-s16-native-ref) (g$0$23763 core-prim . bytevector-length) (g$0$23762 core-prim . bytevector-ieee-single-ref) (g$0$23761 core-prim . bytevector-ieee-single-native-set!) (g$0$23760 core-prim . bytevector-ieee-single-native-ref) (g$0$23759 core-prim . bytevector-ieee-double-ref) (g$0$23758 core-prim . bytevector-ieee-double-native-set!) (g$0$23757 core-prim . bytevector-ieee-double-native-ref) (g$0$23756 core-prim . bytevector-fill!) (g$0$23755 core-prim . bytevector-copy!) (g$0$23754 core-prim . bytevector-copy) (g$0$23753 core-prim . bytevector->uint-list) (g$0$23752 core-prim . bytevector->u8-list) (g$0$23751 core-prim . bytevector->sint-list) (g$0$23750 core-prim . no-nans-violation?) (g$0$23749 core-prim . no-infinities-violation?) (g$0$23748 core-prim . make-no-nans-violation) (g$0$23747 core-prim . make-no-infinities-violation) (g$0$23746 core-prim . real->flonum) (g$0$23745 core-prim . flzero?) (g$0$23744 core-prim . fltruncate) (g$0$23743 core-prim . fltan) (g$0$23742 core-prim . flsqrt) (g$0$23741 core-prim . flsin) (g$0$23740 core-prim . flround) (g$0$23739 core-prim . flpositive?) (g$0$23738 core-prim . flonum?) (g$0$23737 core-prim . flodd?) (g$0$23736 core-prim . flnumerator) (g$0$23735 core-prim . flnegative?) (g$0$23734 core-prim . flnan?) (g$0$23733 core-prim . flmod0) (g$0$23732 core-prim . flmod) (g$0$23731 core-prim . flmin) (g$0$23730 core-prim . flmax) (g$0$23729 core-prim . fllog) (g$0$23728 core-prim . flinteger?) (g$0$23727 core-prim . flinfinite?) (g$0$23726 core-prim . flfloor) (g$0$23725 core-prim . flfinite?) (g$0$23724 core-prim . flexpt) (g$0$23723 core-prim . flexp) (g$0$23722 core-prim . fleven?) (g$0$23721 core-prim . fldiv0-and-mod0) (g$0$23720 core-prim . fldiv0) (g$0$23719 core-prim . fldiv-and-mod) (g$0$23718 core-prim . fldiv) (g$0$23717 core-prim . fldenominator) (g$0$23716 core-prim . flcos) (g$0$23715 core-prim . flceiling) (g$0$23714 core-prim . flatan) (g$0$23713 core-prim . flasin) (g$0$23712 core-prim . flacos) (g$0$23711 core-prim . flabs) (g$0$23710 core-prim . fl>?) (g$0$23709 core-prim . fl>=?) (g$0$23708 core-prim . fl=?) (g$0$23707 core-prim . fl<?) (g$0$23706 core-prim . fl<=?) (g$0$23705 core-prim . fl/) (g$0$23704 core-prim . fl-) (g$0$23703 core-prim . fl+) (g$0$23702 core-prim . fl*) (g$0$23701 core-prim . fixnum->flonum) (g$0$23700 core-prim . fxzero?) (g$0$23699 core-prim . fxxor) (g$0$23698 core-prim . fxrotate-bit-field) (g$0$23697 core-prim . fxreverse-bit-field) (g$0$23696 core-prim . fxpositive?) (g$0$23695 core-prim . fxodd?) (g$0$23694 core-prim . fxnot) (g$0$23693 core-prim . fxnegative?) (g$0$23692 core-prim . fxmod0) (g$0$23691 core-prim . fxmod) (g$0$23690 core-prim . fxmin) (g$0$23689 core-prim . fxmax) (g$0$23688 core-prim . fxlength) (g$0$23687 core-prim . fxior) (g$0$23686 core-prim . fxif) (g$0$23685 core-prim . fxfirst-bit-set) (g$0$23684 core-prim . fxeven?) (g$0$23683 core-prim . fxdiv0-and-mod0) (g$0$23682 core-prim . fxdiv0) (g$0$23681 core-prim . fxdiv-and-mod) (g$0$23680 core-prim . fxdiv) (g$0$23679 core-prim . fxcopy-bit-field) (g$0$23678 core-prim . fxcopy-bit) (g$0$23677 core-prim . fxbit-set?) (g$0$23676 core-prim . fxbit-field) (g$0$23675 core-prim . fxbit-count) (g$0$23674 core-prim . fxarithmetic-shift-right) (g$0$23673 core-prim . fxarithmetic-shift-left) (g$0$23672 core-prim . fxarithmetic-shift) (g$0$23671 core-prim . fxand) (g$0$23670 core-prim . fx>?) (g$0$23669 core-prim . fx>=?) (g$0$23668 core-prim . fx=?) (g$0$23667 core-prim . fx<?) (g$0$23666 core-prim . fx<=?) (g$0$23665 core-prim . fx-/carry) (g$0$23664 core-prim . fx-) (g$0$23663 core-prim . fx+/carry) (g$0$23662 core-prim . fx+) (g$0$23661 core-prim . fx*/carry) (g$0$23660 core-prim . fx*) (g$0$23659 core-prim . greatest-fixnum) (g$0$23658 core-prim . least-fixnum) (g$0$23657 core-prim . fixnum-width) (g$0$23656 core-prim . fixnum?) (g$0$23655 core-prim . bitwise-rotate-bit-field) (g$0$23654 core-prim . bitwise-reverse-bit-field) (g$0$23653 core-prim . bitwise-length) (g$0$23652 core-prim . bitwise-if) (g$0$23651 core-prim . bitwise-first-bit-set) (g$0$23650 core-prim . bitwise-copy-bit-field) (g$0$23649 core-prim . bitwise-copy-bit) (g$0$23648 core-prim . bitwise-bit-set?) (g$0$23647 core-prim . bitwise-bit-field) (g$0$23646 core-prim . bitwise-bit-count) (g$0$23645 core-prim . bitwise-xor) (g$0$23644 core-prim . bitwise-ior) (g$0$23643 core-prim . bitwise-and) (g$0$23642 core-prim . bitwise-not) (g$0$23641 core-prim . bitwise-arithmetic-shift-right) (g$0$23640 core-prim . bitwise-arithmetic-shift-left) (g$0$23639 core-prim . bitwise-arithmetic-shift) (g$0$23638 core-prim . zero?) (g$0$23637 core-prim . vector?) (g$0$23636 core-prim . vector-set!) (g$0$23635 core-prim . vector-ref) (g$0$23634 core-prim . vector-map) (g$0$23633 core-prim . vector-length) (g$0$23632 core-prim . vector-for-each) (g$0$23631 core-prim . vector-fill!) (g$0$23630 core-prim . vector->list) (g$0$23629 core-prim . vector) (g$0$23628 core-prim . values) (g$0$23627 core-prim . truncate) (g$0$23626 core-prim . tan) (g$0$23625 core-prim . symbol?) (g$0$23624 core-prim . symbol=?) (g$0$23623 core-prim . symbol->string) (g$0$23622 core-prim . substring) (g$0$23621 core-prim . string?) (g$0$23620 core-prim . string>?) (g$0$23619 core-prim . string>=?) (g$0$23618 core-prim . string=?) (g$0$23617 core-prim . string<?) (g$0$23616 core-prim . string<=?) (g$0$23615 core-prim . string-ref) (g$0$23614 core-prim . string-length) (g$0$23613 core-prim . string-for-each) (g$0$23612 core-prim . string-copy) (g$0$23611 core-prim . string-append) (g$0$23610 core-prim . string->symbol) (g$0$23609 core-prim . string->number) (g$0$23608 core-prim . string->list) (g$0$23607 core-prim . string) (g$0$23606 core-prim . sqrt) (g$0$23605 core-prim . sin) (g$0$23604 core-prim . round) (g$0$23603 core-prim . reverse) (g$0$23602 core-prim . real?) (g$0$23601 core-prim . real-valued?) (g$0$23600 core-prim . real-part) (g$0$23599 core-prim . rationalize) (g$0$23598 core-prim . rational?) (g$0$23597 core-prim . rational-valued?) (g$0$23596 core-prim . procedure?) (g$0$23595 core-prim . positive?) (g$0$23594 core-prim . pair?) (g$0$23593 core-prim . odd?) (g$0$23592 core-prim . numerator) (g$0$23591 core-prim . number?) (g$0$23590 core-prim . number->string) (g$0$23589 core-prim . null?) (g$0$23588 core-prim . not) (g$0$23587 core-prim . negative?) (g$0$23586 core-prim . nan?) (g$0$23585 core-prim . min) (g$0$23584 core-prim . max) (g$0$23583 core-prim . map) (g$0$23582 core-prim . make-vector) (g$0$23581 core-prim . make-string) (g$0$23580 core-prim . make-rectangular) (g$0$23579 core-prim . make-polar) (g$0$23578 core-prim . magnitude) (g$0$23577 core-prim . log) (g$0$23576 core-prim . list?) (g$0$23575 core-prim . list-tail) (g$0$23574 core-prim . list-ref) (g$0$23573 core-prim . list->vector) (g$0$23572 core-prim . list->string) (g$0$23571 core-prim . list) (g$0$23570 core-prim . length) (g$0$23569 core-prim . lcm) (g$0$23568 core-prim . integer?) (g$0$23567 core-prim . integer-valued?) (g$0$23566 core-prim . integer->char) (g$0$23565 core-prim . infinite?) (g$0$23564 core-prim . inexact?) (g$0$23563 core-prim . inexact) (g$0$23562 core-prim . imag-part) (g$0$23561 core-prim . gcd) (g$0$23560 core-prim . for-each) (g$0$23559 core-prim . floor) (g$0$23558 core-prim . finite?) (g$0$23557 core-prim . expt) (g$0$23556 core-prim . exp) (g$0$23555 core-prim . exact?) (g$0$23554 core-prim . exact-integer-sqrt) (g$0$23553 core-prim . exact) (g$0$23552 core-prim . even?) (g$0$23551 core-prim . error) (g$0$23550 core-prim . eqv?) (g$0$23549 core-prim . equal?) (g$0$23548 core-prim . eq?) (g$0$23547 core-prim . dynamic-wind) (g$0$23546 core-prim . div0-and-mod0) (g$0$23545 core-prim . mod0) (g$0$23544 core-prim . div0) (g$0$23543 core-prim . div-and-mod) (g$0$23542 core-prim . mod) (g$0$23541 core-prim . div) (g$0$23540 core-prim . denominator) (g$0$23539 core-prim . cos) (g$0$23538 core-prim . cons) (g$0$23537 core-prim . complex?) (g$0$23536 core-prim . char?) (g$0$23535 core-prim . char>?) (g$0$23534 core-prim . char>=?) (g$0$23533 core-prim . char=?) (g$0$23532 core-prim . char<?) (g$0$23531 core-prim . char<=?) (g$0$23530 core-prim . char->integer) (g$0$23529 core-prim . ceiling) (g$0$23528 core-prim . call-with-values) (g$0$23527 core-prim . call/cc) (g$0$23526 core-prim . call-with-current-continuation) (g$0$23525 core-prim . cddddr) (g$0$23524 core-prim . cdddar) (g$0$23523 core-prim . cddadr) (g$0$23522 core-prim . cddaar) (g$0$23521 core-prim . cdaddr) (g$0$23520 core-prim . cdadar) (g$0$23519 core-prim . cdaadr) (g$0$23518 core-prim . cdaaar) (g$0$23517 core-prim . cadddr) (g$0$23516 core-prim . caddar) (g$0$23515 core-prim . cadadr) (g$0$23514 core-prim . cadaar) (g$0$23513 core-prim . caaddr) (g$0$23512 core-prim . caadar) (g$0$23511 core-prim . caaadr) (g$0$23510 core-prim . caaaar) (g$0$23509 core-prim . cdddr) (g$0$23508 core-prim . cddar) (g$0$23507 core-prim . cdadr) (g$0$23506 core-prim . cdaar) (g$0$23505 core-prim . caddr) (g$0$23504 core-prim . cadar) (g$0$23503 core-prim . caadr) (g$0$23502 core-prim . caaar) (g$0$23501 core-prim . cddr) (g$0$23500 core-prim . cdar) (g$0$23499 core-prim . cadr) (g$0$23498 core-prim . caar) (g$0$23497 core-prim . cdr) (g$0$23496 core-prim . car) (g$0$23495 core-prim . boolean?) (g$0$23494 core-prim . boolean=?) (g$0$23493 core-prim . atan) (g$0$23492 core-prim . assertion-violation) (g$0$23491 core-prim . asin) (g$0$23490 core-prim . apply) (g$0$23489 core-prim . append) (g$0$23488 core-prim . angle) (g$0$23487 core-prim . acos) (g$0$23486 core-prim . abs) (g$0$23485 core-prim . /) (g$0$23484 core-prim . *) (g$0$23483 core-prim . -) (g$0$23482 core-prim . +) (g$0$23481 core-prim . >=) (g$0$23480 core-prim . >) (g$0$23479 core-prim . =) (g$0$23478 core-prim . <=) (g$0$23477 core-prim . <) (g$0$23476 core-prim . let*-values) (g$0$23475 $core-rtd &no-nans-rtd &no-nans-rcd) (g$0$23474 $core-rtd &no-infinities-rtd &no-infinities-rcd) (g$0$23473 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g$0$23472 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g$0$23471 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g$0$23470 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g$0$23469 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g$0$23468 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g$0$23467 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g$0$23466 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g$0$23465 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g$0$23464 $core-rtd &i/o-write-rtd &i/o-write-rcd) (g$0$23463 $core-rtd &i/o-read-rtd &i/o-read-rcd) (g$0$23462 $core-rtd &i/o-rtd &i/o-rcd) (g$0$23461 $core-rtd &undefined-rtd &undefined-rcd) (g$0$23460 $core-rtd &syntax-rtd &syntax-rcd) (g$0$23459 $core-rtd &lexical-rtd &lexical-rcd) (g$0$23458 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g$0$23457 $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$0$23456 $core-rtd &who-rtd &who-rcd) (g$0$23455 $core-rtd &irritants-rtd &irritants-rcd) (g$0$23454 $core-rtd &assertion-rtd &assertion-rcd) (g$0$23453 $core-rtd &violation-rtd &violation-rcd) (g$0$23452 $core-rtd &error-rtd &error-rcd) (g$0$23451 $core-rtd &serious-rtd &serious-rcd) (g$0$23450 $core-rtd &warning-rtd &warning-rcd) (g$0$23449 $core-rtd &message-rtd &message-rcd) (g$0$23448 $core-rtd &condition-rtd &condition-rcd) (g$0$23447 macro . define-condition-type) (g$0$23446 macro . define-enumeration) (g$0$23445 macro . define-record-type) (g$0$23444 macro . parent-rtd) (g$0$23443 macro . nongenerative) (g$0$23442 macro . opaque) (g$0$23441 macro . sealed) (g$0$23440 macro . protocol) (g$0$23439 macro . parent) (g$0$23438 macro . immutable) (g$0$23437 macro . mutable) (g$0$23436 macro . fields) (g$0$23435 macro . error-handling-mode) (g$0$23434 macro . file-options) (g$0$23433 macro . buffer-mode) (g$0$23432 macro . eol-style) (g$0$23431 macro . guard) (g$0$23430 macro . trace-define) (g$0$23429 macro . trace-lambda) (g$0$23428 macro . unsyntax-splicing) (g$0$23427 macro . unsyntax) (g$0$23426 macro . unquote-splicing) (g$0$23425 macro . unquote) (g$0$23424 macro . _) (g$0$23423 macro . else) (g$0$23422 macro . =>) (g$0$23421 macro . ...) (g$0$23420 macro . assert) (g$0$23419 macro . endianness) (g$0$23418 macro . delay) (g$0$23417 macro . time) (g$0$23416 macro . or) (g$0$23415 macro . and) (g$0$23414 macro . do) (g$0$23413 macro . cond) (g$0$23412 macro . let*) (g$0$23411 macro . let) (g$0$23410 macro . identifier-syntax) (g$0$23409 macro . with-syntax) (g$0$23408 macro . quasisyntax) (g$0$23407 macro . quasiquote) (g$0$23406 macro . syntax-rules) (g$0$23405 macro . include) (g$0$23404 macro . define-struct) (g$0$23403 core-macro . record-constructor-descriptor) (g$0$23402 core-macro . record-type-descriptor) (g$0$23401 core-macro . let-values) (g$0$23400 core-macro . case) (g$0$23399 core-macro . parameterize) (g$0$23398 core-macro . unless) (g$0$23397 core-macro . when) (g$0$23396 core-macro . if) (g$0$23395 core-macro . letrec*) (g$0$23394 core-macro . letrec) (g$0$23393 core-macro . type-descriptor) (g$0$23392 core-macro . case-lambda) (g$0$23391 core-macro . lambda) (g$0$23390 core-macro . syntax) (g$0$23389 core-macro . syntax-case) (g$0$23388 core-macro . quote) (g$0$23387 core-macro . foreign-call) (g$0$23386 letrec-syntax) (g$0$23385 let-syntax) (g$0$23384 set!) (g$0$23383 import) (g$0$23382 begin) (g$0$23381 module) (g$0$23380 define-syntax) (g$0$23379 define))) values values (quote #f)) (g$0$12834 (quote g$0$24121) (quote (psyntax system $bootstrap)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((pretty-print . g$0$24088) (eval-core . g$0$24087) (set-symbol-value! . g$0$24086) (symbol-value . g$0$24085) (gensym . g$0$24084) (void . g$0$24083))) (quote ()) values values (quote #f)))


(begin (define g$0$23377 (quote #f)) ((lambda (g$0$23362) (begin (set! g$0$23362 (lambda (g$0$23370) ((lambda (g$0$23372) (g$0$23171 g$0$23372)) (with-input-from-file g$0$23370 (lambda () (letrec ((g$0$23374 (lambda () ((lambda (g$0$23376) (if (eof-object? g$0$23376) (quote ()) (cons g$0$23376 (g$0$23374)))) (read))))) (g$0$23374))))))) (begin (set! g$0$23377 g$0$23362) (display (quote "r6rs psyntax ready\n")) ((lambda (g$0$23364) (begin (if (= (length g$0$23364) (quote 2)) (void) (begin (display (quote "provide a script name argument\n")) (exit (quote 17)))) ((lambda (g$0$23367 g$0$23368) (g$0$23362 (car g$0$23368))) (car g$0$23364) (cdr g$0$23364)))) (command-line)) (exit (quote 0))))) (quote #f)))


