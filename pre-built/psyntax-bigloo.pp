;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define g$0$12318 (quote #f)) (define g$0$12315 (quote #f)) ((lambda (g$0$12208 g$0$12295) (begin (set! g$0$12208 (lambda g$0$12311 ((lambda (g$0$12312) (if (= g$0$12312 (quote 1)) (apply (lambda (g$0$12297) (g$0$12208 g$0$12297 (lambda (g$0$12299) g$0$12299))) g$0$12311) (if (= g$0$12312 (quote 2)) (apply (lambda (g$0$12301 g$0$12302) (begin (if (procedure? g$0$12302) (void) (error (quote assert) (quote "assertion failed") (quote (procedure? fender)))) ((lambda (g$0$12305) (lambda g$0$12309 ((lambda (g$0$12310) (if (= g$0$12310 (quote 0)) (apply (lambda () g$0$12305) g$0$12309) (if (= g$0$12310 (quote 1)) (apply (lambda (g$0$12307) (set! g$0$12305 (g$0$12302 g$0$12307))) g$0$12309) (error (quote apply) (quote "invalid arg count"))))) (length g$0$12309)))) (g$0$12302 g$0$12301)))) g$0$12311) (error (quote apply) (quote "invalid arg count"))))) (length g$0$12311)))) (set! g$0$12295 (lambda (g$0$12313) (error (quote file-options-spec) (quote "not implemented")))) (begin (set! g$0$12315 g$0$12295) (set! g$0$12318 g$0$12208)))) (quote #f) (quote #f)))


(begin (define g$0$12396 (quote #f)) (define g$0$12395 (quote #f)) (define g$0$12394 (quote #f)) (define g$0$12393 (quote #f)) (define g$0$12392 (quote #f)) (define g$0$12391 (quote #f)) ((lambda (g$0$12320 g$0$12322 g$0$12324 g$0$12326 g$0$12328 g$0$12330) (begin (set! g$0$12320 (g$0$12318 (lambda (g$0$12332) (quote #f)) (lambda (g$0$12334) (begin (if (procedure? g$0$12334) (void) (error (quote assert) (quote "assertion failed") (quote (procedure? p)))) g$0$12334)))) (set! g$0$12322 (lambda (g$0$12336) ((lambda (g$0$12338) (begin (set! g$0$12338 (lambda (g$0$12340) ((lambda (g$0$12342) (if g$0$12342 g$0$12342 ((lambda (g$0$12344) (if g$0$12344 g$0$12344 ((lambda (g$0$12346) (if g$0$12346 g$0$12346 ((lambda (g$0$12348) (if g$0$12348 g$0$12348 (begin (quote #f) (number? g$0$12340)))) (boolean? g$0$12340)))) (symbol? g$0$12340)))) (char? g$0$12340)))) (null? g$0$12340)))) (not (g$0$12338 g$0$12336)))) (quote #f)))) (set! g$0$12324 (lambda (g$0$12350) ((lambda (g$0$12352) (begin (set! g$0$12352 (lambda (g$0$12354) (if (pair? g$0$12354) ((lambda (g$0$12356) (if (memv g$0$12356 (quote (quote))) (if (if g$0$12350 (begin (quote #f) (g$0$12322 (cadr g$0$12354))) (quote #f)) ((lambda (g$0$12381) (begin (set-symbol-value! g$0$12381 (cadr g$0$12354)) g$0$12381)) (gensym)) g$0$12354) (if (memv g$0$12356 (quote (case-lambda))) (cons (quote case-lambda) (map (lambda (g$0$12379) (cons (car g$0$12379) (map g$0$12352 (cdr g$0$12379)))) (cdr g$0$12354))) (if (memv g$0$12356 (quote (lambda))) (cons* (quote lambda) (cadr g$0$12354) (map g$0$12352 (cddr g$0$12354))) (if (memv g$0$12356 (quote (letrec))) ((lambda (g$0$12371 g$0$12372) ((lambda (g$0$12375 g$0$12376) (cons* (quote letrec) (map list g$0$12375 (map g$0$12352 g$0$12376)) (map g$0$12352 g$0$12372))) (map car g$0$12371) (map cadr g$0$12371))) (cadr g$0$12354) (cddr g$0$12354)) (if (memv g$0$12356 (quote (letrec*))) ((lambda (g$0$12363 g$0$12364) ((lambda (g$0$12367 g$0$12368) (cons* (quote letrec*) (map list g$0$12367 (map g$0$12352 g$0$12368)) (map g$0$12352 g$0$12364))) (map car g$0$12363) (map cadr g$0$12363))) (cadr g$0$12354) (cddr g$0$12354)) (if (memv g$0$12356 (quote (begin))) (cons (quote begin) (map g$0$12352 (cdr g$0$12354))) (if (memv g$0$12356 (quote (set!))) (list (quote set!) (cadr g$0$12354) (g$0$12352 (caddr g$0$12354))) (if (memv g$0$12356 (quote (primitive))) ((lambda (g$0$12357) ((lambda (g$0$12359) (if g$0$12359 ((lambda (g$0$12361) g$0$12361) g$0$12359) g$0$12357)) ((g$0$12320) g$0$12357))) (cadr g$0$12354)) (if (memv g$0$12356 (quote (define))) g$0$12354 (if (list? g$0$12354) (map g$0$12352 g$0$12354) (error (quote rewrite) (quote "invalid form ~s ~s") g$0$12354 (list? g$0$12354))))))))))))) (car g$0$12354)) g$0$12354))) g$0$12352)) (quote #f)))) (set! g$0$12326 ((lambda (g$0$12383) (not (eq? (eval-core (list (quote quote) g$0$12383)) (eval-core (list (quote quote) g$0$12383))))) (cons (quote 1) (quote 2)))) (set! g$0$12328 (lambda (g$0$12385) ((g$0$12324 g$0$12326) g$0$12385))) (set! g$0$12330 (lambda (g$0$12387 g$0$12388) (begin (pretty-print ((g$0$12324 (quote #f)) g$0$12387) g$0$12388) (newline g$0$12388)))) (begin (set! g$0$12391 g$0$12330) (set! g$0$12392 g$0$12328) (set! g$0$12393 g$0$12326) (set! g$0$12394 g$0$12324) (set! g$0$12395 g$0$12322) (set! g$0$12396 g$0$12320)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(void)


(begin (define g$0$12874 (quote #f)) (define g$0$12873 (quote #f)) (define g$0$12872 (quote #f)) (define g$0$12871 (quote #f)) (define g$0$12870 (quote #f)) (define g$0$12869 (quote #f)) (define g$0$12868 (quote #f)) (define g$0$12867 (quote #f)) (define g$0$12866 (quote #f)) (define g$0$12865 (quote #f)) (define g$0$12864 (quote #f)) (define g$0$12863 (quote #f)) (define g$0$12862 (quote #f)) (define g$0$12861 (quote #f)) (define g$0$12860 (quote #f)) (define g$0$12859 (quote #f)) (define g$0$12858 (quote #f)) (define g$0$12857 (quote #f)) (define g$0$12856 (quote #f)) (define g$0$12855 (quote #f)) (define g$0$12854 (quote #f)) (define g$0$12853 (quote #f)) (define g$0$12852 (quote #f)) (define g$0$12851 (quote #f)) (define g$0$12850 (quote #f)) (define g$0$12849 (quote #f)) (define g$0$12848 (quote #f)) (define g$0$12847 (quote #f)) (define g$0$12846 (quote #f)) (define g$0$12845 (quote #f)) (define g$0$12844 (quote #f)) (define g$0$12843 (quote #f)) (define g$0$12842 (quote #f)) (define g$0$12841 (quote #f)) (define g$0$12840 (quote #f)) (define g$0$12839 (quote #f)) (define g$0$12838 (quote #f)) (define g$0$12837 (quote #f)) (define g$0$12836 (quote #f)) (define g$0$12835 (quote #f)) (define g$0$12834 (quote #f)) (define g$0$12833 (quote #f)) (define g$0$12832 (quote #f)) (define g$0$12831 (quote #f)) (define g$0$12830 (quote #f)) (define g$0$12829 (quote #f)) (define g$0$12828 (quote #f)) (define g$0$12827 (quote #f)) (define g$0$12826 (quote #f)) ((lambda (g$0$12450 g$0$12452 g$0$12455 g$0$12457 g$0$12459 g$0$12461 g$0$12463 g$0$12465 g$0$12467 g$0$12469 g$0$12471 g$0$12473 g$0$12475 g$0$12477 g$0$12479 g$0$12481 g$0$12483 g$0$12485 g$0$12487 g$0$12489 g$0$12491 g$0$12493 g$0$12495 g$0$12497 g$0$12499 g$0$12501 g$0$12503 g$0$12505 g$0$12507 g$0$12509 g$0$12511 g$0$12513 g$0$12515 g$0$12517 g$0$12519 g$0$12521 g$0$12523 g$0$12525 g$0$12527 g$0$12529 g$0$12531 g$0$12533 g$0$12535 g$0$12537 g$0$12539 g$0$12541 g$0$12543 g$0$12545 g$0$12547) (begin (set! g$0$12450 (lambda () ((lambda (g$0$12549) ((lambda (g$0$12551) (begin (set! g$0$12551 (lambda (g$0$12553 g$0$12554) (if (memq g$0$12553 g$0$12554) g$0$12554 (cons g$0$12553 g$0$12554)))) (lambda g$0$12559 ((lambda (g$0$12560) (if (= g$0$12560 (quote 0)) (apply (lambda () g$0$12549) g$0$12559) (if (= g$0$12560 (quote 1)) (apply (lambda (g$0$12557) (set! g$0$12549 (g$0$12551 g$0$12557 g$0$12549))) g$0$12559) (error (quote apply) (quote "invalid arg count"))))) (length g$0$12559))))) (quote #f))) (quote ())))) (set! g$0$12452 (g$0$12318 (g$0$12450) (lambda (g$0$12561) (begin (if (procedure? g$0$12561) (void) (error (quote current-library-collection) (quote "not a procedure") g$0$12561)) g$0$12561)))) (set! g$0$12455 (lambda (g$0$12563 g$0$12564 g$0$12565 g$0$12566 g$0$12567 g$0$12568 g$0$12569 g$0$12570 g$0$12571 g$0$12572 g$0$12573) (vector (quote g$0$12454) g$0$12563 g$0$12564 g$0$12565 g$0$12566 g$0$12567 g$0$12568 g$0$12569 g$0$12570 g$0$12571 g$0$12572 g$0$12573))) (set! g$0$12457 (lambda (g$0$12585) (if (vector? g$0$12585) (if (= (vector-length g$0$12585) (+ (quote 1) (length (quote (id name version imp* vis* inv* subst env visit-state invoke-state visible?))))) (begin (quote #f) (eq? (vector-ref g$0$12585 (quote 0)) (quote g$0$12454))) (quote #f)) (quote #f)))) (set! g$0$12459 (lambda (g$0$12587) (if (g$0$12457 g$0$12587) (vector-ref g$0$12587 (quote 1)) (error (quote library-id) (quote "~s is not of type ~s") g$0$12587 (quote library))))) (set! g$0$12461 (lambda (g$0$12589) (if (g$0$12457 g$0$12589) (vector-ref g$0$12589 (quote 2)) (error (quote library-name) (quote "~s is not of type ~s") g$0$12589 (quote library))))) (set! g$0$12463 (lambda (g$0$12591) (if (g$0$12457 g$0$12591) (vector-ref g$0$12591 (quote 3)) (error (quote library-version) (quote "~s is not of type ~s") g$0$12591 (quote library))))) (set! g$0$12465 (lambda (g$0$12593) (if (g$0$12457 g$0$12593) (vector-ref g$0$12593 (quote 4)) (error (quote library-imp*) (quote "~s is not of type ~s") g$0$12593 (quote library))))) (set! g$0$12467 (lambda (g$0$12595) (if (g$0$12457 g$0$12595) (vector-ref g$0$12595 (quote 5)) (error (quote library-vis*) (quote "~s is not of type ~s") g$0$12595 (quote library))))) (set! g$0$12469 (lambda (g$0$12597) (if (g$0$12457 g$0$12597) (vector-ref g$0$12597 (quote 6)) (error (quote library-inv*) (quote "~s is not of type ~s") g$0$12597 (quote library))))) (set! g$0$12471 (lambda (g$0$12599) (if (g$0$12457 g$0$12599) (vector-ref g$0$12599 (quote 7)) (error (quote library-subst) (quote "~s is not of type ~s") g$0$12599 (quote library))))) (set! g$0$12473 (lambda (g$0$12601) (if (g$0$12457 g$0$12601) (vector-ref g$0$12601 (quote 8)) (error (quote library-env) (quote "~s is not of type ~s") g$0$12601 (quote library))))) (set! g$0$12475 (lambda (g$0$12603) (if (g$0$12457 g$0$12603) (vector-ref g$0$12603 (quote 9)) (error (quote library-visit-state) (quote "~s is not of type ~s") g$0$12603 (quote library))))) (set! g$0$12477 (lambda (g$0$12605) (if (g$0$12457 g$0$12605) (vector-ref g$0$12605 (quote 10)) (error (quote library-invoke-state) (quote "~s is not of type ~s") g$0$12605 (quote library))))) (set! g$0$12479 (lambda (g$0$12607) (if (g$0$12457 g$0$12607) (vector-ref g$0$12607 (quote 11)) (error (quote library-visible?) (quote "~s is not of type ~s") g$0$12607 (quote library))))) (set! g$0$12481 (lambda (g$0$12609 g$0$12610) (if (g$0$12457 g$0$12609) (vector-set! g$0$12609 (quote 1) g$0$12610) (error (quote set-library-id!) (quote "~s is not of type ~s") g$0$12609 (quote library))))) (set! g$0$12483 (lambda (g$0$12613 g$0$12614) (if (g$0$12457 g$0$12613) (vector-set! g$0$12613 (quote 2) g$0$12614) (error (quote set-library-name!) (quote "~s is not of type ~s") g$0$12613 (quote library))))) (set! g$0$12485 (lambda (g$0$12617 g$0$12618) (if (g$0$12457 g$0$12617) (vector-set! g$0$12617 (quote 3) g$0$12618) (error (quote set-library-version!) (quote "~s is not of type ~s") g$0$12617 (quote library))))) (set! g$0$12487 (lambda (g$0$12621 g$0$12622) (if (g$0$12457 g$0$12621) (vector-set! g$0$12621 (quote 4) g$0$12622) (error (quote set-library-imp*!) (quote "~s is not of type ~s") g$0$12621 (quote library))))) (set! g$0$12489 (lambda (g$0$12625 g$0$12626) (if (g$0$12457 g$0$12625) (vector-set! g$0$12625 (quote 5) g$0$12626) (error (quote set-library-vis*!) (quote "~s is not of type ~s") g$0$12625 (quote library))))) (set! g$0$12491 (lambda (g$0$12629 g$0$12630) (if (g$0$12457 g$0$12629) (vector-set! g$0$12629 (quote 6) g$0$12630) (error (quote set-library-inv*!) (quote "~s is not of type ~s") g$0$12629 (quote library))))) (set! g$0$12493 (lambda (g$0$12633 g$0$12634) (if (g$0$12457 g$0$12633) (vector-set! g$0$12633 (quote 7) g$0$12634) (error (quote set-library-subst!) (quote "~s is not of type ~s") g$0$12633 (quote library))))) (set! g$0$12495 (lambda (g$0$12637 g$0$12638) (if (g$0$12457 g$0$12637) (vector-set! g$0$12637 (quote 8) g$0$12638) (error (quote set-library-env!) (quote "~s is not of type ~s") g$0$12637 (quote library))))) (set! g$0$12497 (lambda (g$0$12641 g$0$12642) (if (g$0$12457 g$0$12641) (vector-set! g$0$12641 (quote 9) g$0$12642) (error (quote set-library-visit-state!) (quote "~s is not of type ~s") g$0$12641 (quote library))))) (set! g$0$12499 (lambda (g$0$12645 g$0$12646) (if (g$0$12457 g$0$12645) (vector-set! g$0$12645 (quote 10) g$0$12646) (error (quote set-library-invoke-state!) (quote "~s is not of type ~s") g$0$12645 (quote library))))) (set! g$0$12501 (lambda (g$0$12649 g$0$12650) (if (g$0$12457 g$0$12649) (vector-set! g$0$12649 (quote 11) g$0$12650) (error (quote set-library-visible?!) (quote "~s is not of type ~s") g$0$12649 (quote library))))) (set! g$0$12503 (lambda (g$0$12653) (if (null? g$0$12653) (quote ()) (error (quote find-dependencies) (quote "cannot handle deps yet"))))) (set! g$0$12505 (lambda (g$0$12655) (letrec ((g$0$12657 (lambda (g$0$12659) (if (null? g$0$12659) (quote #f) (if (g$0$12655 (car g$0$12659)) (car g$0$12659) (g$0$12657 (cdr g$0$12659))))))) (g$0$12657 ((g$0$12452)))))) (set! g$0$12507 (g$0$12318 (quote (".")) (lambda (g$0$12661) (if (if (list? g$0$12661) (begin (quote #f) (for-all string? g$0$12661)) (quote #f)) (map (lambda (g$0$12663) g$0$12663) g$0$12661) (error (quote library-path) (quote "not a list of strings") g$0$12661))))) (set! g$0$12509 (lambda (g$0$12665) (call-with-values (lambda () (open-string-output-port)) (lambda (g$0$12667 g$0$12668) ((lambda (g$0$12671) (begin (set! g$0$12671 (lambda (g$0$12673) (if (<= (quote 0) g$0$12673 (quote 9)) (display g$0$12673 g$0$12667) (display (integer->char (+ (char->integer (quote #\A)) (- g$0$12673 (quote 10)))) g$0$12667)))) (begin (letrec ((g$0$12675 (lambda (g$0$12677) (if (null? g$0$12677) (display (quote ".ss") g$0$12667) (begin (display (quote "/") g$0$12667) (for-each (lambda (g$0$12679) (if ((lambda (g$0$12681) (if g$0$12681 g$0$12681 ((lambda (g$0$12683) (if g$0$12683 g$0$12683 ((lambda (g$0$12685) (if g$0$12685 g$0$12685 (begin (quote #f) (memv g$0$12679 (quote (#\- #\. #\_ #\~)))))) (char<=? (quote #\0) g$0$12679 (quote #\9))))) (char<=? (quote #\A) g$0$12679 (quote #\Z))))) (char<=? (quote #\a) g$0$12679 (quote #\z))) (display g$0$12679 g$0$12667) (begin (display (quote "%") g$0$12667) ((lambda (g$0$12687) (begin (g$0$12671 (quotient g$0$12687 (quote 16))) (g$0$12671 (remainder g$0$12687 (quote 16))))) (char->integer g$0$12679))))) (string->list (symbol->string (car g$0$12677)))) (g$0$12675 (cdr g$0$12677))))))) (g$0$12675 g$0$12665)) (g$0$12668)))) (quote #f)))))) (set! g$0$12511 (g$0$12318 (lambda (g$0$12689) ((lambda (g$0$12691) (letrec ((g$0$12693 (lambda (g$0$12695) (if (pair? g$0$12695) (begin (quote #f) ((lambda (g$0$12697) (if (file-exists? g$0$12697) g$0$12697 (g$0$12693 (cdr g$0$12695)))) (string-append (car g$0$12695) g$0$12691))) (quote #f))))) (g$0$12693 (g$0$12507)))) (g$0$12509 g$0$12689))) (lambda (g$0$12699) (if (procedure? g$0$12699) g$0$12699 (error (quote file-locator) (quote "not a procedure") g$0$12699))))) (set! g$0$12513 (g$0$12318 (lambda (g$0$12701) ((lambda (g$0$12703) (if (string? g$0$12703) (begin (quote #f) (with-input-from-file g$0$12703 read)) (quote #f))) ((g$0$12511) g$0$12701))) (lambda (g$0$12705) (if (procedure? g$0$12705) g$0$12705 (error (quote library-locator) (quote "not a procedure") g$0$12705))))) (set! g$0$12515 (g$0$12318 (lambda (g$0$12707) (error (quote library-expander) (quote "not initialized"))) (lambda (g$0$12709) (if (procedure? g$0$12709) g$0$12709 (error (quote library-expander) (quote "not a procedure") g$0$12709))))) (set! g$0$12517 (g$0$12318 (quote ()))) (set! g$0$12519 (lambda (g$0$12711) (begin (if (member g$0$12711 (g$0$12517)) (error (quote #f) (quote "circular attempt to import library was detected") g$0$12711) (void)) ((lambda (g$0$12715 g$0$12716) ((lambda (g$0$12719) (dynamic-wind g$0$12719 (lambda () ((lambda (g$0$12721) (begin (if g$0$12721 (void) (error (quote #f) (quote "cannot find library") g$0$12711)) ((g$0$12515) g$0$12721) ((lambda (g$0$12723) (if g$0$12723 g$0$12723 (begin (quote #f) (error (quote #f) (quote "handling external library did not yield the currect library") g$0$12711)))) (g$0$12505 (lambda (g$0$12725) (equal? (g$0$12461 g$0$12725) g$0$12711)))))) ((g$0$12513) g$0$12711))) g$0$12719)) (lambda () ((lambda (g$0$12727) (begin (g$0$12715 g$0$12716) (set! g$0$12716 g$0$12727))) (g$0$12715))))) g$0$12517 (cons g$0$12711 (g$0$12517)))))) (set! g$0$12521 (lambda (g$0$12729) ((lambda (g$0$12731) (if g$0$12731 g$0$12731 (begin (quote #f) (g$0$12519 g$0$12729)))) (g$0$12505 (lambda (g$0$12733) (equal? (g$0$12461 g$0$12733) g$0$12729)))))) (set! g$0$12523 (lambda (g$0$12735) (if (g$0$12505 (lambda (g$0$12737) (equal? (g$0$12461 g$0$12737) g$0$12735))) (begin (quote #f) (quote #t)) (quote #f)))) (set! g$0$12525 (lambda (g$0$12739) ((lambda (g$0$12741) ((lambda (g$0$12743) (if g$0$12743 g$0$12743 (begin (quote #f) (error (quote #f) (quote "cannot find library with required spec") g$0$12739)))) (g$0$12505 (lambda (g$0$12745) (eq? g$0$12741 (g$0$12459 g$0$12745)))))) (car g$0$12739)))) (set! g$0$12527 (make-eq-hashtable)) (set! g$0$12529 (lambda (g$0$12747) (begin ((lambda (g$0$12749) (for-each (lambda (g$0$12751) ((lambda (g$0$12753 g$0$12754) ((lambda (g$0$12757) (hashtable-set! g$0$12527 g$0$12753 g$0$12757)) ((lambda (g$0$12759) (if (memv g$0$12759 (quote (global))) (cons (quote global) (cons g$0$12747 (cdr g$0$12754))) (if (memv g$0$12759 (quote (global-macro))) (cons (quote global-macro) (cons g$0$12747 (cdr g$0$12754))) (if (memv g$0$12759 (quote (global-macro!))) (cons (quote global-macro!) (cons g$0$12747 (cdr g$0$12754))) g$0$12754)))) (car g$0$12754)))) (car g$0$12751) (cdr g$0$12751))) g$0$12749)) (g$0$12473 g$0$12747)) ((g$0$12452) g$0$12747)))) (set! g$0$12531 (lambda (g$0$12760 g$0$12761 g$0$12762 g$0$12763 g$0$12764 g$0$12765 g$0$12766 g$0$12767 g$0$12768 g$0$12769 g$0$12770) ((lambda (g$0$12782 g$0$12783 g$0$12784) (begin (if (if (symbol? g$0$12760) (if (list? g$0$12761) (begin (quote #f) (list? g$0$12762)) (quote #f)) (quote #f)) (void) (error (quote install-library) (quote "invalid spec with id/name/ver") g$0$12760 g$0$12761 g$0$12762)) (if (g$0$12523 g$0$12761) (error (quote install-library) (quote "library is already installed") g$0$12761) (void)) ((lambda (g$0$12788) (g$0$12529 g$0$12788)) (g$0$12455 g$0$12760 g$0$12761 g$0$12762 g$0$12782 g$0$12783 g$0$12784 g$0$12766 g$0$12767 g$0$12768 g$0$12769 g$0$12770)))) (map g$0$12525 g$0$12763) (map g$0$12525 g$0$12764) (map g$0$12525 g$0$12765)))) (set! g$0$12533 (lambda (g$0$12790 g$0$12791 g$0$12792) (g$0$12493 g$0$12790 (cons (cons g$0$12791 g$0$12792) (g$0$12471 g$0$12790))))) (set! g$0$12535 (lambda (g$0$12796 g$0$12797 g$0$12798) (begin (g$0$12495 g$0$12796 (cons (cons g$0$12797 g$0$12798) (g$0$12473 g$0$12796))) (hashtable-set! g$0$12527 g$0$12797 g$0$12798)))) (set! g$0$12537 (lambda (g$0$12802) (hashtable-ref g$0$12527 g$0$12802 (quote #f)))) (set! g$0$12539 (lambda (g$0$12804) ((lambda (g$0$12806) (if (procedure? g$0$12806) (begin (g$0$12499 g$0$12804 (lambda () (error (quote invoke) (quote "circularity detected") g$0$12804))) (for-each g$0$12539 (g$0$12469 g$0$12804)) (g$0$12499 g$0$12804 (lambda () (error (quote invoke) (quote "first invoke did not return") g$0$12804))) (g$0$12806) (g$0$12499 g$0$12804 (quote #t))) (void))) (g$0$12477 g$0$12804)))) (set! g$0$12541 (lambda (g$0$12808) ((lambda (g$0$12810) (if (procedure? g$0$12810) (begin (g$0$12497 g$0$12808 (lambda () (error (quote visit) (quote "circularity detected") g$0$12808))) (for-each g$0$12539 (g$0$12467 g$0$12808)) (g$0$12497 g$0$12808 (lambda () (error (quote invoke) (quote "first visit did not return") g$0$12808))) (g$0$12810) (g$0$12497 g$0$12808 (quote #t))) (void))) (g$0$12475 g$0$12808)))) (set! g$0$12543 (lambda (g$0$12812) (g$0$12539 (g$0$12525 g$0$12812)))) (set! g$0$12545 (lambda g$0$12822 ((lambda (g$0$12823) (if (= g$0$12823 (quote 1)) (apply (lambda (g$0$12814) (letrec ((g$0$12816 (lambda (g$0$12818) (if (null? g$0$12818) (quote ()) (if ((lambda (g$0$12820) (if g$0$12820 g$0$12820 (begin (quote #f) (g$0$12479 (car g$0$12818))))) g$0$12814) (cons (car g$0$12818) (g$0$12816 (cdr g$0$12818))) (g$0$12816 (cdr g$0$12818))))))) (g$0$12816 ((g$0$12452))))) g$0$12822) (if (= g$0$12823 (quote 0)) (apply (lambda () (g$0$12545 (quote #f))) g$0$12822) (error (quote apply) (quote "invalid arg count"))))) (length g$0$12822)))) (set! g$0$12547 (lambda (g$0$12824) (begin (if (g$0$12457 g$0$12824) (void) (error (quote library-spec) (quote "not a library") g$0$12824)) (list (g$0$12459 g$0$12824) (g$0$12461 g$0$12824) (g$0$12463 g$0$12824))))) (begin (set! g$0$12826 g$0$12547) (set! g$0$12827 g$0$12545) (set! g$0$12828 g$0$12543) (set! g$0$12829 g$0$12541) (set! g$0$12830 g$0$12539) (set! g$0$12831 g$0$12537) (set! g$0$12832 g$0$12535) (set! g$0$12833 g$0$12533) (set! g$0$12834 g$0$12531) (set! g$0$12835 g$0$12529) (set! g$0$12836 g$0$12527) (set! g$0$12837 g$0$12525) (set! g$0$12838 g$0$12523) (set! g$0$12839 g$0$12521) (set! g$0$12840 g$0$12519) (set! g$0$12841 g$0$12517) (set! g$0$12842 g$0$12515) (set! g$0$12843 g$0$12513) (set! g$0$12844 g$0$12511) (set! g$0$12845 g$0$12509) (set! g$0$12846 g$0$12507) (set! g$0$12847 g$0$12505) (set! g$0$12848 g$0$12503) (set! g$0$12849 g$0$12501) (set! g$0$12850 g$0$12499) (set! g$0$12851 g$0$12497) (set! g$0$12852 g$0$12495) (set! g$0$12853 g$0$12493) (set! g$0$12854 g$0$12491) (set! g$0$12855 g$0$12489) (set! g$0$12856 g$0$12487) (set! g$0$12857 g$0$12485) (set! g$0$12858 g$0$12483) (set! g$0$12859 g$0$12481) (set! g$0$12860 g$0$12479) (set! g$0$12861 g$0$12477) (set! g$0$12862 g$0$12475) (set! g$0$12863 g$0$12473) (set! g$0$12864 g$0$12471) (set! g$0$12865 g$0$12469) (set! g$0$12866 g$0$12467) (set! g$0$12867 g$0$12465) (set! g$0$12868 g$0$12463) (set! g$0$12869 g$0$12461) (set! g$0$12870 g$0$12459) (set! g$0$12871 g$0$12457) (set! g$0$12872 g$0$12455) (set! g$0$12873 g$0$12452) (set! g$0$12874 g$0$12450)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define g$0$13122 (quote #f)) (define g$0$13114 (quote #f)) (define g$0$13113 (quote #f)) (define g$0$13112 (quote #f)) (define g$0$13108 (quote #f)) (define g$0$13107 (quote #f)) (define g$0$13106 (quote #f)) (define g$0$13105 (quote #f)) ((lambda (g$0$12876 g$0$12953 g$0$12955 g$0$12957 g$0$12995 g$0$12997 g$0$12999 g$0$13001) (begin (set! g$0$12876 (lambda (g$0$13003) (cons (quote define) (cons g$0$13003 (quote ((quote #f))))))) (set! g$0$12953 (lambda (g$0$13005 g$0$13006 g$0$13007) (list (quote lambda) g$0$13006 g$0$13007))) (set! g$0$12955 (lambda (g$0$13011 g$0$13012 g$0$13013) ((lambda (g$0$13017 g$0$13019 g$0$13021 g$0$13023) (begin (set! g$0$13017 (lambda (g$0$13065) (list (quote (primitive error)) (quote (quote apply)) (list (quote quote) (quote "invalid arg count"))))) (set! g$0$13019 (lambda (g$0$13049 g$0$13050 g$0$13051) (call-with-values (lambda () (letrec ((g$0$13055 (lambda (g$0$13057 g$0$13058) (if (pair? g$0$13057) (g$0$13055 (cdr g$0$13057) (+ g$0$13058 (quote 1))) (if (null? g$0$13057) (values g$0$13058 (quote =)) (values g$0$13058 (quote >=))))))) (g$0$13055 g$0$13051 (quote 0)))) (lambda (g$0$13061 g$0$13062) (list (list (quote primitive) g$0$13062) g$0$13050 (list (quote quote) g$0$13061)))))) (set! g$0$13021 (lambda (g$0$13041 g$0$13042 g$0$13043 g$0$13044) (list (quote (primitive apply)) (g$0$12953 g$0$13041 g$0$13043 g$0$13044) g$0$13042))) (set! g$0$13023 (lambda (g$0$13025 g$0$13026 g$0$13027) ((lambda (g$0$13031 g$0$13032) (list (quote lambda) g$0$13031 (g$0$12957 g$0$13025 (list g$0$13032) (list (list (quote (primitive length)) g$0$13031)) (letrec ((g$0$13035 (lambda (g$0$13037 g$0$13038) (if (null? g$0$13037) (g$0$13017 g$0$13025) (list (quote if) (g$0$13019 g$0$13025 g$0$13032 (car g$0$13037)) (g$0$13021 g$0$13025 g$0$13031 (car g$0$13037) (car g$0$13038)) (g$0$13035 (cdr g$0$13037) (cdr g$0$13038))))))) (g$0$13035 g$0$13012 g$0$13027))))) (gensym) (gensym)))) (if (= (length g$0$13013) (quote 1)) (g$0$12953 g$0$13011 (car g$0$13012) (car g$0$13013)) (g$0$13023 g$0$13011 g$0$13012 g$0$13013)))) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$12957 (lambda (g$0$13067 g$0$13068 g$0$13069 g$0$13070) (cons (g$0$12953 g$0$13067 g$0$13068 g$0$13070) g$0$13069))) (set! g$0$12995 (lambda (g$0$13075 g$0$13076) (letrec ((g$0$13079 (lambda (g$0$13081) (if (null? (cdr g$0$13081)) (car g$0$13081) (if (equal? (car g$0$13081) (g$0$12997)) (g$0$13079 (cdr g$0$13081)) (cons (quote begin) g$0$13081)))))) (g$0$13079 g$0$13076)))) (set! g$0$12997 (lambda () (quote ((primitive void))))) (set! g$0$12999 (lambda (g$0$13083 g$0$13084 g$0$13085 g$0$13086) (if (null? g$0$13084) g$0$13086 (list (quote letrec) (map list g$0$13084 g$0$13085) g$0$13086)))) (set! g$0$13001 (lambda (g$0$13091 g$0$13092 g$0$13093 g$0$13094) (if (null? g$0$13092) g$0$13094 (g$0$12957 g$0$13091 g$0$13092 (map (lambda (g$0$13099) (list (quote quote) (quote #f))) g$0$13092) (g$0$12995 g$0$13091 (append (map (lambda (g$0$13101 g$0$13102) (list (quote set!) g$0$13101 g$0$13102)) g$0$13092 g$0$13093) (list g$0$13094))))))) (begin (set! g$0$13105 g$0$13001) (set! g$0$13106 g$0$12999) (set! g$0$13107 g$0$12997) (set! g$0$13108 g$0$12995) (set! g$0$13112 g$0$12957) (set! g$0$13113 g$0$12955) (set! g$0$13114 g$0$12953) (set! g$0$13122 g$0$12876)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define g$0$23359 (quote #f)) (define g$0$23358 (quote #f)) (define g$0$23356 (quote #f)) (define g$0$23355 (quote #f)) (define g$0$23354 (quote #f)) (define g$0$23353 (quote #f)) (define g$0$23352 (quote #f)) (define g$0$23351 (quote #f)) (define g$0$23350 (quote #f)) (define g$0$23349 (quote #f)) (define g$0$23348 (quote #f)) (define g$0$23347 (quote #f)) (define g$0$23346 (quote #f)) (define g$0$23345 (quote #f)) (define g$0$23344 (quote #f)) (define g$0$23343 (quote #f)) (define g$0$23342 (quote #f)) (define g$0$23341 (quote #f)) (define g$0$23340 (quote #f)) (define g$0$23339 (quote #f)) (define g$0$23338 (quote #f)) (define g$0$23337 (quote #f)) (define g$0$23336 (quote #f)) (define g$0$23335 (quote #f)) (define g$0$23334 (quote #f)) (define g$0$23333 (quote #f)) (define g$0$23332 (quote #f)) (define g$0$23331 (quote #f)) (define g$0$23330 (quote #f)) (define g$0$23329 (quote #f)) (define g$0$23328 (quote #f)) (define g$0$23327 (quote #f)) (define g$0$23326 (quote #f)) (define g$0$23325 (quote #f)) (define g$0$23324 (quote #f)) (define g$0$23323 (quote #f)) (define g$0$23322 (quote #f)) (define g$0$23321 (quote #f)) (define g$0$23320 (quote #f)) (define g$0$23319 (quote #f)) (define g$0$23318 (quote #f)) (define g$0$23317 (quote #f)) (define g$0$23316 (quote #f)) (define g$0$23315 (quote #f)) (define g$0$23314 (quote #f)) (define g$0$23313 (quote #f)) (define g$0$23312 (quote #f)) (define g$0$23311 (quote #f)) (define g$0$23310 (quote #f)) (define g$0$23309 (quote #f)) (define g$0$23308 (quote #f)) (define g$0$23307 (quote #f)) (define g$0$23306 (quote #f)) (define g$0$23305 (quote #f)) (define g$0$23304 (quote #f)) (define g$0$23303 (quote #f)) (define g$0$23302 (quote #f)) (define g$0$23301 (quote #f)) (define g$0$23300 (quote #f)) (define g$0$23299 (quote #f)) (define g$0$23298 (quote #f)) (define g$0$23297 (quote #f)) (define g$0$23296 (quote #f)) (define g$0$23295 (quote #f)) (define g$0$23294 (quote #f)) (define g$0$23292 (quote #f)) (define g$0$23291 (quote #f)) (define g$0$23290 (quote #f)) (define g$0$23288 (quote #f)) (define g$0$23287 (quote #f)) (define g$0$23286 (quote #f)) (define g$0$23285 (quote #f)) (define g$0$23284 (quote #f)) (define g$0$23283 (quote #f)) (define g$0$23282 (quote #f)) (define g$0$23281 (quote #f)) (define g$0$23280 (quote #f)) (define g$0$23279 (quote #f)) (define g$0$23278 (quote #f)) (define g$0$23277 (quote #f)) (define g$0$23276 (quote #f)) (define g$0$23275 (quote #f)) (define g$0$23274 (quote #f)) (define g$0$23273 (quote #f)) (define g$0$23272 (quote #f)) (define g$0$23271 (quote #f)) (define g$0$23270 (quote #f)) (define g$0$23269 (quote #f)) (define g$0$23268 (quote #f)) (define g$0$23267 (quote #f)) (define g$0$23266 (quote #f)) (define g$0$23265 (quote #f)) (define g$0$23264 (quote #f)) (define g$0$23263 (quote #f)) (define g$0$23262 (quote #f)) (define g$0$23261 (quote #f)) (define g$0$23260 (quote #f)) (define g$0$23259 (quote #f)) (define g$0$23258 (quote #f)) (define g$0$23257 (quote #f)) (define g$0$23256 (quote #f)) (define g$0$23255 (quote #f)) (define g$0$23254 (quote #f)) (define g$0$23253 (quote #f)) (define g$0$23252 (quote #f)) (define g$0$23251 (quote #f)) (define g$0$23250 (quote #f)) (define g$0$23249 (quote #f)) (define g$0$23248 (quote #f)) (define g$0$23247 (quote #f)) (define g$0$23246 (quote #f)) (define g$0$23245 (quote #f)) (define g$0$23244 (quote #f)) (define g$0$23243 (quote #f)) (define g$0$23242 (quote #f)) (define g$0$23241 (quote #f)) (define g$0$23240 (quote #f)) (define g$0$23239 (quote #f)) (define g$0$23238 (quote #f)) (define g$0$23237 (quote #f)) (define g$0$23236 (quote #f)) (define g$0$23235 (quote #f)) (define g$0$23234 (quote #f)) (define g$0$23233 (quote #f)) (define g$0$23232 (quote #f)) (define g$0$23231 (quote #f)) (define g$0$23230 (quote #f)) (define g$0$23229 (quote #f)) (define g$0$23228 (quote #f)) (define g$0$23227 (quote #f)) (define g$0$23226 (quote #f)) (define g$0$23225 (quote #f)) (define g$0$23224 (quote #f)) (define g$0$23223 (quote #f)) (define g$0$23222 (quote #f)) (define g$0$23221 (quote #f)) (define g$0$23220 (quote #f)) (define g$0$23219 (quote #f)) (define g$0$23218 (quote #f)) (define g$0$23217 (quote #f)) (define g$0$23216 (quote #f)) (define g$0$23215 (quote #f)) (define g$0$23214 (quote #f)) (define g$0$23213 (quote #f)) (define g$0$23212 (quote #f)) (define g$0$23211 (quote #f)) (define g$0$23210 (quote #f)) (define g$0$23209 (quote #f)) (define g$0$23208 (quote #f)) (define g$0$23207 (quote #f)) (define g$0$23206 (quote #f)) (define g$0$23205 (quote #f)) (define g$0$23204 (quote #f)) (define g$0$23203 (quote #f)) (define g$0$23202 (quote #f)) (define g$0$23201 (quote #f)) (define g$0$23200 (quote #f)) (define g$0$23199 (quote #f)) (define g$0$23198 (quote #f)) (define g$0$23197 (quote #f)) (define g$0$23196 (quote #f)) (define g$0$23195 (quote #f)) (define g$0$23194 (quote #f)) (define g$0$23193 (quote #f)) (define g$0$23192 (quote #f)) (define g$0$23191 (quote #f)) (define g$0$23190 (quote #f)) (define g$0$23189 (quote #f)) (define g$0$23188 (quote #f)) (define g$0$23187 (quote #f)) (define g$0$23186 (quote #f)) (define g$0$23185 (quote #f)) (define g$0$23184 (quote #f)) (define g$0$23183 (quote #f)) (define g$0$23182 (quote #f)) (define g$0$23181 (quote #f)) (define g$0$23180 (quote #f)) (define g$0$23179 (quote #f)) (define g$0$23178 (quote #f)) (define g$0$23177 (quote #f)) (define g$0$23176 (quote #f)) (define g$0$23175 (quote #f)) (define g$0$23174 (quote #f)) (define g$0$23173 (quote #f)) (define g$0$23172 (quote #f)) (define g$0$23171 (quote #f)) (define g$0$23170 (quote #f)) (define g$0$23169 (quote #f)) (define g$0$23168 (quote #f)) ((lambda (g$0$13124 g$0$13126 g$0$13131 g$0$13133 g$0$13135 g$0$13137 g$0$13139 g$0$13142 g$0$13144 g$0$13146 g$0$13148 g$0$13150 g$0$13152 g$0$13154 g$0$13156 g$0$13158 g$0$13160 g$0$13162 g$0$13164 g$0$13166 g$0$13168 g$0$13170 g$0$13172 g$0$13175 g$0$13177 g$0$13179 g$0$13181 g$0$13183 g$0$13185 g$0$13187 g$0$13189 g$0$13191 g$0$13193 g$0$13195 g$0$13197 g$0$13199 g$0$13201 g$0$13203 g$0$13205 g$0$13207 g$0$13209 g$0$13211 g$0$13213 g$0$13215 g$0$13217 g$0$13219 g$0$13221 g$0$13223 g$0$13225 g$0$13227 g$0$13229 g$0$13231 g$0$13233 g$0$13235 g$0$13237 g$0$13239 g$0$13241 g$0$13243 g$0$13245 g$0$13247 g$0$13249 g$0$13251 g$0$13253 g$0$13255 g$0$13257 g$0$13271 g$0$13273 g$0$13275 g$0$13474 g$0$13476 g$0$13478 g$0$13480 g$0$13482 g$0$13484 g$0$13486 g$0$13488 g$0$13490 g$0$13492 g$0$13494 g$0$13496 g$0$13498 g$0$13500 g$0$13502 g$0$13504 g$0$13506 g$0$13508 g$0$13510 g$0$13512 g$0$13514 g$0$13516 g$0$13518 g$0$13520 g$0$13522 g$0$13524 g$0$13526 g$0$13528 g$0$13530 g$0$13532 g$0$13534 g$0$13536 g$0$13538 g$0$13540 g$0$13542 g$0$13544 g$0$13546 g$0$13548 g$0$13550 g$0$13552 g$0$13554 g$0$13556 g$0$13558 g$0$13560 g$0$13562 g$0$13564 g$0$13566 g$0$13568 g$0$13570 g$0$13572 g$0$13574 g$0$13576 g$0$13578 g$0$13580 g$0$13582 g$0$13584 g$0$13586 g$0$13588 g$0$13590 g$0$13592 g$0$13594 g$0$13596 g$0$13598 g$0$13600 g$0$13602 g$0$13604 g$0$13606 g$0$13608 g$0$13610 g$0$13612 g$0$13614 g$0$13616 g$0$13618 g$0$13620 g$0$13622 g$0$13624 g$0$13626 g$0$13628 g$0$13630 g$0$13632 g$0$13634 g$0$13636 g$0$13638 g$0$13640 g$0$13642 g$0$13644 g$0$13646 g$0$13648 g$0$13650 g$0$13652 g$0$13654 g$0$13656 g$0$13659 g$0$13661 g$0$13663 g$0$13665 g$0$13667 g$0$13669 g$0$13671 g$0$13673 g$0$13675 g$0$13677 g$0$13679 g$0$13681 g$0$13683 g$0$13685 g$0$13687 g$0$13689 g$0$13691 g$0$13693 g$0$13695 g$0$13697 g$0$13699 g$0$13701 g$0$13703 g$0$13705 g$0$13707 g$0$13709 g$0$13711 g$0$13713 g$0$13715) (begin (set! g$0$13124 (lambda (g$0$13717 g$0$13718) (if (memq g$0$13717 g$0$13718) g$0$13718 (cons g$0$13717 g$0$13718)))) (set! g$0$13126 (lambda (g$0$13721 g$0$13722) (if (null? g$0$13721) g$0$13722 (if (memq (car g$0$13721) g$0$13722) (g$0$13126 (cdr g$0$13721) g$0$13722) (cons (car g$0$13721) (g$0$13126 (cdr g$0$13721) g$0$13722)))))) (set! g$0$13131 (quote (top))) (set! g$0$13133 (lambda (g$0$13725) (memq (quote top) g$0$13725))) (set! g$0$13135 (lambda (g$0$13727) (if (symbol? g$0$13727) (gensym g$0$13727) (if (g$0$13177 g$0$13727) (g$0$13135 (g$0$13227 g$0$13727)) (error (quote gen-lexical) (quote "BUG: invalid arg") g$0$13727))))) (set! g$0$13137 (lambda (g$0$13729) (g$0$13135 g$0$13729))) (set! g$0$13139 (lambda (g$0$13731) (gensym))) (set! g$0$13142 (lambda (g$0$13733 g$0$13734 g$0$13735 g$0$13736) (vector (quote g$0$13141) g$0$13733 g$0$13734 g$0$13735 g$0$13736))) (set! g$0$13144 (lambda (g$0$13741) (if (vector? g$0$13741) (if (= (vector-length g$0$13741) (+ (quote 1) (length (quote (sym* mark** label* sealed/freq))))) (begin (quote #f) (eq? (vector-ref g$0$13741 (quote 0)) (quote g$0$13141))) (quote #f)) (quote #f)))) (set! g$0$13146 (lambda (g$0$13743) (if (g$0$13144 g$0$13743) (vector-ref g$0$13743 (quote 1)) (error (quote rib-sym*) (quote "~s is not of type ~s") g$0$13743 (quote rib))))) (set! g$0$13148 (lambda (g$0$13745) (if (g$0$13144 g$0$13745) (vector-ref g$0$13745 (quote 2)) (error (quote rib-mark**) (quote "~s is not of type ~s") g$0$13745 (quote rib))))) (set! g$0$13150 (lambda (g$0$13747) (if (g$0$13144 g$0$13747) (vector-ref g$0$13747 (quote 3)) (error (quote rib-label*) (quote "~s is not of type ~s") g$0$13747 (quote rib))))) (set! g$0$13152 (lambda (g$0$13749) (if (g$0$13144 g$0$13749) (vector-ref g$0$13749 (quote 4)) (error (quote rib-sealed/freq) (quote "~s is not of type ~s") g$0$13749 (quote rib))))) (set! g$0$13154 (lambda (g$0$13751 g$0$13752) (if (g$0$13144 g$0$13751) (vector-set! g$0$13751 (quote 1) g$0$13752) (error (quote set-rib-sym*!) (quote "~s is not of type ~s") g$0$13751 (quote rib))))) (set! g$0$13156 (lambda (g$0$13755 g$0$13756) (if (g$0$13144 g$0$13755) (vector-set! g$0$13755 (quote 2) g$0$13756) (error (quote set-rib-mark**!) (quote "~s is not of type ~s") g$0$13755 (quote rib))))) (set! g$0$13158 (lambda (g$0$13759 g$0$13760) (if (g$0$13144 g$0$13759) (vector-set! g$0$13759 (quote 3) g$0$13760) (error (quote set-rib-label*!) (quote "~s is not of type ~s") g$0$13759 (quote rib))))) (set! g$0$13160 (lambda (g$0$13763 g$0$13764) (if (g$0$13144 g$0$13763) (vector-set! g$0$13763 (quote 4) g$0$13764) (error (quote set-rib-sealed/freq!) (quote "~s is not of type ~s") g$0$13763 (quote rib))))) (set! g$0$13162 (lambda () (g$0$13142 (quote ()) (quote ()) (quote ()) (quote #f)))) (set! g$0$13164 (lambda (g$0$13767 g$0$13768 g$0$13769) ((lambda (g$0$13773) (begin (set! g$0$13773 (lambda (g$0$13775 g$0$13776 g$0$13777 g$0$13778) (if (pair? g$0$13777) (begin (quote #f) ((lambda (g$0$13783) (if g$0$13783 g$0$13783 (begin (quote #f) (g$0$13773 g$0$13775 g$0$13776 (cdr g$0$13777) (cdr g$0$13778))))) (if (eq? g$0$13775 (car g$0$13777)) (begin (quote #f) (g$0$13229 g$0$13776 (car g$0$13778))) (quote #f)))) (quote #f)))) (begin (if (g$0$13152 g$0$13767) (error (quote extend-rib!) (quote "rib is sealed") g$0$13767) (void)) ((lambda (g$0$13785 g$0$13786) ((lambda (g$0$13789) (begin (if (if (memq g$0$13785 (g$0$13146 g$0$13767)) (begin (quote #f) (g$0$13773 g$0$13785 g$0$13786 g$0$13789 (g$0$13148 g$0$13767))) (quote #f)) (error (quote expander) (quote "cannot redefine") (g$0$13243 g$0$13768 (quote ()))) (void)) (g$0$13154 g$0$13767 (cons g$0$13785 g$0$13789)) (g$0$13156 g$0$13767 (cons g$0$13786 (g$0$13148 g$0$13767))) (g$0$13158 g$0$13767 (cons g$0$13769 (g$0$13150 g$0$13767))))) (g$0$13146 g$0$13767))) (g$0$13227 g$0$13768) (g$0$13181 g$0$13768))))) (quote #f)))) (set! g$0$13166 (lambda (g$0$13791) ((lambda (g$0$13793) (if (null? g$0$13793) (void) ((lambda (g$0$13795) (begin (g$0$13154 g$0$13791 g$0$13795) (g$0$13156 g$0$13791 (list->vector (g$0$13148 g$0$13791))) (g$0$13158 g$0$13791 (list->vector (g$0$13150 g$0$13791))) (g$0$13160 g$0$13791 (make-vector (vector-length g$0$13795) (quote 0))))) (list->vector g$0$13793)))) (g$0$13146 g$0$13791)))) (set! g$0$13168 (lambda (g$0$13797) (if (g$0$13152 g$0$13797) (begin (g$0$13160 g$0$13797 (quote #f)) (g$0$13154 g$0$13797 (vector->list (g$0$13146 g$0$13797))) (g$0$13156 g$0$13797 (vector->list (g$0$13148 g$0$13797))) (g$0$13158 g$0$13797 (vector->list (g$0$13150 g$0$13797)))) (void)))) (set! g$0$13170 (lambda (g$0$13799 g$0$13800) ((lambda (g$0$13803) ((lambda (g$0$13805) ((lambda (g$0$13807) (begin (vector-set! g$0$13803 g$0$13807 (+ g$0$13805 (quote 1))) (if (= g$0$13807 g$0$13800) (void) ((lambda (g$0$13809 g$0$13810 g$0$13811) (begin ((lambda (g$0$13815) (begin (vector-set! g$0$13809 g$0$13800 (vector-ref g$0$13809 g$0$13807)) (vector-set! g$0$13809 g$0$13807 g$0$13815))) (vector-ref g$0$13809 g$0$13800)) ((lambda (g$0$13817) (begin (vector-set! g$0$13810 g$0$13800 (vector-ref g$0$13810 g$0$13807)) (vector-set! g$0$13810 g$0$13807 g$0$13817))) (vector-ref g$0$13810 g$0$13800)) ((lambda (g$0$13819) (begin (vector-set! g$0$13811 g$0$13800 (vector-ref g$0$13811 g$0$13807)) (vector-set! g$0$13811 g$0$13807 g$0$13819))) (vector-ref g$0$13811 g$0$13800)))) (g$0$13146 g$0$13799) (g$0$13148 g$0$13799) (g$0$13150 g$0$13799))))) (letrec ((g$0$13821 (lambda (g$0$13823) (if (zero? g$0$13823) (quote 0) ((lambda (g$0$13825) (if (= g$0$13805 (vector-ref g$0$13803 g$0$13825)) (g$0$13821 g$0$13825) g$0$13823)) (- g$0$13823 (quote 1))))))) (g$0$13821 g$0$13800)))) (vector-ref g$0$13803 g$0$13800))) (g$0$13152 g$0$13799)))) (set! g$0$13172 (lambda (g$0$13827 g$0$13828) (g$0$13142 (map g$0$13227 g$0$13827) (map g$0$13181 g$0$13827) g$0$13828 (quote #f)))) (set! g$0$13175 (lambda (g$0$13831 g$0$13832 g$0$13833) (vector (quote g$0$13174) g$0$13831 g$0$13832 g$0$13833))) (set! g$0$13177 (lambda (g$0$13837) (if (vector? g$0$13837) (if (= (vector-length g$0$13837) (+ (quote 1) (length (quote (expr mark* subst*))))) (begin (quote #f) (eq? (vector-ref g$0$13837 (quote 0)) (quote g$0$13174))) (quote #f)) (quote #f)))) (set! g$0$13179 (lambda (g$0$13839) (if (g$0$13177 g$0$13839) (vector-ref g$0$13839 (quote 1)) (error (quote stx-expr) (quote "~s is not of type ~s") g$0$13839 (quote stx))))) (set! g$0$13181 (lambda (g$0$13841) (if (g$0$13177 g$0$13841) (vector-ref g$0$13841 (quote 2)) (error (quote stx-mark*) (quote "~s is not of type ~s") g$0$13841 (quote stx))))) (set! g$0$13183 (lambda (g$0$13843) (if (g$0$13177 g$0$13843) (vector-ref g$0$13843 (quote 3)) (error (quote stx-subst*) (quote "~s is not of type ~s") g$0$13843 (quote stx))))) (set! g$0$13185 (lambda (g$0$13845 g$0$13846) (if (g$0$13177 g$0$13845) (vector-set! g$0$13845 (quote 1) g$0$13846) (error (quote set-stx-expr!) (quote "~s is not of type ~s") g$0$13845 (quote stx))))) (set! g$0$13187 (lambda (g$0$13849 g$0$13850) (if (g$0$13177 g$0$13849) (vector-set! g$0$13849 (quote 2) g$0$13850) (error (quote set-stx-mark*!) (quote "~s is not of type ~s") g$0$13849 (quote stx))))) (set! g$0$13189 (lambda (g$0$13853 g$0$13854) (if (g$0$13177 g$0$13853) (vector-set! g$0$13853 (quote 3) g$0$13854) (error (quote set-stx-subst*!) (quote "~s is not of type ~s") g$0$13853 (quote stx))))) (set! g$0$13191 (lambda (g$0$13857 g$0$13858) (g$0$13175 g$0$13858 (g$0$13181 g$0$13857) (g$0$13183 g$0$13857)))) (set! g$0$13193 (lambda () (string (quote #\m)))) (set! g$0$13195 (quote #f)) (set! g$0$13197 not) (set! g$0$13199 (lambda (g$0$13861 g$0$13862 g$0$13863) ((lambda (g$0$13867) (begin (set! g$0$13867 (lambda (g$0$13869 g$0$13870) (letrec ((g$0$13873 (lambda (g$0$13875 g$0$13876) (if (null? g$0$13876) (cdr g$0$13870) (cons g$0$13875 (g$0$13873 (car g$0$13876) (cdr g$0$13876))))))) (g$0$13873 (car g$0$13869) (cdr g$0$13869))))) ((lambda (g$0$13879 g$0$13880) (if (if (not (null? g$0$13861)) (if (not (null? g$0$13879)) (begin (quote #f) (g$0$13197 (car g$0$13879))) (quote #f)) (quote #f)) (values (g$0$13867 g$0$13861 g$0$13879) (g$0$13867 g$0$13862 g$0$13880)) (values (append g$0$13861 g$0$13879) (append g$0$13862 g$0$13880)))) (g$0$13181 g$0$13863) (g$0$13183 g$0$13863)))) (quote #f)))) (set! g$0$13201 (lambda (g$0$13883 g$0$13884 g$0$13885) (if (g$0$13177 g$0$13883) (call-with-values (lambda () (g$0$13199 g$0$13884 g$0$13885 g$0$13883)) (lambda (g$0$13889 g$0$13890) (g$0$13175 (g$0$13179 g$0$13883) g$0$13889 g$0$13890))) (g$0$13175 g$0$13883 g$0$13884 g$0$13885)))) (set! g$0$13203 (lambda (g$0$13893 g$0$13894) (g$0$13201 g$0$13894 (list g$0$13893) (quote (shift))))) (set! g$0$13205 (lambda (g$0$13897 g$0$13898) (g$0$13201 g$0$13898 (quote ()) (list g$0$13897)))) (set! g$0$13207 (lambda (g$0$13901 g$0$13902) (if (g$0$13177 g$0$13901) (g$0$13207 (g$0$13179 g$0$13901) g$0$13902) (g$0$13902 g$0$13901)))) (set! g$0$13209 (lambda (g$0$13905) (if (g$0$13177 g$0$13905) ((lambda (g$0$13907 g$0$13908 g$0$13909) (map (lambda (g$0$13913) (g$0$13201 g$0$13913 g$0$13908 g$0$13909)) g$0$13907)) (g$0$13209 (g$0$13179 g$0$13905)) (g$0$13181 g$0$13905) (g$0$13183 g$0$13905)) (if (vector? g$0$13905) (vector->list g$0$13905) (error (quote syntax-vector->list) (quote "not a syntax vector") g$0$13905))))) (set! g$0$13211 (lambda (g$0$13915) (g$0$13207 g$0$13915 pair?))) (set! g$0$13213 (lambda (g$0$13917) (g$0$13207 g$0$13917 vector?))) (set! g$0$13215 (lambda (g$0$13919) (g$0$13207 g$0$13919 null?))) (set! g$0$13217 (lambda (g$0$13921) ((lambda (g$0$13923) (if g$0$13923 g$0$13923 (begin (quote #f) (if (g$0$13211 g$0$13921) (begin (quote #f) (g$0$13217 (g$0$13223 g$0$13921))) (quote #f))))) (g$0$13215 g$0$13921)))) (set! g$0$13219 (lambda (g$0$13925) (if (g$0$13177 g$0$13925) (g$0$13201 (g$0$13219 (g$0$13179 g$0$13925)) (g$0$13181 g$0$13925) (g$0$13183 g$0$13925)) (if (pair? g$0$13925) (car g$0$13925) (error (quote syntax-car) (quote "not a pair") g$0$13925))))) (set! g$0$13221 (lambda (g$0$13927) (if (g$0$13211 g$0$13927) (cons (g$0$13219 g$0$13927) (g$0$13221 (g$0$13223 g$0$13927))) (if (g$0$13215 g$0$13927) (quote ()) (error (quote syntax->list) (quote "invalid argument") g$0$13927))))) (set! g$0$13223 (lambda (g$0$13929) (if (g$0$13177 g$0$13929) (g$0$13201 (g$0$13223 (g$0$13179 g$0$13929)) (g$0$13181 g$0$13929) (g$0$13183 g$0$13929)) (if (pair? g$0$13929) (cdr g$0$13929) (error (quote syntax-cdr) (quote "not a pair") g$0$13929))))) (set! g$0$13225 (lambda (g$0$13931) (g$0$13207 g$0$13931 symbol?))) (set! g$0$13227 (lambda (g$0$13933) (if (g$0$13177 g$0$13933) (g$0$13227 (g$0$13179 g$0$13933)) (if (symbol? g$0$13933) g$0$13933 (error (quote id->sym) (quote "not an id") g$0$13933))))) (set! g$0$13229 (lambda (g$0$13935 g$0$13936) ((lambda (g$0$13939) (if g$0$13939 g$0$13939 (begin (quote #f) (if (pair? g$0$13935) (if (pair? g$0$13936) (if (eq? (car g$0$13935) (car g$0$13936)) (begin (quote #f) (g$0$13229 (cdr g$0$13935) (cdr g$0$13936))) (quote #f)) (quote #f)) (quote #f))))) (if (null? g$0$13935) (begin (quote #f) (null? g$0$13936)) (quote #f))))) (set! g$0$13231 (lambda (g$0$13941 g$0$13942) (if (eq? (g$0$13227 g$0$13941) (g$0$13227 g$0$13942)) (begin (quote #f) (g$0$13229 (g$0$13181 g$0$13941) (g$0$13181 g$0$13942))) (quote #f)))) (set! g$0$13233 (lambda (g$0$13945 g$0$13946) ((lambda (g$0$13949 g$0$13950) (if ((lambda (g$0$13953) (if g$0$13953 g$0$13953 (begin (quote #f) g$0$13950))) g$0$13949) (eq? g$0$13949 g$0$13950) (eq? (g$0$13227 g$0$13945) (g$0$13227 g$0$13946)))) (g$0$13247 g$0$13945) (g$0$13247 g$0$13946)))) (set! g$0$13235 (lambda (g$0$13955) (if (for-all g$0$13225 g$0$13955) (begin (quote #f) (g$0$13237 g$0$13955)) (quote #f)))) (set! g$0$13237 (lambda (g$0$13957) ((lambda (g$0$13959) (if g$0$13959 g$0$13959 (begin (quote #f) (if (not (g$0$13239 (car g$0$13957) (cdr g$0$13957))) (begin (quote #f) (g$0$13237 (cdr g$0$13957))) (quote #f))))) (null? g$0$13957)))) (set! g$0$13239 (lambda (g$0$13961 g$0$13962) (if (pair? g$0$13962) (begin (quote #f) ((lambda (g$0$13965) (if g$0$13965 g$0$13965 (begin (quote #f) (g$0$13239 g$0$13961 (cdr g$0$13962))))) (g$0$13231 g$0$13961 (car g$0$13962)))) (quote #f)))) (set! g$0$13241 (lambda (g$0$13967) ((lambda (g$0$13969) (if g$0$13969 g$0$13969 ((lambda (g$0$13971) (if g$0$13971 g$0$13971 ((lambda (g$0$13973) (if g$0$13973 g$0$13973 (begin (quote #f) (boolean? g$0$13967)))) (char? g$0$13967)))) (string? g$0$13967)))) (number? g$0$13967)))) (set! g$0$13243 (lambda (g$0$13975 g$0$13976) (if (g$0$13133 g$0$13976) g$0$13975 (letrec ((g$0$13979 (lambda (g$0$13981) (if (g$0$13177 g$0$13981) (g$0$13243 (g$0$13179 g$0$13981) (g$0$13181 g$0$13981)) (if (pair? g$0$13981) ((lambda (g$0$13983 g$0$13984) (if (if (eq? g$0$13983 (car g$0$13981)) (begin (quote #f) (eq? g$0$13984 (cdr g$0$13981))) (quote #f)) g$0$13981 (cons g$0$13983 g$0$13984))) (g$0$13979 (car g$0$13981)) (g$0$13979 (cdr g$0$13981))) (if (vector? g$0$13981) ((lambda (g$0$13987) ((lambda (g$0$13989) (if (for-all eq? g$0$13987 g$0$13989) g$0$13981 (list->vector g$0$13989))) (map g$0$13979 g$0$13987))) (vector->list g$0$13981)) g$0$13981)))))) (g$0$13979 g$0$13975))))) (set! g$0$13245 (lambda (g$0$13991) (g$0$13243 g$0$13991 (quote ())))) (set! g$0$13247 (lambda (g$0$13993) ((lambda (g$0$13995) (letrec ((g$0$13997 (lambda (g$0$13999 g$0$14000) (if (null? g$0$13999) (g$0$13713 g$0$13995) (if (eq? (car g$0$13999) (quote shift)) (g$0$13997 (cdr g$0$13999) (cdr g$0$14000)) ((lambda (g$0$14003) (if (g$0$13152 g$0$14003) ((lambda (g$0$14005) (letrec ((g$0$14007 (lambda (g$0$14009 g$0$14010) (if (= g$0$14009 g$0$14010) (g$0$13997 (cdr g$0$13999) g$0$14000) (if (if (eq? (vector-ref g$0$14005 g$0$14009) g$0$13995) (begin (quote #f) (g$0$13229 g$0$14000 (vector-ref (g$0$13148 g$0$14003) g$0$14009))) (quote #f)) ((lambda (g$0$14013) (begin (g$0$13170 g$0$14003 g$0$14009) g$0$14013)) (vector-ref (g$0$13150 g$0$14003) g$0$14009)) (g$0$14007 (+ g$0$14009 (quote 1)) g$0$14010)))))) (g$0$14007 (quote 0) (vector-length g$0$14005)))) (g$0$13146 g$0$14003)) (letrec ((g$0$14015 (lambda (g$0$14017 g$0$14018 g$0$14019) (if (null? g$0$14017) (g$0$13997 (cdr g$0$13999) g$0$14000) (if (if (eq? (car g$0$14017) g$0$13995) (begin (quote #f) (g$0$13229 (car g$0$14018) g$0$14000)) (quote #f)) (car g$0$14019) (g$0$14015 (cdr g$0$14017) (cdr g$0$14018) (cdr g$0$14019))))))) (g$0$14015 (g$0$13146 g$0$14003) (g$0$13148 g$0$14003) (g$0$13150 g$0$14003))))) (car g$0$13999))))))) (g$0$13997 (g$0$13183 g$0$13993) (g$0$13181 g$0$13993)))) (g$0$13227 g$0$13993)))) (set! g$0$13249 (lambda (g$0$14023 g$0$14024) ((lambda (g$0$14027) (if g$0$14027 ((lambda (g$0$14029) (if (if (pair? g$0$14029) (begin (quote #f) (eq? (car g$0$14029) (quote $core-rtd))) (quote #f)) (cons (quote $rtd) (map g$0$13512 (cdr g$0$14029))) g$0$14029)) g$0$14027) ((lambda (g$0$14031) (if g$0$14031 (cdr g$0$14031) (quote (displaced-lexical . #f)))) (assq g$0$14023 g$0$14024)))) (g$0$12831 g$0$14023)))) (set! g$0$13251 cons) (set! g$0$13253 car) (set! g$0$13255 cdr) (set! g$0$13257 (lambda (g$0$14033 g$0$14034) (if (g$0$13225 g$0$14033) ((lambda (g$0$14037) ((lambda (g$0$14039) ((lambda (g$0$14041) ((lambda (g$0$14043) ((lambda () (begin (if g$0$14039 (void) (error (quote expander) (quote "unbound identifier") (g$0$13243 g$0$14033 (quote ())))) ((lambda (g$0$14045) (if (memv g$0$14045 (quote (lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd))) (values g$0$14043 (g$0$13255 g$0$14041) g$0$14037) (values (quote other) (quote #f) (quote #f)))) g$0$14043))))) (g$0$13253 g$0$14041))) (g$0$13249 g$0$14039 g$0$14034))) (g$0$13247 g$0$14037))) g$0$14033) (if (g$0$13211 g$0$14033) ((lambda (g$0$14046) (if (g$0$13225 g$0$14046) ((lambda (g$0$14048) ((lambda (g$0$14050) ((lambda (g$0$14052) ((lambda () (begin (if g$0$14048 (void) (error (quote expander) (quote "unbound identifier") (g$0$13243 g$0$14033 (quote ())))) ((lambda (g$0$14054) (if (memv g$0$14054 (quote (define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import $core-rtd))) (values g$0$14052 (g$0$13255 g$0$14050) g$0$14046) (values (quote call) (quote #f) (quote #f)))) g$0$14052))))) (g$0$13253 g$0$14050))) (g$0$13249 g$0$14048 g$0$14034))) (g$0$13247 g$0$14046)) (values (quote call) (quote #f) (quote #f)))) (g$0$13219 g$0$14033)) ((lambda (g$0$14055) (if (g$0$13241 g$0$14055) (values (quote constant) g$0$14055 (quote #f)) (values (quote other) (quote #f) (quote #f)))) (g$0$13245 g$0$14033)))))) (set! g$0$13271 (lambda (g$0$14057 g$0$14058) (if (procedure? g$0$14057) (cons* (quote local-macro) g$0$14057 g$0$14058) (if (if (pair? g$0$14057) (if (eq? (car g$0$14057) (quote macro!)) (begin (quote #f) (procedure? (cdr g$0$14057))) (quote #f)) (quote #f)) (cons* (quote local-macro!) (cdr g$0$14057) g$0$14058) (if (if (pair? g$0$14057) (begin (quote #f) (eq? (car g$0$14057) (quote $rtd))) (quote #f)) g$0$14057 (error (quote expand) (quote "invalid transformer") g$0$14057)))))) (set! g$0$13273 (lambda (g$0$14061) (if (procedure? g$0$14061) (cons (quote macro!) g$0$14061) (error (quote make-variable-transformer) (quote "not a procedure") g$0$14061)))) (set! g$0$13275 (lambda (g$0$14063) (g$0$13271 (eval-core (g$0$12392 g$0$14063)) g$0$14063))) (set! g$0$13474 (lambda (g$0$14065) ((lambda (g$0$14067) ((lambda (g$0$14069) (if (if g$0$14069 (begin (quote #f) (apply (lambda (g$0$14071 g$0$14072 g$0$14073 g$0$14074) (g$0$13225 g$0$14071)) g$0$14069)) (quote #f)) (apply (lambda (g$0$14079 g$0$14080 g$0$14081 g$0$14082) (values g$0$14079 (cons (quote defun) (cons g$0$14080 (cons g$0$14081 g$0$14082))))) g$0$14069) ((lambda (g$0$14087) ((lambda (g$0$14089) (if (if g$0$14089 (begin (quote #f) (apply (lambda (g$0$14091 g$0$14092) (g$0$13225 g$0$14091)) g$0$14089)) (quote #f)) (apply (lambda (g$0$14095 g$0$14096) (values g$0$14095 (cons (quote expr) g$0$14096))) g$0$14089) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$14087 (quote ()))))) ((lambda (g$0$14099) (if (g$0$13211 g$0$14099) (begin (quote #f) ((lambda (g$0$14101) (if g$0$14101 (begin (quote #f) ((lambda (g$0$14103) (if g$0$14103 (begin (quote #f) (append g$0$14101 g$0$14103)) (quote #f))) ((lambda (g$0$14105) (if (g$0$13211 g$0$14105) (begin (quote #f) ((lambda (g$0$14107) (if g$0$14107 (begin (quote #f) ((lambda (g$0$14109) (if g$0$14109 (begin (quote #f) (append g$0$14107 g$0$14109)) (quote #f))) ((lambda (g$0$14111) (if (g$0$13211 g$0$14111) (begin (quote #f) ((lambda (g$0$14113) (if g$0$14113 (begin (quote #f) ((lambda (g$0$14115) (if g$0$14115 (begin (quote #f) (append g$0$14113 g$0$14115)) (quote #f))) ((lambda (g$0$14117) (if (equal? (g$0$13245 g$0$14117) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$14111)))) (quote #f))) ((lambda (g$0$14119) (list g$0$14119)) (g$0$13219 g$0$14111)))) (quote #f))) (g$0$13223 g$0$14105)))) (quote #f))) ((lambda (g$0$14121) (list g$0$14121)) (g$0$13219 g$0$14105)))) (quote #f))) (g$0$13223 g$0$14099)))) (quote #f))) ((lambda (g$0$14123) (quote ())) (g$0$13219 g$0$14099)))) (quote #f))) g$0$14087))) g$0$14067))) ((lambda (g$0$14125) (if (g$0$13211 g$0$14125) (begin (quote #f) ((lambda (g$0$14127) (if g$0$14127 (begin (quote #f) ((lambda (g$0$14129) (if g$0$14129 (begin (quote #f) (append g$0$14127 g$0$14129)) (quote #f))) ((lambda (g$0$14131) (if (g$0$13211 g$0$14131) (begin (quote #f) ((lambda (g$0$14133) (if g$0$14133 (begin (quote #f) ((lambda (g$0$14135) (if g$0$14135 (begin (quote #f) (append g$0$14133 g$0$14135)) (quote #f))) ((lambda (g$0$14137) (if (g$0$13211 g$0$14137) (begin (quote #f) ((lambda (g$0$14139) (if g$0$14139 (begin (quote #f) ((lambda (g$0$14141) (if g$0$14141 (begin (quote #f) (append g$0$14139 g$0$14141)) (quote #f))) ((letrec ((g$0$14143 (lambda (g$0$14145) (if (g$0$13211 g$0$14145) ((lambda (g$0$14147) (if g$0$14147 (begin (quote #f) ((lambda (g$0$14149) (if g$0$14149 (begin (quote #f) (map cons g$0$14147 g$0$14149)) (quote #f))) (g$0$14143 (g$0$13223 g$0$14145)))) (quote #f))) ((lambda (g$0$14151) (list g$0$14151)) (g$0$13219 g$0$14145))) (if (g$0$13215 g$0$14145) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$14143) (g$0$13223 g$0$14137)))) (quote #f))) ((lambda (g$0$14153) (list g$0$14153)) (g$0$13219 g$0$14137)))) (quote #f))) (g$0$13223 g$0$14131)))) (quote #f))) ((lambda (g$0$14155) (if (g$0$13211 g$0$14155) (begin (quote #f) ((lambda (g$0$14157) (if g$0$14157 (begin (quote #f) ((lambda (g$0$14159) (if g$0$14159 (begin (quote #f) (append g$0$14157 g$0$14159)) (quote #f))) ((lambda (g$0$14161) (list g$0$14161)) (g$0$13223 g$0$14155)))) (quote #f))) ((lambda (g$0$14163) (list g$0$14163)) (g$0$13219 g$0$14155)))) (quote #f))) (g$0$13219 g$0$14131)))) (quote #f))) (g$0$13223 g$0$14125)))) (quote #f))) ((lambda (g$0$14165) (quote ())) (g$0$13219 g$0$14125)))) (quote #f))) g$0$14067))) g$0$14065))) (set! g$0$13476 (lambda (g$0$14167) ((lambda (g$0$14169) ((lambda (g$0$14171) (if (if g$0$14171 (begin (quote #f) (apply (lambda (g$0$14173 g$0$14174) (g$0$13225 g$0$14173)) g$0$14171)) (quote #f)) (apply (lambda (g$0$14177 g$0$14178) (values g$0$14177 g$0$14178)) g$0$14171) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$14169 (quote ()))))) ((lambda (g$0$14181) (if (g$0$13211 g$0$14181) (begin (quote #f) ((lambda (g$0$14183) (if g$0$14183 (begin (quote #f) ((lambda (g$0$14185) (if g$0$14185 (begin (quote #f) (append g$0$14183 g$0$14185)) (quote #f))) ((lambda (g$0$14187) (if (g$0$13211 g$0$14187) (begin (quote #f) ((lambda (g$0$14189) (if g$0$14189 (begin (quote #f) ((lambda (g$0$14191) (if g$0$14191 (begin (quote #f) (append g$0$14189 g$0$14191)) (quote #f))) ((lambda (g$0$14193) (if (g$0$13211 g$0$14193) (begin (quote #f) ((lambda (g$0$14195) (if g$0$14195 (begin (quote #f) ((lambda (g$0$14197) (if g$0$14197 (begin (quote #f) (append g$0$14195 g$0$14197)) (quote #f))) ((lambda (g$0$14199) (if (equal? (g$0$13245 g$0$14199) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$14193)))) (quote #f))) ((lambda (g$0$14201) (list g$0$14201)) (g$0$13219 g$0$14193)))) (quote #f))) (g$0$13223 g$0$14187)))) (quote #f))) ((lambda (g$0$14203) (list g$0$14203)) (g$0$13219 g$0$14187)))) (quote #f))) (g$0$13223 g$0$14181)))) (quote #f))) ((lambda (g$0$14205) (quote ())) (g$0$13219 g$0$14181)))) (quote #f))) g$0$14169))) g$0$14167))) (set! g$0$13478 (lambda (g$0$14207) ((lambda (g$0$14209) ((lambda (g$0$14211) (if g$0$14211 ((lambda (g$0$14213) ((lambda (g$0$14215 g$0$14216) (g$0$13205 (g$0$13142 (list g$0$14215) (list g$0$13131) (list g$0$14216) (quote #f)) (g$0$13201 g$0$14207 g$0$13131 (quote ())))) (car g$0$14213) (cdr g$0$14213))) g$0$14211) (g$0$13201 g$0$14207 g$0$13131 (quote ())))) (assq g$0$14207 g$0$14209))) (g$0$12864 (g$0$12839 (quote (psyntax system $all))))))) (set! g$0$13480 (lambda (g$0$14219 g$0$14220 g$0$14221) (cons (cons* g$0$14219 (quote lexical) g$0$14220) g$0$14221))) (set! g$0$13482 (lambda (g$0$14225 g$0$14226 g$0$14227) (if (null? g$0$14225) g$0$14227 (g$0$13482 (cdr g$0$14225) (cdr g$0$14226) (g$0$13480 (car g$0$14225) (car g$0$14226) g$0$14227))))) (set! g$0$13484 (lambda (g$0$14231 g$0$14232 g$0$14233) ((lambda (g$0$14237) ((lambda (g$0$14239) (if (if g$0$14239 (begin (quote #f) (apply (lambda (g$0$14241 g$0$14242 g$0$14243 g$0$14244) (quote #t)) g$0$14239)) (quote #f)) (apply (lambda (g$0$14249 g$0$14250 g$0$14251 g$0$14252) ((lambda (g$0$14257) ((lambda (g$0$14259 g$0$14260) ((lambda (g$0$14263 g$0$14264 g$0$14265) (letrec ((g$0$14269 (lambda (g$0$14271 g$0$14272) (if (null? g$0$14271) (g$0$13612 (g$0$13205 (g$0$13172 g$0$14263 g$0$14264) (cons g$0$14251 g$0$14252)) (g$0$13482 g$0$14264 g$0$14265 g$0$14232) g$0$14233) (list (quote (primitive call-with-values)) (g$0$13114 (quote #f) (quote ()) (car g$0$14272)) (g$0$13114 (quote #f) (car g$0$14271) (g$0$14269 (cdr g$0$14271) (cdr g$0$14272)))))))) (g$0$14269 g$0$14259 g$0$14257))) (apply append g$0$14249) (apply append g$0$14260) (apply append g$0$14259))) (map (lambda (g$0$14275) (map g$0$13135 g$0$14275)) g$0$14249) (map (lambda (g$0$14277) (map g$0$13139 g$0$14277)) g$0$14249))) (g$0$13592 g$0$14250 g$0$14232 g$0$14233))) g$0$14239) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$14237 (quote ()))))) ((lambda (g$0$14279) (if (g$0$13211 g$0$14279) (begin (quote #f) ((lambda (g$0$14281) (if g$0$14281 (begin (quote #f) ((lambda (g$0$14283) (if g$0$14283 (begin (quote #f) (append g$0$14281 g$0$14283)) (quote #f))) ((lambda (g$0$14285) (if (g$0$13211 g$0$14285) (begin (quote #f) ((lambda (g$0$14287) (if g$0$14287 (begin (quote #f) ((lambda (g$0$14289) (if g$0$14289 (begin (quote #f) (append g$0$14287 g$0$14289)) (quote #f))) ((lambda (g$0$14291) (if (g$0$13211 g$0$14291) (begin (quote #f) ((lambda (g$0$14293) (if g$0$14293 (begin (quote #f) ((lambda (g$0$14295) (if g$0$14295 (begin (quote #f) (append g$0$14293 g$0$14295)) (quote #f))) ((letrec ((g$0$14297 (lambda (g$0$14299) (if (g$0$13211 g$0$14299) ((lambda (g$0$14301) (if g$0$14301 (begin (quote #f) ((lambda (g$0$14303) (if g$0$14303 (begin (quote #f) (map cons g$0$14301 g$0$14303)) (quote #f))) (g$0$14297 (g$0$13223 g$0$14299)))) (quote #f))) ((lambda (g$0$14305) (list g$0$14305)) (g$0$13219 g$0$14299))) (if (g$0$13215 g$0$14299) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$14297) (g$0$13223 g$0$14291)))) (quote #f))) ((lambda (g$0$14307) (list g$0$14307)) (g$0$13219 g$0$14291)))) (quote #f))) (g$0$13223 g$0$14285)))) (quote #f))) ((letrec ((g$0$14309 (lambda (g$0$14311) (if (g$0$13211 g$0$14311) ((lambda (g$0$14313) (if g$0$14313 (begin (quote #f) ((lambda (g$0$14315) (if g$0$14315 (begin (quote #f) (map cons g$0$14313 g$0$14315)) (quote #f))) (g$0$14309 (g$0$13223 g$0$14311)))) (quote #f))) ((lambda (g$0$14317) (if (g$0$13211 g$0$14317) (begin (quote #f) ((lambda (g$0$14319) (if g$0$14319 (begin (quote #f) ((lambda (g$0$14321) (if g$0$14321 (begin (quote #f) (append g$0$14319 g$0$14321)) (quote #f))) ((lambda (g$0$14323) (if (g$0$13211 g$0$14323) (begin (quote #f) ((lambda (g$0$14325) (if g$0$14325 (begin (quote #f) ((lambda (g$0$14327) (if g$0$14327 (begin (quote #f) (append g$0$14325 g$0$14327)) (quote #f))) ((lambda (g$0$14329) (if (equal? (g$0$13245 g$0$14329) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$14323)))) (quote #f))) ((lambda (g$0$14331) (list g$0$14331)) (g$0$13219 g$0$14323)))) (quote #f))) (g$0$13223 g$0$14317)))) (quote #f))) ((letrec ((g$0$14333 (lambda (g$0$14335) (if (g$0$13211 g$0$14335) ((lambda (g$0$14337) (if g$0$14337 (begin (quote #f) ((lambda (g$0$14339) (if g$0$14339 (begin (quote #f) (map cons g$0$14337 g$0$14339)) (quote #f))) (g$0$14333 (g$0$13223 g$0$14335)))) (quote #f))) ((lambda (g$0$14341) (list g$0$14341)) (g$0$13219 g$0$14335))) (if (g$0$13215 g$0$14335) (list (begin (quote fml**) (quote ()))) (quote #f)))))) g$0$14333) (g$0$13219 g$0$14317)))) (quote #f))) (g$0$13219 g$0$14311))) (if (g$0$13215 g$0$14311) (list (begin (quote fml**) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$14309) (g$0$13219 g$0$14285)))) (quote #f))) (g$0$13223 g$0$14279)))) (quote #f))) ((lambda (g$0$14343) (quote ())) (g$0$13219 g$0$14279)))) (quote #f))) g$0$14237))) g$0$14231))) (set! g$0$13486 (lambda (g$0$14345 g$0$14346 g$0$14347 g$0$14348) ((lambda (g$0$14353) ((lambda (g$0$14355) (if (if g$0$14355 (begin (quote #f) (apply (lambda (g$0$14357 g$0$14358 g$0$14359 g$0$14360) (quote #t)) g$0$14355)) (quote #f)) (apply (lambda (g$0$14365 g$0$14366 g$0$14367 g$0$14368) (if (not (g$0$13235 g$0$14365)) (error (quote expander) (quote "invalid identifiers") (g$0$13243 g$0$14345 (quote ()))) ((lambda (g$0$14373 g$0$14374) ((lambda (g$0$14377 g$0$14378) ((lambda (g$0$14381 g$0$14382) (g$0$14348 (quote #f) g$0$14373 g$0$14382 g$0$14381)) (g$0$13612 (g$0$13205 g$0$14377 (cons g$0$14367 g$0$14368)) g$0$14378 g$0$14347) (g$0$13592 (map (lambda (g$0$14385) (g$0$13205 g$0$14377 g$0$14385)) g$0$14366) g$0$14378 g$0$14347))) (g$0$13172 g$0$14365 g$0$14374) (g$0$13482 g$0$14374 g$0$14373 g$0$14346))) (map g$0$13135 g$0$14365) (map g$0$13139 g$0$14365)))) g$0$14355) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$14353 (quote ()))))) ((lambda (g$0$14387) (if (g$0$13211 g$0$14387) (begin (quote #f) ((lambda (g$0$14389) (if g$0$14389 (begin (quote #f) ((lambda (g$0$14391) (if g$0$14391 (begin (quote #f) (append g$0$14389 g$0$14391)) (quote #f))) ((lambda (g$0$14393) (if (g$0$13211 g$0$14393) (begin (quote #f) ((lambda (g$0$14395) (if g$0$14395 (begin (quote #f) ((lambda (g$0$14397) (if g$0$14397 (begin (quote #f) (append g$0$14395 g$0$14397)) (quote #f))) ((lambda (g$0$14399) (if (g$0$13211 g$0$14399) (begin (quote #f) ((lambda (g$0$14401) (if g$0$14401 (begin (quote #f) ((lambda (g$0$14403) (if g$0$14403 (begin (quote #f) (append g$0$14401 g$0$14403)) (quote #f))) ((letrec ((g$0$14405 (lambda (g$0$14407) (if (g$0$13211 g$0$14407) ((lambda (g$0$14409) (if g$0$14409 (begin (quote #f) ((lambda (g$0$14411) (if g$0$14411 (begin (quote #f) (map cons g$0$14409 g$0$14411)) (quote #f))) (g$0$14405 (g$0$13223 g$0$14407)))) (quote #f))) ((lambda (g$0$14413) (list g$0$14413)) (g$0$13219 g$0$14407))) (if (g$0$13215 g$0$14407) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$14405) (g$0$13223 g$0$14399)))) (quote #f))) ((lambda (g$0$14415) (list g$0$14415)) (g$0$13219 g$0$14399)))) (quote #f))) (g$0$13223 g$0$14393)))) (quote #f))) ((letrec ((g$0$14417 (lambda (g$0$14419) (if (g$0$13211 g$0$14419) ((lambda (g$0$14421) (if g$0$14421 (begin (quote #f) ((lambda (g$0$14423) (if g$0$14423 (begin (quote #f) (map cons g$0$14421 g$0$14423)) (quote #f))) (g$0$14417 (g$0$13223 g$0$14419)))) (quote #f))) ((lambda (g$0$14425) (if (g$0$13211 g$0$14425) (begin (quote #f) ((lambda (g$0$14427) (if g$0$14427 (begin (quote #f) ((lambda (g$0$14429) (if g$0$14429 (begin (quote #f) (append g$0$14427 g$0$14429)) (quote #f))) ((lambda (g$0$14431) (if (g$0$13211 g$0$14431) (begin (quote #f) ((lambda (g$0$14433) (if g$0$14433 (begin (quote #f) ((lambda (g$0$14435) (if g$0$14435 (begin (quote #f) (append g$0$14433 g$0$14435)) (quote #f))) ((lambda (g$0$14437) (if (equal? (g$0$13245 g$0$14437) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$14431)))) (quote #f))) ((lambda (g$0$14439) (list g$0$14439)) (g$0$13219 g$0$14431)))) (quote #f))) (g$0$13223 g$0$14425)))) (quote #f))) ((lambda (g$0$14441) (list g$0$14441)) (g$0$13219 g$0$14425)))) (quote #f))) (g$0$13219 g$0$14419))) (if (g$0$13215 g$0$14419) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$14417) (g$0$13219 g$0$14393)))) (quote #f))) (g$0$13223 g$0$14387)))) (quote #f))) ((lambda (g$0$14443) (quote ())) (g$0$13219 g$0$14387)))) (quote #f))) g$0$14353))) g$0$14345))) (set! g$0$13488 (lambda (g$0$14445 g$0$14446 g$0$14447) (g$0$13486 g$0$14445 g$0$14446 g$0$14447 g$0$13106))) (set! g$0$13490 (lambda (g$0$14451 g$0$14452 g$0$14453) (g$0$13486 g$0$14451 g$0$14452 g$0$14453 g$0$13105))) (set! g$0$13492 (lambda (g$0$14457 g$0$14458 g$0$14459) ((lambda (g$0$14463) ((lambda (g$0$14465) (if (if g$0$14465 (begin (quote #f) (apply (lambda (g$0$14467) (g$0$13225 g$0$14467)) g$0$14465)) (quote #f)) (apply (lambda (g$0$14469) ((lambda (g$0$14471) ((lambda (g$0$14473) ((lambda (g$0$14475) ((lambda () (begin (if g$0$14471 (void) (error (quote expander) (quote "unbound identifier") (g$0$13243 g$0$14457 (quote ())))) (if (if (eq? g$0$14475 (quote $rtd)) (begin (quote #f) (not (list? (g$0$13255 g$0$14473)))) (quote #f)) (void) (error (quote expander) (quote "invalid type") (g$0$13243 g$0$14457 (quote ())))) (list (quote quote) (g$0$13255 g$0$14473)))))) (g$0$13253 g$0$14473))) (g$0$13249 g$0$14471 g$0$14458))) (g$0$13247 g$0$14469))) g$0$14465) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$14463 (quote ()))))) ((lambda (g$0$14477) (if (g$0$13211 g$0$14477) (begin (quote #f) ((lambda (g$0$14479) (if g$0$14479 (begin (quote #f) ((lambda (g$0$14481) (if g$0$14481 (begin (quote #f) (append g$0$14479 g$0$14481)) (quote #f))) ((lambda (g$0$14483) (if (g$0$13211 g$0$14483) (begin (quote #f) ((lambda (g$0$14485) (if g$0$14485 (begin (quote #f) ((lambda (g$0$14487) (if g$0$14487 (begin (quote #f) (append g$0$14485 g$0$14487)) (quote #f))) ((lambda (g$0$14489) (if (equal? (g$0$13245 g$0$14489) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$14483)))) (quote #f))) ((lambda (g$0$14491) (list g$0$14491)) (g$0$13219 g$0$14483)))) (quote #f))) (g$0$13223 g$0$14477)))) (quote #f))) ((lambda (g$0$14493) (quote ())) (g$0$13219 g$0$14477)))) (quote #f))) g$0$14463))) g$0$14457))) (set! g$0$13494 (lambda (g$0$14495 g$0$14496 g$0$14497) ((lambda (g$0$14501) ((lambda (g$0$14503) (if (if g$0$14503 (begin (quote #f) (apply (lambda (g$0$14505) (g$0$13225 g$0$14505)) g$0$14503)) (quote #f)) (apply (lambda (g$0$14507) ((lambda (g$0$14509) ((lambda (g$0$14511) ((lambda (g$0$14513) ((lambda () (begin (if g$0$14509 (void) (error (quote expander) (quote "unbound identifier") (g$0$13243 g$0$14495 (quote ())))) (if (if (eq? g$0$14513 (quote $rtd)) (begin (quote #f) (list? (g$0$13255 g$0$14511))) (quote #f)) (void) (error (quote expander) (quote "invalid type") (g$0$13243 g$0$14495 (quote ())))) (g$0$13596 (car (g$0$13255 g$0$14511)) g$0$14496 g$0$14497))))) (g$0$13253 g$0$14511))) (g$0$13249 g$0$14509 g$0$14496))) (g$0$13247 g$0$14507))) g$0$14503) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$14501 (quote ()))))) ((lambda (g$0$14515) (if (g$0$13211 g$0$14515) (begin (quote #f) ((lambda (g$0$14517) (if g$0$14517 (begin (quote #f) ((lambda (g$0$14519) (if g$0$14519 (begin (quote #f) (append g$0$14517 g$0$14519)) (quote #f))) ((lambda (g$0$14521) (if (g$0$13211 g$0$14521) (begin (quote #f) ((lambda (g$0$14523) (if g$0$14523 (begin (quote #f) ((lambda (g$0$14525) (if g$0$14525 (begin (quote #f) (append g$0$14523 g$0$14525)) (quote #f))) ((lambda (g$0$14527) (if (equal? (g$0$13245 g$0$14527) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$14521)))) (quote #f))) ((lambda (g$0$14529) (list g$0$14529)) (g$0$13219 g$0$14521)))) (quote #f))) (g$0$13223 g$0$14515)))) (quote #f))) ((lambda (g$0$14531) (quote ())) (g$0$13219 g$0$14515)))) (quote #f))) g$0$14501))) g$0$14495))) (set! g$0$13496 (lambda (g$0$14533 g$0$14534 g$0$14535) ((lambda (g$0$14539) ((lambda (g$0$14541) (if (if g$0$14541 (begin (quote #f) (apply (lambda (g$0$14543) (g$0$13225 g$0$14543)) g$0$14541)) (quote #f)) (apply (lambda (g$0$14545) ((lambda (g$0$14547) ((lambda (g$0$14549) ((lambda (g$0$14551) ((lambda () (begin (if g$0$14547 (void) (error (quote expander) (quote "unbound identifier") (g$0$13243 g$0$14533 (quote ())))) (if (if (eq? g$0$14551 (quote $rtd)) (begin (quote #f) (list? (g$0$13255 g$0$14549))) (quote #f)) (void) (error (quote expander) (quote "invalid type") (g$0$13243 g$0$14533 (quote ())))) (g$0$13596 (cadr (g$0$13255 g$0$14549)) g$0$14534 g$0$14535))))) (g$0$13253 g$0$14549))) (g$0$13249 g$0$14547 g$0$14534))) (g$0$13247 g$0$14545))) g$0$14541) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$14539 (quote ()))))) ((lambda (g$0$14553) (if (g$0$13211 g$0$14553) (begin (quote #f) ((lambda (g$0$14555) (if g$0$14555 (begin (quote #f) ((lambda (g$0$14557) (if g$0$14557 (begin (quote #f) (append g$0$14555 g$0$14557)) (quote #f))) ((lambda (g$0$14559) (if (g$0$13211 g$0$14559) (begin (quote #f) ((lambda (g$0$14561) (if g$0$14561 (begin (quote #f) ((lambda (g$0$14563) (if g$0$14563 (begin (quote #f) (append g$0$14561 g$0$14563)) (quote #f))) ((lambda (g$0$14565) (if (equal? (g$0$13245 g$0$14565) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$14559)))) (quote #f))) ((lambda (g$0$14567) (list g$0$14567)) (g$0$13219 g$0$14559)))) (quote #f))) (g$0$13223 g$0$14553)))) (quote #f))) ((lambda (g$0$14569) (quote ())) (g$0$13219 g$0$14553)))) (quote #f))) g$0$14539))) g$0$14533))) (set! g$0$13498 (lambda (g$0$14571 g$0$14572 g$0$14573) ((lambda (g$0$14577) ((lambda (g$0$14579) (if (if g$0$14579 (begin (quote #f) (apply (lambda (g$0$14581 g$0$14582 g$0$14583) (quote #t)) g$0$14579)) (quote #f)) (apply (lambda (g$0$14587 g$0$14588 g$0$14589) (list (quote if) (g$0$13596 g$0$14587 g$0$14572 g$0$14573) (g$0$13108 (quote #f) (g$0$13592 (cons g$0$14588 g$0$14589) g$0$14572 g$0$14573)) (g$0$13107))) g$0$14579) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$14577 (quote ()))))) ((lambda (g$0$14593) (if (g$0$13211 g$0$14593) (begin (quote #f) ((lambda (g$0$14595) (if g$0$14595 (begin (quote #f) ((lambda (g$0$14597) (if g$0$14597 (begin (quote #f) (append g$0$14595 g$0$14597)) (quote #f))) ((lambda (g$0$14599) (if (g$0$13211 g$0$14599) (begin (quote #f) ((lambda (g$0$14601) (if g$0$14601 (begin (quote #f) ((lambda (g$0$14603) (if g$0$14603 (begin (quote #f) (append g$0$14601 g$0$14603)) (quote #f))) ((lambda (g$0$14605) (if (g$0$13211 g$0$14605) (begin (quote #f) ((lambda (g$0$14607) (if g$0$14607 (begin (quote #f) ((lambda (g$0$14609) (if g$0$14609 (begin (quote #f) (append g$0$14607 g$0$14609)) (quote #f))) ((letrec ((g$0$14611 (lambda (g$0$14613) (if (g$0$13211 g$0$14613) ((lambda (g$0$14615) (if g$0$14615 (begin (quote #f) ((lambda (g$0$14617) (if g$0$14617 (begin (quote #f) (map cons g$0$14615 g$0$14617)) (quote #f))) (g$0$14611 (g$0$13223 g$0$14613)))) (quote #f))) ((lambda (g$0$14619) (list g$0$14619)) (g$0$13219 g$0$14613))) (if (g$0$13215 g$0$14613) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14611) (g$0$13223 g$0$14605)))) (quote #f))) ((lambda (g$0$14621) (list g$0$14621)) (g$0$13219 g$0$14605)))) (quote #f))) (g$0$13223 g$0$14599)))) (quote #f))) ((lambda (g$0$14623) (list g$0$14623)) (g$0$13219 g$0$14599)))) (quote #f))) (g$0$13223 g$0$14593)))) (quote #f))) ((lambda (g$0$14625) (quote ())) (g$0$13219 g$0$14593)))) (quote #f))) g$0$14577))) g$0$14571))) (set! g$0$13500 (lambda (g$0$14627 g$0$14628 g$0$14629) ((lambda (g$0$14633) ((lambda (g$0$14635) (if (if g$0$14635 (begin (quote #f) (apply (lambda (g$0$14637 g$0$14638 g$0$14639) (quote #t)) g$0$14635)) (quote #f)) (apply (lambda (g$0$14643 g$0$14644 g$0$14645) (list (quote if) (g$0$13596 g$0$14643 g$0$14628 g$0$14629) (g$0$13107) (g$0$13108 (quote #f) (g$0$13592 (cons g$0$14644 g$0$14645) g$0$14628 g$0$14629)))) g$0$14635) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$14633 (quote ()))))) ((lambda (g$0$14649) (if (g$0$13211 g$0$14649) (begin (quote #f) ((lambda (g$0$14651) (if g$0$14651 (begin (quote #f) ((lambda (g$0$14653) (if g$0$14653 (begin (quote #f) (append g$0$14651 g$0$14653)) (quote #f))) ((lambda (g$0$14655) (if (g$0$13211 g$0$14655) (begin (quote #f) ((lambda (g$0$14657) (if g$0$14657 (begin (quote #f) ((lambda (g$0$14659) (if g$0$14659 (begin (quote #f) (append g$0$14657 g$0$14659)) (quote #f))) ((lambda (g$0$14661) (if (g$0$13211 g$0$14661) (begin (quote #f) ((lambda (g$0$14663) (if g$0$14663 (begin (quote #f) ((lambda (g$0$14665) (if g$0$14665 (begin (quote #f) (append g$0$14663 g$0$14665)) (quote #f))) ((letrec ((g$0$14667 (lambda (g$0$14669) (if (g$0$13211 g$0$14669) ((lambda (g$0$14671) (if g$0$14671 (begin (quote #f) ((lambda (g$0$14673) (if g$0$14673 (begin (quote #f) (map cons g$0$14671 g$0$14673)) (quote #f))) (g$0$14667 (g$0$13223 g$0$14669)))) (quote #f))) ((lambda (g$0$14675) (list g$0$14675)) (g$0$13219 g$0$14669))) (if (g$0$13215 g$0$14669) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14667) (g$0$13223 g$0$14661)))) (quote #f))) ((lambda (g$0$14677) (list g$0$14677)) (g$0$13219 g$0$14661)))) (quote #f))) (g$0$13223 g$0$14655)))) (quote #f))) ((lambda (g$0$14679) (list g$0$14679)) (g$0$13219 g$0$14655)))) (quote #f))) (g$0$13223 g$0$14649)))) (quote #f))) ((lambda (g$0$14681) (quote ())) (g$0$13219 g$0$14649)))) (quote #f))) g$0$14633))) g$0$14627))) (set! g$0$13502 (lambda (g$0$14683 g$0$14684 g$0$14685) ((lambda (g$0$14689) ((lambda (g$0$14691) (if (if g$0$14691 (begin (quote #f) (apply (lambda (g$0$14693 g$0$14694 g$0$14695) (quote #t)) g$0$14691)) (quote #f)) (apply (lambda (g$0$14699 g$0$14700 g$0$14701) (list (quote if) (g$0$13596 g$0$14699 g$0$14684 g$0$14685) (g$0$13596 g$0$14700 g$0$14684 g$0$14685) (g$0$13596 g$0$14701 g$0$14684 g$0$14685))) g$0$14691) ((lambda (g$0$14705) ((lambda (g$0$14707) (if (if g$0$14707 (begin (quote #f) (apply (lambda (g$0$14709 g$0$14710) (quote #t)) g$0$14707)) (quote #f)) (apply (lambda (g$0$14713 g$0$14714) (list (quote if) (g$0$13596 g$0$14713 g$0$14684 g$0$14685) (g$0$13596 g$0$14714 g$0$14684 g$0$14685) (g$0$13107))) g$0$14707) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$14705 (quote ()))))) ((lambda (g$0$14717) (if (g$0$13211 g$0$14717) (begin (quote #f) ((lambda (g$0$14719) (if g$0$14719 (begin (quote #f) ((lambda (g$0$14721) (if g$0$14721 (begin (quote #f) (append g$0$14719 g$0$14721)) (quote #f))) ((lambda (g$0$14723) (if (g$0$13211 g$0$14723) (begin (quote #f) ((lambda (g$0$14725) (if g$0$14725 (begin (quote #f) ((lambda (g$0$14727) (if g$0$14727 (begin (quote #f) (append g$0$14725 g$0$14727)) (quote #f))) ((lambda (g$0$14729) (if (g$0$13211 g$0$14729) (begin (quote #f) ((lambda (g$0$14731) (if g$0$14731 (begin (quote #f) ((lambda (g$0$14733) (if g$0$14733 (begin (quote #f) (append g$0$14731 g$0$14733)) (quote #f))) ((lambda (g$0$14735) (if (equal? (g$0$13245 g$0$14735) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$14729)))) (quote #f))) ((lambda (g$0$14737) (list g$0$14737)) (g$0$13219 g$0$14729)))) (quote #f))) (g$0$13223 g$0$14723)))) (quote #f))) ((lambda (g$0$14739) (list g$0$14739)) (g$0$13219 g$0$14723)))) (quote #f))) (g$0$13223 g$0$14717)))) (quote #f))) ((lambda (g$0$14741) (quote ())) (g$0$13219 g$0$14717)))) (quote #f))) g$0$14705))) g$0$14689))) ((lambda (g$0$14743) (if (g$0$13211 g$0$14743) (begin (quote #f) ((lambda (g$0$14745) (if g$0$14745 (begin (quote #f) ((lambda (g$0$14747) (if g$0$14747 (begin (quote #f) (append g$0$14745 g$0$14747)) (quote #f))) ((lambda (g$0$14749) (if (g$0$13211 g$0$14749) (begin (quote #f) ((lambda (g$0$14751) (if g$0$14751 (begin (quote #f) ((lambda (g$0$14753) (if g$0$14753 (begin (quote #f) (append g$0$14751 g$0$14753)) (quote #f))) ((lambda (g$0$14755) (if (g$0$13211 g$0$14755) (begin (quote #f) ((lambda (g$0$14757) (if g$0$14757 (begin (quote #f) ((lambda (g$0$14759) (if g$0$14759 (begin (quote #f) (append g$0$14757 g$0$14759)) (quote #f))) ((lambda (g$0$14761) (if (g$0$13211 g$0$14761) (begin (quote #f) ((lambda (g$0$14763) (if g$0$14763 (begin (quote #f) ((lambda (g$0$14765) (if g$0$14765 (begin (quote #f) (append g$0$14763 g$0$14765)) (quote #f))) ((lambda (g$0$14767) (if (equal? (g$0$13245 g$0$14767) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$14761)))) (quote #f))) ((lambda (g$0$14769) (list g$0$14769)) (g$0$13219 g$0$14761)))) (quote #f))) (g$0$13223 g$0$14755)))) (quote #f))) ((lambda (g$0$14771) (list g$0$14771)) (g$0$13219 g$0$14755)))) (quote #f))) (g$0$13223 g$0$14749)))) (quote #f))) ((lambda (g$0$14773) (list g$0$14773)) (g$0$13219 g$0$14749)))) (quote #f))) (g$0$13223 g$0$14743)))) (quote #f))) ((lambda (g$0$14775) (quote ())) (g$0$13219 g$0$14743)))) (quote #f))) g$0$14689))) g$0$14683))) (set! g$0$13504 (lambda (g$0$14777 g$0$14778 g$0$14779) ((lambda (g$0$14783 g$0$14785) (begin (set! g$0$14783 (lambda (g$0$14893 g$0$14894 g$0$14895) ((lambda (g$0$14899) ((lambda (g$0$14901) (if (if g$0$14901 (begin (quote #f) (apply (lambda (g$0$14903 g$0$14904 g$0$14905) (quote #t)) g$0$14901)) (quote #f)) (apply (lambda (g$0$14909 g$0$14910 g$0$14911) (list (quote if) (list (quote (primitive memv)) g$0$14893 (list (quote quote) (g$0$13245 g$0$14909))) (g$0$13108 (quote #f) (g$0$13592 (cons g$0$14910 g$0$14911) g$0$14778 g$0$14779)) g$0$14895)) g$0$14901) ((lambda (g$0$14915) ((lambda (g$0$14917) (if (if g$0$14917 (begin (quote #f) (apply (lambda (g$0$14919) (quote #t)) g$0$14917)) (quote #f)) (apply (lambda (g$0$14921) (error (quote expander) (quote "invalid syntax") (g$0$13245 g$0$14777))) g$0$14917) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$14915 (quote ()))))) ((lambda (g$0$14923) (list g$0$14923)) g$0$14915))) g$0$14899))) ((lambda (g$0$14925) (if (g$0$13211 g$0$14925) (begin (quote #f) ((lambda (g$0$14927) (if g$0$14927 (begin (quote #f) ((lambda (g$0$14929) (if g$0$14929 (begin (quote #f) (append g$0$14927 g$0$14929)) (quote #f))) ((lambda (g$0$14931) (if (g$0$13211 g$0$14931) (begin (quote #f) ((lambda (g$0$14933) (if g$0$14933 (begin (quote #f) ((lambda (g$0$14935) (if g$0$14935 (begin (quote #f) (append g$0$14933 g$0$14935)) (quote #f))) ((letrec ((g$0$14937 (lambda (g$0$14939) (if (g$0$13211 g$0$14939) ((lambda (g$0$14941) (if g$0$14941 (begin (quote #f) ((lambda (g$0$14943) (if g$0$14943 (begin (quote #f) (map cons g$0$14941 g$0$14943)) (quote #f))) (g$0$14937 (g$0$13223 g$0$14939)))) (quote #f))) ((lambda (g$0$14945) (list g$0$14945)) (g$0$13219 g$0$14939))) (if (g$0$13215 g$0$14939) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14937) (g$0$13223 g$0$14931)))) (quote #f))) ((lambda (g$0$14947) (list g$0$14947)) (g$0$13219 g$0$14931)))) (quote #f))) (g$0$13223 g$0$14925)))) (quote #f))) ((letrec ((g$0$14949 (lambda (g$0$14951) (if (g$0$13211 g$0$14951) ((lambda (g$0$14953) (if g$0$14953 (begin (quote #f) ((lambda (g$0$14955) (if g$0$14955 (begin (quote #f) (map cons g$0$14953 g$0$14955)) (quote #f))) (g$0$14949 (g$0$13223 g$0$14951)))) (quote #f))) ((lambda (g$0$14957) (list g$0$14957)) (g$0$13219 g$0$14951))) (if (g$0$13215 g$0$14951) (list (begin (quote d*) (quote ()))) (quote #f)))))) g$0$14949) (g$0$13219 g$0$14925)))) (quote #f))) g$0$14899))) g$0$14894))) (set! g$0$14785 (lambda (g$0$14787 g$0$14788) ((lambda (g$0$14791) ((lambda (g$0$14793) (if (if g$0$14793 (begin (quote #f) (apply (lambda (g$0$14795 g$0$14796 g$0$14797) (quote #t)) g$0$14793)) (quote #f)) (apply (lambda (g$0$14801 g$0$14802 g$0$14803) (g$0$14783 g$0$14787 g$0$14788 (g$0$13107))) g$0$14793) ((lambda (g$0$14807) ((lambda (g$0$14809) (if (if g$0$14809 (begin (quote #f) (apply (lambda (g$0$14811 g$0$14812 g$0$14813) (quote #t)) g$0$14809)) (quote #f)) (apply (lambda (g$0$14817 g$0$14818 g$0$14819) (if (if (g$0$13225 g$0$14817) (begin (quote #f) (g$0$13233 g$0$14817 (g$0$13478 (quote else)))) (quote #f)) (g$0$13108 (quote #f) (g$0$13592 (cons g$0$14818 g$0$14819) g$0$14778 g$0$14779)) (error (quote expander) (quote "invalid syntax") (g$0$13245 g$0$14777)))) g$0$14809) ((lambda (g$0$14823) ((lambda (g$0$14825) (if (if g$0$14825 (begin (quote #f) (apply (lambda (g$0$14827) (quote #t)) g$0$14825)) (quote #f)) (apply (lambda (g$0$14829) (error (quote expander) (quote "invalid syntax") (g$0$13245 g$0$14777))) g$0$14825) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$14823 (quote ()))))) ((lambda (g$0$14831) (list g$0$14831)) g$0$14823))) g$0$14807))) ((lambda (g$0$14833) (if (g$0$13211 g$0$14833) (begin (quote #f) ((lambda (g$0$14835) (if g$0$14835 (begin (quote #f) ((lambda (g$0$14837) (if g$0$14837 (begin (quote #f) (append g$0$14835 g$0$14837)) (quote #f))) ((lambda (g$0$14839) (if (g$0$13211 g$0$14839) (begin (quote #f) ((lambda (g$0$14841) (if g$0$14841 (begin (quote #f) ((lambda (g$0$14843) (if g$0$14843 (begin (quote #f) (append g$0$14841 g$0$14843)) (quote #f))) ((letrec ((g$0$14845 (lambda (g$0$14847) (if (g$0$13211 g$0$14847) ((lambda (g$0$14849) (if g$0$14849 (begin (quote #f) ((lambda (g$0$14851) (if g$0$14851 (begin (quote #f) (map cons g$0$14849 g$0$14851)) (quote #f))) (g$0$14845 (g$0$13223 g$0$14847)))) (quote #f))) ((lambda (g$0$14853) (list g$0$14853)) (g$0$13219 g$0$14847))) (if (g$0$13215 g$0$14847) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$14845) (g$0$13223 g$0$14839)))) (quote #f))) ((lambda (g$0$14855) (list g$0$14855)) (g$0$13219 g$0$14839)))) (quote #f))) (g$0$13223 g$0$14833)))) (quote #f))) ((lambda (g$0$14857) (list g$0$14857)) (g$0$13219 g$0$14833)))) (quote #f))) g$0$14807))) g$0$14791))) ((lambda (g$0$14859) (if (g$0$13211 g$0$14859) (begin (quote #f) ((lambda (g$0$14861) (if g$0$14861 (begin (quote #f) ((lambda (g$0$14863) (if g$0$14863 (begin (quote #f) (append g$0$14861 g$0$14863)) (quote #f))) ((lambda (g$0$14865) (if (g$0$13211 g$0$14865) (begin (quote #f) ((lambda (g$0$14867) (if g$0$14867 (begin (quote #f) ((lambda (g$0$14869) (if g$0$14869 (begin (quote #f) (append g$0$14867 g$0$14869)) (quote #f))) ((letrec ((g$0$14871 (lambda (g$0$14873) (if (g$0$13211 g$0$14873) ((lambda (g$0$14875) (if g$0$14875 (begin (quote #f) ((lambda (g$0$14877) (if g$0$14877 (begin (quote #f) (map cons g$0$14875 g$0$14877)) (quote #f))) (g$0$14871 (g$0$13223 g$0$14873)))) (quote #f))) ((lambda (g$0$14879) (list g$0$14879)) (g$0$13219 g$0$14873))) (if (g$0$13215 g$0$14873) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14871) (g$0$13223 g$0$14865)))) (quote #f))) ((lambda (g$0$14881) (list g$0$14881)) (g$0$13219 g$0$14865)))) (quote #f))) (g$0$13223 g$0$14859)))) (quote #f))) ((letrec ((g$0$14883 (lambda (g$0$14885) (if (g$0$13211 g$0$14885) ((lambda (g$0$14887) (if g$0$14887 (begin (quote #f) ((lambda (g$0$14889) (if g$0$14889 (begin (quote #f) (map cons g$0$14887 g$0$14889)) (quote #f))) (g$0$14883 (g$0$13223 g$0$14885)))) (quote #f))) ((lambda (g$0$14891) (list g$0$14891)) (g$0$13219 g$0$14885))) (if (g$0$13215 g$0$14885) (list (begin (quote d*) (quote ()))) (quote #f)))))) g$0$14883) (g$0$13219 g$0$14859)))) (quote #f))) g$0$14791))) g$0$14788))) ((lambda (g$0$14959) ((lambda (g$0$14961) (if (if g$0$14961 (begin (quote #f) (apply (lambda (g$0$14963) (quote #t)) g$0$14961)) (quote #f)) (apply (lambda (g$0$14965) (g$0$13108 (quote #f) (list (g$0$13596 g$0$14965 g$0$14778 g$0$14779) (g$0$13107)))) g$0$14961) ((lambda (g$0$14967) ((lambda (g$0$14969) (if (if g$0$14969 (begin (quote #f) (apply (lambda (g$0$14971 g$0$14972 g$0$14973) (quote #t)) g$0$14969)) (quote #f)) (apply (lambda (g$0$14977 g$0$14978 g$0$14979) ((lambda (g$0$14983) (g$0$13112 (quote #f) (list g$0$14983) (list (g$0$13596 g$0$14977 g$0$14778 g$0$14779)) (letrec ((g$0$14985 (lambda (g$0$14987 g$0$14988) (if (null? g$0$14988) (g$0$14785 g$0$14983 g$0$14987) (g$0$14783 g$0$14983 g$0$14987 (g$0$14985 (car g$0$14988) (cdr g$0$14988))))))) (g$0$14985 g$0$14978 g$0$14979)))) (g$0$13135 (quote t)))) g$0$14969) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$14967 (quote ()))))) ((lambda (g$0$14991) (if (g$0$13211 g$0$14991) (begin (quote #f) ((lambda (g$0$14993) (if g$0$14993 (begin (quote #f) ((lambda (g$0$14995) (if g$0$14995 (begin (quote #f) (append g$0$14993 g$0$14995)) (quote #f))) ((lambda (g$0$14997) (if (g$0$13211 g$0$14997) (begin (quote #f) ((lambda (g$0$14999) (if g$0$14999 (begin (quote #f) ((lambda (g$0$15001) (if g$0$15001 (begin (quote #f) (append g$0$14999 g$0$15001)) (quote #f))) ((lambda (g$0$15003) (if (g$0$13211 g$0$15003) (begin (quote #f) ((lambda (g$0$15005) (if g$0$15005 (begin (quote #f) ((lambda (g$0$15007) (if g$0$15007 (begin (quote #f) (append g$0$15005 g$0$15007)) (quote #f))) ((letrec ((g$0$15009 (lambda (g$0$15011) (if (g$0$13211 g$0$15011) ((lambda (g$0$15013) (if g$0$15013 (begin (quote #f) ((lambda (g$0$15015) (if g$0$15015 (begin (quote #f) (map cons g$0$15013 g$0$15015)) (quote #f))) (g$0$15009 (g$0$13223 g$0$15011)))) (quote #f))) ((lambda (g$0$15017) (list g$0$15017)) (g$0$13219 g$0$15011))) (if (g$0$13215 g$0$15011) (list (begin (quote cls*) (quote ()))) (quote #f)))))) g$0$15009) (g$0$13223 g$0$15003)))) (quote #f))) ((lambda (g$0$15019) (list g$0$15019)) (g$0$13219 g$0$15003)))) (quote #f))) (g$0$13223 g$0$14997)))) (quote #f))) ((lambda (g$0$15021) (list g$0$15021)) (g$0$13219 g$0$14997)))) (quote #f))) (g$0$13223 g$0$14991)))) (quote #f))) ((lambda (g$0$15023) (quote ())) (g$0$13219 g$0$14991)))) (quote #f))) g$0$14967))) g$0$14959))) ((lambda (g$0$15025) (if (g$0$13211 g$0$15025) (begin (quote #f) ((lambda (g$0$15027) (if g$0$15027 (begin (quote #f) ((lambda (g$0$15029) (if g$0$15029 (begin (quote #f) (append g$0$15027 g$0$15029)) (quote #f))) ((lambda (g$0$15031) (if (g$0$13211 g$0$15031) (begin (quote #f) ((lambda (g$0$15033) (if g$0$15033 (begin (quote #f) ((lambda (g$0$15035) (if g$0$15035 (begin (quote #f) (append g$0$15033 g$0$15035)) (quote #f))) ((lambda (g$0$15037) (if (equal? (g$0$13245 g$0$15037) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$15031)))) (quote #f))) ((lambda (g$0$15039) (list g$0$15039)) (g$0$13219 g$0$15031)))) (quote #f))) (g$0$13223 g$0$15025)))) (quote #f))) ((lambda (g$0$15041) (quote ())) (g$0$13219 g$0$15025)))) (quote #f))) g$0$14959))) g$0$14777))) (quote #f) (quote #f)))) (set! g$0$13506 (lambda (g$0$15043 g$0$15044 g$0$15045) ((lambda (g$0$15049) ((lambda (g$0$15051) (if (if g$0$15051 (begin (quote #f) (apply (lambda (g$0$15053) (quote #t)) g$0$15051)) (quote #f)) (apply (lambda (g$0$15055) (list (quote quote) (g$0$13245 g$0$15055))) g$0$15051) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$15049 (quote ()))))) ((lambda (g$0$15057) (if (g$0$13211 g$0$15057) (begin (quote #f) ((lambda (g$0$15059) (if g$0$15059 (begin (quote #f) ((lambda (g$0$15061) (if g$0$15061 (begin (quote #f) (append g$0$15059 g$0$15061)) (quote #f))) ((lambda (g$0$15063) (if (g$0$13211 g$0$15063) (begin (quote #f) ((lambda (g$0$15065) (if g$0$15065 (begin (quote #f) ((lambda (g$0$15067) (if g$0$15067 (begin (quote #f) (append g$0$15065 g$0$15067)) (quote #f))) ((lambda (g$0$15069) (if (equal? (g$0$13245 g$0$15069) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$15063)))) (quote #f))) ((lambda (g$0$15071) (list g$0$15071)) (g$0$13219 g$0$15063)))) (quote #f))) (g$0$13223 g$0$15057)))) (quote #f))) ((lambda (g$0$15073) (quote ())) (g$0$13219 g$0$15057)))) (quote #f))) g$0$15049))) g$0$15043))) (set! g$0$13508 (lambda (g$0$15075 g$0$15076 g$0$15077) ((lambda (g$0$15081) ((lambda (g$0$15083) (if (if g$0$15083 (begin (quote #f) (apply (lambda (g$0$15085 g$0$15086 g$0$15087) (quote #t)) g$0$15083)) (quote #f)) (apply (lambda (g$0$15091 g$0$15092 g$0$15093) (call-with-values (lambda () (g$0$13602 g$0$15091 (map cons g$0$15092 g$0$15093) g$0$15076 g$0$15077)) (lambda (g$0$15097 g$0$15098) (g$0$13113 (quote #f) g$0$15097 g$0$15098)))) g$0$15083) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$15081 (quote ()))))) ((lambda (g$0$15101) (if (g$0$13211 g$0$15101) (begin (quote #f) ((lambda (g$0$15103) (if g$0$15103 (begin (quote #f) ((lambda (g$0$15105) (if g$0$15105 (begin (quote #f) (append g$0$15103 g$0$15105)) (quote #f))) ((letrec ((g$0$15107 (lambda (g$0$15109) (if (g$0$13211 g$0$15109) ((lambda (g$0$15111) (if g$0$15111 (begin (quote #f) ((lambda (g$0$15113) (if g$0$15113 (begin (quote #f) (map cons g$0$15111 g$0$15113)) (quote #f))) (g$0$15107 (g$0$13223 g$0$15109)))) (quote #f))) ((lambda (g$0$15115) (if (g$0$13211 g$0$15115) (begin (quote #f) ((lambda (g$0$15117) (if g$0$15117 (begin (quote #f) ((lambda (g$0$15119) (if g$0$15119 (begin (quote #f) (append g$0$15117 g$0$15119)) (quote #f))) ((lambda (g$0$15121) (if (g$0$13211 g$0$15121) (begin (quote #f) ((lambda (g$0$15123) (if g$0$15123 (begin (quote #f) ((lambda (g$0$15125) (if g$0$15125 (begin (quote #f) (append g$0$15123 g$0$15125)) (quote #f))) ((letrec ((g$0$15127 (lambda (g$0$15129) (if (g$0$13211 g$0$15129) ((lambda (g$0$15131) (if g$0$15131 (begin (quote #f) ((lambda (g$0$15133) (if g$0$15133 (begin (quote #f) (map cons g$0$15131 g$0$15133)) (quote #f))) (g$0$15127 (g$0$13223 g$0$15129)))) (quote #f))) ((lambda (g$0$15135) (list g$0$15135)) (g$0$13219 g$0$15129))) (if (g$0$13215 g$0$15129) (list (begin (quote b**) (quote ()))) (quote #f)))))) g$0$15127) (g$0$13223 g$0$15121)))) (quote #f))) ((lambda (g$0$15137) (list g$0$15137)) (g$0$13219 g$0$15121)))) (quote #f))) (g$0$13223 g$0$15115)))) (quote #f))) ((lambda (g$0$15139) (list g$0$15139)) (g$0$13219 g$0$15115)))) (quote #f))) (g$0$13219 g$0$15109))) (if (g$0$13215 g$0$15109) (list (begin (quote fmls*) (quote ())) (begin (quote b*) (quote ())) (begin (quote b**) (quote ()))) (quote #f)))))) g$0$15107) (g$0$13223 g$0$15101)))) (quote #f))) ((lambda (g$0$15141) (quote ())) (g$0$13219 g$0$15101)))) (quote #f))) g$0$15081))) g$0$15075))) (set! g$0$13510 (lambda (g$0$15143 g$0$15144 g$0$15145) ((lambda (g$0$15149) ((lambda (g$0$15151) (if (if g$0$15151 (begin (quote #f) (apply (lambda (g$0$15153 g$0$15154 g$0$15155) (quote #t)) g$0$15151)) (quote #f)) (apply (lambda (g$0$15159 g$0$15160 g$0$15161) (call-with-values (lambda () (g$0$13600 g$0$15159 (cons g$0$15160 g$0$15161) g$0$15144 g$0$15145)) (lambda (g$0$15165 g$0$15166) (g$0$13114 (quote #f) g$0$15165 g$0$15166)))) g$0$15151) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$15149 (quote ()))))) ((lambda (g$0$15169) (if (g$0$13211 g$0$15169) (begin (quote #f) ((lambda (g$0$15171) (if g$0$15171 (begin (quote #f) ((lambda (g$0$15173) (if g$0$15173 (begin (quote #f) (append g$0$15171 g$0$15173)) (quote #f))) ((lambda (g$0$15175) (if (g$0$13211 g$0$15175) (begin (quote #f) ((lambda (g$0$15177) (if g$0$15177 (begin (quote #f) ((lambda (g$0$15179) (if g$0$15179 (begin (quote #f) (append g$0$15177 g$0$15179)) (quote #f))) ((lambda (g$0$15181) (if (g$0$13211 g$0$15181) (begin (quote #f) ((lambda (g$0$15183) (if g$0$15183 (begin (quote #f) ((lambda (g$0$15185) (if g$0$15185 (begin (quote #f) (append g$0$15183 g$0$15185)) (quote #f))) ((letrec ((g$0$15187 (lambda (g$0$15189) (if (g$0$13211 g$0$15189) ((lambda (g$0$15191) (if g$0$15191 (begin (quote #f) ((lambda (g$0$15193) (if g$0$15193 (begin (quote #f) (map cons g$0$15191 g$0$15193)) (quote #f))) (g$0$15187 (g$0$13223 g$0$15189)))) (quote #f))) ((lambda (g$0$15195) (list g$0$15195)) (g$0$13219 g$0$15189))) (if (g$0$13215 g$0$15189) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15187) (g$0$13223 g$0$15181)))) (quote #f))) ((lambda (g$0$15197) (list g$0$15197)) (g$0$13219 g$0$15181)))) (quote #f))) (g$0$13223 g$0$15175)))) (quote #f))) ((lambda (g$0$15199) (list g$0$15199)) (g$0$13219 g$0$15175)))) (quote #f))) (g$0$13223 g$0$15169)))) (quote #f))) ((lambda (g$0$15201) (quote ())) (g$0$13219 g$0$15169)))) (quote #f))) g$0$15149))) g$0$15143))) (set! g$0$13512 (lambda (g$0$15203) (g$0$13201 (letrec ((g$0$15205 (lambda (g$0$15207) (if (g$0$13177 g$0$15207) g$0$15207 (if (pair? g$0$15207) (cons (g$0$15205 (car g$0$15207)) (g$0$15205 (cdr g$0$15207))) (if (symbol? g$0$15207) (g$0$13478 g$0$15207) (if (vector? g$0$15207) (list->vector (map g$0$15205 (vector->list g$0$15207))) g$0$15207))))))) (g$0$15205 g$0$15203)) (quote ()) (quote ())))) (set! g$0$13514 (lambda (g$0$15209) ((lambda (g$0$15211) ((lambda (g$0$15213) (if (if g$0$15213 (begin (quote #f) (apply (lambda (g$0$15215 g$0$15216 g$0$15217 g$0$15218) (quote #t)) g$0$15213)) (quote #f)) (apply (lambda (g$0$15223 g$0$15224 g$0$15225 g$0$15226) (g$0$13512 (list (quote syntax-case) (cons (quote list) g$0$15224) (quote ()) (list g$0$15223 (cons (quote begin) (cons g$0$15225 g$0$15226)))))) g$0$15213) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$15211 (quote ()))))) ((lambda (g$0$15231) (if (g$0$13211 g$0$15231) (begin (quote #f) ((lambda (g$0$15233) (if g$0$15233 (begin (quote #f) ((lambda (g$0$15235) (if g$0$15235 (begin (quote #f) (append g$0$15233 g$0$15235)) (quote #f))) ((lambda (g$0$15237) (if (g$0$13211 g$0$15237) (begin (quote #f) ((lambda (g$0$15239) (if g$0$15239 (begin (quote #f) ((lambda (g$0$15241) (if g$0$15241 (begin (quote #f) (append g$0$15239 g$0$15241)) (quote #f))) ((lambda (g$0$15243) (if (g$0$13211 g$0$15243) (begin (quote #f) ((lambda (g$0$15245) (if g$0$15245 (begin (quote #f) ((lambda (g$0$15247) (if g$0$15247 (begin (quote #f) (append g$0$15245 g$0$15247)) (quote #f))) ((letrec ((g$0$15249 (lambda (g$0$15251) (if (g$0$13211 g$0$15251) ((lambda (g$0$15253) (if g$0$15253 (begin (quote #f) ((lambda (g$0$15255) (if g$0$15255 (begin (quote #f) (map cons g$0$15253 g$0$15255)) (quote #f))) (g$0$15249 (g$0$13223 g$0$15251)))) (quote #f))) ((lambda (g$0$15257) (list g$0$15257)) (g$0$13219 g$0$15251))) (if (g$0$13215 g$0$15251) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15249) (g$0$13223 g$0$15243)))) (quote #f))) ((lambda (g$0$15259) (list g$0$15259)) (g$0$13219 g$0$15243)))) (quote #f))) (g$0$13223 g$0$15237)))) (quote #f))) ((letrec ((g$0$15261 (lambda (g$0$15263) (if (g$0$13211 g$0$15263) ((lambda (g$0$15265) (if g$0$15265 (begin (quote #f) ((lambda (g$0$15267) (if g$0$15267 (begin (quote #f) (map cons g$0$15265 g$0$15267)) (quote #f))) (g$0$15261 (g$0$13223 g$0$15263)))) (quote #f))) ((lambda (g$0$15269) (if (g$0$13211 g$0$15269) (begin (quote #f) ((lambda (g$0$15271) (if g$0$15271 (begin (quote #f) ((lambda (g$0$15273) (if g$0$15273 (begin (quote #f) (append g$0$15271 g$0$15273)) (quote #f))) ((lambda (g$0$15275) (if (g$0$13211 g$0$15275) (begin (quote #f) ((lambda (g$0$15277) (if g$0$15277 (begin (quote #f) ((lambda (g$0$15279) (if g$0$15279 (begin (quote #f) (append g$0$15277 g$0$15279)) (quote #f))) ((lambda (g$0$15281) (if (equal? (g$0$13245 g$0$15281) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$15275)))) (quote #f))) ((lambda (g$0$15283) (list g$0$15283)) (g$0$13219 g$0$15275)))) (quote #f))) (g$0$13223 g$0$15269)))) (quote #f))) ((lambda (g$0$15285) (list g$0$15285)) (g$0$13219 g$0$15269)))) (quote #f))) (g$0$13219 g$0$15263))) (if (g$0$13215 g$0$15263) (list (begin (quote fml*) (quote ())) (begin (quote expr*) (quote ()))) (quote #f)))))) g$0$15261) (g$0$13219 g$0$15237)))) (quote #f))) (g$0$13223 g$0$15231)))) (quote #f))) ((lambda (g$0$15287) (quote ())) (g$0$13219 g$0$15231)))) (quote #f))) g$0$15211))) g$0$15209))) (set! g$0$13516 (lambda (g$0$15289) ((lambda (g$0$15291) ((lambda (g$0$15293) (if (if g$0$15293 (begin (quote #f) (apply (lambda (g$0$15295 g$0$15296 g$0$15297 g$0$15298) (quote #t)) g$0$15293)) (quote #f)) (apply (lambda (g$0$15303 g$0$15304 g$0$15305 g$0$15306) (if (g$0$13235 g$0$15303) (g$0$13512 (cons (cons (quote lambda) (cons g$0$15303 (cons g$0$15305 g$0$15306))) g$0$15304)) (error (quote expander) (quote "invalid bindings") (g$0$13243 g$0$15289 (quote ()))))) g$0$15293) ((lambda (g$0$15311) ((lambda (g$0$15313) (if (if g$0$15313 (begin (quote #f) (apply (lambda (g$0$15315 g$0$15316 g$0$15317 g$0$15318 g$0$15319) (g$0$13225 g$0$15315)) g$0$15313)) (quote #f)) (apply (lambda (g$0$15325 g$0$15326 g$0$15327 g$0$15328 g$0$15329) (if (g$0$13235 g$0$15326) (g$0$13512 (list (quote letrec) (list (list g$0$15325 (cons (quote lambda) (cons g$0$15326 (cons g$0$15328 g$0$15329))))) (cons g$0$15325 g$0$15327))) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$15289 (quote ()))))) g$0$15313) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$15311 (quote ()))))) ((lambda (g$0$15335) (if (g$0$13211 g$0$15335) (begin (quote #f) ((lambda (g$0$15337) (if g$0$15337 (begin (quote #f) ((lambda (g$0$15339) (if g$0$15339 (begin (quote #f) (append g$0$15337 g$0$15339)) (quote #f))) ((lambda (g$0$15341) (if (g$0$13211 g$0$15341) (begin (quote #f) ((lambda (g$0$15343) (if g$0$15343 (begin (quote #f) ((lambda (g$0$15345) (if g$0$15345 (begin (quote #f) (append g$0$15343 g$0$15345)) (quote #f))) ((lambda (g$0$15347) (if (g$0$13211 g$0$15347) (begin (quote #f) ((lambda (g$0$15349) (if g$0$15349 (begin (quote #f) ((lambda (g$0$15351) (if g$0$15351 (begin (quote #f) (append g$0$15349 g$0$15351)) (quote #f))) ((lambda (g$0$15353) (if (g$0$13211 g$0$15353) (begin (quote #f) ((lambda (g$0$15355) (if g$0$15355 (begin (quote #f) ((lambda (g$0$15357) (if g$0$15357 (begin (quote #f) (append g$0$15355 g$0$15357)) (quote #f))) ((letrec ((g$0$15359 (lambda (g$0$15361) (if (g$0$13211 g$0$15361) ((lambda (g$0$15363) (if g$0$15363 (begin (quote #f) ((lambda (g$0$15365) (if g$0$15365 (begin (quote #f) (map cons g$0$15363 g$0$15365)) (quote #f))) (g$0$15359 (g$0$13223 g$0$15361)))) (quote #f))) ((lambda (g$0$15367) (list g$0$15367)) (g$0$13219 g$0$15361))) (if (g$0$13215 g$0$15361) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15359) (g$0$13223 g$0$15353)))) (quote #f))) ((lambda (g$0$15369) (list g$0$15369)) (g$0$13219 g$0$15353)))) (quote #f))) (g$0$13223 g$0$15347)))) (quote #f))) ((letrec ((g$0$15371 (lambda (g$0$15373) (if (g$0$13211 g$0$15373) ((lambda (g$0$15375) (if g$0$15375 (begin (quote #f) ((lambda (g$0$15377) (if g$0$15377 (begin (quote #f) (map cons g$0$15375 g$0$15377)) (quote #f))) (g$0$15371 (g$0$13223 g$0$15373)))) (quote #f))) ((lambda (g$0$15379) (if (g$0$13211 g$0$15379) (begin (quote #f) ((lambda (g$0$15381) (if g$0$15381 (begin (quote #f) ((lambda (g$0$15383) (if g$0$15383 (begin (quote #f) (append g$0$15381 g$0$15383)) (quote #f))) ((lambda (g$0$15385) (if (g$0$13211 g$0$15385) (begin (quote #f) ((lambda (g$0$15387) (if g$0$15387 (begin (quote #f) ((lambda (g$0$15389) (if g$0$15389 (begin (quote #f) (append g$0$15387 g$0$15389)) (quote #f))) ((lambda (g$0$15391) (if (equal? (g$0$13245 g$0$15391) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$15385)))) (quote #f))) ((lambda (g$0$15393) (list g$0$15393)) (g$0$13219 g$0$15385)))) (quote #f))) (g$0$13223 g$0$15379)))) (quote #f))) ((lambda (g$0$15395) (list g$0$15395)) (g$0$13219 g$0$15379)))) (quote #f))) (g$0$13219 g$0$15373))) (if (g$0$13215 g$0$15373) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$15371) (g$0$13219 g$0$15347)))) (quote #f))) (g$0$13223 g$0$15341)))) (quote #f))) ((lambda (g$0$15397) (list g$0$15397)) (g$0$13219 g$0$15341)))) (quote #f))) (g$0$13223 g$0$15335)))) (quote #f))) ((lambda (g$0$15399) (quote ())) (g$0$13219 g$0$15335)))) (quote #f))) g$0$15311))) g$0$15291))) ((lambda (g$0$15401) (if (g$0$13211 g$0$15401) (begin (quote #f) ((lambda (g$0$15403) (if g$0$15403 (begin (quote #f) ((lambda (g$0$15405) (if g$0$15405 (begin (quote #f) (append g$0$15403 g$0$15405)) (quote #f))) ((lambda (g$0$15407) (if (g$0$13211 g$0$15407) (begin (quote #f) ((lambda (g$0$15409) (if g$0$15409 (begin (quote #f) ((lambda (g$0$15411) (if g$0$15411 (begin (quote #f) (append g$0$15409 g$0$15411)) (quote #f))) ((lambda (g$0$15413) (if (g$0$13211 g$0$15413) (begin (quote #f) ((lambda (g$0$15415) (if g$0$15415 (begin (quote #f) ((lambda (g$0$15417) (if g$0$15417 (begin (quote #f) (append g$0$15415 g$0$15417)) (quote #f))) ((letrec ((g$0$15419 (lambda (g$0$15421) (if (g$0$13211 g$0$15421) ((lambda (g$0$15423) (if g$0$15423 (begin (quote #f) ((lambda (g$0$15425) (if g$0$15425 (begin (quote #f) (map cons g$0$15423 g$0$15425)) (quote #f))) (g$0$15419 (g$0$13223 g$0$15421)))) (quote #f))) ((lambda (g$0$15427) (list g$0$15427)) (g$0$13219 g$0$15421))) (if (g$0$13215 g$0$15421) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15419) (g$0$13223 g$0$15413)))) (quote #f))) ((lambda (g$0$15429) (list g$0$15429)) (g$0$13219 g$0$15413)))) (quote #f))) (g$0$13223 g$0$15407)))) (quote #f))) ((letrec ((g$0$15431 (lambda (g$0$15433) (if (g$0$13211 g$0$15433) ((lambda (g$0$15435) (if g$0$15435 (begin (quote #f) ((lambda (g$0$15437) (if g$0$15437 (begin (quote #f) (map cons g$0$15435 g$0$15437)) (quote #f))) (g$0$15431 (g$0$13223 g$0$15433)))) (quote #f))) ((lambda (g$0$15439) (if (g$0$13211 g$0$15439) (begin (quote #f) ((lambda (g$0$15441) (if g$0$15441 (begin (quote #f) ((lambda (g$0$15443) (if g$0$15443 (begin (quote #f) (append g$0$15441 g$0$15443)) (quote #f))) ((lambda (g$0$15445) (if (g$0$13211 g$0$15445) (begin (quote #f) ((lambda (g$0$15447) (if g$0$15447 (begin (quote #f) ((lambda (g$0$15449) (if g$0$15449 (begin (quote #f) (append g$0$15447 g$0$15449)) (quote #f))) ((lambda (g$0$15451) (if (equal? (g$0$13245 g$0$15451) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$15445)))) (quote #f))) ((lambda (g$0$15453) (list g$0$15453)) (g$0$13219 g$0$15445)))) (quote #f))) (g$0$13223 g$0$15439)))) (quote #f))) ((lambda (g$0$15455) (list g$0$15455)) (g$0$13219 g$0$15439)))) (quote #f))) (g$0$13219 g$0$15433))) (if (g$0$13215 g$0$15433) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$15431) (g$0$13219 g$0$15407)))) (quote #f))) (g$0$13223 g$0$15401)))) (quote #f))) ((lambda (g$0$15457) (quote ())) (g$0$13219 g$0$15401)))) (quote #f))) g$0$15291))) g$0$15289))) (set! g$0$13518 (lambda (g$0$15459) ((lambda (g$0$15461) ((lambda (g$0$15463) (if (if g$0$15463 (begin (quote #f) (apply (lambda (g$0$15465 g$0$15466 g$0$15467 g$0$15468) (quote #t)) g$0$15463)) (quote #f)) (apply (lambda (g$0$15473 g$0$15474 g$0$15475 g$0$15476) (if (g$0$13235 g$0$15474) (g$0$13512 (list (quote make-traced-procedure) (list (quote quote) g$0$15473) (cons (quote lambda) (cons g$0$15474 (cons g$0$15475 g$0$15476))))) (error (quote expander) (quote "invalid formals") (g$0$13243 g$0$15459 (quote ()))))) g$0$15463) ((lambda (g$0$15481) ((lambda (g$0$15483) (if (if g$0$15483 (begin (quote #f) (apply (lambda (g$0$15485 g$0$15486 g$0$15487 g$0$15488 g$0$15489) (quote #t)) g$0$15483)) (quote #f)) (apply (lambda (g$0$15495 g$0$15496 g$0$15497 g$0$15498 g$0$15499) (if (g$0$13235 (cons g$0$15497 g$0$15496)) (g$0$13512 (list (quote make-traced-procedure) (list (quote quote) g$0$15495) (cons (quote lambda) (cons (append g$0$15496 g$0$15497) (cons g$0$15498 g$0$15499))))) (error (quote expander) (quote "invalid formals") (g$0$13243 g$0$15459 (quote ()))))) g$0$15483) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$15481 (quote ()))))) ((lambda (g$0$15505) (if (g$0$13211 g$0$15505) (begin (quote #f) ((lambda (g$0$15507) (if g$0$15507 (begin (quote #f) ((lambda (g$0$15509) (if g$0$15509 (begin (quote #f) (append g$0$15507 g$0$15509)) (quote #f))) ((lambda (g$0$15511) (if (g$0$13211 g$0$15511) (begin (quote #f) ((lambda (g$0$15513) (if g$0$15513 (begin (quote #f) ((lambda (g$0$15515) (if g$0$15515 (begin (quote #f) (append g$0$15513 g$0$15515)) (quote #f))) ((lambda (g$0$15517) (if (g$0$13211 g$0$15517) (begin (quote #f) ((lambda (g$0$15519) (if g$0$15519 (begin (quote #f) ((lambda (g$0$15521) (if g$0$15521 (begin (quote #f) (append g$0$15519 g$0$15521)) (quote #f))) ((lambda (g$0$15523) (if (g$0$13211 g$0$15523) (begin (quote #f) ((lambda (g$0$15525) (if g$0$15525 (begin (quote #f) ((lambda (g$0$15527) (if g$0$15527 (begin (quote #f) (append g$0$15525 g$0$15527)) (quote #f))) ((letrec ((g$0$15529 (lambda (g$0$15531) (if (g$0$13211 g$0$15531) ((lambda (g$0$15533) (if g$0$15533 (begin (quote #f) ((lambda (g$0$15535) (if g$0$15535 (begin (quote #f) (map cons g$0$15533 g$0$15535)) (quote #f))) (g$0$15529 (g$0$13223 g$0$15531)))) (quote #f))) ((lambda (g$0$15537) (list g$0$15537)) (g$0$13219 g$0$15531))) (if (g$0$13215 g$0$15531) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15529) (g$0$13223 g$0$15523)))) (quote #f))) ((lambda (g$0$15539) (list g$0$15539)) (g$0$13219 g$0$15523)))) (quote #f))) (g$0$13223 g$0$15517)))) (quote #f))) ((letrec ((g$0$15541 (lambda (g$0$15547) (if (g$0$13211 g$0$15547) ((lambda (g$0$15549) (if g$0$15549 (begin (quote #f) ((lambda (g$0$15551) (if g$0$15551 (begin (quote #f) (cons (map cons g$0$15549 (car g$0$15551)) (cdr g$0$15551))) (quote #f))) (g$0$15541 (g$0$13223 g$0$15547)))) (quote #f))) ((lambda (g$0$15553) (list g$0$15553)) (g$0$13219 g$0$15547))) ((lambda (g$0$15555) (if g$0$15555 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) g$0$15555)) (quote #f))) ((lambda (g$0$15557) (list g$0$15557)) g$0$15547)))))) (lambda (g$0$15543) ((lambda (g$0$15545) (if g$0$15545 (begin (quote #f) (append (car g$0$15545) (cdr g$0$15545))) (quote #f))) (g$0$15541 g$0$15543)))) (g$0$13219 g$0$15517)))) (quote #f))) (g$0$13223 g$0$15511)))) (quote #f))) ((lambda (g$0$15559) (list g$0$15559)) (g$0$13219 g$0$15511)))) (quote #f))) (g$0$13223 g$0$15505)))) (quote #f))) ((lambda (g$0$15561) (quote ())) (g$0$13219 g$0$15505)))) (quote #f))) g$0$15481))) g$0$15461))) ((lambda (g$0$15563) (if (g$0$13211 g$0$15563) (begin (quote #f) ((lambda (g$0$15565) (if g$0$15565 (begin (quote #f) ((lambda (g$0$15567) (if g$0$15567 (begin (quote #f) (append g$0$15565 g$0$15567)) (quote #f))) ((lambda (g$0$15569) (if (g$0$13211 g$0$15569) (begin (quote #f) ((lambda (g$0$15571) (if g$0$15571 (begin (quote #f) ((lambda (g$0$15573) (if g$0$15573 (begin (quote #f) (append g$0$15571 g$0$15573)) (quote #f))) ((lambda (g$0$15575) (if (g$0$13211 g$0$15575) (begin (quote #f) ((lambda (g$0$15577) (if g$0$15577 (begin (quote #f) ((lambda (g$0$15579) (if g$0$15579 (begin (quote #f) (append g$0$15577 g$0$15579)) (quote #f))) ((lambda (g$0$15581) (if (g$0$13211 g$0$15581) (begin (quote #f) ((lambda (g$0$15583) (if g$0$15583 (begin (quote #f) ((lambda (g$0$15585) (if g$0$15585 (begin (quote #f) (append g$0$15583 g$0$15585)) (quote #f))) ((letrec ((g$0$15587 (lambda (g$0$15589) (if (g$0$13211 g$0$15589) ((lambda (g$0$15591) (if g$0$15591 (begin (quote #f) ((lambda (g$0$15593) (if g$0$15593 (begin (quote #f) (map cons g$0$15591 g$0$15593)) (quote #f))) (g$0$15587 (g$0$13223 g$0$15589)))) (quote #f))) ((lambda (g$0$15595) (list g$0$15595)) (g$0$13219 g$0$15589))) (if (g$0$13215 g$0$15589) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15587) (g$0$13223 g$0$15581)))) (quote #f))) ((lambda (g$0$15597) (list g$0$15597)) (g$0$13219 g$0$15581)))) (quote #f))) (g$0$13223 g$0$15575)))) (quote #f))) ((letrec ((g$0$15599 (lambda (g$0$15601) (if (g$0$13211 g$0$15601) ((lambda (g$0$15603) (if g$0$15603 (begin (quote #f) ((lambda (g$0$15605) (if g$0$15605 (begin (quote #f) (map cons g$0$15603 g$0$15605)) (quote #f))) (g$0$15599 (g$0$13223 g$0$15601)))) (quote #f))) ((lambda (g$0$15607) (list g$0$15607)) (g$0$13219 g$0$15601))) (if (g$0$13215 g$0$15601) (list (begin (quote fmls) (quote ()))) (quote #f)))))) g$0$15599) (g$0$13219 g$0$15575)))) (quote #f))) (g$0$13223 g$0$15569)))) (quote #f))) ((lambda (g$0$15609) (list g$0$15609)) (g$0$13219 g$0$15569)))) (quote #f))) (g$0$13223 g$0$15563)))) (quote #f))) ((lambda (g$0$15611) (quote ())) (g$0$13219 g$0$15563)))) (quote #f))) g$0$15461))) g$0$15459))) (set! g$0$13520 (lambda (g$0$15613) ((lambda (g$0$15615) ((lambda (g$0$15617) (if (if g$0$15617 (begin (quote #f) (apply (lambda (g$0$15619 g$0$15620 g$0$15621 g$0$15622) (quote #t)) g$0$15617)) (quote #f)) (apply (lambda (g$0$15627 g$0$15628 g$0$15629 g$0$15630) (if (g$0$13235 g$0$15628) (g$0$13512 (list (quote define) g$0$15627 (list (quote make-traced-procedure) (list (quote quote) g$0$15627) (cons (quote lambda) (cons g$0$15628 (cons g$0$15629 g$0$15630)))))) (error (quote expander) (quote "invalid formals") (g$0$13243 g$0$15613 (quote ()))))) g$0$15617) ((lambda (g$0$15635) ((lambda (g$0$15637) (if (if g$0$15637 (begin (quote #f) (apply (lambda (g$0$15639 g$0$15640 g$0$15641 g$0$15642 g$0$15643) (quote #t)) g$0$15637)) (quote #f)) (apply (lambda (g$0$15649 g$0$15650 g$0$15651 g$0$15652 g$0$15653) (if (g$0$13235 (cons g$0$15651 g$0$15650)) (g$0$13512 (list (quote define) g$0$15649 (list (quote make-traced-procedure) (list (quote quote) g$0$15649) (cons (quote lambda) (cons (append g$0$15650 g$0$15651) (cons g$0$15652 g$0$15653)))))) (error (quote expander) (quote "invalid formals") (g$0$13243 g$0$15613 (quote ()))))) g$0$15637) ((lambda (g$0$15659) ((lambda (g$0$15661) (if (if g$0$15661 (begin (quote #f) (apply (lambda (g$0$15663 g$0$15664) (quote #t)) g$0$15661)) (quote #f)) (apply (lambda (g$0$15667 g$0$15668) (if (g$0$13225 g$0$15667) (g$0$13512 (list (quote define) g$0$15667 (list (quote let) (list (list (quote v) g$0$15668)) (cons (quote if) (cons (quote (procedure? v)) (cons (cons (quote make-traced-procedure) (cons (list (quote quote) g$0$15667) (quote (v)))) (quote ((error (quote trace-define) "not a procedure" v))))))))) (error (quote expander) (quote "invalid formals") (g$0$13243 g$0$15613 (quote ()))))) g$0$15661) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$15659 (quote ()))))) ((lambda (g$0$15671) (if (g$0$13211 g$0$15671) (begin (quote #f) ((lambda (g$0$15673) (if g$0$15673 (begin (quote #f) ((lambda (g$0$15675) (if g$0$15675 (begin (quote #f) (append g$0$15673 g$0$15675)) (quote #f))) ((lambda (g$0$15677) (if (g$0$13211 g$0$15677) (begin (quote #f) ((lambda (g$0$15679) (if g$0$15679 (begin (quote #f) ((lambda (g$0$15681) (if g$0$15681 (begin (quote #f) (append g$0$15679 g$0$15681)) (quote #f))) ((lambda (g$0$15683) (if (g$0$13211 g$0$15683) (begin (quote #f) ((lambda (g$0$15685) (if g$0$15685 (begin (quote #f) ((lambda (g$0$15687) (if g$0$15687 (begin (quote #f) (append g$0$15685 g$0$15687)) (quote #f))) ((lambda (g$0$15689) (if (equal? (g$0$13245 g$0$15689) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$15683)))) (quote #f))) ((lambda (g$0$15691) (list g$0$15691)) (g$0$13219 g$0$15683)))) (quote #f))) (g$0$13223 g$0$15677)))) (quote #f))) ((lambda (g$0$15693) (list g$0$15693)) (g$0$13219 g$0$15677)))) (quote #f))) (g$0$13223 g$0$15671)))) (quote #f))) ((lambda (g$0$15695) (quote ())) (g$0$13219 g$0$15671)))) (quote #f))) g$0$15659))) g$0$15635))) ((lambda (g$0$15697) (if (g$0$13211 g$0$15697) (begin (quote #f) ((lambda (g$0$15699) (if g$0$15699 (begin (quote #f) ((lambda (g$0$15701) (if g$0$15701 (begin (quote #f) (append g$0$15699 g$0$15701)) (quote #f))) ((lambda (g$0$15703) (if (g$0$13211 g$0$15703) (begin (quote #f) ((lambda (g$0$15705) (if g$0$15705 (begin (quote #f) ((lambda (g$0$15707) (if g$0$15707 (begin (quote #f) (append g$0$15705 g$0$15707)) (quote #f))) ((lambda (g$0$15709) (if (g$0$13211 g$0$15709) (begin (quote #f) ((lambda (g$0$15711) (if g$0$15711 (begin (quote #f) ((lambda (g$0$15713) (if g$0$15713 (begin (quote #f) (append g$0$15711 g$0$15713)) (quote #f))) ((letrec ((g$0$15715 (lambda (g$0$15717) (if (g$0$13211 g$0$15717) ((lambda (g$0$15719) (if g$0$15719 (begin (quote #f) ((lambda (g$0$15721) (if g$0$15721 (begin (quote #f) (map cons g$0$15719 g$0$15721)) (quote #f))) (g$0$15715 (g$0$13223 g$0$15717)))) (quote #f))) ((lambda (g$0$15723) (list g$0$15723)) (g$0$13219 g$0$15717))) (if (g$0$13215 g$0$15717) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15715) (g$0$13223 g$0$15709)))) (quote #f))) ((lambda (g$0$15725) (list g$0$15725)) (g$0$13219 g$0$15709)))) (quote #f))) (g$0$13223 g$0$15703)))) (quote #f))) ((lambda (g$0$15727) (if (g$0$13211 g$0$15727) (begin (quote #f) ((lambda (g$0$15729) (if g$0$15729 (begin (quote #f) ((lambda (g$0$15731) (if g$0$15731 (begin (quote #f) (append g$0$15729 g$0$15731)) (quote #f))) ((letrec ((g$0$15733 (lambda (g$0$15739) (if (g$0$13211 g$0$15739) ((lambda (g$0$15741) (if g$0$15741 (begin (quote #f) ((lambda (g$0$15743) (if g$0$15743 (begin (quote #f) (cons (map cons g$0$15741 (car g$0$15743)) (cdr g$0$15743))) (quote #f))) (g$0$15733 (g$0$13223 g$0$15739)))) (quote #f))) ((lambda (g$0$15745) (list g$0$15745)) (g$0$13219 g$0$15739))) ((lambda (g$0$15747) (if g$0$15747 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) g$0$15747)) (quote #f))) ((lambda (g$0$15749) (list g$0$15749)) g$0$15739)))))) (lambda (g$0$15735) ((lambda (g$0$15737) (if g$0$15737 (begin (quote #f) (append (car g$0$15737) (cdr g$0$15737))) (quote #f))) (g$0$15733 g$0$15735)))) (g$0$13223 g$0$15727)))) (quote #f))) ((lambda (g$0$15751) (list g$0$15751)) (g$0$13219 g$0$15727)))) (quote #f))) (g$0$13219 g$0$15703)))) (quote #f))) (g$0$13223 g$0$15697)))) (quote #f))) ((lambda (g$0$15753) (quote ())) (g$0$13219 g$0$15697)))) (quote #f))) g$0$15635))) g$0$15615))) ((lambda (g$0$15755) (if (g$0$13211 g$0$15755) (begin (quote #f) ((lambda (g$0$15757) (if g$0$15757 (begin (quote #f) ((lambda (g$0$15759) (if g$0$15759 (begin (quote #f) (append g$0$15757 g$0$15759)) (quote #f))) ((lambda (g$0$15761) (if (g$0$13211 g$0$15761) (begin (quote #f) ((lambda (g$0$15763) (if g$0$15763 (begin (quote #f) ((lambda (g$0$15765) (if g$0$15765 (begin (quote #f) (append g$0$15763 g$0$15765)) (quote #f))) ((lambda (g$0$15767) (if (g$0$13211 g$0$15767) (begin (quote #f) ((lambda (g$0$15769) (if g$0$15769 (begin (quote #f) ((lambda (g$0$15771) (if g$0$15771 (begin (quote #f) (append g$0$15769 g$0$15771)) (quote #f))) ((letrec ((g$0$15773 (lambda (g$0$15775) (if (g$0$13211 g$0$15775) ((lambda (g$0$15777) (if g$0$15777 (begin (quote #f) ((lambda (g$0$15779) (if g$0$15779 (begin (quote #f) (map cons g$0$15777 g$0$15779)) (quote #f))) (g$0$15773 (g$0$13223 g$0$15775)))) (quote #f))) ((lambda (g$0$15781) (list g$0$15781)) (g$0$13219 g$0$15775))) (if (g$0$13215 g$0$15775) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15773) (g$0$13223 g$0$15767)))) (quote #f))) ((lambda (g$0$15783) (list g$0$15783)) (g$0$13219 g$0$15767)))) (quote #f))) (g$0$13223 g$0$15761)))) (quote #f))) ((lambda (g$0$15785) (if (g$0$13211 g$0$15785) (begin (quote #f) ((lambda (g$0$15787) (if g$0$15787 (begin (quote #f) ((lambda (g$0$15789) (if g$0$15789 (begin (quote #f) (append g$0$15787 g$0$15789)) (quote #f))) ((letrec ((g$0$15791 (lambda (g$0$15793) (if (g$0$13211 g$0$15793) ((lambda (g$0$15795) (if g$0$15795 (begin (quote #f) ((lambda (g$0$15797) (if g$0$15797 (begin (quote #f) (map cons g$0$15795 g$0$15797)) (quote #f))) (g$0$15791 (g$0$13223 g$0$15793)))) (quote #f))) ((lambda (g$0$15799) (list g$0$15799)) (g$0$13219 g$0$15793))) (if (g$0$13215 g$0$15793) (list (begin (quote fmls) (quote ()))) (quote #f)))))) g$0$15791) (g$0$13223 g$0$15785)))) (quote #f))) ((lambda (g$0$15801) (list g$0$15801)) (g$0$13219 g$0$15785)))) (quote #f))) (g$0$13219 g$0$15761)))) (quote #f))) (g$0$13223 g$0$15755)))) (quote #f))) ((lambda (g$0$15803) (quote ())) (g$0$13219 g$0$15755)))) (quote #f))) g$0$15615))) g$0$15613))) (set! g$0$13522 (lambda (g$0$15805) ((lambda (g$0$15807) (begin (set! g$0$15807 (lambda (g$0$15809 g$0$15810 g$0$15811) ((lambda (g$0$15815 g$0$15817) (begin (set! g$0$15815 (lambda (g$0$15911 g$0$15912) ((lambda (g$0$15915) ((lambda (g$0$15917) (if (if g$0$15917 (begin (quote #f) (apply (lambda (g$0$15919 g$0$15920) (quote #t)) g$0$15917)) (quote #f)) (apply (lambda (g$0$15923 g$0$15924) ((lambda (g$0$15927) (list (quote let) (list (list g$0$15927 g$0$15923)) (list (quote if) g$0$15927 (list g$0$15924 g$0$15927) g$0$15912))) (gensym))) g$0$15917) ((lambda (g$0$15929) ((lambda (g$0$15931) (if (if g$0$15931 (begin (quote #f) (apply (lambda (g$0$15933) (quote #t)) g$0$15931)) (quote #f)) (apply (lambda (g$0$15935) ((lambda (g$0$15937) (list (quote let) (list (list g$0$15937 g$0$15935)) (list (quote if) g$0$15937 g$0$15937 g$0$15912))) (gensym))) g$0$15931) ((lambda (g$0$15939) ((lambda (g$0$15941) (if (if g$0$15941 (begin (quote #f) (apply (lambda (g$0$15943 g$0$15944 g$0$15945) (quote #t)) g$0$15941)) (quote #f)) (apply (lambda (g$0$15949 g$0$15950 g$0$15951) (list (quote if) g$0$15949 (cons (quote begin) (cons g$0$15950 g$0$15951)) g$0$15912)) g$0$15941) ((lambda (g$0$15955) ((lambda (g$0$15957) (if (if g$0$15957 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15957)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid guard clause") (g$0$13243 g$0$15911 (quote ())))) g$0$15957) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$15955 (quote ()))))) ((lambda (g$0$15959) (quote ())) g$0$15955))) g$0$15939))) ((lambda (g$0$15961) (if (g$0$13211 g$0$15961) (begin (quote #f) ((lambda (g$0$15963) (if g$0$15963 (begin (quote #f) ((lambda (g$0$15965) (if g$0$15965 (begin (quote #f) (append g$0$15963 g$0$15965)) (quote #f))) ((lambda (g$0$15967) (if (g$0$13211 g$0$15967) (begin (quote #f) ((lambda (g$0$15969) (if g$0$15969 (begin (quote #f) ((lambda (g$0$15971) (if g$0$15971 (begin (quote #f) (append g$0$15969 g$0$15971)) (quote #f))) ((letrec ((g$0$15973 (lambda (g$0$15975) (if (g$0$13211 g$0$15975) ((lambda (g$0$15977) (if g$0$15977 (begin (quote #f) ((lambda (g$0$15979) (if g$0$15979 (begin (quote #f) (map cons g$0$15977 g$0$15979)) (quote #f))) (g$0$15973 (g$0$13223 g$0$15975)))) (quote #f))) ((lambda (g$0$15981) (list g$0$15981)) (g$0$13219 g$0$15975))) (if (g$0$13215 g$0$15975) (list (begin (quote v*) (quote ()))) (quote #f)))))) g$0$15973) (g$0$13223 g$0$15967)))) (quote #f))) ((lambda (g$0$15983) (list g$0$15983)) (g$0$13219 g$0$15967)))) (quote #f))) (g$0$13223 g$0$15961)))) (quote #f))) ((lambda (g$0$15985) (list g$0$15985)) (g$0$13219 g$0$15961)))) (quote #f))) g$0$15939))) g$0$15929))) ((lambda (g$0$15987) (if (g$0$13211 g$0$15987) (begin (quote #f) ((lambda (g$0$15989) (if g$0$15989 (begin (quote #f) ((lambda (g$0$15991) (if g$0$15991 (begin (quote #f) (append g$0$15989 g$0$15991)) (quote #f))) ((lambda (g$0$15993) (if (equal? (g$0$13245 g$0$15993) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$15987)))) (quote #f))) ((lambda (g$0$15995) (list g$0$15995)) (g$0$13219 g$0$15987)))) (quote #f))) g$0$15929))) g$0$15915))) ((lambda (g$0$15997) (if (g$0$13211 g$0$15997) (begin (quote #f) ((lambda (g$0$15999) (if g$0$15999 (begin (quote #f) ((lambda (g$0$16001) (if g$0$16001 (begin (quote #f) (append g$0$15999 g$0$16001)) (quote #f))) ((lambda (g$0$16003) (if (g$0$13211 g$0$16003) (begin (quote #f) ((lambda (g$0$16005) (if g$0$16005 (begin (quote #f) ((lambda (g$0$16007) (if g$0$16007 (begin (quote #f) (append g$0$16005 g$0$16007)) (quote #f))) ((lambda (g$0$16009) (if (g$0$13211 g$0$16009) (begin (quote #f) ((lambda (g$0$16011) (if g$0$16011 (begin (quote #f) ((lambda (g$0$16013) (if g$0$16013 (begin (quote #f) (append g$0$16011 g$0$16013)) (quote #f))) ((lambda (g$0$16015) (if (equal? (g$0$13245 g$0$16015) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16009)))) (quote #f))) ((lambda (g$0$16017) (list g$0$16017)) (g$0$13219 g$0$16009)))) (quote #f))) (g$0$13223 g$0$16003)))) (quote #f))) ((lambda (g$0$16019) (if (g$0$13225 g$0$16019) (if (g$0$13233 g$0$16019 (g$0$13478 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$16003)))) (quote #f))) (g$0$13223 g$0$15997)))) (quote #f))) ((lambda (g$0$16021) (list g$0$16021)) (g$0$13219 g$0$15997)))) (quote #f))) g$0$15915))) g$0$15911))) (set! g$0$15817 (lambda (g$0$15819) ((lambda (g$0$15821) ((lambda (g$0$15823) (if (if g$0$15823 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15823)) (quote #f)) (apply (lambda () ((lambda (g$0$15825) (values (list g$0$15825 (list (quote lambda) (quote ()) (list (quote raise) g$0$15809))) g$0$15825)) (gensym))) g$0$15823) ((lambda (g$0$15827) ((lambda (g$0$15829) (if (if g$0$15829 (begin (quote #f) (apply (lambda (g$0$15831 g$0$15832) (quote #t)) g$0$15829)) (quote #f)) (apply (lambda (g$0$15835 g$0$15836) (values (cons (quote begin) (cons g$0$15835 g$0$15836)) (quote #f))) g$0$15829) ((lambda (g$0$15839) ((lambda (g$0$15841) (if (if g$0$15841 (begin (quote #f) (apply (lambda (g$0$15843 g$0$15844) (quote #t)) g$0$15841)) (quote #f)) (apply (lambda (g$0$15847 g$0$15848) (call-with-values (lambda () (g$0$15817 g$0$15848)) (lambda (g$0$15851 g$0$15852) (values (g$0$15815 g$0$15847 g$0$15851) g$0$15852)))) g$0$15841) ((lambda (g$0$15855) ((lambda (g$0$15857) (if (if g$0$15857 (begin (quote #f) (apply (lambda (g$0$15859) (quote #t)) g$0$15857)) (quote #f)) (apply (lambda (g$0$15861) (error (quote expander) (quote "invalid guard clause") (g$0$13243 g$0$15861 (quote ())))) g$0$15857) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$15855 (quote ()))))) ((lambda (g$0$15863) (list g$0$15863)) g$0$15855))) g$0$15839))) ((lambda (g$0$15865) (if (g$0$13211 g$0$15865) (begin (quote #f) ((lambda (g$0$15867) (if g$0$15867 (begin (quote #f) ((lambda (g$0$15869) (if g$0$15869 (begin (quote #f) (append g$0$15867 g$0$15869)) (quote #f))) ((lambda (g$0$15871) (list g$0$15871)) (g$0$13223 g$0$15865)))) (quote #f))) ((lambda (g$0$15873) (list g$0$15873)) (g$0$13219 g$0$15865)))) (quote #f))) g$0$15839))) g$0$15827))) ((lambda (g$0$15875) (if (g$0$13211 g$0$15875) (begin (quote #f) ((lambda (g$0$15877) (if g$0$15877 (begin (quote #f) ((lambda (g$0$15879) (if g$0$15879 (begin (quote #f) (append g$0$15877 g$0$15879)) (quote #f))) ((lambda (g$0$15881) (if (equal? (g$0$13245 g$0$15881) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$15875)))) (quote #f))) ((lambda (g$0$15883) (if (g$0$13211 g$0$15883) (begin (quote #f) ((lambda (g$0$15885) (if g$0$15885 (begin (quote #f) ((lambda (g$0$15887) (if g$0$15887 (begin (quote #f) (append g$0$15885 g$0$15887)) (quote #f))) ((lambda (g$0$15889) (if (g$0$13211 g$0$15889) (begin (quote #f) ((lambda (g$0$15891) (if g$0$15891 (begin (quote #f) ((lambda (g$0$15893) (if g$0$15893 (begin (quote #f) (append g$0$15891 g$0$15893)) (quote #f))) ((letrec ((g$0$15895 (lambda (g$0$15897) (if (g$0$13211 g$0$15897) ((lambda (g$0$15899) (if g$0$15899 (begin (quote #f) ((lambda (g$0$15901) (if g$0$15901 (begin (quote #f) (map cons g$0$15899 g$0$15901)) (quote #f))) (g$0$15895 (g$0$13223 g$0$15897)))) (quote #f))) ((lambda (g$0$15903) (list g$0$15903)) (g$0$13219 g$0$15897))) (if (g$0$13215 g$0$15897) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$15895) (g$0$13223 g$0$15889)))) (quote #f))) ((lambda (g$0$15905) (list g$0$15905)) (g$0$13219 g$0$15889)))) (quote #f))) (g$0$13223 g$0$15883)))) (quote #f))) ((lambda (g$0$15907) (if (g$0$13225 g$0$15907) (if (g$0$13233 g$0$15907 (g$0$13478 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$15883)))) (quote #f))) (g$0$13219 g$0$15875)))) (quote #f))) g$0$15827))) g$0$15821))) ((lambda (g$0$15909) (if (equal? (g$0$13245 g$0$15909) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$15821))) g$0$15819))) (call-with-values (lambda () (g$0$15817 g$0$15811)) (lambda (g$0$16023 g$0$16024) (if g$0$16024 (list (list (quote call/cc) (list (quote lambda) (list g$0$16024) (list g$0$15810 (list (quote lambda) (quote ()) g$0$16023))))) (list g$0$15810 (list (quote lambda) (quote ()) g$0$16023))))))) (quote #f) (quote #f)))) ((lambda (g$0$16027) ((lambda (g$0$16029) (if (if g$0$16029 (begin (quote #f) (apply (lambda (g$0$16031 g$0$16032 g$0$16033 g$0$16034) (g$0$13225 g$0$16031)) g$0$16029)) (quote #f)) (apply (lambda (g$0$16039 g$0$16040 g$0$16041 g$0$16042) ((lambda (g$0$16047) (g$0$13512 (list (list (quote call/cc) (list (quote lambda) (list g$0$16047) (list (quote lambda) (quote ()) (list (quote with-exception-handler) (list (quote lambda) (list g$0$16039) (g$0$15807 g$0$16039 g$0$16047 g$0$16040)) (cons (quote lambda) (cons (quote ()) (cons (quote #f) (cons g$0$16041 g$0$16042))))))))))) (gensym))) g$0$16029) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16027 (quote ()))))) ((lambda (g$0$16049) (if (g$0$13211 g$0$16049) (begin (quote #f) ((lambda (g$0$16051) (if g$0$16051 (begin (quote #f) ((lambda (g$0$16053) (if g$0$16053 (begin (quote #f) (append g$0$16051 g$0$16053)) (quote #f))) ((lambda (g$0$16055) (if (g$0$13211 g$0$16055) (begin (quote #f) ((lambda (g$0$16057) (if g$0$16057 (begin (quote #f) ((lambda (g$0$16059) (if g$0$16059 (begin (quote #f) (append g$0$16057 g$0$16059)) (quote #f))) ((lambda (g$0$16061) (if (g$0$13211 g$0$16061) (begin (quote #f) ((lambda (g$0$16063) (if g$0$16063 (begin (quote #f) ((lambda (g$0$16065) (if g$0$16065 (begin (quote #f) (append g$0$16063 g$0$16065)) (quote #f))) ((letrec ((g$0$16067 (lambda (g$0$16069) (if (g$0$13211 g$0$16069) ((lambda (g$0$16071) (if g$0$16071 (begin (quote #f) ((lambda (g$0$16073) (if g$0$16073 (begin (quote #f) (map cons g$0$16071 g$0$16073)) (quote #f))) (g$0$16067 (g$0$13223 g$0$16069)))) (quote #f))) ((lambda (g$0$16075) (list g$0$16075)) (g$0$13219 g$0$16069))) (if (g$0$13215 g$0$16069) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$16067) (g$0$13223 g$0$16061)))) (quote #f))) ((lambda (g$0$16077) (list g$0$16077)) (g$0$13219 g$0$16061)))) (quote #f))) (g$0$13223 g$0$16055)))) (quote #f))) ((lambda (g$0$16079) (if (g$0$13211 g$0$16079) (begin (quote #f) ((lambda (g$0$16081) (if g$0$16081 (begin (quote #f) ((lambda (g$0$16083) (if g$0$16083 (begin (quote #f) (append g$0$16081 g$0$16083)) (quote #f))) ((letrec ((g$0$16085 (lambda (g$0$16087) (if (g$0$13211 g$0$16087) ((lambda (g$0$16089) (if g$0$16089 (begin (quote #f) ((lambda (g$0$16091) (if g$0$16091 (begin (quote #f) (map cons g$0$16089 g$0$16091)) (quote #f))) (g$0$16085 (g$0$13223 g$0$16087)))) (quote #f))) ((lambda (g$0$16093) (list g$0$16093)) (g$0$13219 g$0$16087))) (if (g$0$13215 g$0$16087) (list (begin (quote clause*) (quote ()))) (quote #f)))))) g$0$16085) (g$0$13223 g$0$16079)))) (quote #f))) ((lambda (g$0$16095) (list g$0$16095)) (g$0$13219 g$0$16079)))) (quote #f))) (g$0$13219 g$0$16055)))) (quote #f))) (g$0$13223 g$0$16049)))) (quote #f))) ((lambda (g$0$16097) (quote ())) (g$0$13219 g$0$16049)))) (quote #f))) g$0$16027))) g$0$15805))) (quote #f)))) (set! g$0$13524 (lambda (g$0$16099) ((lambda (g$0$16101) (begin (set! g$0$16101 (lambda (g$0$16103) ((lambda (g$0$16105) (if g$0$16105 g$0$16105 (begin (quote #f) (if (not (memq (car g$0$16103) (cdr g$0$16103))) (begin (quote #f) (g$0$16101 (cdr g$0$16103))) (quote #f))))) (null? g$0$16103)))) ((lambda (g$0$16107) ((lambda (g$0$16109) (if (if g$0$16109 (begin (quote #f) (apply (lambda (g$0$16111 g$0$16112 g$0$16113) (if (g$0$13225 g$0$16111) (if (g$0$13225 g$0$16113) (begin (quote #f) (for-all g$0$13225 g$0$16112)) (quote #f)) (quote #f))) g$0$16109)) (quote #f)) (apply (lambda (g$0$16117 g$0$16118 g$0$16119) ((lambda (g$0$16123 g$0$16124) (begin (if (g$0$16101 g$0$16123) (void) (error (quote expander) (quote "duplicate names in enumeration set") (g$0$13243 g$0$16099 (quote ())))) (g$0$13512 (list (quote begin) (list (quote define) g$0$16124 (list (quote enum-set-constructor) (list (quote make-enumeration) (list (quote quote) g$0$16123)))) (list (quote define-syntax) g$0$16117 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote (_ n)) (quote (identifier? (syntax n))) (list (quote if) (list (quote memq) (quote (syntax->datum (syntax n))) (list (quote quote) g$0$16123)) (quote (syntax (quote n))) (list (quote syntax-error) (quote x) (quote "not a member of set") (list (quote quote) g$0$16123))))))) (list (quote define-syntax) g$0$16119 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote (_ n* |...|)) (list (quote begin) (cons (quote for-each) (cons (list (quote lambda) (quote (n)) (quote (unless (identifier? n) (syntax-error x "non-identifier argument"))) (cons (quote unless) (cons (list (quote memq) (quote (syntax->datum n)) (list (quote quote) g$0$16123)) (quote ((syntax-error n "not a member of set")))))) (quote ((syntax (n* |...|)))))) (list (quote syntax) (cons g$0$16124 (quote ((quote (n* |...|))))))))))))))) (g$0$13707 g$0$16118) (gensym))) g$0$16109) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16107 (quote ()))))) ((lambda (g$0$16127) (if (g$0$13211 g$0$16127) (begin (quote #f) ((lambda (g$0$16129) (if g$0$16129 (begin (quote #f) ((lambda (g$0$16131) (if g$0$16131 (begin (quote #f) (append g$0$16129 g$0$16131)) (quote #f))) ((lambda (g$0$16133) (if (g$0$13211 g$0$16133) (begin (quote #f) ((lambda (g$0$16135) (if g$0$16135 (begin (quote #f) ((lambda (g$0$16137) (if g$0$16137 (begin (quote #f) (append g$0$16135 g$0$16137)) (quote #f))) ((lambda (g$0$16139) (if (g$0$13211 g$0$16139) (begin (quote #f) ((lambda (g$0$16141) (if g$0$16141 (begin (quote #f) ((lambda (g$0$16143) (if g$0$16143 (begin (quote #f) (append g$0$16141 g$0$16143)) (quote #f))) ((lambda (g$0$16145) (if (g$0$13211 g$0$16145) (begin (quote #f) ((lambda (g$0$16147) (if g$0$16147 (begin (quote #f) ((lambda (g$0$16149) (if g$0$16149 (begin (quote #f) (append g$0$16147 g$0$16149)) (quote #f))) ((lambda (g$0$16151) (if (equal? (g$0$13245 g$0$16151) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16145)))) (quote #f))) ((lambda (g$0$16153) (list g$0$16153)) (g$0$13219 g$0$16145)))) (quote #f))) (g$0$13223 g$0$16139)))) (quote #f))) ((letrec ((g$0$16155 (lambda (g$0$16157) (if (g$0$13211 g$0$16157) ((lambda (g$0$16159) (if g$0$16159 (begin (quote #f) ((lambda (g$0$16161) (if g$0$16161 (begin (quote #f) (map cons g$0$16159 g$0$16161)) (quote #f))) (g$0$16155 (g$0$13223 g$0$16157)))) (quote #f))) ((lambda (g$0$16163) (list g$0$16163)) (g$0$13219 g$0$16157))) (if (g$0$13215 g$0$16157) (list (begin (quote id*) (quote ()))) (quote #f)))))) g$0$16155) (g$0$13219 g$0$16139)))) (quote #f))) (g$0$13223 g$0$16133)))) (quote #f))) ((lambda (g$0$16165) (list g$0$16165)) (g$0$13219 g$0$16133)))) (quote #f))) (g$0$13223 g$0$16127)))) (quote #f))) ((lambda (g$0$16167) (quote ())) (g$0$13219 g$0$16127)))) (quote #f))) g$0$16107))) g$0$16099))) (quote #f)))) (set! g$0$13526 (lambda (g$0$16169) ((lambda (g$0$16171) ((lambda (g$0$16173) (if (if g$0$16173 (begin (quote #f) (apply (lambda (g$0$16175) (quote #t)) g$0$16173)) (quote #f)) (apply (lambda (g$0$16177) (g$0$13512 (list (quote time-it) (list (quote quote) g$0$16177) (list (quote lambda) (quote ()) g$0$16177)))) g$0$16173) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16171 (quote ()))))) ((lambda (g$0$16179) (if (g$0$13211 g$0$16179) (begin (quote #f) ((lambda (g$0$16181) (if g$0$16181 (begin (quote #f) ((lambda (g$0$16183) (if g$0$16183 (begin (quote #f) (append g$0$16181 g$0$16183)) (quote #f))) ((lambda (g$0$16185) (if (g$0$13211 g$0$16185) (begin (quote #f) ((lambda (g$0$16187) (if g$0$16187 (begin (quote #f) ((lambda (g$0$16189) (if g$0$16189 (begin (quote #f) (append g$0$16187 g$0$16189)) (quote #f))) ((lambda (g$0$16191) (if (equal? (g$0$13245 g$0$16191) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16185)))) (quote #f))) ((lambda (g$0$16193) (list g$0$16193)) (g$0$13219 g$0$16185)))) (quote #f))) (g$0$13223 g$0$16179)))) (quote #f))) ((lambda (g$0$16195) (quote ())) (g$0$13219 g$0$16179)))) (quote #f))) g$0$16171))) g$0$16169))) (set! g$0$13528 (lambda (g$0$16197) ((lambda (g$0$16199) ((lambda (g$0$16201) (if (if g$0$16201 (begin (quote #f) (apply (lambda (g$0$16203) (quote #t)) g$0$16201)) (quote #f)) (apply (lambda (g$0$16205) (g$0$13512 (list (quote make-promise) (list (quote lambda) (quote ()) g$0$16205)))) g$0$16201) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16199 (quote ()))))) ((lambda (g$0$16207) (if (g$0$13211 g$0$16207) (begin (quote #f) ((lambda (g$0$16209) (if g$0$16209 (begin (quote #f) ((lambda (g$0$16211) (if g$0$16211 (begin (quote #f) (append g$0$16209 g$0$16211)) (quote #f))) ((lambda (g$0$16213) (if (g$0$13211 g$0$16213) (begin (quote #f) ((lambda (g$0$16215) (if g$0$16215 (begin (quote #f) ((lambda (g$0$16217) (if g$0$16217 (begin (quote #f) (append g$0$16215 g$0$16217)) (quote #f))) ((lambda (g$0$16219) (if (equal? (g$0$13245 g$0$16219) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16213)))) (quote #f))) ((lambda (g$0$16221) (list g$0$16221)) (g$0$13219 g$0$16213)))) (quote #f))) (g$0$13223 g$0$16207)))) (quote #f))) ((lambda (g$0$16223) (quote ())) (g$0$13219 g$0$16207)))) (quote #f))) g$0$16199))) g$0$16197))) (set! g$0$13530 (lambda (g$0$16225) ((lambda (g$0$16227) ((lambda (g$0$16229) (if (if g$0$16229 (begin (quote #f) (apply (lambda (g$0$16231) (quote #t)) g$0$16229)) (quote #f)) (apply (lambda (g$0$16233) (g$0$13512 (list (quote unless) g$0$16233 (list (quote error) (quote (quote assert)) (quote "assertion failed") (list (quote quote) g$0$16233))))) g$0$16229) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16227 (quote ()))))) ((lambda (g$0$16235) (if (g$0$13211 g$0$16235) (begin (quote #f) ((lambda (g$0$16237) (if g$0$16237 (begin (quote #f) ((lambda (g$0$16239) (if g$0$16239 (begin (quote #f) (append g$0$16237 g$0$16239)) (quote #f))) ((lambda (g$0$16241) (if (g$0$13211 g$0$16241) (begin (quote #f) ((lambda (g$0$16243) (if g$0$16243 (begin (quote #f) ((lambda (g$0$16245) (if g$0$16245 (begin (quote #f) (append g$0$16243 g$0$16245)) (quote #f))) ((lambda (g$0$16247) (if (equal? (g$0$13245 g$0$16247) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16241)))) (quote #f))) ((lambda (g$0$16249) (list g$0$16249)) (g$0$13219 g$0$16241)))) (quote #f))) (g$0$13223 g$0$16235)))) (quote #f))) ((lambda (g$0$16251) (quote ())) (g$0$13219 g$0$16235)))) (quote #f))) g$0$16227))) g$0$16225))) (set! g$0$13532 (lambda (g$0$16253) ((lambda (g$0$16255) ((lambda (g$0$16257) (if (if g$0$16257 (begin (quote #f) (apply (lambda (g$0$16259) (quote #t)) g$0$16257)) (quote #f)) (apply (lambda (g$0$16261) ((lambda (g$0$16263) (if (memv g$0$16263 (quote (little))) (g$0$13512 (quote (quote little))) (if (memv g$0$16263 (quote (big))) (g$0$13512 (quote (quote big))) (error (quote expander) (quote "endianness must be big or little") (g$0$13243 g$0$16253 (quote ())))))) (g$0$13707 g$0$16261))) g$0$16257) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16255 (quote ()))))) ((lambda (g$0$16264) (if (g$0$13211 g$0$16264) (begin (quote #f) ((lambda (g$0$16266) (if g$0$16266 (begin (quote #f) ((lambda (g$0$16268) (if g$0$16268 (begin (quote #f) (append g$0$16266 g$0$16268)) (quote #f))) ((lambda (g$0$16270) (if (g$0$13211 g$0$16270) (begin (quote #f) ((lambda (g$0$16272) (if g$0$16272 (begin (quote #f) ((lambda (g$0$16274) (if g$0$16274 (begin (quote #f) (append g$0$16272 g$0$16274)) (quote #f))) ((lambda (g$0$16276) (if (equal? (g$0$13245 g$0$16276) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16270)))) (quote #f))) ((lambda (g$0$16278) (list g$0$16278)) (g$0$13219 g$0$16270)))) (quote #f))) (g$0$13223 g$0$16264)))) (quote #f))) ((lambda (g$0$16280) (quote ())) (g$0$13219 g$0$16264)))) (quote #f))) g$0$16255))) g$0$16253))) (set! g$0$13534 (lambda (g$0$16282) ((lambda (g$0$16284) ((lambda (g$0$16286) (if (if g$0$16286 (begin (quote #f) (apply (lambda (g$0$16288) (quote #t)) g$0$16286)) (quote #f)) (apply (lambda (g$0$16290) (g$0$13512 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) g$0$16290)) (list (quote (id e* |...|)) (quote (identifier? (syntax id))) (cons (quote cons) (cons (list (quote syntax) g$0$16290) (quote ((syntax (e* |...|))))))))))) g$0$16286) ((lambda (g$0$16292) ((lambda (g$0$16294) (if (if g$0$16294 (begin (quote #f) (apply (lambda (g$0$16296 g$0$16297 g$0$16298 g$0$16299 g$0$16300) (if (g$0$13225 g$0$16296) (if (g$0$13225 g$0$16298) (begin (quote #f) (g$0$13225 g$0$16299)) (quote #f)) (quote #f))) g$0$16294)) (quote #f)) (apply (lambda (g$0$16306 g$0$16307 g$0$16308 g$0$16309 g$0$16310) (g$0$13512 (list (quote cons) (quote (quote macro!)) (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote (set!)) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) g$0$16307)) (list (list (quote set!) (quote id) g$0$16309) (list (quote syntax) g$0$16310)) (list (quote (id e* |...|)) (quote (identifier? (syntax id))) (list (quote syntax) (cons g$0$16307 (quote (e* |...|)))))))))) g$0$16294) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16292 (quote ()))))) ((lambda (g$0$16316) (if (g$0$13211 g$0$16316) (begin (quote #f) ((lambda (g$0$16318) (if g$0$16318 (begin (quote #f) ((lambda (g$0$16320) (if g$0$16320 (begin (quote #f) (append g$0$16318 g$0$16320)) (quote #f))) ((lambda (g$0$16322) (if (g$0$13211 g$0$16322) (begin (quote #f) ((lambda (g$0$16324) (if g$0$16324 (begin (quote #f) ((lambda (g$0$16326) (if g$0$16326 (begin (quote #f) (append g$0$16324 g$0$16326)) (quote #f))) ((lambda (g$0$16328) (if (g$0$13211 g$0$16328) (begin (quote #f) ((lambda (g$0$16330) (if g$0$16330 (begin (quote #f) ((lambda (g$0$16332) (if g$0$16332 (begin (quote #f) (append g$0$16330 g$0$16332)) (quote #f))) ((lambda (g$0$16334) (if (equal? (g$0$13245 g$0$16334) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16328)))) (quote #f))) ((lambda (g$0$16336) (if (g$0$13211 g$0$16336) (begin (quote #f) ((lambda (g$0$16338) (if g$0$16338 (begin (quote #f) ((lambda (g$0$16340) (if g$0$16340 (begin (quote #f) (append g$0$16338 g$0$16340)) (quote #f))) ((lambda (g$0$16342) (if (g$0$13211 g$0$16342) (begin (quote #f) ((lambda (g$0$16344) (if g$0$16344 (begin (quote #f) ((lambda (g$0$16346) (if g$0$16346 (begin (quote #f) (append g$0$16344 g$0$16346)) (quote #f))) ((lambda (g$0$16348) (if (equal? (g$0$13245 g$0$16348) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16342)))) (quote #f))) ((lambda (g$0$16350) (list g$0$16350)) (g$0$13219 g$0$16342)))) (quote #f))) (g$0$13223 g$0$16336)))) (quote #f))) ((lambda (g$0$16352) (if (g$0$13211 g$0$16352) (begin (quote #f) ((lambda (g$0$16354) (if g$0$16354 (begin (quote #f) ((lambda (g$0$16356) (if g$0$16356 (begin (quote #f) (append g$0$16354 g$0$16356)) (quote #f))) ((lambda (g$0$16358) (if (g$0$13211 g$0$16358) (begin (quote #f) ((lambda (g$0$16360) (if g$0$16360 (begin (quote #f) ((lambda (g$0$16362) (if g$0$16362 (begin (quote #f) (append g$0$16360 g$0$16362)) (quote #f))) ((lambda (g$0$16364) (if (g$0$13211 g$0$16364) (begin (quote #f) ((lambda (g$0$16366) (if g$0$16366 (begin (quote #f) ((lambda (g$0$16368) (if g$0$16368 (begin (quote #f) (append g$0$16366 g$0$16368)) (quote #f))) ((lambda (g$0$16370) (if (equal? (g$0$13245 g$0$16370) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16364)))) (quote #f))) ((lambda (g$0$16372) (list g$0$16372)) (g$0$13219 g$0$16364)))) (quote #f))) (g$0$13223 g$0$16358)))) (quote #f))) ((lambda (g$0$16374) (list g$0$16374)) (g$0$13219 g$0$16358)))) (quote #f))) (g$0$13223 g$0$16352)))) (quote #f))) ((lambda (g$0$16376) (if (g$0$13225 g$0$16376) (if (g$0$13233 g$0$16376 (g$0$13478 (quote set!))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$16352)))) (quote #f))) (g$0$13219 g$0$16336)))) (quote #f))) (g$0$13219 g$0$16328)))) (quote #f))) (g$0$13223 g$0$16322)))) (quote #f))) ((lambda (g$0$16378) (if (g$0$13211 g$0$16378) (begin (quote #f) ((lambda (g$0$16380) (if g$0$16380 (begin (quote #f) ((lambda (g$0$16382) (if g$0$16382 (begin (quote #f) (append g$0$16380 g$0$16382)) (quote #f))) ((lambda (g$0$16384) (if (g$0$13211 g$0$16384) (begin (quote #f) ((lambda (g$0$16386) (if g$0$16386 (begin (quote #f) ((lambda (g$0$16388) (if g$0$16388 (begin (quote #f) (append g$0$16386 g$0$16388)) (quote #f))) ((lambda (g$0$16390) (if (equal? (g$0$13245 g$0$16390) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16384)))) (quote #f))) ((lambda (g$0$16392) (list g$0$16392)) (g$0$13219 g$0$16384)))) (quote #f))) (g$0$13223 g$0$16378)))) (quote #f))) ((lambda (g$0$16394) (list g$0$16394)) (g$0$13219 g$0$16378)))) (quote #f))) (g$0$13219 g$0$16322)))) (quote #f))) (g$0$13223 g$0$16316)))) (quote #f))) ((lambda (g$0$16396) (quote ())) (g$0$13219 g$0$16316)))) (quote #f))) g$0$16292))) g$0$16284))) ((lambda (g$0$16398) (if (g$0$13211 g$0$16398) (begin (quote #f) ((lambda (g$0$16400) (if g$0$16400 (begin (quote #f) ((lambda (g$0$16402) (if g$0$16402 (begin (quote #f) (append g$0$16400 g$0$16402)) (quote #f))) ((lambda (g$0$16404) (if (g$0$13211 g$0$16404) (begin (quote #f) ((lambda (g$0$16406) (if g$0$16406 (begin (quote #f) ((lambda (g$0$16408) (if g$0$16408 (begin (quote #f) (append g$0$16406 g$0$16408)) (quote #f))) ((lambda (g$0$16410) (if (equal? (g$0$13245 g$0$16410) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16404)))) (quote #f))) ((lambda (g$0$16412) (list g$0$16412)) (g$0$13219 g$0$16404)))) (quote #f))) (g$0$13223 g$0$16398)))) (quote #f))) ((lambda (g$0$16414) (quote ())) (g$0$13219 g$0$16398)))) (quote #f))) g$0$16284))) g$0$16282))) (set! g$0$13536 (lambda (g$0$16416) ((lambda (g$0$16418) (begin (set! g$0$16418 (lambda (g$0$16420) ((lambda (g$0$16422) ((lambda (g$0$16424) (if (if g$0$16424 (begin (quote #f) (apply (lambda (g$0$16426 g$0$16427) (quote #t)) g$0$16424)) (quote #f)) (apply (lambda (g$0$16430 g$0$16431) (list g$0$16430 g$0$16431 g$0$16430)) g$0$16424) ((lambda (g$0$16434) ((lambda (g$0$16436) (if (if g$0$16436 (begin (quote #f) (apply (lambda (g$0$16438 g$0$16439 g$0$16440) (quote #t)) g$0$16436)) (quote #f)) (apply (lambda (g$0$16444 g$0$16445 g$0$16446) (list g$0$16444 g$0$16445 g$0$16446)) g$0$16436) ((lambda (g$0$16450) ((lambda (g$0$16452) (if (if g$0$16452 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16452)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid binding") (g$0$13243 g$0$16416 (quote ())))) g$0$16452) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16450 (quote ()))))) ((lambda (g$0$16454) (quote ())) g$0$16450))) g$0$16434))) ((lambda (g$0$16456) (if (g$0$13211 g$0$16456) (begin (quote #f) ((lambda (g$0$16458) (if g$0$16458 (begin (quote #f) ((lambda (g$0$16460) (if g$0$16460 (begin (quote #f) (append g$0$16458 g$0$16460)) (quote #f))) ((lambda (g$0$16462) (if (g$0$13211 g$0$16462) (begin (quote #f) ((lambda (g$0$16464) (if g$0$16464 (begin (quote #f) ((lambda (g$0$16466) (if g$0$16466 (begin (quote #f) (append g$0$16464 g$0$16466)) (quote #f))) ((lambda (g$0$16468) (if (g$0$13211 g$0$16468) (begin (quote #f) ((lambda (g$0$16470) (if g$0$16470 (begin (quote #f) ((lambda (g$0$16472) (if g$0$16472 (begin (quote #f) (append g$0$16470 g$0$16472)) (quote #f))) ((lambda (g$0$16474) (if (equal? (g$0$13245 g$0$16474) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16468)))) (quote #f))) ((lambda (g$0$16476) (list g$0$16476)) (g$0$13219 g$0$16468)))) (quote #f))) (g$0$13223 g$0$16462)))) (quote #f))) ((lambda (g$0$16478) (list g$0$16478)) (g$0$13219 g$0$16462)))) (quote #f))) (g$0$13223 g$0$16456)))) (quote #f))) ((lambda (g$0$16480) (list g$0$16480)) (g$0$13219 g$0$16456)))) (quote #f))) g$0$16434))) g$0$16422))) ((lambda (g$0$16482) (if (g$0$13211 g$0$16482) (begin (quote #f) ((lambda (g$0$16484) (if g$0$16484 (begin (quote #f) ((lambda (g$0$16486) (if g$0$16486 (begin (quote #f) (append g$0$16484 g$0$16486)) (quote #f))) ((lambda (g$0$16488) (if (g$0$13211 g$0$16488) (begin (quote #f) ((lambda (g$0$16490) (if g$0$16490 (begin (quote #f) ((lambda (g$0$16492) (if g$0$16492 (begin (quote #f) (append g$0$16490 g$0$16492)) (quote #f))) ((lambda (g$0$16494) (if (equal? (g$0$13245 g$0$16494) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16488)))) (quote #f))) ((lambda (g$0$16496) (list g$0$16496)) (g$0$13219 g$0$16488)))) (quote #f))) (g$0$13223 g$0$16482)))) (quote #f))) ((lambda (g$0$16498) (list g$0$16498)) (g$0$13219 g$0$16482)))) (quote #f))) g$0$16422))) g$0$16420))) ((lambda (g$0$16500) ((lambda (g$0$16502) (if (if g$0$16502 (begin (quote #f) (apply (lambda (g$0$16504 g$0$16505 g$0$16506 g$0$16507) (quote #t)) g$0$16502)) (quote #f)) (apply (lambda (g$0$16512 g$0$16513 g$0$16514 g$0$16515) ((lambda (g$0$16520) ((lambda (g$0$16522) (if (if g$0$16522 (begin (quote #f) (apply (lambda (g$0$16524 g$0$16525 g$0$16526) (quote #t)) g$0$16522)) (quote #f)) (apply (lambda (g$0$16530 g$0$16531 g$0$16532) (if (g$0$13235 g$0$16530) (g$0$13512 (list (quote letrec) (list (list (quote loop) (list (quote lambda) g$0$16530 (list (quote if) g$0$16513 (cons (quote begin) (cons (quote (if #f #f)) g$0$16514)) (cons (quote begin) (append g$0$16515 (list (cons (quote loop) g$0$16532)))))))) (cons (quote loop) g$0$16531))) (error (quote expander) (quote "invalid bindings") (g$0$13243 g$0$16416 (quote ()))))) g$0$16522) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16520 (quote ()))))) ((letrec ((g$0$16536 (lambda (g$0$16538) (if (g$0$13211 g$0$16538) ((lambda (g$0$16540) (if g$0$16540 (begin (quote #f) ((lambda (g$0$16542) (if g$0$16542 (begin (quote #f) (map cons g$0$16540 g$0$16542)) (quote #f))) (g$0$16536 (g$0$13223 g$0$16538)))) (quote #f))) ((lambda (g$0$16544) (if (g$0$13211 g$0$16544) (begin (quote #f) ((lambda (g$0$16546) (if g$0$16546 (begin (quote #f) ((lambda (g$0$16548) (if g$0$16548 (begin (quote #f) (append g$0$16546 g$0$16548)) (quote #f))) ((lambda (g$0$16550) (if (g$0$13211 g$0$16550) (begin (quote #f) ((lambda (g$0$16552) (if g$0$16552 (begin (quote #f) ((lambda (g$0$16554) (if g$0$16554 (begin (quote #f) (append g$0$16552 g$0$16554)) (quote #f))) ((lambda (g$0$16556) (if (g$0$13211 g$0$16556) (begin (quote #f) ((lambda (g$0$16558) (if g$0$16558 (begin (quote #f) ((lambda (g$0$16560) (if g$0$16560 (begin (quote #f) (append g$0$16558 g$0$16560)) (quote #f))) ((lambda (g$0$16562) (if (equal? (g$0$13245 g$0$16562) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16556)))) (quote #f))) ((lambda (g$0$16564) (list g$0$16564)) (g$0$13219 g$0$16556)))) (quote #f))) (g$0$13223 g$0$16550)))) (quote #f))) ((lambda (g$0$16566) (list g$0$16566)) (g$0$13219 g$0$16550)))) (quote #f))) (g$0$13223 g$0$16544)))) (quote #f))) ((lambda (g$0$16568) (list g$0$16568)) (g$0$13219 g$0$16544)))) (quote #f))) (g$0$13219 g$0$16538))) (if (g$0$13215 g$0$16538) (list (begin (quote x*) (quote ())) (begin (quote init*) (quote ())) (begin (quote step*) (quote ()))) (quote #f)))))) g$0$16536) g$0$16520))) (map g$0$16418 g$0$16512))) g$0$16502) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16500 (quote ()))))) ((lambda (g$0$16570) (if (g$0$13211 g$0$16570) (begin (quote #f) ((lambda (g$0$16572) (if g$0$16572 (begin (quote #f) ((lambda (g$0$16574) (if g$0$16574 (begin (quote #f) (append g$0$16572 g$0$16574)) (quote #f))) ((lambda (g$0$16576) (if (g$0$13211 g$0$16576) (begin (quote #f) ((lambda (g$0$16578) (if g$0$16578 (begin (quote #f) ((lambda (g$0$16580) (if g$0$16580 (begin (quote #f) (append g$0$16578 g$0$16580)) (quote #f))) ((lambda (g$0$16582) (if (g$0$13211 g$0$16582) (begin (quote #f) ((lambda (g$0$16584) (if g$0$16584 (begin (quote #f) ((lambda (g$0$16586) (if g$0$16586 (begin (quote #f) (append g$0$16584 g$0$16586)) (quote #f))) ((letrec ((g$0$16588 (lambda (g$0$16590) (if (g$0$13211 g$0$16590) ((lambda (g$0$16592) (if g$0$16592 (begin (quote #f) ((lambda (g$0$16594) (if g$0$16594 (begin (quote #f) (map cons g$0$16592 g$0$16594)) (quote #f))) (g$0$16588 (g$0$13223 g$0$16590)))) (quote #f))) ((lambda (g$0$16596) (list g$0$16596)) (g$0$13219 g$0$16590))) (if (g$0$13215 g$0$16590) (list (begin (quote command*) (quote ()))) (quote #f)))))) g$0$16588) (g$0$13223 g$0$16582)))) (quote #f))) ((lambda (g$0$16598) (if (g$0$13211 g$0$16598) (begin (quote #f) ((lambda (g$0$16600) (if g$0$16600 (begin (quote #f) ((lambda (g$0$16602) (if g$0$16602 (begin (quote #f) (append g$0$16600 g$0$16602)) (quote #f))) ((letrec ((g$0$16604 (lambda (g$0$16606) (if (g$0$13211 g$0$16606) ((lambda (g$0$16608) (if g$0$16608 (begin (quote #f) ((lambda (g$0$16610) (if g$0$16610 (begin (quote #f) (map cons g$0$16608 g$0$16610)) (quote #f))) (g$0$16604 (g$0$13223 g$0$16606)))) (quote #f))) ((lambda (g$0$16612) (list g$0$16612)) (g$0$13219 g$0$16606))) (if (g$0$13215 g$0$16606) (list (begin (quote expr*) (quote ()))) (quote #f)))))) g$0$16604) (g$0$13223 g$0$16598)))) (quote #f))) ((lambda (g$0$16614) (list g$0$16614)) (g$0$13219 g$0$16598)))) (quote #f))) (g$0$13219 g$0$16582)))) (quote #f))) (g$0$13223 g$0$16576)))) (quote #f))) ((letrec ((g$0$16616 (lambda (g$0$16618) (if (g$0$13211 g$0$16618) ((lambda (g$0$16620) (if g$0$16620 (begin (quote #f) ((lambda (g$0$16622) (if g$0$16622 (begin (quote #f) (map cons g$0$16620 g$0$16622)) (quote #f))) (g$0$16616 (g$0$13223 g$0$16618)))) (quote #f))) ((lambda (g$0$16624) (list g$0$16624)) (g$0$13219 g$0$16618))) (if (g$0$13215 g$0$16618) (list (begin (quote binding*) (quote ()))) (quote #f)))))) g$0$16616) (g$0$13219 g$0$16576)))) (quote #f))) (g$0$13223 g$0$16570)))) (quote #f))) ((lambda (g$0$16626) (quote ())) (g$0$13219 g$0$16570)))) (quote #f))) g$0$16500))) g$0$16416))) (quote #f)))) (set! g$0$13538 (lambda (g$0$16628) ((lambda (g$0$16630) ((lambda (g$0$16632) (if (if g$0$16632 (begin (quote #f) (apply (lambda (g$0$16634 g$0$16635 g$0$16636 g$0$16637) (for-all g$0$13225 g$0$16634)) g$0$16632)) (quote #f)) (apply (lambda (g$0$16642 g$0$16643 g$0$16644 g$0$16645) (g$0$13512 (letrec ((g$0$16650 (lambda (g$0$16652) (if (null? g$0$16652) (cons (quote let) (cons (quote ()) (cons g$0$16644 g$0$16645))) (list (quote let) (list (car g$0$16652)) (g$0$16650 (cdr g$0$16652))))))) (g$0$16650 (map list g$0$16642 g$0$16643))))) g$0$16632) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16630 (quote ()))))) ((lambda (g$0$16654) (if (g$0$13211 g$0$16654) (begin (quote #f) ((lambda (g$0$16656) (if g$0$16656 (begin (quote #f) ((lambda (g$0$16658) (if g$0$16658 (begin (quote #f) (append g$0$16656 g$0$16658)) (quote #f))) ((lambda (g$0$16660) (if (g$0$13211 g$0$16660) (begin (quote #f) ((lambda (g$0$16662) (if g$0$16662 (begin (quote #f) ((lambda (g$0$16664) (if g$0$16664 (begin (quote #f) (append g$0$16662 g$0$16664)) (quote #f))) ((lambda (g$0$16666) (if (g$0$13211 g$0$16666) (begin (quote #f) ((lambda (g$0$16668) (if g$0$16668 (begin (quote #f) ((lambda (g$0$16670) (if g$0$16670 (begin (quote #f) (append g$0$16668 g$0$16670)) (quote #f))) ((letrec ((g$0$16672 (lambda (g$0$16674) (if (g$0$13211 g$0$16674) ((lambda (g$0$16676) (if g$0$16676 (begin (quote #f) ((lambda (g$0$16678) (if g$0$16678 (begin (quote #f) (map cons g$0$16676 g$0$16678)) (quote #f))) (g$0$16672 (g$0$13223 g$0$16674)))) (quote #f))) ((lambda (g$0$16680) (list g$0$16680)) (g$0$13219 g$0$16674))) (if (g$0$13215 g$0$16674) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$16672) (g$0$13223 g$0$16666)))) (quote #f))) ((lambda (g$0$16682) (list g$0$16682)) (g$0$13219 g$0$16666)))) (quote #f))) (g$0$13223 g$0$16660)))) (quote #f))) ((letrec ((g$0$16684 (lambda (g$0$16686) (if (g$0$13211 g$0$16686) ((lambda (g$0$16688) (if g$0$16688 (begin (quote #f) ((lambda (g$0$16690) (if g$0$16690 (begin (quote #f) (map cons g$0$16688 g$0$16690)) (quote #f))) (g$0$16684 (g$0$13223 g$0$16686)))) (quote #f))) ((lambda (g$0$16692) (if (g$0$13211 g$0$16692) (begin (quote #f) ((lambda (g$0$16694) (if g$0$16694 (begin (quote #f) ((lambda (g$0$16696) (if g$0$16696 (begin (quote #f) (append g$0$16694 g$0$16696)) (quote #f))) ((lambda (g$0$16698) (if (g$0$13211 g$0$16698) (begin (quote #f) ((lambda (g$0$16700) (if g$0$16700 (begin (quote #f) ((lambda (g$0$16702) (if g$0$16702 (begin (quote #f) (append g$0$16700 g$0$16702)) (quote #f))) ((lambda (g$0$16704) (if (equal? (g$0$13245 g$0$16704) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16698)))) (quote #f))) ((lambda (g$0$16706) (list g$0$16706)) (g$0$13219 g$0$16698)))) (quote #f))) (g$0$13223 g$0$16692)))) (quote #f))) ((lambda (g$0$16708) (list g$0$16708)) (g$0$13219 g$0$16692)))) (quote #f))) (g$0$13219 g$0$16686))) (if (g$0$13215 g$0$16686) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$16684) (g$0$13219 g$0$16660)))) (quote #f))) (g$0$13223 g$0$16654)))) (quote #f))) ((lambda (g$0$16710) (quote ())) (g$0$13219 g$0$16654)))) (quote #f))) g$0$16630))) g$0$16628))) (set! g$0$13540 (lambda (g$0$16712) ((lambda (g$0$16714) ((lambda (g$0$16716) (if (if g$0$16716 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16716)) (quote #f)) (apply (lambda () (quote #f)) g$0$16716) ((lambda (g$0$16718) ((lambda (g$0$16720) (if (if g$0$16720 (begin (quote #f) (apply (lambda (g$0$16722 g$0$16723) (quote #t)) g$0$16720)) (quote #f)) (apply (lambda (g$0$16726 g$0$16727) (g$0$13512 (letrec ((g$0$16730 (lambda (g$0$16732 g$0$16733) (if (null? g$0$16733) (list (quote begin) (quote #f) g$0$16732) (list (quote let) (list (list (quote t) g$0$16732)) (list (quote if) (quote t) (quote t) (g$0$16730 (car g$0$16733) (cdr g$0$16733)))))))) (g$0$16730 g$0$16726 g$0$16727)))) g$0$16720) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16718 (quote ()))))) ((lambda (g$0$16736) (if (g$0$13211 g$0$16736) (begin (quote #f) ((lambda (g$0$16738) (if g$0$16738 (begin (quote #f) ((lambda (g$0$16740) (if g$0$16740 (begin (quote #f) (append g$0$16738 g$0$16740)) (quote #f))) ((lambda (g$0$16742) (if (g$0$13211 g$0$16742) (begin (quote #f) ((lambda (g$0$16744) (if g$0$16744 (begin (quote #f) ((lambda (g$0$16746) (if g$0$16746 (begin (quote #f) (append g$0$16744 g$0$16746)) (quote #f))) ((letrec ((g$0$16748 (lambda (g$0$16750) (if (g$0$13211 g$0$16750) ((lambda (g$0$16752) (if g$0$16752 (begin (quote #f) ((lambda (g$0$16754) (if g$0$16754 (begin (quote #f) (map cons g$0$16752 g$0$16754)) (quote #f))) (g$0$16748 (g$0$13223 g$0$16750)))) (quote #f))) ((lambda (g$0$16756) (list g$0$16756)) (g$0$13219 g$0$16750))) (if (g$0$13215 g$0$16750) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$16748) (g$0$13223 g$0$16742)))) (quote #f))) ((lambda (g$0$16758) (list g$0$16758)) (g$0$13219 g$0$16742)))) (quote #f))) (g$0$13223 g$0$16736)))) (quote #f))) ((lambda (g$0$16760) (quote ())) (g$0$13219 g$0$16736)))) (quote #f))) g$0$16718))) g$0$16714))) ((lambda (g$0$16762) (if (g$0$13211 g$0$16762) (begin (quote #f) ((lambda (g$0$16764) (if g$0$16764 (begin (quote #f) ((lambda (g$0$16766) (if g$0$16766 (begin (quote #f) (append g$0$16764 g$0$16766)) (quote #f))) ((lambda (g$0$16768) (if (equal? (g$0$13245 g$0$16768) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16762)))) (quote #f))) ((lambda (g$0$16770) (quote ())) (g$0$13219 g$0$16762)))) (quote #f))) g$0$16714))) g$0$16712))) (set! g$0$13542 (lambda (g$0$16772) ((lambda (g$0$16774) ((lambda (g$0$16776) (if (if g$0$16776 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16776)) (quote #f)) (apply (lambda () (quote #t)) g$0$16776) ((lambda (g$0$16778) ((lambda (g$0$16780) (if (if g$0$16780 (begin (quote #f) (apply (lambda (g$0$16782 g$0$16783) (quote #t)) g$0$16780)) (quote #f)) (apply (lambda (g$0$16786 g$0$16787) (g$0$13512 (letrec ((g$0$16790 (lambda (g$0$16792 g$0$16793) (if (null? g$0$16793) (list (quote begin) (quote #f) g$0$16792) (cons (quote if) (cons g$0$16792 (cons (g$0$16790 (car g$0$16793) (cdr g$0$16793)) (quote (#f))))))))) (g$0$16790 g$0$16786 g$0$16787)))) g$0$16780) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16778 (quote ()))))) ((lambda (g$0$16796) (if (g$0$13211 g$0$16796) (begin (quote #f) ((lambda (g$0$16798) (if g$0$16798 (begin (quote #f) ((lambda (g$0$16800) (if g$0$16800 (begin (quote #f) (append g$0$16798 g$0$16800)) (quote #f))) ((lambda (g$0$16802) (if (g$0$13211 g$0$16802) (begin (quote #f) ((lambda (g$0$16804) (if g$0$16804 (begin (quote #f) ((lambda (g$0$16806) (if g$0$16806 (begin (quote #f) (append g$0$16804 g$0$16806)) (quote #f))) ((letrec ((g$0$16808 (lambda (g$0$16810) (if (g$0$13211 g$0$16810) ((lambda (g$0$16812) (if g$0$16812 (begin (quote #f) ((lambda (g$0$16814) (if g$0$16814 (begin (quote #f) (map cons g$0$16812 g$0$16814)) (quote #f))) (g$0$16808 (g$0$13223 g$0$16810)))) (quote #f))) ((lambda (g$0$16816) (list g$0$16816)) (g$0$13219 g$0$16810))) (if (g$0$13215 g$0$16810) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$16808) (g$0$13223 g$0$16802)))) (quote #f))) ((lambda (g$0$16818) (list g$0$16818)) (g$0$13219 g$0$16802)))) (quote #f))) (g$0$13223 g$0$16796)))) (quote #f))) ((lambda (g$0$16820) (quote ())) (g$0$13219 g$0$16796)))) (quote #f))) g$0$16778))) g$0$16774))) ((lambda (g$0$16822) (if (g$0$13211 g$0$16822) (begin (quote #f) ((lambda (g$0$16824) (if g$0$16824 (begin (quote #f) ((lambda (g$0$16826) (if g$0$16826 (begin (quote #f) (append g$0$16824 g$0$16826)) (quote #f))) ((lambda (g$0$16828) (if (equal? (g$0$13245 g$0$16828) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16822)))) (quote #f))) ((lambda (g$0$16830) (quote ())) (g$0$13219 g$0$16822)))) (quote #f))) g$0$16774))) g$0$16772))) (set! g$0$13544 (lambda (g$0$16832) ((lambda (g$0$16834) ((lambda (g$0$16836) (if (if g$0$16836 (begin (quote #f) (apply (lambda (g$0$16838 g$0$16839) (quote #t)) g$0$16836)) (quote #f)) (apply (lambda (g$0$16842 g$0$16843) (g$0$13512 (letrec ((g$0$16846 (lambda (g$0$16848 g$0$16849) (if (null? g$0$16849) ((lambda (g$0$16852) ((lambda (g$0$16854) (if (if g$0$16854 (begin (quote #f) (apply (lambda (g$0$16856 g$0$16857) (quote #t)) g$0$16854)) (quote #f)) (apply (lambda (g$0$16860 g$0$16861) (cons (quote begin) (cons g$0$16860 g$0$16861))) g$0$16854) ((lambda (g$0$16864) ((lambda (g$0$16866) (if (if g$0$16866 (begin (quote #f) (apply (lambda (g$0$16868 g$0$16869) (quote #t)) g$0$16866)) (quote #f)) (apply (lambda (g$0$16872 g$0$16873) (list (quote let) (list (list (quote t) g$0$16872)) (list (quote if) (quote t) (cons g$0$16873 (quote (t)))))) g$0$16866) ((lambda (g$0$16876) ((lambda (g$0$16878) (if (if g$0$16878 (begin (quote #f) (apply (lambda (g$0$16880) (quote #t)) g$0$16878)) (quote #f)) (apply (lambda (g$0$16882) (cons (quote or) (cons g$0$16882 (quote ((if #f #f)))))) g$0$16878) ((lambda (g$0$16884) ((lambda (g$0$16886) (if (if g$0$16886 (begin (quote #f) (apply (lambda (g$0$16888 g$0$16889) (quote #t)) g$0$16886)) (quote #f)) (apply (lambda (g$0$16892 g$0$16893) (list (quote if) g$0$16892 (cons (quote begin) g$0$16893))) g$0$16886) ((lambda (g$0$16896) ((lambda (g$0$16898) (if (if g$0$16898 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16898)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid last clause") (g$0$13243 g$0$16832 (quote ())))) g$0$16898) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16896 (quote ()))))) ((lambda (g$0$16900) (quote ())) g$0$16896))) g$0$16884))) ((lambda (g$0$16902) (if (g$0$13211 g$0$16902) (begin (quote #f) ((lambda (g$0$16904) (if g$0$16904 (begin (quote #f) ((lambda (g$0$16906) (if g$0$16906 (begin (quote #f) (append g$0$16904 g$0$16906)) (quote #f))) ((letrec ((g$0$16908 (lambda (g$0$16910) (if (g$0$13211 g$0$16910) ((lambda (g$0$16912) (if g$0$16912 (begin (quote #f) ((lambda (g$0$16914) (if g$0$16914 (begin (quote #f) (map cons g$0$16912 g$0$16914)) (quote #f))) (g$0$16908 (g$0$13223 g$0$16910)))) (quote #f))) ((lambda (g$0$16916) (list g$0$16916)) (g$0$13219 g$0$16910))) (if (g$0$13215 g$0$16910) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$16908) (g$0$13223 g$0$16902)))) (quote #f))) ((lambda (g$0$16918) (list g$0$16918)) (g$0$13219 g$0$16902)))) (quote #f))) g$0$16884))) g$0$16876))) ((lambda (g$0$16920) (if (g$0$13211 g$0$16920) (begin (quote #f) ((lambda (g$0$16922) (if g$0$16922 (begin (quote #f) ((lambda (g$0$16924) (if g$0$16924 (begin (quote #f) (append g$0$16922 g$0$16924)) (quote #f))) ((lambda (g$0$16926) (if (equal? (g$0$13245 g$0$16926) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16920)))) (quote #f))) ((lambda (g$0$16928) (list g$0$16928)) (g$0$13219 g$0$16920)))) (quote #f))) g$0$16876))) g$0$16864))) ((lambda (g$0$16930) (if (g$0$13211 g$0$16930) (begin (quote #f) ((lambda (g$0$16932) (if g$0$16932 (begin (quote #f) ((lambda (g$0$16934) (if g$0$16934 (begin (quote #f) (append g$0$16932 g$0$16934)) (quote #f))) ((lambda (g$0$16936) (if (g$0$13211 g$0$16936) (begin (quote #f) ((lambda (g$0$16938) (if g$0$16938 (begin (quote #f) ((lambda (g$0$16940) (if g$0$16940 (begin (quote #f) (append g$0$16938 g$0$16940)) (quote #f))) ((lambda (g$0$16942) (if (g$0$13211 g$0$16942) (begin (quote #f) ((lambda (g$0$16944) (if g$0$16944 (begin (quote #f) ((lambda (g$0$16946) (if g$0$16946 (begin (quote #f) (append g$0$16944 g$0$16946)) (quote #f))) ((lambda (g$0$16948) (if (equal? (g$0$13245 g$0$16948) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$16942)))) (quote #f))) ((lambda (g$0$16950) (list g$0$16950)) (g$0$13219 g$0$16942)))) (quote #f))) (g$0$13223 g$0$16936)))) (quote #f))) ((lambda (g$0$16952) (if (g$0$13225 g$0$16952) (if (g$0$13233 g$0$16952 (g$0$13478 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$16936)))) (quote #f))) (g$0$13223 g$0$16930)))) (quote #f))) ((lambda (g$0$16954) (list g$0$16954)) (g$0$13219 g$0$16930)))) (quote #f))) g$0$16864))) g$0$16852))) ((lambda (g$0$16956) (if (g$0$13211 g$0$16956) (begin (quote #f) ((lambda (g$0$16958) (if g$0$16958 (begin (quote #f) ((lambda (g$0$16960) (if g$0$16960 (begin (quote #f) (append g$0$16958 g$0$16960)) (quote #f))) ((lambda (g$0$16962) (if (g$0$13211 g$0$16962) (begin (quote #f) ((lambda (g$0$16964) (if g$0$16964 (begin (quote #f) ((lambda (g$0$16966) (if g$0$16966 (begin (quote #f) (append g$0$16964 g$0$16966)) (quote #f))) ((letrec ((g$0$16968 (lambda (g$0$16970) (if (g$0$13211 g$0$16970) ((lambda (g$0$16972) (if g$0$16972 (begin (quote #f) ((lambda (g$0$16974) (if g$0$16974 (begin (quote #f) (map cons g$0$16972 g$0$16974)) (quote #f))) (g$0$16968 (g$0$13223 g$0$16970)))) (quote #f))) ((lambda (g$0$16976) (list g$0$16976)) (g$0$13219 g$0$16970))) (if (g$0$13215 g$0$16970) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$16968) (g$0$13223 g$0$16962)))) (quote #f))) ((lambda (g$0$16978) (list g$0$16978)) (g$0$13219 g$0$16962)))) (quote #f))) (g$0$13223 g$0$16956)))) (quote #f))) ((lambda (g$0$16980) (if (g$0$13225 g$0$16980) (if (g$0$13233 g$0$16980 (g$0$13478 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$16956)))) (quote #f))) g$0$16852))) g$0$16848) ((lambda (g$0$16982) ((lambda (g$0$16984) (if (if g$0$16984 (begin (quote #f) (apply (lambda (g$0$16986 g$0$16987) (quote #t)) g$0$16984)) (quote #f)) (apply (lambda (g$0$16990 g$0$16991) (error (quote expander) (quote "incorrect position of keyword else") (g$0$13243 g$0$16832 (quote ())))) g$0$16984) ((lambda (g$0$16994) ((lambda (g$0$16996) (if (if g$0$16996 (begin (quote #f) (apply (lambda (g$0$16998 g$0$16999) (quote #t)) g$0$16996)) (quote #f)) (apply (lambda (g$0$17002 g$0$17003) (list (quote let) (list (list (quote t) g$0$17002)) (list (quote if) (quote t) (cons g$0$17003 (quote (t))) (g$0$16846 (car g$0$16849) (cdr g$0$16849))))) g$0$16996) ((lambda (g$0$17006) ((lambda (g$0$17008) (if (if g$0$17008 (begin (quote #f) (apply (lambda (g$0$17010) (quote #t)) g$0$17008)) (quote #f)) (apply (lambda (g$0$17012) (list (quote or) g$0$17012 (g$0$16846 (car g$0$16849) (cdr g$0$16849)))) g$0$17008) ((lambda (g$0$17014) ((lambda (g$0$17016) (if (if g$0$17016 (begin (quote #f) (apply (lambda (g$0$17018 g$0$17019) (quote #t)) g$0$17016)) (quote #f)) (apply (lambda (g$0$17022 g$0$17023) (list (quote if) g$0$17022 (cons (quote begin) g$0$17023) (g$0$16846 (car g$0$16849) (cdr g$0$16849)))) g$0$17016) ((lambda (g$0$17026) ((lambda (g$0$17028) (if (if g$0$17028 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17028)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid last clause") (g$0$13243 g$0$16832 (quote ())))) g$0$17028) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17026 (quote ()))))) ((lambda (g$0$17030) (quote ())) g$0$17026))) g$0$17014))) ((lambda (g$0$17032) (if (g$0$13211 g$0$17032) (begin (quote #f) ((lambda (g$0$17034) (if g$0$17034 (begin (quote #f) ((lambda (g$0$17036) (if g$0$17036 (begin (quote #f) (append g$0$17034 g$0$17036)) (quote #f))) ((letrec ((g$0$17038 (lambda (g$0$17040) (if (g$0$13211 g$0$17040) ((lambda (g$0$17042) (if g$0$17042 (begin (quote #f) ((lambda (g$0$17044) (if g$0$17044 (begin (quote #f) (map cons g$0$17042 g$0$17044)) (quote #f))) (g$0$17038 (g$0$13223 g$0$17040)))) (quote #f))) ((lambda (g$0$17046) (list g$0$17046)) (g$0$13219 g$0$17040))) (if (g$0$13215 g$0$17040) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$17038) (g$0$13223 g$0$17032)))) (quote #f))) ((lambda (g$0$17048) (list g$0$17048)) (g$0$13219 g$0$17032)))) (quote #f))) g$0$17014))) g$0$17006))) ((lambda (g$0$17050) (if (g$0$13211 g$0$17050) (begin (quote #f) ((lambda (g$0$17052) (if g$0$17052 (begin (quote #f) ((lambda (g$0$17054) (if g$0$17054 (begin (quote #f) (append g$0$17052 g$0$17054)) (quote #f))) ((lambda (g$0$17056) (if (equal? (g$0$13245 g$0$17056) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17050)))) (quote #f))) ((lambda (g$0$17058) (list g$0$17058)) (g$0$13219 g$0$17050)))) (quote #f))) g$0$17006))) g$0$16994))) ((lambda (g$0$17060) (if (g$0$13211 g$0$17060) (begin (quote #f) ((lambda (g$0$17062) (if g$0$17062 (begin (quote #f) ((lambda (g$0$17064) (if g$0$17064 (begin (quote #f) (append g$0$17062 g$0$17064)) (quote #f))) ((lambda (g$0$17066) (if (g$0$13211 g$0$17066) (begin (quote #f) ((lambda (g$0$17068) (if g$0$17068 (begin (quote #f) ((lambda (g$0$17070) (if g$0$17070 (begin (quote #f) (append g$0$17068 g$0$17070)) (quote #f))) ((lambda (g$0$17072) (if (g$0$13211 g$0$17072) (begin (quote #f) ((lambda (g$0$17074) (if g$0$17074 (begin (quote #f) ((lambda (g$0$17076) (if g$0$17076 (begin (quote #f) (append g$0$17074 g$0$17076)) (quote #f))) ((lambda (g$0$17078) (if (equal? (g$0$13245 g$0$17078) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17072)))) (quote #f))) ((lambda (g$0$17080) (list g$0$17080)) (g$0$13219 g$0$17072)))) (quote #f))) (g$0$13223 g$0$17066)))) (quote #f))) ((lambda (g$0$17082) (if (g$0$13225 g$0$17082) (if (g$0$13233 g$0$17082 (g$0$13478 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17066)))) (quote #f))) (g$0$13223 g$0$17060)))) (quote #f))) ((lambda (g$0$17084) (list g$0$17084)) (g$0$13219 g$0$17060)))) (quote #f))) g$0$16994))) g$0$16982))) ((lambda (g$0$17086) (if (g$0$13211 g$0$17086) (begin (quote #f) ((lambda (g$0$17088) (if g$0$17088 (begin (quote #f) ((lambda (g$0$17090) (if g$0$17090 (begin (quote #f) (append g$0$17088 g$0$17090)) (quote #f))) ((lambda (g$0$17092) (if (g$0$13211 g$0$17092) (begin (quote #f) ((lambda (g$0$17094) (if g$0$17094 (begin (quote #f) ((lambda (g$0$17096) (if g$0$17096 (begin (quote #f) (append g$0$17094 g$0$17096)) (quote #f))) ((letrec ((g$0$17098 (lambda (g$0$17100) (if (g$0$13211 g$0$17100) ((lambda (g$0$17102) (if g$0$17102 (begin (quote #f) ((lambda (g$0$17104) (if g$0$17104 (begin (quote #f) (map cons g$0$17102 g$0$17104)) (quote #f))) (g$0$17098 (g$0$13223 g$0$17100)))) (quote #f))) ((lambda (g$0$17106) (list g$0$17106)) (g$0$13219 g$0$17100))) (if (g$0$13215 g$0$17100) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$17098) (g$0$13223 g$0$17092)))) (quote #f))) ((lambda (g$0$17108) (list g$0$17108)) (g$0$13219 g$0$17092)))) (quote #f))) (g$0$13223 g$0$17086)))) (quote #f))) ((lambda (g$0$17110) (if (g$0$13225 g$0$17110) (if (g$0$13233 g$0$17110 (g$0$13478 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17086)))) (quote #f))) g$0$16982))) g$0$16848))))) (g$0$16846 g$0$16842 g$0$16843)))) g$0$16836) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$16834 (quote ()))))) ((lambda (g$0$17112) (if (g$0$13211 g$0$17112) (begin (quote #f) ((lambda (g$0$17114) (if g$0$17114 (begin (quote #f) ((lambda (g$0$17116) (if g$0$17116 (begin (quote #f) (append g$0$17114 g$0$17116)) (quote #f))) ((lambda (g$0$17118) (if (g$0$13211 g$0$17118) (begin (quote #f) ((lambda (g$0$17120) (if g$0$17120 (begin (quote #f) ((lambda (g$0$17122) (if g$0$17122 (begin (quote #f) (append g$0$17120 g$0$17122)) (quote #f))) ((letrec ((g$0$17124 (lambda (g$0$17126) (if (g$0$13211 g$0$17126) ((lambda (g$0$17128) (if g$0$17128 (begin (quote #f) ((lambda (g$0$17130) (if g$0$17130 (begin (quote #f) (map cons g$0$17128 g$0$17130)) (quote #f))) (g$0$17124 (g$0$13223 g$0$17126)))) (quote #f))) ((lambda (g$0$17132) (list g$0$17132)) (g$0$13219 g$0$17126))) (if (g$0$13215 g$0$17126) (list (begin (quote cls*) (quote ()))) (quote #f)))))) g$0$17124) (g$0$13223 g$0$17118)))) (quote #f))) ((lambda (g$0$17134) (list g$0$17134)) (g$0$13219 g$0$17118)))) (quote #f))) (g$0$13223 g$0$17112)))) (quote #f))) ((lambda (g$0$17136) (quote ())) (g$0$13219 g$0$17112)))) (quote #f))) g$0$16834))) g$0$16832))) (set! g$0$13546 (lambda (g$0$17138) ((lambda (g$0$17140) ((lambda (g$0$17142) (if (if g$0$17142 (begin (quote #f) (apply (lambda (g$0$17144 g$0$17145) (quote #t)) g$0$17142)) (quote #f)) (apply (lambda (g$0$17148 g$0$17149) ((lambda (g$0$17152) (begin (if (string? g$0$17152) (void) (error (quote expander) (quote "invalid syntax") (g$0$13245 g$0$17138))) (with-input-from-file g$0$17152 (lambda () (letrec ((g$0$17154 (lambda (g$0$17156) ((lambda (g$0$17158) (if (eof-object? g$0$17158) (cons (g$0$13512 (quote begin)) (g$0$13191 g$0$17148 (reverse g$0$17156))) (g$0$17154 (cons g$0$17158 g$0$17156)))) (read))))) (g$0$17154 (quote ()))))))) (g$0$13245 g$0$17149))) g$0$17142) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17140 (quote ()))))) ((lambda (g$0$17160) (if (g$0$13211 g$0$17160) (begin (quote #f) ((lambda (g$0$17162) (if g$0$17162 (begin (quote #f) ((lambda (g$0$17164) (if g$0$17164 (begin (quote #f) (append g$0$17162 g$0$17164)) (quote #f))) ((lambda (g$0$17166) (if (g$0$13211 g$0$17166) (begin (quote #f) ((lambda (g$0$17168) (if g$0$17168 (begin (quote #f) ((lambda (g$0$17170) (if g$0$17170 (begin (quote #f) (append g$0$17168 g$0$17170)) (quote #f))) ((lambda (g$0$17172) (if (equal? (g$0$13245 g$0$17172) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17166)))) (quote #f))) ((lambda (g$0$17174) (list g$0$17174)) (g$0$13219 g$0$17166)))) (quote #f))) (g$0$13223 g$0$17160)))) (quote #f))) ((lambda (g$0$17176) (list g$0$17176)) (g$0$13219 g$0$17160)))) (quote #f))) g$0$17140))) g$0$17138))) (set! g$0$13548 (lambda (g$0$17178) ((lambda (g$0$17180) ((lambda (g$0$17182) (if (if g$0$17182 (begin (quote #f) (apply (lambda (g$0$17184 g$0$17185 g$0$17186) (quote #t)) g$0$17182)) (quote #f)) (apply (lambda (g$0$17190 g$0$17191 g$0$17192) (begin (if (for-all (lambda (g$0$17196) (if (g$0$13225 g$0$17196) (if (not (g$0$13233 g$0$17196 (g$0$13478 (quote |...|)))) (begin (quote #f) (not (g$0$13233 g$0$17196 (g$0$13478 (quote _))))) (quote #f)) (quote #f))) g$0$17190) (void) (error (quote expander) (quote "invalid literals") (g$0$13243 g$0$17178 (quote ())))) (g$0$13512 (list (quote lambda) (quote (x)) (cons (quote syntax-case) (cons (quote x) (cons g$0$17190 (map (lambda (g$0$17198 g$0$17199) (list g$0$17198 (list (quote syntax) g$0$17199))) g$0$17191 g$0$17192)))))))) g$0$17182) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17180 (quote ()))))) ((lambda (g$0$17202) (if (g$0$13211 g$0$17202) (begin (quote #f) ((lambda (g$0$17204) (if g$0$17204 (begin (quote #f) ((lambda (g$0$17206) (if g$0$17206 (begin (quote #f) (append g$0$17204 g$0$17206)) (quote #f))) ((lambda (g$0$17208) (if (g$0$13211 g$0$17208) (begin (quote #f) ((lambda (g$0$17210) (if g$0$17210 (begin (quote #f) ((lambda (g$0$17212) (if g$0$17212 (begin (quote #f) (append g$0$17210 g$0$17212)) (quote #f))) ((letrec ((g$0$17214 (lambda (g$0$17216) (if (g$0$13211 g$0$17216) ((lambda (g$0$17218) (if g$0$17218 (begin (quote #f) ((lambda (g$0$17220) (if g$0$17220 (begin (quote #f) (map cons g$0$17218 g$0$17220)) (quote #f))) (g$0$17214 (g$0$13223 g$0$17216)))) (quote #f))) ((lambda (g$0$17222) (if (g$0$13211 g$0$17222) (begin (quote #f) ((lambda (g$0$17224) (if g$0$17224 (begin (quote #f) ((lambda (g$0$17226) (if g$0$17226 (begin (quote #f) (append g$0$17224 g$0$17226)) (quote #f))) ((lambda (g$0$17228) (if (g$0$13211 g$0$17228) (begin (quote #f) ((lambda (g$0$17230) (if g$0$17230 (begin (quote #f) ((lambda (g$0$17232) (if g$0$17232 (begin (quote #f) (append g$0$17230 g$0$17232)) (quote #f))) ((lambda (g$0$17234) (if (equal? (g$0$13245 g$0$17234) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17228)))) (quote #f))) ((lambda (g$0$17236) (list g$0$17236)) (g$0$13219 g$0$17228)))) (quote #f))) (g$0$13223 g$0$17222)))) (quote #f))) ((lambda (g$0$17238) (list g$0$17238)) (g$0$13219 g$0$17222)))) (quote #f))) (g$0$13219 g$0$17216))) (if (g$0$13215 g$0$17216) (list (begin (quote pat*) (quote ())) (begin (quote tmp*) (quote ()))) (quote #f)))))) g$0$17214) (g$0$13223 g$0$17208)))) (quote #f))) ((letrec ((g$0$17240 (lambda (g$0$17242) (if (g$0$13211 g$0$17242) ((lambda (g$0$17244) (if g$0$17244 (begin (quote #f) ((lambda (g$0$17246) (if g$0$17246 (begin (quote #f) (map cons g$0$17244 g$0$17246)) (quote #f))) (g$0$17240 (g$0$13223 g$0$17242)))) (quote #f))) ((lambda (g$0$17248) (list g$0$17248)) (g$0$13219 g$0$17242))) (if (g$0$13215 g$0$17242) (list (begin (quote lits) (quote ()))) (quote #f)))))) g$0$17240) (g$0$13219 g$0$17208)))) (quote #f))) (g$0$13223 g$0$17202)))) (quote #f))) ((lambda (g$0$17250) (quote ())) (g$0$13219 g$0$17202)))) (quote #f))) g$0$17180))) g$0$17178))) (set! g$0$13550 ((lambda () ((lambda (g$0$17274 g$0$17276 g$0$17278 g$0$17280 g$0$17282 g$0$17284) (begin (set! g$0$17274 (lambda (g$0$17896 g$0$17897) (letrec ((g$0$17900 (lambda (g$0$17902) (if (null? g$0$17902) g$0$17897 (g$0$17276 (car g$0$17902) (g$0$17900 (cdr g$0$17902))))))) (g$0$17900 g$0$17896)))) (set! g$0$17276 (lambda (g$0$17790 g$0$17791) ((lambda (g$0$17794) ((lambda (g$0$17796) (if (if g$0$17796 (begin (quote #f) (apply (lambda (g$0$17798) (quote #t)) g$0$17796)) (quote #f)) (apply (lambda (g$0$17800) ((lambda (g$0$17802) ((lambda (g$0$17804) (if (if g$0$17804 (begin (quote #f) (apply (lambda (g$0$17806) (quote #t)) g$0$17804)) (quote #f)) (apply (lambda (g$0$17808) (list (g$0$13478 (quote quote)) (cons g$0$17808 g$0$17800))) g$0$17804) ((lambda (g$0$17810) ((lambda (g$0$17812) (if (if g$0$17812 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17812)) (quote #f)) (apply (lambda () ((lambda (g$0$17814) ((lambda (g$0$17816) (if (if g$0$17816 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17816)) (quote #f)) (apply (lambda () (list (g$0$13478 (quote list)) g$0$17790)) g$0$17816) ((lambda (g$0$17818) ((lambda (g$0$17820) (if (if g$0$17820 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17820)) (quote #f)) (apply (lambda () (list (g$0$13478 (quote cons)) g$0$17790 g$0$17791)) g$0$17820) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17818 (quote ()))))) ((lambda (g$0$17822) (quote ())) g$0$17818))) g$0$17814))) ((lambda (g$0$17824) (if (equal? (g$0$13245 g$0$17824) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$17814))) g$0$17800)) g$0$17812) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17810 (quote ()))))) ((lambda (g$0$17826) (quote ())) g$0$17810))) g$0$17802))) ((lambda (g$0$17828) (if (g$0$13211 g$0$17828) (begin (quote #f) ((lambda (g$0$17830) (if g$0$17830 (begin (quote #f) ((lambda (g$0$17832) (if g$0$17832 (begin (quote #f) (append g$0$17830 g$0$17832)) (quote #f))) ((lambda (g$0$17834) (if (g$0$13211 g$0$17834) (begin (quote #f) ((lambda (g$0$17836) (if g$0$17836 (begin (quote #f) ((lambda (g$0$17838) (if g$0$17838 (begin (quote #f) (append g$0$17836 g$0$17838)) (quote #f))) ((lambda (g$0$17840) (if (equal? (g$0$13245 g$0$17840) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17834)))) (quote #f))) ((lambda (g$0$17842) (list g$0$17842)) (g$0$13219 g$0$17834)))) (quote #f))) (g$0$13223 g$0$17828)))) (quote #f))) ((lambda (g$0$17844) (if (g$0$13225 g$0$17844) (if (g$0$13233 g$0$17844 (g$0$13478 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17828)))) (quote #f))) g$0$17802))) g$0$17790)) g$0$17796) ((lambda (g$0$17846) ((lambda (g$0$17848) (if (if g$0$17848 (begin (quote #f) (apply (lambda (g$0$17850) (quote #t)) g$0$17848)) (quote #f)) (apply (lambda (g$0$17852) (cons* (g$0$13478 (quote list)) g$0$17790 g$0$17852)) g$0$17848) ((lambda (g$0$17854) ((lambda (g$0$17856) (if (if g$0$17856 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17856)) (quote #f)) (apply (lambda () (list (g$0$13478 (quote cons)) g$0$17790 g$0$17791)) g$0$17856) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17854 (quote ()))))) ((lambda (g$0$17858) (quote ())) g$0$17854))) g$0$17846))) ((lambda (g$0$17860) (if (g$0$13211 g$0$17860) (begin (quote #f) ((lambda (g$0$17862) (if g$0$17862 (begin (quote #f) ((lambda (g$0$17864) (if g$0$17864 (begin (quote #f) (append g$0$17862 g$0$17864)) (quote #f))) ((letrec ((g$0$17866 (lambda (g$0$17868) (if (g$0$13211 g$0$17868) ((lambda (g$0$17870) (if g$0$17870 (begin (quote #f) ((lambda (g$0$17872) (if g$0$17872 (begin (quote #f) (map cons g$0$17870 g$0$17872)) (quote #f))) (g$0$17866 (g$0$13223 g$0$17868)))) (quote #f))) ((lambda (g$0$17874) (list g$0$17874)) (g$0$13219 g$0$17868))) (if (g$0$13215 g$0$17868) (list (begin (quote stuff) (quote ()))) (quote #f)))))) g$0$17866) (g$0$13223 g$0$17860)))) (quote #f))) ((lambda (g$0$17876) (if (g$0$13225 g$0$17876) (if (g$0$13233 g$0$17876 (g$0$13478 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17860)))) (quote #f))) g$0$17846))) g$0$17794))) ((lambda (g$0$17878) (if (g$0$13211 g$0$17878) (begin (quote #f) ((lambda (g$0$17880) (if g$0$17880 (begin (quote #f) ((lambda (g$0$17882) (if g$0$17882 (begin (quote #f) (append g$0$17880 g$0$17882)) (quote #f))) ((lambda (g$0$17884) (if (g$0$13211 g$0$17884) (begin (quote #f) ((lambda (g$0$17886) (if g$0$17886 (begin (quote #f) ((lambda (g$0$17888) (if g$0$17888 (begin (quote #f) (append g$0$17886 g$0$17888)) (quote #f))) ((lambda (g$0$17890) (if (equal? (g$0$13245 g$0$17890) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17884)))) (quote #f))) ((lambda (g$0$17892) (list g$0$17892)) (g$0$13219 g$0$17884)))) (quote #f))) (g$0$13223 g$0$17878)))) (quote #f))) ((lambda (g$0$17894) (if (g$0$13225 g$0$17894) (if (g$0$13233 g$0$17894 (g$0$13478 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17878)))) (quote #f))) g$0$17794))) g$0$17791))) (set! g$0$17278 (lambda (g$0$17724 g$0$17725) ((lambda (g$0$17728) (if (null? g$0$17728) (list (g$0$13478 (quote quote)) (quote ())) (if (null? (cdr g$0$17728)) (car g$0$17728) (cons* (g$0$13478 (quote append)) g$0$17728)))) (letrec ((g$0$17730 (lambda (g$0$17732) (if (null? g$0$17732) ((lambda (g$0$17734) ((lambda (g$0$17736) (if (if g$0$17736 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17736)) (quote #f)) (apply (lambda () (quote ())) g$0$17736) ((lambda (g$0$17738) ((lambda (g$0$17740) (if (if g$0$17740 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17740)) (quote #f)) (apply (lambda () (list g$0$17725)) g$0$17740) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17738 (quote ()))))) ((lambda (g$0$17742) (quote ())) g$0$17738))) g$0$17734))) ((lambda (g$0$17744) (if (g$0$13211 g$0$17744) (begin (quote #f) ((lambda (g$0$17746) (if g$0$17746 (begin (quote #f) ((lambda (g$0$17748) (if g$0$17748 (begin (quote #f) (append g$0$17746 g$0$17748)) (quote #f))) ((lambda (g$0$17750) (if (g$0$13211 g$0$17750) (begin (quote #f) ((lambda (g$0$17752) (if g$0$17752 (begin (quote #f) ((lambda (g$0$17754) (if g$0$17754 (begin (quote #f) (append g$0$17752 g$0$17754)) (quote #f))) ((lambda (g$0$17756) (if (equal? (g$0$13245 g$0$17756) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17750)))) (quote #f))) ((lambda (g$0$17758) (if (equal? (g$0$13245 g$0$17758) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13219 g$0$17750)))) (quote #f))) (g$0$13223 g$0$17744)))) (quote #f))) ((lambda (g$0$17760) (if (g$0$13225 g$0$17760) (if (g$0$13233 g$0$17760 (g$0$13478 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17744)))) (quote #f))) g$0$17734))) g$0$17725) ((lambda (g$0$17762) ((lambda (g$0$17764) (if (if g$0$17764 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17764)) (quote #f)) (apply (lambda () (g$0$17730 (cdr g$0$17732))) g$0$17764) ((lambda (g$0$17766) ((lambda (g$0$17768) (if (if g$0$17768 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17768)) (quote #f)) (apply (lambda () (cons (car g$0$17732) (g$0$17730 (cdr g$0$17732)))) g$0$17768) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17766 (quote ()))))) ((lambda (g$0$17770) (quote ())) g$0$17766))) g$0$17762))) ((lambda (g$0$17772) (if (g$0$13211 g$0$17772) (begin (quote #f) ((lambda (g$0$17774) (if g$0$17774 (begin (quote #f) ((lambda (g$0$17776) (if g$0$17776 (begin (quote #f) (append g$0$17774 g$0$17776)) (quote #f))) ((lambda (g$0$17778) (if (g$0$13211 g$0$17778) (begin (quote #f) ((lambda (g$0$17780) (if g$0$17780 (begin (quote #f) ((lambda (g$0$17782) (if g$0$17782 (begin (quote #f) (append g$0$17780 g$0$17782)) (quote #f))) ((lambda (g$0$17784) (if (equal? (g$0$13245 g$0$17784) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17778)))) (quote #f))) ((lambda (g$0$17786) (if (equal? (g$0$13245 g$0$17786) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13219 g$0$17778)))) (quote #f))) (g$0$13223 g$0$17772)))) (quote #f))) ((lambda (g$0$17788) (if (g$0$13225 g$0$17788) (if (g$0$13233 g$0$17788 (g$0$13478 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17772)))) (quote #f))) g$0$17762))) (car g$0$17732)))))) (g$0$17730 g$0$17724))))) (set! g$0$17280 (lambda (g$0$17564) ((lambda (g$0$17566) ((lambda (g$0$17568) ((lambda (g$0$17570) (if (if g$0$17570 (begin (quote #f) (apply (lambda (g$0$17572) (quote #t)) g$0$17570)) (quote #f)) (apply (lambda (g$0$17574) (list (g$0$13478 (quote quote)) (list->vector g$0$17574))) g$0$17570) ((lambda (g$0$17576) ((lambda (g$0$17578) (if (if g$0$17578 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17578)) (quote #f)) (apply (lambda () (letrec ((g$0$17580 (lambda (g$0$17584 g$0$17585) ((lambda (g$0$17588) ((lambda (g$0$17590) (if (if g$0$17590 (begin (quote #f) (apply (lambda (g$0$17592) (quote #t)) g$0$17590)) (quote #f)) (apply (lambda (g$0$17594) (g$0$17585 (map (lambda (g$0$17596) (list (g$0$13478 (quote quote)) g$0$17596)) g$0$17594))) g$0$17590) ((lambda (g$0$17598) ((lambda (g$0$17600) (if (if g$0$17600 (begin (quote #f) (apply (lambda (g$0$17602) (quote #t)) g$0$17600)) (quote #f)) (apply (lambda (g$0$17604) (g$0$17585 g$0$17604)) g$0$17600) ((lambda (g$0$17606) ((lambda (g$0$17608) (if (if g$0$17608 (begin (quote #f) (apply (lambda (g$0$17610 g$0$17611) (quote #t)) g$0$17608)) (quote #f)) (apply (lambda (g$0$17614 g$0$17615) (g$0$17580 g$0$17615 (lambda (g$0$17618) (g$0$17585 (cons g$0$17614 g$0$17618))))) g$0$17608) ((lambda (g$0$17620) ((lambda (g$0$17622) (if (if g$0$17622 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17622)) (quote #f)) (apply (lambda () (list (g$0$13478 (quote list->vector)) g$0$17566)) g$0$17622) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17620 (quote ()))))) ((lambda (g$0$17624) (quote ())) g$0$17620))) g$0$17606))) ((lambda (g$0$17626) (if (g$0$13211 g$0$17626) (begin (quote #f) ((lambda (g$0$17628) (if g$0$17628 (begin (quote #f) ((lambda (g$0$17630) (if g$0$17630 (begin (quote #f) (append g$0$17628 g$0$17630)) (quote #f))) ((lambda (g$0$17632) (if (g$0$13211 g$0$17632) (begin (quote #f) ((lambda (g$0$17634) (if g$0$17634 (begin (quote #f) ((lambda (g$0$17636) (if g$0$17636 (begin (quote #f) (append g$0$17634 g$0$17636)) (quote #f))) ((lambda (g$0$17638) (if (g$0$13211 g$0$17638) (begin (quote #f) ((lambda (g$0$17640) (if g$0$17640 (begin (quote #f) ((lambda (g$0$17642) (if g$0$17642 (begin (quote #f) (append g$0$17640 g$0$17642)) (quote #f))) ((lambda (g$0$17644) (if (equal? (g$0$13245 g$0$17644) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17638)))) (quote #f))) ((lambda (g$0$17646) (list g$0$17646)) (g$0$13219 g$0$17638)))) (quote #f))) (g$0$13223 g$0$17632)))) (quote #f))) ((lambda (g$0$17648) (list g$0$17648)) (g$0$13219 g$0$17632)))) (quote #f))) (g$0$13223 g$0$17626)))) (quote #f))) ((lambda (g$0$17650) (if (g$0$13225 g$0$17650) (if (g$0$13233 g$0$17650 (g$0$13478 (quote cons))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17626)))) (quote #f))) g$0$17606))) g$0$17598))) ((lambda (g$0$17652) (if (g$0$13211 g$0$17652) (begin (quote #f) ((lambda (g$0$17654) (if g$0$17654 (begin (quote #f) ((lambda (g$0$17656) (if g$0$17656 (begin (quote #f) (append g$0$17654 g$0$17656)) (quote #f))) ((letrec ((g$0$17658 (lambda (g$0$17660) (if (g$0$13211 g$0$17660) ((lambda (g$0$17662) (if g$0$17662 (begin (quote #f) ((lambda (g$0$17664) (if g$0$17664 (begin (quote #f) (map cons g$0$17662 g$0$17664)) (quote #f))) (g$0$17658 (g$0$13223 g$0$17660)))) (quote #f))) ((lambda (g$0$17666) (list g$0$17666)) (g$0$13219 g$0$17660))) (if (g$0$13215 g$0$17660) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17658) (g$0$13223 g$0$17652)))) (quote #f))) ((lambda (g$0$17668) (if (g$0$13225 g$0$17668) (if (g$0$13233 g$0$17668 (g$0$13478 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17652)))) (quote #f))) g$0$17598))) g$0$17588))) ((lambda (g$0$17670) (if (g$0$13211 g$0$17670) (begin (quote #f) ((lambda (g$0$17672) (if g$0$17672 (begin (quote #f) ((lambda (g$0$17674) (if g$0$17674 (begin (quote #f) (append g$0$17672 g$0$17674)) (quote #f))) ((lambda (g$0$17676) (if (g$0$13211 g$0$17676) (begin (quote #f) ((lambda (g$0$17678) (if g$0$17678 (begin (quote #f) ((lambda (g$0$17680) (if g$0$17680 (begin (quote #f) (append g$0$17678 g$0$17680)) (quote #f))) ((lambda (g$0$17682) (if (equal? (g$0$13245 g$0$17682) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17676)))) (quote #f))) ((letrec ((g$0$17684 (lambda (g$0$17686) (if (g$0$13211 g$0$17686) ((lambda (g$0$17688) (if g$0$17688 (begin (quote #f) ((lambda (g$0$17690) (if g$0$17690 (begin (quote #f) (map cons g$0$17688 g$0$17690)) (quote #f))) (g$0$17684 (g$0$13223 g$0$17686)))) (quote #f))) ((lambda (g$0$17692) (list g$0$17692)) (g$0$13219 g$0$17686))) (if (g$0$13215 g$0$17686) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17684) (g$0$13219 g$0$17676)))) (quote #f))) (g$0$13223 g$0$17670)))) (quote #f))) ((lambda (g$0$17694) (if (g$0$13225 g$0$17694) (if (g$0$13233 g$0$17694 (g$0$13478 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17670)))) (quote #f))) g$0$17588))) g$0$17584)))) (g$0$17580 g$0$17564 (lambda (g$0$17582) (cons* (g$0$13478 (quote vector)) g$0$17582))))) g$0$17578) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17576 (quote ()))))) ((lambda (g$0$17696) (quote ())) g$0$17576))) g$0$17568))) ((lambda (g$0$17698) (if (g$0$13211 g$0$17698) (begin (quote #f) ((lambda (g$0$17700) (if g$0$17700 (begin (quote #f) ((lambda (g$0$17702) (if g$0$17702 (begin (quote #f) (append g$0$17700 g$0$17702)) (quote #f))) ((lambda (g$0$17704) (if (g$0$13211 g$0$17704) (begin (quote #f) ((lambda (g$0$17706) (if g$0$17706 (begin (quote #f) ((lambda (g$0$17708) (if g$0$17708 (begin (quote #f) (append g$0$17706 g$0$17708)) (quote #f))) ((lambda (g$0$17710) (if (equal? (g$0$13245 g$0$17710) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17704)))) (quote #f))) ((letrec ((g$0$17712 (lambda (g$0$17714) (if (g$0$13211 g$0$17714) ((lambda (g$0$17716) (if g$0$17716 (begin (quote #f) ((lambda (g$0$17718) (if g$0$17718 (begin (quote #f) (map cons g$0$17716 g$0$17718)) (quote #f))) (g$0$17712 (g$0$13223 g$0$17714)))) (quote #f))) ((lambda (g$0$17720) (list g$0$17720)) (g$0$13219 g$0$17714))) (if (g$0$13215 g$0$17714) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17712) (g$0$13219 g$0$17704)))) (quote #f))) (g$0$13223 g$0$17698)))) (quote #f))) ((lambda (g$0$17722) (if (g$0$13225 g$0$17722) (if (g$0$13233 g$0$17722 (g$0$13478 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17698)))) (quote #f))) g$0$17568))) g$0$17566)) g$0$17564))) (set! g$0$17282 (lambda (g$0$17470 g$0$17471) ((lambda (g$0$17474) ((lambda (g$0$17476) (if (if g$0$17476 (begin (quote #f) (apply (lambda (g$0$17478 g$0$17479) (quote #t)) g$0$17476)) (quote #f)) (apply (lambda (g$0$17482 g$0$17483) ((lambda (g$0$17486) ((lambda (g$0$17488) (if (if g$0$17488 (begin (quote #f) (apply (lambda (g$0$17490) (quote #t)) g$0$17488)) (quote #f)) (apply (lambda (g$0$17492) (if (= g$0$17471 (quote 0)) (g$0$17274 g$0$17492 (g$0$17282 g$0$17483 g$0$17471)) (g$0$17276 (g$0$17276 (list (g$0$13478 (quote quote)) (quote unquote)) (g$0$17284 g$0$17492 (- g$0$17471 (quote 1)))) (g$0$17282 g$0$17483 g$0$17471)))) g$0$17488) ((lambda (g$0$17494) ((lambda (g$0$17496) (if (if g$0$17496 (begin (quote #f) (apply (lambda (g$0$17498) (quote #t)) g$0$17496)) (quote #f)) (apply (lambda (g$0$17500) (if (= g$0$17471 (quote 0)) (g$0$17278 g$0$17500 (g$0$17282 g$0$17483 g$0$17471)) (g$0$17276 (g$0$17276 (list (g$0$13478 (quote quote)) (quote unquote-splicing)) (g$0$17284 g$0$17500 (- g$0$17471 (quote 1)))) (g$0$17282 g$0$17483 g$0$17471)))) g$0$17496) ((lambda (g$0$17502) ((lambda (g$0$17504) (if (if g$0$17504 (begin (quote #f) (apply (lambda (g$0$17506) (quote #t)) g$0$17504)) (quote #f)) (apply (lambda (g$0$17508) (g$0$17276 (g$0$17284 g$0$17508 g$0$17471) (g$0$17282 g$0$17483 g$0$17471))) g$0$17504) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17502 (quote ()))))) ((lambda (g$0$17510) (list g$0$17510)) g$0$17502))) g$0$17494))) ((lambda (g$0$17512) (if (g$0$13211 g$0$17512) (begin (quote #f) ((lambda (g$0$17514) (if g$0$17514 (begin (quote #f) ((lambda (g$0$17516) (if g$0$17516 (begin (quote #f) (append g$0$17514 g$0$17516)) (quote #f))) ((letrec ((g$0$17518 (lambda (g$0$17520) (if (g$0$13211 g$0$17520) ((lambda (g$0$17522) (if g$0$17522 (begin (quote #f) ((lambda (g$0$17524) (if g$0$17524 (begin (quote #f) (map cons g$0$17522 g$0$17524)) (quote #f))) (g$0$17518 (g$0$13223 g$0$17520)))) (quote #f))) ((lambda (g$0$17526) (list g$0$17526)) (g$0$13219 g$0$17520))) (if (g$0$13215 g$0$17520) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$17518) (g$0$13223 g$0$17512)))) (quote #f))) ((lambda (g$0$17528) (if (g$0$13225 g$0$17528) (if (g$0$13233 g$0$17528 (g$0$13478 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17512)))) (quote #f))) g$0$17494))) g$0$17486))) ((lambda (g$0$17530) (if (g$0$13211 g$0$17530) (begin (quote #f) ((lambda (g$0$17532) (if g$0$17532 (begin (quote #f) ((lambda (g$0$17534) (if g$0$17534 (begin (quote #f) (append g$0$17532 g$0$17534)) (quote #f))) ((letrec ((g$0$17536 (lambda (g$0$17538) (if (g$0$13211 g$0$17538) ((lambda (g$0$17540) (if g$0$17540 (begin (quote #f) ((lambda (g$0$17542) (if g$0$17542 (begin (quote #f) (map cons g$0$17540 g$0$17542)) (quote #f))) (g$0$17536 (g$0$13223 g$0$17538)))) (quote #f))) ((lambda (g$0$17544) (list g$0$17544)) (g$0$13219 g$0$17538))) (if (g$0$13215 g$0$17538) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$17536) (g$0$13223 g$0$17530)))) (quote #f))) ((lambda (g$0$17546) (if (g$0$13225 g$0$17546) (if (g$0$13233 g$0$17546 (g$0$13478 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17530)))) (quote #f))) g$0$17486))) g$0$17482)) g$0$17476) ((lambda (g$0$17548) ((lambda (g$0$17550) (if (if g$0$17550 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17550)) (quote #f)) (apply (lambda () (list (g$0$13478 (quote quote)) (quote ()))) g$0$17550) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17548 (quote ()))))) ((lambda (g$0$17552) (if (equal? (g$0$13245 g$0$17552) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$17548))) g$0$17474))) ((lambda (g$0$17554) (if (g$0$13211 g$0$17554) (begin (quote #f) ((lambda (g$0$17556) (if g$0$17556 (begin (quote #f) ((lambda (g$0$17558) (if g$0$17558 (begin (quote #f) (append g$0$17556 g$0$17558)) (quote #f))) ((lambda (g$0$17560) (list g$0$17560)) (g$0$13223 g$0$17554)))) (quote #f))) ((lambda (g$0$17562) (list g$0$17562)) (g$0$13219 g$0$17554)))) (quote #f))) g$0$17474))) g$0$17470))) (set! g$0$17284 (lambda (g$0$17286 g$0$17287) ((lambda (g$0$17290) ((lambda (g$0$17292) (if (if g$0$17292 (begin (quote #f) (apply (lambda (g$0$17294) (quote #t)) g$0$17292)) (quote #f)) (apply (lambda (g$0$17296) (if (= g$0$17287 (quote 0)) g$0$17296 (g$0$17276 (list (g$0$13478 (quote quote)) (quote unquote)) (g$0$17284 (list g$0$17296) (- g$0$17287 (quote 1)))))) g$0$17292) ((lambda (g$0$17298) ((lambda (g$0$17300) (if (if g$0$17300 (begin (quote #f) (apply (lambda (g$0$17302 g$0$17303) (quote #t)) g$0$17300)) (quote #f)) (apply (lambda (g$0$17306 g$0$17307) (if (= g$0$17287 (quote 0)) (g$0$17274 g$0$17306 (g$0$17284 g$0$17307 g$0$17287)) (g$0$17276 (g$0$17276 (list (g$0$13478 (quote quote)) (quote unquote)) (g$0$17284 g$0$17306 (- g$0$17287 (quote 1)))) (g$0$17284 g$0$17307 g$0$17287)))) g$0$17300) ((lambda (g$0$17310) ((lambda (g$0$17312) (if (if g$0$17312 (begin (quote #f) (apply (lambda (g$0$17314 g$0$17315) (quote #t)) g$0$17312)) (quote #f)) (apply (lambda (g$0$17318 g$0$17319) (if (= g$0$17287 (quote 0)) (g$0$17278 g$0$17318 (g$0$17284 g$0$17319 g$0$17287)) (g$0$17276 (g$0$17276 (list (g$0$13478 (quote quote)) (quote unquote-splicing)) (g$0$17284 g$0$17318 (- g$0$17287 (quote 1)))) (g$0$17284 g$0$17319 g$0$17287)))) g$0$17312) ((lambda (g$0$17322) ((lambda (g$0$17324) (if (if g$0$17324 (begin (quote #f) (apply (lambda (g$0$17326) (quote #t)) g$0$17324)) (quote #f)) (apply (lambda (g$0$17328) (g$0$17276 (list (g$0$13478 (quote quote)) (quote quasiquote)) (g$0$17284 (list g$0$17328) (+ g$0$17287 (quote 1))))) g$0$17324) ((lambda (g$0$17330) ((lambda (g$0$17332) (if (if g$0$17332 (begin (quote #f) (apply (lambda (g$0$17334 g$0$17335) (quote #t)) g$0$17332)) (quote #f)) (apply (lambda (g$0$17338 g$0$17339) (g$0$17276 (g$0$17284 g$0$17338 g$0$17287) (g$0$17284 g$0$17339 g$0$17287))) g$0$17332) ((lambda (g$0$17342) ((lambda (g$0$17344) (if (if g$0$17344 (begin (quote #f) (apply (lambda (g$0$17346) (not (g$0$13177 g$0$17346))) g$0$17344)) (quote #f)) (apply (lambda (g$0$17348) (g$0$17280 (g$0$17282 g$0$17348 g$0$17287))) g$0$17344) ((lambda (g$0$17350) ((lambda (g$0$17352) (if (if g$0$17352 (begin (quote #f) (apply (lambda (g$0$17354) (quote #t)) g$0$17352)) (quote #f)) (apply (lambda (g$0$17356) (list (g$0$13478 (quote quote)) g$0$17356)) g$0$17352) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17350 (quote ()))))) ((lambda (g$0$17358) (list g$0$17358)) g$0$17350))) g$0$17342))) ((lambda (g$0$17360) (if (g$0$13213 g$0$17360) (begin (quote #f) ((letrec ((g$0$17362 (lambda (g$0$17364) (if (g$0$13211 g$0$17364) ((lambda (g$0$17366) (if g$0$17366 (begin (quote #f) ((lambda (g$0$17368) (if g$0$17368 (begin (quote #f) (map cons g$0$17366 g$0$17368)) (quote #f))) (g$0$17362 (g$0$13223 g$0$17364)))) (quote #f))) ((lambda (g$0$17370) (list g$0$17370)) (g$0$13219 g$0$17364))) (if (g$0$13215 g$0$17364) (list (begin (quote x) (quote ()))) (quote #f)))))) g$0$17362) (g$0$13209 g$0$17360))) (quote #f))) g$0$17342))) g$0$17330))) ((lambda (g$0$17372) (if (g$0$13211 g$0$17372) (begin (quote #f) ((lambda (g$0$17374) (if g$0$17374 (begin (quote #f) ((lambda (g$0$17376) (if g$0$17376 (begin (quote #f) (append g$0$17374 g$0$17376)) (quote #f))) ((lambda (g$0$17378) (list g$0$17378)) (g$0$13223 g$0$17372)))) (quote #f))) ((lambda (g$0$17380) (list g$0$17380)) (g$0$13219 g$0$17372)))) (quote #f))) g$0$17330))) g$0$17322))) ((lambda (g$0$17382) (if (g$0$13211 g$0$17382) (begin (quote #f) ((lambda (g$0$17384) (if g$0$17384 (begin (quote #f) ((lambda (g$0$17386) (if g$0$17386 (begin (quote #f) (append g$0$17384 g$0$17386)) (quote #f))) ((lambda (g$0$17388) (if (g$0$13211 g$0$17388) (begin (quote #f) ((lambda (g$0$17390) (if g$0$17390 (begin (quote #f) ((lambda (g$0$17392) (if g$0$17392 (begin (quote #f) (append g$0$17390 g$0$17392)) (quote #f))) ((lambda (g$0$17394) (if (equal? (g$0$13245 g$0$17394) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17388)))) (quote #f))) ((lambda (g$0$17396) (list g$0$17396)) (g$0$13219 g$0$17388)))) (quote #f))) (g$0$13223 g$0$17382)))) (quote #f))) ((lambda (g$0$17398) (if (g$0$13225 g$0$17398) (if (g$0$13233 g$0$17398 (g$0$13478 (quote quasiquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17382)))) (quote #f))) g$0$17322))) g$0$17310))) ((lambda (g$0$17400) (if (g$0$13211 g$0$17400) (begin (quote #f) ((lambda (g$0$17402) (if g$0$17402 (begin (quote #f) ((lambda (g$0$17404) (if g$0$17404 (begin (quote #f) (append g$0$17402 g$0$17404)) (quote #f))) ((lambda (g$0$17406) (list g$0$17406)) (g$0$13223 g$0$17400)))) (quote #f))) ((lambda (g$0$17408) (if (g$0$13211 g$0$17408) (begin (quote #f) ((lambda (g$0$17410) (if g$0$17410 (begin (quote #f) ((lambda (g$0$17412) (if g$0$17412 (begin (quote #f) (append g$0$17410 g$0$17412)) (quote #f))) ((letrec ((g$0$17414 (lambda (g$0$17416) (if (g$0$13211 g$0$17416) ((lambda (g$0$17418) (if g$0$17418 (begin (quote #f) ((lambda (g$0$17420) (if g$0$17420 (begin (quote #f) (map cons g$0$17418 g$0$17420)) (quote #f))) (g$0$17414 (g$0$13223 g$0$17416)))) (quote #f))) ((lambda (g$0$17422) (list g$0$17422)) (g$0$13219 g$0$17416))) (if (g$0$13215 g$0$17416) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$17414) (g$0$13223 g$0$17408)))) (quote #f))) ((lambda (g$0$17424) (if (g$0$13225 g$0$17424) (if (g$0$13233 g$0$17424 (g$0$13478 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17408)))) (quote #f))) (g$0$13219 g$0$17400)))) (quote #f))) g$0$17310))) g$0$17298))) ((lambda (g$0$17426) (if (g$0$13211 g$0$17426) (begin (quote #f) ((lambda (g$0$17428) (if g$0$17428 (begin (quote #f) ((lambda (g$0$17430) (if g$0$17430 (begin (quote #f) (append g$0$17428 g$0$17430)) (quote #f))) ((lambda (g$0$17432) (list g$0$17432)) (g$0$13223 g$0$17426)))) (quote #f))) ((lambda (g$0$17434) (if (g$0$13211 g$0$17434) (begin (quote #f) ((lambda (g$0$17436) (if g$0$17436 (begin (quote #f) ((lambda (g$0$17438) (if g$0$17438 (begin (quote #f) (append g$0$17436 g$0$17438)) (quote #f))) ((letrec ((g$0$17440 (lambda (g$0$17442) (if (g$0$13211 g$0$17442) ((lambda (g$0$17444) (if g$0$17444 (begin (quote #f) ((lambda (g$0$17446) (if g$0$17446 (begin (quote #f) (map cons g$0$17444 g$0$17446)) (quote #f))) (g$0$17440 (g$0$13223 g$0$17442)))) (quote #f))) ((lambda (g$0$17448) (list g$0$17448)) (g$0$13219 g$0$17442))) (if (g$0$13215 g$0$17442) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$17440) (g$0$13223 g$0$17434)))) (quote #f))) ((lambda (g$0$17450) (if (g$0$13225 g$0$17450) (if (g$0$13233 g$0$17450 (g$0$13478 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17434)))) (quote #f))) (g$0$13219 g$0$17426)))) (quote #f))) g$0$17298))) g$0$17290))) ((lambda (g$0$17452) (if (g$0$13211 g$0$17452) (begin (quote #f) ((lambda (g$0$17454) (if g$0$17454 (begin (quote #f) ((lambda (g$0$17456) (if g$0$17456 (begin (quote #f) (append g$0$17454 g$0$17456)) (quote #f))) ((lambda (g$0$17458) (if (g$0$13211 g$0$17458) (begin (quote #f) ((lambda (g$0$17460) (if g$0$17460 (begin (quote #f) ((lambda (g$0$17462) (if g$0$17462 (begin (quote #f) (append g$0$17460 g$0$17462)) (quote #f))) ((lambda (g$0$17464) (if (equal? (g$0$13245 g$0$17464) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17458)))) (quote #f))) ((lambda (g$0$17466) (list g$0$17466)) (g$0$13219 g$0$17458)))) (quote #f))) (g$0$13223 g$0$17452)))) (quote #f))) ((lambda (g$0$17468) (if (g$0$13225 g$0$17468) (if (g$0$13233 g$0$17468 (g$0$13478 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$17452)))) (quote #f))) g$0$17290))) g$0$17286))) (lambda (g$0$17904) ((lambda (g$0$17906) ((lambda (g$0$17908) (if (if g$0$17908 (begin (quote #f) (apply (lambda (g$0$17910) (quote #t)) g$0$17908)) (quote #f)) (apply (lambda (g$0$17912) (g$0$17284 g$0$17912 (quote 0))) g$0$17908) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$17906 (quote ()))))) ((lambda (g$0$17914) (if (g$0$13211 g$0$17914) (begin (quote #f) ((lambda (g$0$17916) (if g$0$17916 (begin (quote #f) ((lambda (g$0$17918) (if g$0$17918 (begin (quote #f) (append g$0$17916 g$0$17918)) (quote #f))) ((lambda (g$0$17920) (if (g$0$13211 g$0$17920) (begin (quote #f) ((lambda (g$0$17922) (if g$0$17922 (begin (quote #f) ((lambda (g$0$17924) (if g$0$17924 (begin (quote #f) (append g$0$17922 g$0$17924)) (quote #f))) ((lambda (g$0$17926) (if (equal? (g$0$13245 g$0$17926) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$17920)))) (quote #f))) ((lambda (g$0$17928) (list g$0$17928)) (g$0$13219 g$0$17920)))) (quote #f))) (g$0$13223 g$0$17914)))) (quote #f))) ((lambda (g$0$17930) (quote ())) (g$0$13219 g$0$17914)))) (quote #f))) g$0$17906))) g$0$17904)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$0$13552 ((lambda () ((lambda (g$0$17932) (begin (set! g$0$17932 (lambda (g$0$17934 g$0$17935) ((lambda (g$0$17938) ((lambda (g$0$17940) (if (if g$0$17940 (begin (quote #f) (apply (lambda (g$0$17942) (quote #t)) g$0$17940)) (quote #f)) (apply (lambda (g$0$17944) (if (= g$0$17935 (quote 0)) ((lambda (g$0$17946) (values (list g$0$17946) (list g$0$17944) g$0$17946)) (gensym)) (call-with-values (lambda () (g$0$17932 g$0$17944 (- g$0$17935 (quote 1)))) (lambda (g$0$17948 g$0$17949 g$0$17950) (values g$0$17948 g$0$17949 (list (quote unsyntax) g$0$17950)))))) g$0$17940) ((lambda (g$0$17954) ((lambda (g$0$17956) (if (if g$0$17956 (begin (quote #f) (apply (lambda () (= g$0$17935 (quote 0))) g$0$17956)) (quote #f)) (apply (lambda () (error (quote expander) (quote "incorrect use of unsyntax") (g$0$13243 g$0$17934 (quote ())))) g$0$17956) ((lambda (g$0$17958) ((lambda (g$0$17960) (if (if g$0$17960 (begin (quote #f) (apply (lambda (g$0$17962 g$0$17963) (quote #t)) g$0$17960)) (quote #f)) (apply (lambda (g$0$17966 g$0$17967) (call-with-values (lambda () (g$0$17932 g$0$17967 g$0$17935)) (lambda (g$0$17970 g$0$17971 g$0$17972) (if (= g$0$17935 (quote 0)) ((lambda (g$0$17976) (values (cons (cons g$0$17976 (quote (|...|))) g$0$17970) (cons g$0$17966 g$0$17971) (cons g$0$17976 (cons (quote |...|) g$0$17972)))) (gensym)) (call-with-values (lambda () (g$0$17932 g$0$17966 (- g$0$17935 (quote 1)))) (lambda (g$0$17978 g$0$17979 g$0$17980) (values (append g$0$17978 g$0$17970) (append g$0$17979 g$0$17971) (cons (list (quote unsyntax-splicing) g$0$17980) g$0$17972)))))))) g$0$17960) ((lambda (g$0$17984) ((lambda (g$0$17986) (if (if g$0$17986 (begin (quote #f) (apply (lambda () (= g$0$17935 (quote 0))) g$0$17986)) (quote #f)) (apply (lambda () (error (quote expander) (quote "incorrect use of unsyntax-splicing") (g$0$13243 g$0$17934 (quote ())))) g$0$17986) ((lambda (g$0$17988) ((lambda (g$0$17990) (if (if g$0$17990 (begin (quote #f) (apply (lambda (g$0$17992) (quote #t)) g$0$17990)) (quote #f)) (apply (lambda (g$0$17994) (call-with-values (lambda () (g$0$17932 g$0$17994 (+ g$0$17935 (quote 1)))) (lambda (g$0$17996 g$0$17997 g$0$17998) (values g$0$17996 g$0$17997 (list (quote quasisyntax) g$0$17998))))) g$0$17990) ((lambda (g$0$18002) ((lambda (g$0$18004) (if (if g$0$18004 (begin (quote #f) (apply (lambda (g$0$18006 g$0$18007) (quote #t)) g$0$18004)) (quote #f)) (apply (lambda (g$0$18010 g$0$18011) (call-with-values (lambda () (g$0$17932 g$0$18010 g$0$17935)) (lambda (g$0$18014 g$0$18015 g$0$18016) (call-with-values (lambda () (g$0$17932 g$0$18011 g$0$17935)) (lambda (g$0$18017 g$0$18018 g$0$18019) (values (append g$0$18017 g$0$18014) (append g$0$18018 g$0$18015) (cons g$0$18016 g$0$18019))))))) g$0$18004) ((lambda (g$0$18026) ((lambda (g$0$18028) (if (if g$0$18028 (begin (quote #f) (apply (lambda (g$0$18030) (not (g$0$13177 g$0$17934))) g$0$18028)) (quote #f)) (apply (lambda (g$0$18032) (call-with-values (lambda () (letrec ((g$0$18034 (lambda (g$0$18036) (if (null? g$0$18036) (values (quote ()) (quote ()) (quote ())) (call-with-values (lambda () (g$0$17932 (car g$0$18036) g$0$17935)) (lambda (g$0$18038 g$0$18039 g$0$18040) (call-with-values (lambda () (g$0$18034 (cdr g$0$18036))) (lambda (g$0$18044 g$0$18045 g$0$18046) (values (append g$0$18038 g$0$18044) (append g$0$18039 g$0$18045) (cons g$0$18040 g$0$18046)))))))))) (g$0$18034 g$0$18032))) (lambda (g$0$18050 g$0$18051 g$0$18052) (values g$0$18050 g$0$18051 (list->vector g$0$18052))))) g$0$18028) ((lambda (g$0$18056) ((lambda (g$0$18058) (if (if g$0$18058 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18058)) (quote #f)) (apply (lambda () (values (quote ()) (quote ()) g$0$17934)) g$0$18058) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$18056 (quote ()))))) ((lambda (g$0$18060) (quote ())) g$0$18056))) g$0$18026))) ((lambda (g$0$18062) (if (g$0$13213 g$0$18062) (begin (quote #f) ((letrec ((g$0$18064 (lambda (g$0$18066) (if (g$0$13211 g$0$18066) ((lambda (g$0$18068) (if g$0$18068 (begin (quote #f) ((lambda (g$0$18070) (if g$0$18070 (begin (quote #f) (map cons g$0$18068 g$0$18070)) (quote #f))) (g$0$18064 (g$0$13223 g$0$18066)))) (quote #f))) ((lambda (g$0$18072) (list g$0$18072)) (g$0$13219 g$0$18066))) (if (g$0$13215 g$0$18066) (list (begin (quote x) (quote ()))) (quote #f)))))) g$0$18064) (g$0$13209 g$0$18062))) (quote #f))) g$0$18026))) g$0$18002))) ((lambda (g$0$18074) (if (g$0$13211 g$0$18074) (begin (quote #f) ((lambda (g$0$18076) (if g$0$18076 (begin (quote #f) ((lambda (g$0$18078) (if g$0$18078 (begin (quote #f) (append g$0$18076 g$0$18078)) (quote #f))) ((lambda (g$0$18080) (list g$0$18080)) (g$0$13223 g$0$18074)))) (quote #f))) ((lambda (g$0$18082) (list g$0$18082)) (g$0$13219 g$0$18074)))) (quote #f))) g$0$18002))) g$0$17988))) ((lambda (g$0$18084) (if (g$0$13211 g$0$18084) (begin (quote #f) ((lambda (g$0$18086) (if g$0$18086 (begin (quote #f) ((lambda (g$0$18088) (if g$0$18088 (begin (quote #f) (append g$0$18086 g$0$18088)) (quote #f))) ((lambda (g$0$18090) (if (g$0$13211 g$0$18090) (begin (quote #f) ((lambda (g$0$18092) (if g$0$18092 (begin (quote #f) ((lambda (g$0$18094) (if g$0$18094 (begin (quote #f) (append g$0$18092 g$0$18094)) (quote #f))) ((lambda (g$0$18096) (if (equal? (g$0$13245 g$0$18096) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18090)))) (quote #f))) ((lambda (g$0$18098) (list g$0$18098)) (g$0$13219 g$0$18090)))) (quote #f))) (g$0$13223 g$0$18084)))) (quote #f))) ((lambda (g$0$18100) (if (g$0$13225 g$0$18100) (if (g$0$13233 g$0$18100 (g$0$13478 (quote quasisyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$18084)))) (quote #f))) g$0$17988))) g$0$17984))) ((lambda (g$0$18102) (if (g$0$13225 g$0$18102) (if (g$0$13233 g$0$18102 (g$0$13478 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) g$0$17984))) g$0$17958))) ((lambda (g$0$18104) (if (g$0$13211 g$0$18104) (begin (quote #f) ((lambda (g$0$18106) (if g$0$18106 (begin (quote #f) ((lambda (g$0$18108) (if g$0$18108 (begin (quote #f) (append g$0$18106 g$0$18108)) (quote #f))) ((lambda (g$0$18110) (list g$0$18110)) (g$0$13223 g$0$18104)))) (quote #f))) ((lambda (g$0$18112) (if (g$0$13211 g$0$18112) (begin (quote #f) ((lambda (g$0$18114) (if g$0$18114 (begin (quote #f) ((lambda (g$0$18116) (if g$0$18116 (begin (quote #f) (append g$0$18114 g$0$18116)) (quote #f))) ((lambda (g$0$18118) (if (g$0$13211 g$0$18118) (begin (quote #f) ((lambda (g$0$18120) (if g$0$18120 (begin (quote #f) ((lambda (g$0$18122) (if g$0$18122 (begin (quote #f) (append g$0$18120 g$0$18122)) (quote #f))) ((lambda (g$0$18124) (if (equal? (g$0$13245 g$0$18124) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18118)))) (quote #f))) ((lambda (g$0$18126) (list g$0$18126)) (g$0$13219 g$0$18118)))) (quote #f))) (g$0$13223 g$0$18112)))) (quote #f))) ((lambda (g$0$18128) (if (g$0$13225 g$0$18128) (if (g$0$13233 g$0$18128 (g$0$13478 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$18112)))) (quote #f))) (g$0$13219 g$0$18104)))) (quote #f))) g$0$17958))) g$0$17954))) ((lambda (g$0$18130) (if (g$0$13225 g$0$18130) (if (g$0$13233 g$0$18130 (g$0$13478 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) g$0$17954))) g$0$17938))) ((lambda (g$0$18132) (if (g$0$13211 g$0$18132) (begin (quote #f) ((lambda (g$0$18134) (if g$0$18134 (begin (quote #f) ((lambda (g$0$18136) (if g$0$18136 (begin (quote #f) (append g$0$18134 g$0$18136)) (quote #f))) ((lambda (g$0$18138) (if (g$0$13211 g$0$18138) (begin (quote #f) ((lambda (g$0$18140) (if g$0$18140 (begin (quote #f) ((lambda (g$0$18142) (if g$0$18142 (begin (quote #f) (append g$0$18140 g$0$18142)) (quote #f))) ((lambda (g$0$18144) (if (equal? (g$0$13245 g$0$18144) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18138)))) (quote #f))) ((lambda (g$0$18146) (list g$0$18146)) (g$0$13219 g$0$18138)))) (quote #f))) (g$0$13223 g$0$18132)))) (quote #f))) ((lambda (g$0$18148) (if (g$0$13225 g$0$18148) (if (g$0$13233 g$0$18148 (g$0$13478 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$18132)))) (quote #f))) g$0$17938))) g$0$17934))) (lambda (g$0$18150) ((lambda (g$0$18152) ((lambda (g$0$18154) (if (if g$0$18154 (begin (quote #f) (apply (lambda (g$0$18156) (quote #t)) g$0$18154)) (quote #f)) (apply (lambda (g$0$18158) (call-with-values (lambda () (g$0$17932 g$0$18158 (quote 0))) (lambda (g$0$18160 g$0$18161 g$0$18162) (g$0$13512 (list (quote syntax-case) (cons (quote list) g$0$18161) (quote ()) (list g$0$18160 (list (quote syntax) g$0$18162))))))) g$0$18154) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$18152 (quote ()))))) ((lambda (g$0$18166) (if (g$0$13211 g$0$18166) (begin (quote #f) ((lambda (g$0$18168) (if g$0$18168 (begin (quote #f) ((lambda (g$0$18170) (if g$0$18170 (begin (quote #f) (append g$0$18168 g$0$18170)) (quote #f))) ((lambda (g$0$18172) (if (g$0$13211 g$0$18172) (begin (quote #f) ((lambda (g$0$18174) (if g$0$18174 (begin (quote #f) ((lambda (g$0$18176) (if g$0$18176 (begin (quote #f) (append g$0$18174 g$0$18176)) (quote #f))) ((lambda (g$0$18178) (if (equal? (g$0$13245 g$0$18178) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18172)))) (quote #f))) ((lambda (g$0$18180) (list g$0$18180)) (g$0$13219 g$0$18172)))) (quote #f))) (g$0$13223 g$0$18166)))) (quote #f))) ((lambda (g$0$18182) (quote ())) (g$0$13219 g$0$18166)))) (quote #f))) g$0$18152))) g$0$18150)))) (quote #f))))) (set! g$0$13554 (lambda (g$0$18184) (error (quote expander) (quote "define-struct not supported") (g$0$13243 g$0$18184 (quote ()))))) (set! g$0$13556 (lambda (g$0$18186) ((lambda (g$0$18188 g$0$18190 g$0$18192 g$0$18194 g$0$18196 g$0$18198 g$0$18200 g$0$18202 g$0$18204 g$0$18206 g$0$18208 g$0$18210 g$0$18212 g$0$18214) (begin (set! g$0$18188 (lambda (g$0$19236 . g$0$19238) (g$0$13705 g$0$19236 (string->symbol (apply string-append (map (lambda (g$0$19240) (if (symbol? g$0$19240) (symbol->string g$0$19240) (if (string? g$0$19240) g$0$19240 (error (quote define-record-type) (quote "BUG"))))) g$0$19238)))))) (set! g$0$18190 (lambda (g$0$19182) ((lambda (g$0$19184) ((lambda (g$0$19186) (if (if g$0$19186 (begin (quote #f) (apply (lambda (g$0$19188 g$0$19189 g$0$19190) (quote #t)) g$0$19186)) (quote #f)) (apply (lambda (g$0$19194 g$0$19195 g$0$19196) g$0$19194) g$0$19186) ((lambda (g$0$19200) ((lambda (g$0$19202) (if (if g$0$19202 (begin (quote #f) (apply (lambda (g$0$19204) (quote #t)) g$0$19202)) (quote #f)) (apply (lambda (g$0$19206) g$0$19206) g$0$19202) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$19200 (quote ()))))) ((lambda (g$0$19208) (list g$0$19208)) g$0$19200))) g$0$19184))) ((lambda (g$0$19210) (if (g$0$13211 g$0$19210) (begin (quote #f) ((lambda (g$0$19212) (if g$0$19212 (begin (quote #f) ((lambda (g$0$19214) (if g$0$19214 (begin (quote #f) (append g$0$19212 g$0$19214)) (quote #f))) ((lambda (g$0$19216) (if (g$0$13211 g$0$19216) (begin (quote #f) ((lambda (g$0$19218) (if g$0$19218 (begin (quote #f) ((lambda (g$0$19220) (if g$0$19220 (begin (quote #f) (append g$0$19218 g$0$19220)) (quote #f))) ((lambda (g$0$19222) (if (g$0$13211 g$0$19222) (begin (quote #f) ((lambda (g$0$19224) (if g$0$19224 (begin (quote #f) ((lambda (g$0$19226) (if g$0$19226 (begin (quote #f) (append g$0$19224 g$0$19226)) (quote #f))) ((lambda (g$0$19228) (if (equal? (g$0$13245 g$0$19228) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$19222)))) (quote #f))) ((lambda (g$0$19230) (list g$0$19230)) (g$0$13219 g$0$19222)))) (quote #f))) (g$0$13223 g$0$19216)))) (quote #f))) ((lambda (g$0$19232) (list g$0$19232)) (g$0$13219 g$0$19216)))) (quote #f))) (g$0$13223 g$0$19210)))) (quote #f))) ((lambda (g$0$19234) (list g$0$19234)) (g$0$13219 g$0$19210)))) (quote #f))) g$0$19184))) g$0$19182))) (set! g$0$18192 (lambda (g$0$19126 g$0$19127) ((lambda (g$0$19130) ((lambda (g$0$19132) (if (if g$0$19132 (begin (quote #f) (apply (lambda (g$0$19134 g$0$19135 g$0$19136) (quote #t)) g$0$19132)) (quote #f)) (apply (lambda (g$0$19140 g$0$19141 g$0$19142) g$0$19141) g$0$19132) ((lambda (g$0$19146) ((lambda (g$0$19148) (if (if g$0$19148 (begin (quote #f) (apply (lambda (g$0$19150) (quote #t)) g$0$19148)) (quote #f)) (apply (lambda (g$0$19152) (g$0$18188 g$0$19127 (quote "make-") (g$0$13245 g$0$19152))) g$0$19148) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$19146 (quote ()))))) ((lambda (g$0$19154) (list g$0$19154)) g$0$19146))) g$0$19130))) ((lambda (g$0$19156) (if (g$0$13211 g$0$19156) (begin (quote #f) ((lambda (g$0$19158) (if g$0$19158 (begin (quote #f) ((lambda (g$0$19160) (if g$0$19160 (begin (quote #f) (append g$0$19158 g$0$19160)) (quote #f))) ((lambda (g$0$19162) (if (g$0$13211 g$0$19162) (begin (quote #f) ((lambda (g$0$19164) (if g$0$19164 (begin (quote #f) ((lambda (g$0$19166) (if g$0$19166 (begin (quote #f) (append g$0$19164 g$0$19166)) (quote #f))) ((lambda (g$0$19168) (if (g$0$13211 g$0$19168) (begin (quote #f) ((lambda (g$0$19170) (if g$0$19170 (begin (quote #f) ((lambda (g$0$19172) (if g$0$19172 (begin (quote #f) (append g$0$19170 g$0$19172)) (quote #f))) ((lambda (g$0$19174) (if (equal? (g$0$13245 g$0$19174) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$19168)))) (quote #f))) ((lambda (g$0$19176) (list g$0$19176)) (g$0$13219 g$0$19168)))) (quote #f))) (g$0$13223 g$0$19162)))) (quote #f))) ((lambda (g$0$19178) (list g$0$19178)) (g$0$13219 g$0$19162)))) (quote #f))) (g$0$13223 g$0$19156)))) (quote #f))) ((lambda (g$0$19180) (list g$0$19180)) (g$0$13219 g$0$19156)))) (quote #f))) g$0$19130))) g$0$19126))) (set! g$0$18194 (lambda (g$0$19070 g$0$19071) ((lambda (g$0$19074) ((lambda (g$0$19076) (if (if g$0$19076 (begin (quote #f) (apply (lambda (g$0$19078 g$0$19079 g$0$19080) (quote #t)) g$0$19076)) (quote #f)) (apply (lambda (g$0$19084 g$0$19085 g$0$19086) g$0$19086) g$0$19076) ((lambda (g$0$19090) ((lambda (g$0$19092) (if (if g$0$19092 (begin (quote #f) (apply (lambda (g$0$19094) (quote #t)) g$0$19092)) (quote #f)) (apply (lambda (g$0$19096) (g$0$18188 g$0$19071 (g$0$13245 g$0$19096) (quote "?"))) g$0$19092) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$19090 (quote ()))))) ((lambda (g$0$19098) (list g$0$19098)) g$0$19090))) g$0$19074))) ((lambda (g$0$19100) (if (g$0$13211 g$0$19100) (begin (quote #f) ((lambda (g$0$19102) (if g$0$19102 (begin (quote #f) ((lambda (g$0$19104) (if g$0$19104 (begin (quote #f) (append g$0$19102 g$0$19104)) (quote #f))) ((lambda (g$0$19106) (if (g$0$13211 g$0$19106) (begin (quote #f) ((lambda (g$0$19108) (if g$0$19108 (begin (quote #f) ((lambda (g$0$19110) (if g$0$19110 (begin (quote #f) (append g$0$19108 g$0$19110)) (quote #f))) ((lambda (g$0$19112) (if (g$0$13211 g$0$19112) (begin (quote #f) ((lambda (g$0$19114) (if g$0$19114 (begin (quote #f) ((lambda (g$0$19116) (if g$0$19116 (begin (quote #f) (append g$0$19114 g$0$19116)) (quote #f))) ((lambda (g$0$19118) (if (equal? (g$0$13245 g$0$19118) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$19112)))) (quote #f))) ((lambda (g$0$19120) (list g$0$19120)) (g$0$13219 g$0$19112)))) (quote #f))) (g$0$13223 g$0$19106)))) (quote #f))) ((lambda (g$0$19122) (list g$0$19122)) (g$0$13219 g$0$19106)))) (quote #f))) (g$0$13223 g$0$19100)))) (quote #f))) ((lambda (g$0$19124) (list g$0$19124)) (g$0$13219 g$0$19100)))) (quote #f))) g$0$19074))) g$0$19070))) (set! g$0$18196 (lambda (g$0$19026 g$0$19027) ((lambda (g$0$19030) ((lambda (g$0$19032) (if (if g$0$19032 (begin (quote #f) (apply (lambda () (quote #t)) g$0$19032)) (quote #f)) (apply (lambda () (quote #f)) g$0$19032) ((lambda (g$0$19034) ((lambda (g$0$19036) (if (if g$0$19036 (begin (quote #f) (apply (lambda (g$0$19038 g$0$19039 g$0$19040) (quote #t)) g$0$19036)) (quote #f)) (apply (lambda (g$0$19044 g$0$19045 g$0$19046) (if (g$0$13233 (g$0$13512 g$0$19026) g$0$19044) (cons g$0$19044 g$0$19045) (g$0$18196 g$0$19026 g$0$19046))) g$0$19036) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$19034 (quote ()))))) ((lambda (g$0$19050) (if (g$0$13211 g$0$19050) (begin (quote #f) ((lambda (g$0$19052) (if g$0$19052 (begin (quote #f) ((lambda (g$0$19054) (if g$0$19054 (begin (quote #f) (append g$0$19052 g$0$19054)) (quote #f))) ((lambda (g$0$19056) (list g$0$19056)) (g$0$13223 g$0$19050)))) (quote #f))) ((lambda (g$0$19058) (if (g$0$13211 g$0$19058) (begin (quote #f) ((lambda (g$0$19060) (if g$0$19060 (begin (quote #f) ((lambda (g$0$19062) (if g$0$19062 (begin (quote #f) (append g$0$19060 g$0$19062)) (quote #f))) ((lambda (g$0$19064) (list g$0$19064)) (g$0$13223 g$0$19058)))) (quote #f))) ((lambda (g$0$19066) (list g$0$19066)) (g$0$13219 g$0$19058)))) (quote #f))) (g$0$13219 g$0$19050)))) (quote #f))) g$0$19034))) g$0$19030))) ((lambda (g$0$19068) (if (equal? (g$0$13245 g$0$19068) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$19030))) g$0$19027))) (set! g$0$18198 (lambda (g$0$18768 g$0$18769 g$0$18770) ((lambda (g$0$18774) (begin (set! g$0$18774 (lambda (g$0$18776) (list->vector (map (lambda (g$0$18778) ((lambda (g$0$18780) ((lambda (g$0$18782) (if (if g$0$18782 (begin (quote #f) (apply (lambda (g$0$18784 g$0$18785) (quote #t)) g$0$18782)) (quote #f)) (apply (lambda (g$0$18788 g$0$18789) (list (quote mutable) g$0$18788)) g$0$18782) ((lambda (g$0$18792) ((lambda (g$0$18794) (if (if g$0$18794 (begin (quote #f) (apply (lambda (g$0$18796 g$0$18797) (quote #t)) g$0$18794)) (quote #f)) (apply (lambda (g$0$18800 g$0$18801) (list (quote immutable) g$0$18800)) g$0$18794) ((lambda (g$0$18804) ((lambda (g$0$18806) (if (if g$0$18806 (begin (quote #f) (apply (lambda (g$0$18808) (quote #t)) g$0$18806)) (quote #f)) (apply (lambda (g$0$18810) (list (quote immutable) g$0$18810)) g$0$18806) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$18804 (quote ()))))) ((lambda (g$0$18812) (list g$0$18812)) g$0$18804))) g$0$18792))) ((lambda (g$0$18814) (if (g$0$13211 g$0$18814) (begin (quote #f) ((lambda (g$0$18816) (if g$0$18816 (begin (quote #f) ((lambda (g$0$18818) (if g$0$18818 (begin (quote #f) (append g$0$18816 g$0$18818)) (quote #f))) ((lambda (g$0$18820) (if (g$0$13211 g$0$18820) (begin (quote #f) ((lambda (g$0$18822) (if g$0$18822 (begin (quote #f) ((lambda (g$0$18824) (if g$0$18824 (begin (quote #f) (append g$0$18822 g$0$18824)) (quote #f))) ((lambda (g$0$18826) (list g$0$18826)) (g$0$13223 g$0$18820)))) (quote #f))) ((lambda (g$0$18828) (list g$0$18828)) (g$0$13219 g$0$18820)))) (quote #f))) (g$0$13223 g$0$18814)))) (quote #f))) ((lambda (g$0$18830) (if (g$0$13225 g$0$18830) (if (g$0$13233 g$0$18830 (g$0$13478 (quote immutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$18814)))) (quote #f))) g$0$18792))) g$0$18780))) ((lambda (g$0$18832) (if (g$0$13211 g$0$18832) (begin (quote #f) ((lambda (g$0$18834) (if g$0$18834 (begin (quote #f) ((lambda (g$0$18836) (if g$0$18836 (begin (quote #f) (append g$0$18834 g$0$18836)) (quote #f))) ((lambda (g$0$18838) (if (g$0$13211 g$0$18838) (begin (quote #f) ((lambda (g$0$18840) (if g$0$18840 (begin (quote #f) ((lambda (g$0$18842) (if g$0$18842 (begin (quote #f) (append g$0$18840 g$0$18842)) (quote #f))) ((lambda (g$0$18844) (list g$0$18844)) (g$0$13223 g$0$18838)))) (quote #f))) ((lambda (g$0$18846) (list g$0$18846)) (g$0$13219 g$0$18838)))) (quote #f))) (g$0$13223 g$0$18832)))) (quote #f))) ((lambda (g$0$18848) (if (g$0$13225 g$0$18848) (if (g$0$13233 g$0$18848 (g$0$13478 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$18832)))) (quote #f))) g$0$18780))) g$0$18778)) g$0$18776)))) ((lambda (g$0$18850 g$0$18851 g$0$18852 g$0$18853 g$0$18854) (g$0$13512 (list (quote make-record-type-descriptor) (list (quote quote) g$0$18769) g$0$18850 g$0$18851 g$0$18852 g$0$18853 g$0$18854))) ((lambda (g$0$18860) ((lambda (g$0$18862) (if (if g$0$18862 (begin (quote #f) (apply (lambda (g$0$18864) (quote #t)) g$0$18862)) (quote #f)) (apply (lambda (g$0$18866) (list (quote record-type-descriptor) g$0$18866)) g$0$18862) ((lambda (g$0$18868) ((lambda (g$0$18870) (if (if g$0$18870 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18870)) (quote #f)) (apply (lambda () (quote #f)) g$0$18870) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$18868 (quote ()))))) ((lambda (g$0$18872) (quote ())) g$0$18868))) g$0$18860))) ((lambda (g$0$18874) (if (g$0$13211 g$0$18874) (begin (quote #f) ((lambda (g$0$18876) (if g$0$18876 (begin (quote #f) ((lambda (g$0$18878) (if g$0$18878 (begin (quote #f) (append g$0$18876 g$0$18878)) (quote #f))) ((lambda (g$0$18880) (if (g$0$13211 g$0$18880) (begin (quote #f) ((lambda (g$0$18882) (if g$0$18882 (begin (quote #f) ((lambda (g$0$18884) (if g$0$18884 (begin (quote #f) (append g$0$18882 g$0$18884)) (quote #f))) ((lambda (g$0$18886) (if (equal? (g$0$13245 g$0$18886) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18880)))) (quote #f))) ((lambda (g$0$18888) (list g$0$18888)) (g$0$13219 g$0$18880)))) (quote #f))) (g$0$13223 g$0$18874)))) (quote #f))) ((lambda (g$0$18890) (quote ())) (g$0$13219 g$0$18874)))) (quote #f))) g$0$18860))) (g$0$18196 (quote parent) g$0$18770)) ((lambda (g$0$18892) ((lambda (g$0$18894) (if (if g$0$18894 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18894)) (quote #f)) (apply (lambda () (list (quote quote) (gensym))) g$0$18894) ((lambda (g$0$18896) ((lambda (g$0$18898) (if (if g$0$18898 (begin (quote #f) (apply (lambda (g$0$18900) (quote #t)) g$0$18898)) (quote #f)) (apply (lambda (g$0$18902) (list (quote quote) g$0$18902)) g$0$18898) ((lambda (g$0$18904) ((lambda (g$0$18906) (if (if g$0$18906 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18906)) (quote #f)) (apply (lambda () (quote #f)) g$0$18906) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$18904 (quote ()))))) ((lambda (g$0$18908) (quote ())) g$0$18904))) g$0$18896))) ((lambda (g$0$18910) (if (g$0$13211 g$0$18910) (begin (quote #f) ((lambda (g$0$18912) (if g$0$18912 (begin (quote #f) ((lambda (g$0$18914) (if g$0$18914 (begin (quote #f) (append g$0$18912 g$0$18914)) (quote #f))) ((lambda (g$0$18916) (if (g$0$13211 g$0$18916) (begin (quote #f) ((lambda (g$0$18918) (if g$0$18918 (begin (quote #f) ((lambda (g$0$18920) (if g$0$18920 (begin (quote #f) (append g$0$18918 g$0$18920)) (quote #f))) ((lambda (g$0$18922) (if (equal? (g$0$13245 g$0$18922) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18916)))) (quote #f))) ((lambda (g$0$18924) (list g$0$18924)) (g$0$13219 g$0$18916)))) (quote #f))) (g$0$13223 g$0$18910)))) (quote #f))) ((lambda (g$0$18926) (quote ())) (g$0$13219 g$0$18910)))) (quote #f))) g$0$18896))) g$0$18892))) ((lambda (g$0$18928) (if (g$0$13211 g$0$18928) (begin (quote #f) ((lambda (g$0$18930) (if g$0$18930 (begin (quote #f) ((lambda (g$0$18932) (if g$0$18932 (begin (quote #f) (append g$0$18930 g$0$18932)) (quote #f))) ((lambda (g$0$18934) (if (equal? (g$0$13245 g$0$18934) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18928)))) (quote #f))) ((lambda (g$0$18936) (quote ())) (g$0$13219 g$0$18928)))) (quote #f))) g$0$18892))) (g$0$18196 (quote nongenerative) g$0$18770)) ((lambda (g$0$18938) ((lambda (g$0$18940) (if (if g$0$18940 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18940)) (quote #f)) (apply (lambda () (quote #t)) g$0$18940) ((lambda (g$0$18942) ((lambda (g$0$18944) (if (if g$0$18944 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18944)) (quote #f)) (apply (lambda () (quote #f)) g$0$18944) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$18942 (quote ()))))) ((lambda (g$0$18946) (quote ())) g$0$18942))) g$0$18938))) ((lambda (g$0$18948) (if (g$0$13211 g$0$18948) (begin (quote #f) ((lambda (g$0$18950) (if g$0$18950 (begin (quote #f) ((lambda (g$0$18952) (if g$0$18952 (begin (quote #f) (append g$0$18950 g$0$18952)) (quote #f))) ((lambda (g$0$18954) (if (g$0$13211 g$0$18954) (begin (quote #f) ((lambda (g$0$18956) (if g$0$18956 (begin (quote #f) ((lambda (g$0$18958) (if g$0$18958 (begin (quote #f) (append g$0$18956 g$0$18958)) (quote #f))) ((lambda (g$0$18960) (if (equal? (g$0$13245 g$0$18960) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18954)))) (quote #f))) ((lambda (g$0$18962) (if (equal? (g$0$13245 g$0$18962) (quote #t)) (begin (quote #f) (quote ())) (quote #f))) (g$0$13219 g$0$18954)))) (quote #f))) (g$0$13223 g$0$18948)))) (quote #f))) ((lambda (g$0$18964) (quote ())) (g$0$13219 g$0$18948)))) (quote #f))) g$0$18938))) (g$0$18196 (quote sealed?) g$0$18770)) ((lambda (g$0$18966) ((lambda (g$0$18968) (if (if g$0$18968 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18968)) (quote #f)) (apply (lambda () (quote #t)) g$0$18968) ((lambda (g$0$18970) ((lambda (g$0$18972) (if (if g$0$18972 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18972)) (quote #f)) (apply (lambda () (quote #f)) g$0$18972) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$18970 (quote ()))))) ((lambda (g$0$18974) (quote ())) g$0$18970))) g$0$18966))) ((lambda (g$0$18976) (if (g$0$13211 g$0$18976) (begin (quote #f) ((lambda (g$0$18978) (if g$0$18978 (begin (quote #f) ((lambda (g$0$18980) (if g$0$18980 (begin (quote #f) (append g$0$18978 g$0$18980)) (quote #f))) ((lambda (g$0$18982) (if (g$0$13211 g$0$18982) (begin (quote #f) ((lambda (g$0$18984) (if g$0$18984 (begin (quote #f) ((lambda (g$0$18986) (if g$0$18986 (begin (quote #f) (append g$0$18984 g$0$18986)) (quote #f))) ((lambda (g$0$18988) (if (equal? (g$0$13245 g$0$18988) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18982)))) (quote #f))) ((lambda (g$0$18990) (if (equal? (g$0$13245 g$0$18990) (quote #t)) (begin (quote #f) (quote ())) (quote #f))) (g$0$13219 g$0$18982)))) (quote #f))) (g$0$13223 g$0$18976)))) (quote #f))) ((lambda (g$0$18992) (quote ())) (g$0$13219 g$0$18976)))) (quote #f))) g$0$18966))) (g$0$18196 (quote opaque?) g$0$18770)) ((lambda (g$0$18994) ((lambda (g$0$18996) (if (if g$0$18996 (begin (quote #f) (apply (lambda (g$0$18998) (quote #t)) g$0$18996)) (quote #f)) (apply (lambda (g$0$19000) (list (quote quote) (g$0$18774 g$0$19000))) g$0$18996) ((lambda (g$0$19002) ((lambda (g$0$19004) (if (if g$0$19004 (begin (quote #f) (apply (lambda () (quote #t)) g$0$19004)) (quote #f)) (apply (lambda () (quote (quote #()))) g$0$19004) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$19002 (quote ()))))) ((lambda (g$0$19006) (quote ())) g$0$19002))) g$0$18994))) ((lambda (g$0$19008) (if (g$0$13211 g$0$19008) (begin (quote #f) ((lambda (g$0$19010) (if g$0$19010 (begin (quote #f) ((lambda (g$0$19012) (if g$0$19012 (begin (quote #f) (append g$0$19010 g$0$19012)) (quote #f))) ((letrec ((g$0$19014 (lambda (g$0$19016) (if (g$0$13211 g$0$19016) ((lambda (g$0$19018) (if g$0$19018 (begin (quote #f) ((lambda (g$0$19020) (if g$0$19020 (begin (quote #f) (map cons g$0$19018 g$0$19020)) (quote #f))) (g$0$19014 (g$0$13223 g$0$19016)))) (quote #f))) ((lambda (g$0$19022) (list g$0$19022)) (g$0$13219 g$0$19016))) (if (g$0$13215 g$0$19016) (list (begin (quote field-spec*) (quote ()))) (quote #f)))))) g$0$19014) (g$0$13223 g$0$19008)))) (quote #f))) ((lambda (g$0$19024) (quote ())) (g$0$13219 g$0$19008)))) (quote #f))) g$0$18994))) (g$0$18196 (quote fields) g$0$18770))))) (quote #f)))) (set! g$0$18200 (lambda (g$0$18728 g$0$18729 g$0$18730) ((lambda (g$0$18734) (list (quote make-record-constructor-descriptor) g$0$18729 g$0$18734 g$0$18730)) ((lambda (g$0$18736) ((lambda (g$0$18738) (if (if g$0$18738 (begin (quote #f) (apply (lambda (g$0$18740) (quote #t)) g$0$18738)) (quote #f)) (apply (lambda (g$0$18742) (list (quote record-constructor-descriptor) g$0$18742)) g$0$18738) ((lambda (g$0$18744) ((lambda (g$0$18746) (if (if g$0$18746 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18746)) (quote #f)) (apply (lambda () (quote #f)) g$0$18746) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$18744 (quote ()))))) ((lambda (g$0$18748) (quote ())) g$0$18744))) g$0$18736))) ((lambda (g$0$18750) (if (g$0$13211 g$0$18750) (begin (quote #f) ((lambda (g$0$18752) (if g$0$18752 (begin (quote #f) ((lambda (g$0$18754) (if g$0$18754 (begin (quote #f) (append g$0$18752 g$0$18754)) (quote #f))) ((lambda (g$0$18756) (if (g$0$13211 g$0$18756) (begin (quote #f) ((lambda (g$0$18758) (if g$0$18758 (begin (quote #f) ((lambda (g$0$18760) (if g$0$18760 (begin (quote #f) (append g$0$18758 g$0$18760)) (quote #f))) ((lambda (g$0$18762) (if (equal? (g$0$13245 g$0$18762) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18756)))) (quote #f))) ((lambda (g$0$18764) (list g$0$18764)) (g$0$13219 g$0$18756)))) (quote #f))) (g$0$13223 g$0$18750)))) (quote #f))) ((lambda (g$0$18766) (quote ())) (g$0$13219 g$0$18750)))) (quote #f))) g$0$18736))) (g$0$18196 (quote parent) g$0$18728))))) (set! g$0$18202 (lambda (g$0$18694) ((lambda (g$0$18696) ((lambda (g$0$18698) (if (if g$0$18698 (begin (quote #f) (apply (lambda (g$0$18700) (quote #t)) g$0$18698)) (quote #f)) (apply (lambda (g$0$18702) g$0$18702) g$0$18698) ((lambda (g$0$18704) ((lambda (g$0$18706) (if (if g$0$18706 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18706)) (quote #f)) (apply (lambda () (quote #f)) g$0$18706) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$18704 (quote ()))))) ((lambda (g$0$18708) (quote ())) g$0$18704))) g$0$18696))) ((lambda (g$0$18710) (if (g$0$13211 g$0$18710) (begin (quote #f) ((lambda (g$0$18712) (if g$0$18712 (begin (quote #f) ((lambda (g$0$18714) (if g$0$18714 (begin (quote #f) (append g$0$18712 g$0$18714)) (quote #f))) ((lambda (g$0$18716) (if (g$0$13211 g$0$18716) (begin (quote #f) ((lambda (g$0$18718) (if g$0$18718 (begin (quote #f) ((lambda (g$0$18720) (if g$0$18720 (begin (quote #f) (append g$0$18718 g$0$18720)) (quote #f))) ((lambda (g$0$18722) (if (equal? (g$0$13245 g$0$18722) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18716)))) (quote #f))) ((lambda (g$0$18724) (list g$0$18724)) (g$0$13219 g$0$18716)))) (quote #f))) (g$0$13223 g$0$18710)))) (quote #f))) ((lambda (g$0$18726) (quote ())) (g$0$13219 g$0$18710)))) (quote #f))) g$0$18696))) (g$0$18196 (quote protocol) g$0$18694)))) (set! g$0$18204 (lambda (g$0$18634) ((lambda (g$0$18636) ((lambda (g$0$18638) (if (if g$0$18638 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18638)) (quote #f)) (apply (lambda () (quote ())) g$0$18638) ((lambda (g$0$18640) ((lambda (g$0$18642) (if (if g$0$18642 (begin (quote #f) (apply (lambda (g$0$18644) (quote #t)) g$0$18642)) (quote #f)) (apply (lambda (g$0$18646) g$0$18646) g$0$18642) ((lambda (g$0$18648) ((lambda (g$0$18650) (if (if g$0$18650 (begin (quote #f) (apply (lambda (g$0$18652) (quote #t)) g$0$18650)) (quote #f)) (apply (lambda (g$0$18654) (g$0$18204 g$0$18654)) g$0$18650) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$18648 (quote ()))))) ((lambda (g$0$18656) (if (g$0$13211 g$0$18656) (begin (quote #f) ((lambda (g$0$18658) (if g$0$18658 (begin (quote #f) ((lambda (g$0$18660) (if g$0$18660 (begin (quote #f) (append g$0$18658 g$0$18660)) (quote #f))) ((lambda (g$0$18662) (list g$0$18662)) (g$0$13223 g$0$18656)))) (quote #f))) ((lambda (g$0$18664) (quote ())) (g$0$13219 g$0$18656)))) (quote #f))) g$0$18648))) g$0$18640))) ((lambda (g$0$18666) (if (g$0$13211 g$0$18666) (begin (quote #f) ((lambda (g$0$18668) (if g$0$18668 (begin (quote #f) ((lambda (g$0$18670) (if g$0$18670 (begin (quote #f) (append g$0$18668 g$0$18670)) (quote #f))) ((lambda (g$0$18672) (quote ())) (g$0$13223 g$0$18666)))) (quote #f))) ((lambda (g$0$18674) (if (g$0$13211 g$0$18674) (begin (quote #f) ((lambda (g$0$18676) (if g$0$18676 (begin (quote #f) ((lambda (g$0$18678) (if g$0$18678 (begin (quote #f) (append g$0$18676 g$0$18678)) (quote #f))) ((letrec ((g$0$18680 (lambda (g$0$18682) (if (g$0$13211 g$0$18682) ((lambda (g$0$18684) (if g$0$18684 (begin (quote #f) ((lambda (g$0$18686) (if g$0$18686 (begin (quote #f) (map cons g$0$18684 g$0$18686)) (quote #f))) (g$0$18680 (g$0$13223 g$0$18682)))) (quote #f))) ((lambda (g$0$18688) (list g$0$18688)) (g$0$13219 g$0$18682))) (if (g$0$13215 g$0$18682) (list (begin (quote f*) (quote ()))) (quote #f)))))) g$0$18680) (g$0$13223 g$0$18674)))) (quote #f))) ((lambda (g$0$18690) (if (g$0$13225 g$0$18690) (if (g$0$13233 g$0$18690 (g$0$13478 (quote fields))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$18674)))) (quote #f))) (g$0$13219 g$0$18666)))) (quote #f))) g$0$18640))) g$0$18636))) ((lambda (g$0$18692) (if (equal? (g$0$13245 g$0$18692) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$18636))) g$0$18634))) (set! g$0$18206 (lambda (g$0$18576) (letrec ((g$0$18578 (lambda (g$0$18580 g$0$18581) ((lambda (g$0$18584) ((lambda (g$0$18586) (if (if g$0$18586 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18586)) (quote #f)) (apply (lambda () (quote ())) g$0$18586) ((lambda (g$0$18588) ((lambda (g$0$18590) (if (if g$0$18590 (begin (quote #f) (apply (lambda (g$0$18592) (quote #t)) g$0$18590)) (quote #f)) (apply (lambda (g$0$18594) (cons g$0$18581 (g$0$18578 g$0$18594 (+ g$0$18581 (quote 1))))) g$0$18590) ((lambda (g$0$18596) ((lambda (g$0$18598) (if (if g$0$18598 (begin (quote #f) (apply (lambda (g$0$18600) (quote #t)) g$0$18598)) (quote #f)) (apply (lambda (g$0$18602) (g$0$18578 g$0$18602 (+ g$0$18581 (quote 1)))) g$0$18598) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$18596 (quote ()))))) ((lambda (g$0$18604) (if (g$0$13211 g$0$18604) (begin (quote #f) ((lambda (g$0$18606) (if g$0$18606 (begin (quote #f) ((lambda (g$0$18608) (if g$0$18608 (begin (quote #f) (append g$0$18606 g$0$18608)) (quote #f))) ((lambda (g$0$18610) (list g$0$18610)) (g$0$13223 g$0$18604)))) (quote #f))) ((lambda (g$0$18612) (quote ())) (g$0$13219 g$0$18604)))) (quote #f))) g$0$18596))) g$0$18588))) ((lambda (g$0$18614) (if (g$0$13211 g$0$18614) (begin (quote #f) ((lambda (g$0$18616) (if g$0$18616 (begin (quote #f) ((lambda (g$0$18618) (if g$0$18618 (begin (quote #f) (append g$0$18616 g$0$18618)) (quote #f))) ((lambda (g$0$18620) (list g$0$18620)) (g$0$13223 g$0$18614)))) (quote #f))) ((lambda (g$0$18622) (if (g$0$13211 g$0$18622) (begin (quote #f) ((lambda (g$0$18624) (if g$0$18624 (begin (quote #f) ((lambda (g$0$18626) (if g$0$18626 (begin (quote #f) (append g$0$18624 g$0$18626)) (quote #f))) ((lambda (g$0$18628) (quote ())) (g$0$13223 g$0$18622)))) (quote #f))) ((lambda (g$0$18630) (if (g$0$13225 g$0$18630) (if (g$0$13233 g$0$18630 (g$0$13478 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$18622)))) (quote #f))) (g$0$13219 g$0$18614)))) (quote #f))) g$0$18588))) g$0$18584))) ((lambda (g$0$18632) (if (equal? (g$0$13245 g$0$18632) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$18584))) g$0$18580)))) (g$0$18578 g$0$18576 (quote 0))))) (set! g$0$18208 (lambda (g$0$18438 g$0$18439 g$0$18440) ((lambda (g$0$18444) (begin (set! g$0$18444 (lambda (g$0$18446) (g$0$13705 g$0$18440 (string->symbol (string-append (quote "set-") (symbol->string (g$0$13707 g$0$18438)) (quote "-") (symbol->string (g$0$13707 g$0$18446)) (quote "!")))))) (letrec ((g$0$18448 (lambda (g$0$18450) ((lambda (g$0$18452) ((lambda (g$0$18454) (if (if g$0$18454 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18454)) (quote #f)) (apply (lambda () (quote ())) g$0$18454) ((lambda (g$0$18456) ((lambda (g$0$18458) (if (if g$0$18458 (begin (quote #f) (apply (lambda (g$0$18460 g$0$18461 g$0$18462 g$0$18463) (quote #t)) g$0$18458)) (quote #f)) (apply (lambda (g$0$18468 g$0$18469 g$0$18470 g$0$18471) (cons g$0$18470 (g$0$18448 g$0$18471))) g$0$18458) ((lambda (g$0$18476) ((lambda (g$0$18478) (if (if g$0$18478 (begin (quote #f) (apply (lambda (g$0$18480 g$0$18481) (quote #t)) g$0$18478)) (quote #f)) (apply (lambda (g$0$18484 g$0$18485) (cons (g$0$18444 g$0$18484) (g$0$18448 g$0$18485))) g$0$18478) ((lambda (g$0$18488) ((lambda (g$0$18490) (if (if g$0$18490 (begin (quote #f) (apply (lambda (g$0$18492) (quote #t)) g$0$18490)) (quote #f)) (apply (lambda (g$0$18494) (g$0$18448 g$0$18494)) g$0$18490) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$18488 (quote ()))))) ((lambda (g$0$18496) (if (g$0$13211 g$0$18496) (begin (quote #f) ((lambda (g$0$18498) (if g$0$18498 (begin (quote #f) ((lambda (g$0$18500) (if g$0$18500 (begin (quote #f) (append g$0$18498 g$0$18500)) (quote #f))) ((lambda (g$0$18502) (list g$0$18502)) (g$0$13223 g$0$18496)))) (quote #f))) ((lambda (g$0$18504) (quote ())) (g$0$13219 g$0$18496)))) (quote #f))) g$0$18488))) g$0$18476))) ((lambda (g$0$18506) (if (g$0$13211 g$0$18506) (begin (quote #f) ((lambda (g$0$18508) (if g$0$18508 (begin (quote #f) ((lambda (g$0$18510) (if g$0$18510 (begin (quote #f) (append g$0$18508 g$0$18510)) (quote #f))) ((lambda (g$0$18512) (list g$0$18512)) (g$0$13223 g$0$18506)))) (quote #f))) ((lambda (g$0$18514) (if (g$0$13211 g$0$18514) (begin (quote #f) ((lambda (g$0$18516) (if g$0$18516 (begin (quote #f) ((lambda (g$0$18518) (if g$0$18518 (begin (quote #f) (append g$0$18516 g$0$18518)) (quote #f))) ((lambda (g$0$18520) (if (g$0$13211 g$0$18520) (begin (quote #f) ((lambda (g$0$18522) (if g$0$18522 (begin (quote #f) ((lambda (g$0$18524) (if g$0$18524 (begin (quote #f) (append g$0$18522 g$0$18524)) (quote #f))) ((lambda (g$0$18526) (if (equal? (g$0$13245 g$0$18526) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18520)))) (quote #f))) ((lambda (g$0$18528) (list g$0$18528)) (g$0$13219 g$0$18520)))) (quote #f))) (g$0$13223 g$0$18514)))) (quote #f))) ((lambda (g$0$18530) (if (g$0$13225 g$0$18530) (if (g$0$13233 g$0$18530 (g$0$13478 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$18514)))) (quote #f))) (g$0$13219 g$0$18506)))) (quote #f))) g$0$18476))) g$0$18456))) ((lambda (g$0$18532) (if (g$0$13211 g$0$18532) (begin (quote #f) ((lambda (g$0$18534) (if g$0$18534 (begin (quote #f) ((lambda (g$0$18536) (if g$0$18536 (begin (quote #f) (append g$0$18534 g$0$18536)) (quote #f))) ((lambda (g$0$18538) (list g$0$18538)) (g$0$13223 g$0$18532)))) (quote #f))) ((lambda (g$0$18540) (if (g$0$13211 g$0$18540) (begin (quote #f) ((lambda (g$0$18542) (if g$0$18542 (begin (quote #f) ((lambda (g$0$18544) (if g$0$18544 (begin (quote #f) (append g$0$18542 g$0$18544)) (quote #f))) ((lambda (g$0$18546) (if (g$0$13211 g$0$18546) (begin (quote #f) ((lambda (g$0$18548) (if g$0$18548 (begin (quote #f) ((lambda (g$0$18550) (if g$0$18550 (begin (quote #f) (append g$0$18548 g$0$18550)) (quote #f))) ((lambda (g$0$18552) (if (g$0$13211 g$0$18552) (begin (quote #f) ((lambda (g$0$18554) (if g$0$18554 (begin (quote #f) ((lambda (g$0$18556) (if g$0$18556 (begin (quote #f) (append g$0$18554 g$0$18556)) (quote #f))) ((lambda (g$0$18558) (if (g$0$13211 g$0$18558) (begin (quote #f) ((lambda (g$0$18560) (if g$0$18560 (begin (quote #f) ((lambda (g$0$18562) (if g$0$18562 (begin (quote #f) (append g$0$18560 g$0$18562)) (quote #f))) ((lambda (g$0$18564) (if (equal? (g$0$13245 g$0$18564) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18558)))) (quote #f))) ((lambda (g$0$18566) (list g$0$18566)) (g$0$13219 g$0$18558)))) (quote #f))) (g$0$13223 g$0$18552)))) (quote #f))) ((lambda (g$0$18568) (list g$0$18568)) (g$0$13219 g$0$18552)))) (quote #f))) (g$0$13223 g$0$18546)))) (quote #f))) ((lambda (g$0$18570) (list g$0$18570)) (g$0$13219 g$0$18546)))) (quote #f))) (g$0$13223 g$0$18540)))) (quote #f))) ((lambda (g$0$18572) (if (g$0$13225 g$0$18572) (if (g$0$13233 g$0$18572 (g$0$13478 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$18540)))) (quote #f))) (g$0$13219 g$0$18532)))) (quote #f))) g$0$18456))) g$0$18452))) ((lambda (g$0$18574) (if (equal? (g$0$13245 g$0$18574) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$18452))) g$0$18450)))) (g$0$18448 g$0$18439)))) (quote #f)))) (set! g$0$18210 (lambda (g$0$18266 g$0$18267 g$0$18268) ((lambda (g$0$18272) (begin (set! g$0$18272 (lambda (g$0$18274) (g$0$13705 g$0$18268 (string->symbol (string-append (symbol->string (g$0$13707 g$0$18266)) (quote "-") (symbol->string (g$0$13707 g$0$18274))))))) (map (lambda (g$0$18276) ((lambda (g$0$18278) ((lambda (g$0$18280) (if (if g$0$18280 (begin (quote #f) (apply (lambda (g$0$18282 g$0$18283 g$0$18284) (g$0$13225 g$0$18283)) g$0$18280)) (quote #f)) (apply (lambda (g$0$18288 g$0$18289 g$0$18290) g$0$18289) g$0$18280) ((lambda (g$0$18294) ((lambda (g$0$18296) (if (if g$0$18296 (begin (quote #f) (apply (lambda (g$0$18298 g$0$18299) (g$0$13225 g$0$18299)) g$0$18296)) (quote #f)) (apply (lambda (g$0$18302 g$0$18303) g$0$18303) g$0$18296) ((lambda (g$0$18306) ((lambda (g$0$18308) (if (if g$0$18308 (begin (quote #f) (apply (lambda (g$0$18310) (g$0$13225 g$0$18310)) g$0$18308)) (quote #f)) (apply (lambda (g$0$18312) (g$0$18272 g$0$18312)) g$0$18308) ((lambda (g$0$18314) ((lambda (g$0$18316) (if (if g$0$18316 (begin (quote #f) (apply (lambda (g$0$18318) (g$0$13225 g$0$18318)) g$0$18316)) (quote #f)) (apply (lambda (g$0$18320) (g$0$18272 g$0$18320)) g$0$18316) ((lambda (g$0$18322) ((lambda (g$0$18324) (if (if g$0$18324 (begin (quote #f) (apply (lambda (g$0$18326) (g$0$13225 g$0$18326)) g$0$18324)) (quote #f)) (apply (lambda (g$0$18328) (g$0$18272 g$0$18328)) g$0$18324) ((lambda (g$0$18330) ((lambda (g$0$18332) (if (if g$0$18332 (begin (quote #f) (apply (lambda (g$0$18334) (quote #t)) g$0$18332)) (quote #f)) (apply (lambda (g$0$18336) (error (quote expander) (quote "invalid field spec") (g$0$13243 g$0$18276 (quote ())))) g$0$18332) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$18330 (quote ()))))) ((lambda (g$0$18338) (list g$0$18338)) g$0$18330))) g$0$18322))) ((lambda (g$0$18340) (list g$0$18340)) g$0$18322))) g$0$18314))) ((lambda (g$0$18342) (if (g$0$13211 g$0$18342) (begin (quote #f) ((lambda (g$0$18344) (if g$0$18344 (begin (quote #f) ((lambda (g$0$18346) (if g$0$18346 (begin (quote #f) (append g$0$18344 g$0$18346)) (quote #f))) ((lambda (g$0$18348) (if (g$0$13211 g$0$18348) (begin (quote #f) ((lambda (g$0$18350) (if g$0$18350 (begin (quote #f) ((lambda (g$0$18352) (if g$0$18352 (begin (quote #f) (append g$0$18350 g$0$18352)) (quote #f))) ((lambda (g$0$18354) (if (equal? (g$0$13245 g$0$18354) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18348)))) (quote #f))) ((lambda (g$0$18356) (list g$0$18356)) (g$0$13219 g$0$18348)))) (quote #f))) (g$0$13223 g$0$18342)))) (quote #f))) ((lambda (g$0$18358) (if (g$0$13225 g$0$18358) (if (g$0$13233 g$0$18358 (g$0$13478 (quote immutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$18342)))) (quote #f))) g$0$18314))) g$0$18306))) ((lambda (g$0$18360) (if (g$0$13211 g$0$18360) (begin (quote #f) ((lambda (g$0$18362) (if g$0$18362 (begin (quote #f) ((lambda (g$0$18364) (if g$0$18364 (begin (quote #f) (append g$0$18362 g$0$18364)) (quote #f))) ((lambda (g$0$18366) (if (g$0$13211 g$0$18366) (begin (quote #f) ((lambda (g$0$18368) (if g$0$18368 (begin (quote #f) ((lambda (g$0$18370) (if g$0$18370 (begin (quote #f) (append g$0$18368 g$0$18370)) (quote #f))) ((lambda (g$0$18372) (if (equal? (g$0$13245 g$0$18372) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18366)))) (quote #f))) ((lambda (g$0$18374) (list g$0$18374)) (g$0$13219 g$0$18366)))) (quote #f))) (g$0$13223 g$0$18360)))) (quote #f))) ((lambda (g$0$18376) (if (g$0$13225 g$0$18376) (if (g$0$13233 g$0$18376 (g$0$13478 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$18360)))) (quote #f))) g$0$18306))) g$0$18294))) ((lambda (g$0$18378) (if (g$0$13211 g$0$18378) (begin (quote #f) ((lambda (g$0$18380) (if g$0$18380 (begin (quote #f) ((lambda (g$0$18382) (if g$0$18382 (begin (quote #f) (append g$0$18380 g$0$18382)) (quote #f))) ((lambda (g$0$18384) (if (g$0$13211 g$0$18384) (begin (quote #f) ((lambda (g$0$18386) (if g$0$18386 (begin (quote #f) ((lambda (g$0$18388) (if g$0$18388 (begin (quote #f) (append g$0$18386 g$0$18388)) (quote #f))) ((lambda (g$0$18390) (if (g$0$13211 g$0$18390) (begin (quote #f) ((lambda (g$0$18392) (if g$0$18392 (begin (quote #f) ((lambda (g$0$18394) (if g$0$18394 (begin (quote #f) (append g$0$18392 g$0$18394)) (quote #f))) ((lambda (g$0$18396) (if (equal? (g$0$13245 g$0$18396) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18390)))) (quote #f))) ((lambda (g$0$18398) (list g$0$18398)) (g$0$13219 g$0$18390)))) (quote #f))) (g$0$13223 g$0$18384)))) (quote #f))) ((lambda (g$0$18400) (list g$0$18400)) (g$0$13219 g$0$18384)))) (quote #f))) (g$0$13223 g$0$18378)))) (quote #f))) ((lambda (g$0$18402) (if (g$0$13225 g$0$18402) (if (g$0$13233 g$0$18402 (g$0$13478 (quote immutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$18378)))) (quote #f))) g$0$18294))) g$0$18278))) ((lambda (g$0$18404) (if (g$0$13211 g$0$18404) (begin (quote #f) ((lambda (g$0$18406) (if g$0$18406 (begin (quote #f) ((lambda (g$0$18408) (if g$0$18408 (begin (quote #f) (append g$0$18406 g$0$18408)) (quote #f))) ((lambda (g$0$18410) (if (g$0$13211 g$0$18410) (begin (quote #f) ((lambda (g$0$18412) (if g$0$18412 (begin (quote #f) ((lambda (g$0$18414) (if g$0$18414 (begin (quote #f) (append g$0$18412 g$0$18414)) (quote #f))) ((lambda (g$0$18416) (if (g$0$13211 g$0$18416) (begin (quote #f) ((lambda (g$0$18418) (if g$0$18418 (begin (quote #f) ((lambda (g$0$18420) (if g$0$18420 (begin (quote #f) (append g$0$18418 g$0$18420)) (quote #f))) ((lambda (g$0$18422) (if (g$0$13211 g$0$18422) (begin (quote #f) ((lambda (g$0$18424) (if g$0$18424 (begin (quote #f) ((lambda (g$0$18426) (if g$0$18426 (begin (quote #f) (append g$0$18424 g$0$18426)) (quote #f))) ((lambda (g$0$18428) (if (equal? (g$0$13245 g$0$18428) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$18422)))) (quote #f))) ((lambda (g$0$18430) (list g$0$18430)) (g$0$13219 g$0$18422)))) (quote #f))) (g$0$13223 g$0$18416)))) (quote #f))) ((lambda (g$0$18432) (list g$0$18432)) (g$0$13219 g$0$18416)))) (quote #f))) (g$0$13223 g$0$18410)))) (quote #f))) ((lambda (g$0$18434) (list g$0$18434)) (g$0$13219 g$0$18410)))) (quote #f))) (g$0$13223 g$0$18404)))) (quote #f))) ((lambda (g$0$18436) (if (g$0$13225 g$0$18436) (if (g$0$13233 g$0$18436 (g$0$13478 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$13219 g$0$18404)))) (quote #f))) g$0$18278))) g$0$18276)) g$0$18267))) (quote #f)))) (set! g$0$18212 (lambda (g$0$18258) (letrec ((g$0$18260 (lambda (g$0$18262 g$0$18263) (if (null? g$0$18262) (quote ()) (cons g$0$18263 (g$0$18260 (cdr g$0$18262) (+ g$0$18263 (quote 1)))))))) (g$0$18260 g$0$18258 (quote 0))))) (set! g$0$18214 (lambda (g$0$18216 g$0$18217 g$0$18218) ((lambda (g$0$18222) ((lambda (g$0$18224) ((lambda (g$0$18226) ((lambda (g$0$18228) ((lambda (g$0$18230) ((lambda (g$0$18232) ((lambda (g$0$18234) ((lambda (g$0$18236) ((lambda (g$0$18238) ((lambda (g$0$18240) ((lambda (g$0$18242) ((lambda (g$0$18244) ((lambda (g$0$18246) ((lambda (g$0$18248) ((lambda () (g$0$13512 (cons (quote begin) (cons (list (quote define) g$0$18224 g$0$18244) (cons (list (quote define) g$0$18228 g$0$18248) (cons (list (quote define) g$0$18226 g$0$18246) (cons (list (quote define-syntax) g$0$18222 (list (quote list) (quote (quote $rtd)) (list (quote syntax) g$0$18224) (list (quote syntax) g$0$18226))) (cons (list (quote define) g$0$18242 (list (quote record-predicate) g$0$18224)) (cons (list (quote define) g$0$18230 (list (quote record-constructor) g$0$18226)) (append (map (lambda (g$0$18250 g$0$18251) (list (quote define) g$0$18250 (list (quote record-accessor) g$0$18224 g$0$18251))) g$0$18236 g$0$18234) (map (lambda (g$0$18254 g$0$18255) (list (quote define) g$0$18254 (list (quote record-mutator) g$0$18224 g$0$18255))) g$0$18238 g$0$18240))))))))))))) (g$0$18202 g$0$18218))) (g$0$18200 g$0$18218 g$0$18224 g$0$18228))) (g$0$18198 g$0$18216 g$0$18222 g$0$18218))) (g$0$18194 g$0$18217 g$0$18216))) (g$0$18206 g$0$18232))) (g$0$18208 g$0$18222 g$0$18232 g$0$18216))) (g$0$18210 g$0$18222 g$0$18232 g$0$18216))) (g$0$18212 g$0$18232))) (g$0$18204 g$0$18218))) (g$0$18192 g$0$18217 g$0$18216))) (gensym))) (gensym))) (gensym))) (g$0$18190 g$0$18217)))) ((lambda (g$0$19242) ((lambda (g$0$19244) (if (if g$0$19244 (begin (quote #f) (apply (lambda (g$0$19246 g$0$19247 g$0$19248) (quote #t)) g$0$19244)) (quote #f)) (apply (lambda (g$0$19252 g$0$19253 g$0$19254) (g$0$18214 g$0$19252 g$0$19253 g$0$19254)) g$0$19244) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$19242 (quote ()))))) ((lambda (g$0$19258) (if (g$0$13211 g$0$19258) (begin (quote #f) ((lambda (g$0$19260) (if g$0$19260 (begin (quote #f) ((lambda (g$0$19262) (if g$0$19262 (begin (quote #f) (append g$0$19260 g$0$19262)) (quote #f))) ((lambda (g$0$19264) (if (g$0$13211 g$0$19264) (begin (quote #f) ((lambda (g$0$19266) (if g$0$19266 (begin (quote #f) ((lambda (g$0$19268) (if g$0$19268 (begin (quote #f) (append g$0$19266 g$0$19268)) (quote #f))) ((letrec ((g$0$19270 (lambda (g$0$19272) (if (g$0$13211 g$0$19272) ((lambda (g$0$19274) (if g$0$19274 (begin (quote #f) ((lambda (g$0$19276) (if g$0$19276 (begin (quote #f) (map cons g$0$19274 g$0$19276)) (quote #f))) (g$0$19270 (g$0$13223 g$0$19272)))) (quote #f))) ((lambda (g$0$19278) (list g$0$19278)) (g$0$13219 g$0$19272))) (if (g$0$13215 g$0$19272) (list (begin (quote clause*) (quote ()))) (quote #f)))))) g$0$19270) (g$0$13223 g$0$19264)))) (quote #f))) ((lambda (g$0$19280) (list g$0$19280)) (g$0$13219 g$0$19264)))) (quote #f))) (g$0$13223 g$0$19258)))) (quote #f))) ((lambda (g$0$19282) (list g$0$19282)) (g$0$13219 g$0$19258)))) (quote #f))) g$0$19242))) g$0$18186))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$13558 (lambda (g$0$19284) ((lambda (g$0$19286) (begin (set! g$0$19286 (lambda (g$0$19288 g$0$19289) (g$0$13705 g$0$19288 (string->symbol (string-append (symbol->string (g$0$13707 g$0$19288)) g$0$19289))))) ((lambda (g$0$19292) ((lambda (g$0$19294) (if (if g$0$19294 (begin (quote #f) (apply (lambda (g$0$19296 g$0$19297 g$0$19298 g$0$19299 g$0$19300 g$0$19301 g$0$19302) (if (g$0$13225 g$0$19297) (if (g$0$13225 g$0$19298) (if (g$0$13225 g$0$19299) (if (g$0$13225 g$0$19300) (if (for-all g$0$13225 g$0$19301) (begin (quote #f) (for-all g$0$13225 g$0$19302)) (quote #f)) (quote #f)) (quote #f)) (quote #f)) (quote #f))) g$0$19294)) (quote #f)) (apply (lambda (g$0$19310 g$0$19311 g$0$19312 g$0$19313 g$0$19314 g$0$19315 g$0$19316) ((lambda (g$0$19324) (g$0$13512 (cons (quote begin) (cons (cons (quote define-record-type) (cons (list g$0$19311 g$0$19313 (gensym)) (cons (list (quote parent) g$0$19312) (cons (cons (quote fields) (map (lambda (g$0$19326 g$0$19327) (list (quote immutable) g$0$19326 g$0$19327)) g$0$19315 g$0$19324)) (quote ((nongenerative) (sealed #f) (opaque #f))))))) (cons (list (quote define) g$0$19314 (list (quote condition-predicate) (list (quote record-type-descriptor) g$0$19311))) (map (lambda (g$0$19330 g$0$19331) (list (quote define) g$0$19330 (list (quote condition-accessor) (list (quote record-type-descriptor) g$0$19311) g$0$19331))) g$0$19316 g$0$19324)))))) (map (lambda (g$0$19334) (gensym)) g$0$19316))) g$0$19294) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$19292 (quote ()))))) ((lambda (g$0$19336) (if (g$0$13211 g$0$19336) (begin (quote #f) ((lambda (g$0$19338) (if g$0$19338 (begin (quote #f) ((lambda (g$0$19340) (if g$0$19340 (begin (quote #f) (append g$0$19338 g$0$19340)) (quote #f))) ((lambda (g$0$19342) (if (g$0$13211 g$0$19342) (begin (quote #f) ((lambda (g$0$19344) (if g$0$19344 (begin (quote #f) ((lambda (g$0$19346) (if g$0$19346 (begin (quote #f) (append g$0$19344 g$0$19346)) (quote #f))) ((lambda (g$0$19348) (if (g$0$13211 g$0$19348) (begin (quote #f) ((lambda (g$0$19350) (if g$0$19350 (begin (quote #f) ((lambda (g$0$19352) (if g$0$19352 (begin (quote #f) (append g$0$19350 g$0$19352)) (quote #f))) ((lambda (g$0$19354) (if (g$0$13211 g$0$19354) (begin (quote #f) ((lambda (g$0$19356) (if g$0$19356 (begin (quote #f) ((lambda (g$0$19358) (if g$0$19358 (begin (quote #f) (append g$0$19356 g$0$19358)) (quote #f))) ((lambda (g$0$19360) (if (g$0$13211 g$0$19360) (begin (quote #f) ((lambda (g$0$19362) (if g$0$19362 (begin (quote #f) ((lambda (g$0$19364) (if g$0$19364 (begin (quote #f) (append g$0$19362 g$0$19364)) (quote #f))) ((letrec ((g$0$19366 (lambda (g$0$19368) (if (g$0$13211 g$0$19368) ((lambda (g$0$19370) (if g$0$19370 (begin (quote #f) ((lambda (g$0$19372) (if g$0$19372 (begin (quote #f) (map cons g$0$19370 g$0$19372)) (quote #f))) (g$0$19366 (g$0$13223 g$0$19368)))) (quote #f))) ((lambda (g$0$19374) (if (g$0$13211 g$0$19374) (begin (quote #f) ((lambda (g$0$19376) (if g$0$19376 (begin (quote #f) ((lambda (g$0$19378) (if g$0$19378 (begin (quote #f) (append g$0$19376 g$0$19378)) (quote #f))) ((lambda (g$0$19380) (if (g$0$13211 g$0$19380) (begin (quote #f) ((lambda (g$0$19382) (if g$0$19382 (begin (quote #f) ((lambda (g$0$19384) (if g$0$19384 (begin (quote #f) (append g$0$19382 g$0$19384)) (quote #f))) ((lambda (g$0$19386) (if (equal? (g$0$13245 g$0$19386) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$19380)))) (quote #f))) ((lambda (g$0$19388) (list g$0$19388)) (g$0$13219 g$0$19380)))) (quote #f))) (g$0$13223 g$0$19374)))) (quote #f))) ((lambda (g$0$19390) (list g$0$19390)) (g$0$13219 g$0$19374)))) (quote #f))) (g$0$13219 g$0$19368))) (if (g$0$13215 g$0$19368) (list (begin (quote field*) (quote ())) (begin (quote accessor*) (quote ()))) (quote #f)))))) g$0$19366) (g$0$13223 g$0$19360)))) (quote #f))) ((lambda (g$0$19392) (list g$0$19392)) (g$0$13219 g$0$19360)))) (quote #f))) (g$0$13223 g$0$19354)))) (quote #f))) ((lambda (g$0$19394) (list g$0$19394)) (g$0$13219 g$0$19354)))) (quote #f))) (g$0$13223 g$0$19348)))) (quote #f))) ((lambda (g$0$19396) (list g$0$19396)) (g$0$13219 g$0$19348)))) (quote #f))) (g$0$13223 g$0$19342)))) (quote #f))) ((lambda (g$0$19398) (list g$0$19398)) (g$0$13219 g$0$19342)))) (quote #f))) (g$0$13223 g$0$19336)))) (quote #f))) ((lambda (g$0$19400) (list g$0$19400)) (g$0$13219 g$0$19336)))) (quote #f))) g$0$19292))) g$0$19284))) (quote #f)))) (set! g$0$13560 (lambda (g$0$19402) (error (quote expander) (quote "incorrect usage of auxilary keyword") (g$0$13243 g$0$19402 (quote ()))))) (set! g$0$13562 (lambda (g$0$19404 g$0$19405 g$0$19406) ((lambda (g$0$19410) ((lambda (g$0$19412) (if (if g$0$19412 (begin (quote #f) (apply (lambda (g$0$19414 g$0$19415) (quote #t)) g$0$19412)) (quote #f)) (apply (lambda (g$0$19418 g$0$19419) (g$0$13612 (cons g$0$19418 g$0$19419) g$0$19405 g$0$19406)) g$0$19412) ((lambda (g$0$19422) ((lambda (g$0$19424) (if (if g$0$19424 (begin (quote #f) (apply (lambda (g$0$19426 g$0$19427 g$0$19428 g$0$19429) (quote #t)) g$0$19424)) (quote #f)) (apply (lambda (g$0$19434 g$0$19435 g$0$19436 g$0$19437) ((lambda (g$0$19442 g$0$19443 g$0$19444 g$0$19445) (g$0$13112 (quote #f) (append g$0$19442 g$0$19443) (append (g$0$13592 g$0$19434 g$0$19405 g$0$19406) (g$0$13592 g$0$19435 g$0$19405 g$0$19406)) (g$0$13112 (quote #f) (list g$0$19445) (list (g$0$13114 (quote #f) (quote ()) (g$0$13108 (quote #f) (map (lambda (g$0$19450 g$0$19451 g$0$19452) (g$0$13112 (quote #f) (list g$0$19450) (list (list g$0$19451)) (g$0$13108 (quote #f) (list (list g$0$19451 g$0$19452) (list (quote set!) g$0$19452 g$0$19450))))) g$0$19444 g$0$19442 g$0$19443)))) (list (quote (primitive dynamic-wind)) g$0$19445 (g$0$13114 (quote #f) (quote ()) (g$0$13612 (cons g$0$19436 g$0$19437) g$0$19405 g$0$19406)) g$0$19445)))) (map (lambda (g$0$19456) (g$0$13135 (quote lhs))) g$0$19434) (map (lambda (g$0$19458) (g$0$13135 (quote rhs))) g$0$19434) (map (lambda (g$0$19460) (g$0$13135 (quote t))) g$0$19434) (g$0$13135 (quote swap)))) g$0$19424) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$19422 (quote ()))))) ((lambda (g$0$19462) (if (g$0$13211 g$0$19462) (begin (quote #f) ((lambda (g$0$19464) (if g$0$19464 (begin (quote #f) ((lambda (g$0$19466) (if g$0$19466 (begin (quote #f) (append g$0$19464 g$0$19466)) (quote #f))) ((lambda (g$0$19468) (if (g$0$13211 g$0$19468) (begin (quote #f) ((lambda (g$0$19470) (if g$0$19470 (begin (quote #f) ((lambda (g$0$19472) (if g$0$19472 (begin (quote #f) (append g$0$19470 g$0$19472)) (quote #f))) ((lambda (g$0$19474) (if (g$0$13211 g$0$19474) (begin (quote #f) ((lambda (g$0$19476) (if g$0$19476 (begin (quote #f) ((lambda (g$0$19478) (if g$0$19478 (begin (quote #f) (append g$0$19476 g$0$19478)) (quote #f))) ((letrec ((g$0$19480 (lambda (g$0$19482) (if (g$0$13211 g$0$19482) ((lambda (g$0$19484) (if g$0$19484 (begin (quote #f) ((lambda (g$0$19486) (if g$0$19486 (begin (quote #f) (map cons g$0$19484 g$0$19486)) (quote #f))) (g$0$19480 (g$0$13223 g$0$19482)))) (quote #f))) ((lambda (g$0$19488) (list g$0$19488)) (g$0$13219 g$0$19482))) (if (g$0$13215 g$0$19482) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$19480) (g$0$13223 g$0$19474)))) (quote #f))) ((lambda (g$0$19490) (list g$0$19490)) (g$0$13219 g$0$19474)))) (quote #f))) (g$0$13223 g$0$19468)))) (quote #f))) ((letrec ((g$0$19492 (lambda (g$0$19494) (if (g$0$13211 g$0$19494) ((lambda (g$0$19496) (if g$0$19496 (begin (quote #f) ((lambda (g$0$19498) (if g$0$19498 (begin (quote #f) (map cons g$0$19496 g$0$19498)) (quote #f))) (g$0$19492 (g$0$13223 g$0$19494)))) (quote #f))) ((lambda (g$0$19500) (if (g$0$13211 g$0$19500) (begin (quote #f) ((lambda (g$0$19502) (if g$0$19502 (begin (quote #f) ((lambda (g$0$19504) (if g$0$19504 (begin (quote #f) (append g$0$19502 g$0$19504)) (quote #f))) ((lambda (g$0$19506) (if (g$0$13211 g$0$19506) (begin (quote #f) ((lambda (g$0$19508) (if g$0$19508 (begin (quote #f) ((lambda (g$0$19510) (if g$0$19510 (begin (quote #f) (append g$0$19508 g$0$19510)) (quote #f))) ((lambda (g$0$19512) (if (equal? (g$0$13245 g$0$19512) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$19506)))) (quote #f))) ((lambda (g$0$19514) (list g$0$19514)) (g$0$13219 g$0$19506)))) (quote #f))) (g$0$13223 g$0$19500)))) (quote #f))) ((lambda (g$0$19516) (list g$0$19516)) (g$0$13219 g$0$19500)))) (quote #f))) (g$0$13219 g$0$19494))) (if (g$0$13215 g$0$19494) (list (begin (quote olhs*) (quote ())) (begin (quote orhs*) (quote ()))) (quote #f)))))) g$0$19492) (g$0$13219 g$0$19468)))) (quote #f))) (g$0$13223 g$0$19462)))) (quote #f))) ((lambda (g$0$19518) (quote ())) (g$0$13219 g$0$19462)))) (quote #f))) g$0$19422))) g$0$19410))) ((lambda (g$0$19520) (if (g$0$13211 g$0$19520) (begin (quote #f) ((lambda (g$0$19522) (if g$0$19522 (begin (quote #f) ((lambda (g$0$19524) (if g$0$19524 (begin (quote #f) (append g$0$19522 g$0$19524)) (quote #f))) ((lambda (g$0$19526) (if (g$0$13211 g$0$19526) (begin (quote #f) ((lambda (g$0$19528) (if g$0$19528 (begin (quote #f) ((lambda (g$0$19530) (if g$0$19530 (begin (quote #f) (append g$0$19528 g$0$19530)) (quote #f))) ((lambda (g$0$19532) (if (g$0$13211 g$0$19532) (begin (quote #f) ((lambda (g$0$19534) (if g$0$19534 (begin (quote #f) ((lambda (g$0$19536) (if g$0$19536 (begin (quote #f) (append g$0$19534 g$0$19536)) (quote #f))) ((letrec ((g$0$19538 (lambda (g$0$19540) (if (g$0$13211 g$0$19540) ((lambda (g$0$19542) (if g$0$19542 (begin (quote #f) ((lambda (g$0$19544) (if g$0$19544 (begin (quote #f) (map cons g$0$19542 g$0$19544)) (quote #f))) (g$0$19538 (g$0$13223 g$0$19540)))) (quote #f))) ((lambda (g$0$19546) (list g$0$19546)) (g$0$13219 g$0$19540))) (if (g$0$13215 g$0$19540) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$19538) (g$0$13223 g$0$19532)))) (quote #f))) ((lambda (g$0$19548) (list g$0$19548)) (g$0$13219 g$0$19532)))) (quote #f))) (g$0$13223 g$0$19526)))) (quote #f))) ((lambda (g$0$19550) (if (equal? (g$0$13245 g$0$19550) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13219 g$0$19526)))) (quote #f))) (g$0$13223 g$0$19520)))) (quote #f))) ((lambda (g$0$19552) (quote ())) (g$0$13219 g$0$19520)))) (quote #f))) g$0$19410))) g$0$19404))) (set! g$0$13564 (lambda (g$0$19554 g$0$19555 g$0$19556) ((lambda (g$0$19560) ((lambda (g$0$19562) (if (if g$0$19562 (begin (quote #f) (apply (lambda (g$0$19564 g$0$19565) (quote #t)) g$0$19562)) (quote #f)) (apply (lambda (g$0$19568 g$0$19569) (cons (quote foreign-call) (cons (g$0$13596 g$0$19568 g$0$19555 g$0$19556) (g$0$13592 g$0$19569 g$0$19555 g$0$19556)))) g$0$19562) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$19560 (quote ()))))) ((lambda (g$0$19572) (if (g$0$13211 g$0$19572) (begin (quote #f) ((lambda (g$0$19574) (if g$0$19574 (begin (quote #f) ((lambda (g$0$19576) (if g$0$19576 (begin (quote #f) (append g$0$19574 g$0$19576)) (quote #f))) ((lambda (g$0$19578) (if (g$0$13211 g$0$19578) (begin (quote #f) ((lambda (g$0$19580) (if g$0$19580 (begin (quote #f) ((lambda (g$0$19582) (if g$0$19582 (begin (quote #f) (append g$0$19580 g$0$19582)) (quote #f))) ((letrec ((g$0$19584 (lambda (g$0$19586) (if (g$0$13211 g$0$19586) ((lambda (g$0$19588) (if g$0$19588 (begin (quote #f) ((lambda (g$0$19590) (if g$0$19590 (begin (quote #f) (map cons g$0$19588 g$0$19590)) (quote #f))) (g$0$19584 (g$0$13223 g$0$19586)))) (quote #f))) ((lambda (g$0$19592) (list g$0$19592)) (g$0$13219 g$0$19586))) (if (g$0$13215 g$0$19586) (list (begin (quote arg*) (quote ()))) (quote #f)))))) g$0$19584) (g$0$13223 g$0$19578)))) (quote #f))) ((lambda (g$0$19594) (list g$0$19594)) (g$0$13219 g$0$19578)))) (quote #f))) (g$0$13223 g$0$19572)))) (quote #f))) ((lambda (g$0$19596) (quote ())) (g$0$13219 g$0$19572)))) (quote #f))) g$0$19560))) g$0$19554))) (set! g$0$13566 (lambda (g$0$19598 g$0$19599) ((lambda (g$0$19602 g$0$19604) (begin (set! g$0$19602 (lambda (g$0$19792 g$0$19793 g$0$19794) (if (null? g$0$19792) (values (quote ()) g$0$19794) (call-with-values (lambda () (g$0$19602 (cdr g$0$19792) g$0$19793 g$0$19794)) (lambda (g$0$19798 g$0$19799) (call-with-values (lambda () (g$0$19604 (car g$0$19792) g$0$19793 g$0$19799)) (lambda (g$0$19802 g$0$19803) (values (cons g$0$19802 g$0$19798) g$0$19803)))))))) (set! g$0$19604 (lambda (g$0$19606 g$0$19607 g$0$19608) ((lambda (g$0$19612) ((lambda (g$0$19614) (if (if g$0$19614 (begin (quote #f) (apply (lambda (g$0$19616) (g$0$13225 g$0$19616)) g$0$19614)) (quote #f)) (apply (lambda (g$0$19618) (if (g$0$13239 g$0$19606 g$0$19599) (values (vector (quote free-id) g$0$19606) g$0$19608) (if (g$0$13233 g$0$19606 (g$0$13478 (quote _))) (values (quote _) g$0$19608) (values (quote any) (cons (cons g$0$19606 g$0$19607) g$0$19608))))) g$0$19614) ((lambda (g$0$19620) ((lambda (g$0$19622) (if (if g$0$19622 (begin (quote #f) (apply (lambda (g$0$19624 g$0$19625) (g$0$13570 g$0$19625)) g$0$19622)) (quote #f)) (apply (lambda (g$0$19628 g$0$19629) (call-with-values (lambda () (g$0$19604 g$0$19628 (+ g$0$19607 (quote 1)) g$0$19608)) (lambda (g$0$19632 g$0$19633) (values (if (eq? g$0$19632 (quote any)) (quote each-any) (vector (quote each) g$0$19632)) g$0$19633)))) g$0$19622) ((lambda (g$0$19636) ((lambda (g$0$19638) (if (if g$0$19638 (begin (quote #f) (apply (lambda (g$0$19640 g$0$19641 g$0$19642 g$0$19643) (g$0$13570 g$0$19641)) g$0$19638)) (quote #f)) (apply (lambda (g$0$19648 g$0$19649 g$0$19650 g$0$19651) (call-with-values (lambda () (g$0$19604 g$0$19651 g$0$19607 g$0$19608)) (lambda (g$0$19656 g$0$19657) (call-with-values (lambda () (g$0$19602 g$0$19650 g$0$19607 g$0$19657)) (lambda (g$0$19660 g$0$19661) (call-with-values (lambda () (g$0$19604 g$0$19648 (+ g$0$19607 (quote 1)) g$0$19661)) (lambda (g$0$19664 g$0$19665) (values (vector (quote each+) g$0$19664 (reverse g$0$19660) g$0$19656) g$0$19665)))))))) g$0$19638) ((lambda (g$0$19668) ((lambda (g$0$19670) (if (if g$0$19670 (begin (quote #f) (apply (lambda (g$0$19672 g$0$19673) (quote #t)) g$0$19670)) (quote #f)) (apply (lambda (g$0$19676 g$0$19677) (call-with-values (lambda () (g$0$19604 g$0$19677 g$0$19607 g$0$19608)) (lambda (g$0$19680 g$0$19681) (call-with-values (lambda () (g$0$19604 g$0$19676 g$0$19607 g$0$19681)) (lambda (g$0$19684 g$0$19685) (values (cons g$0$19684 g$0$19680) g$0$19685)))))) g$0$19670) ((lambda (g$0$19688) ((lambda (g$0$19690) (if (if g$0$19690 (begin (quote #f) (apply (lambda () (quote #t)) g$0$19690)) (quote #f)) (apply (lambda () (values (quote ()) g$0$19608)) g$0$19690) ((lambda (g$0$19692) ((lambda (g$0$19694) (if (if g$0$19694 (begin (quote #f) (apply (lambda (g$0$19696) (not (g$0$13177 g$0$19696))) g$0$19694)) (quote #f)) (apply (lambda (g$0$19698) (call-with-values (lambda () (g$0$19604 g$0$19698 g$0$19607 g$0$19608)) (lambda (g$0$19700 g$0$19701) (values (vector (quote vector) g$0$19700) g$0$19701)))) g$0$19694) ((lambda (g$0$19704) ((lambda (g$0$19706) (if (if g$0$19706 (begin (quote #f) (apply (lambda (g$0$19708) (quote #t)) g$0$19706)) (quote #f)) (apply (lambda (g$0$19710) (values (vector (quote atom) (g$0$13245 g$0$19710)) g$0$19608)) g$0$19706) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$19704 (quote ()))))) ((lambda (g$0$19712) (list g$0$19712)) g$0$19704))) g$0$19692))) ((lambda (g$0$19714) (if (g$0$13213 g$0$19714) (begin (quote #f) ((letrec ((g$0$19716 (lambda (g$0$19718) (if (g$0$13211 g$0$19718) ((lambda (g$0$19720) (if g$0$19720 (begin (quote #f) ((lambda (g$0$19722) (if g$0$19722 (begin (quote #f) (map cons g$0$19720 g$0$19722)) (quote #f))) (g$0$19716 (g$0$13223 g$0$19718)))) (quote #f))) ((lambda (g$0$19724) (list g$0$19724)) (g$0$13219 g$0$19718))) (if (g$0$13215 g$0$19718) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$19716) (g$0$13209 g$0$19714))) (quote #f))) g$0$19692))) g$0$19688))) ((lambda (g$0$19726) (if (equal? (g$0$13245 g$0$19726) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$19688))) g$0$19668))) ((lambda (g$0$19728) (if (g$0$13211 g$0$19728) (begin (quote #f) ((lambda (g$0$19730) (if g$0$19730 (begin (quote #f) ((lambda (g$0$19732) (if g$0$19732 (begin (quote #f) (append g$0$19730 g$0$19732)) (quote #f))) ((lambda (g$0$19734) (list g$0$19734)) (g$0$13223 g$0$19728)))) (quote #f))) ((lambda (g$0$19736) (list g$0$19736)) (g$0$13219 g$0$19728)))) (quote #f))) g$0$19668))) g$0$19636))) ((lambda (g$0$19738) (if (g$0$13211 g$0$19738) (begin (quote #f) ((lambda (g$0$19740) (if g$0$19740 (begin (quote #f) ((lambda (g$0$19742) (if g$0$19742 (begin (quote #f) (append g$0$19740 g$0$19742)) (quote #f))) ((lambda (g$0$19744) (if (g$0$13211 g$0$19744) (begin (quote #f) ((lambda (g$0$19746) (if g$0$19746 (begin (quote #f) ((lambda (g$0$19748) (if g$0$19748 (begin (quote #f) (append g$0$19746 g$0$19748)) (quote #f))) ((letrec ((g$0$19750 (lambda (g$0$19756) (if (g$0$13211 g$0$19756) ((lambda (g$0$19758) (if g$0$19758 (begin (quote #f) ((lambda (g$0$19760) (if g$0$19760 (begin (quote #f) (cons (map cons g$0$19758 (car g$0$19760)) (cdr g$0$19760))) (quote #f))) (g$0$19750 (g$0$13223 g$0$19756)))) (quote #f))) ((lambda (g$0$19762) (list g$0$19762)) (g$0$13219 g$0$19756))) ((lambda (g$0$19764) (if g$0$19764 (begin (quote #f) (cons (list (begin (quote ys) (quote ()))) g$0$19764)) (quote #f))) ((lambda (g$0$19766) (list g$0$19766)) g$0$19756)))))) (lambda (g$0$19752) ((lambda (g$0$19754) (if g$0$19754 (begin (quote #f) (append (car g$0$19754) (cdr g$0$19754))) (quote #f))) (g$0$19750 g$0$19752)))) (g$0$13223 g$0$19744)))) (quote #f))) ((lambda (g$0$19768) (list g$0$19768)) (g$0$13219 g$0$19744)))) (quote #f))) (g$0$13223 g$0$19738)))) (quote #f))) ((lambda (g$0$19770) (list g$0$19770)) (g$0$13219 g$0$19738)))) (quote #f))) g$0$19636))) g$0$19620))) ((lambda (g$0$19772) (if (g$0$13211 g$0$19772) (begin (quote #f) ((lambda (g$0$19774) (if g$0$19774 (begin (quote #f) ((lambda (g$0$19776) (if g$0$19776 (begin (quote #f) (append g$0$19774 g$0$19776)) (quote #f))) ((lambda (g$0$19778) (if (g$0$13211 g$0$19778) (begin (quote #f) ((lambda (g$0$19780) (if g$0$19780 (begin (quote #f) ((lambda (g$0$19782) (if g$0$19782 (begin (quote #f) (append g$0$19780 g$0$19782)) (quote #f))) ((lambda (g$0$19784) (if (equal? (g$0$13245 g$0$19784) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$19778)))) (quote #f))) ((lambda (g$0$19786) (list g$0$19786)) (g$0$13219 g$0$19778)))) (quote #f))) (g$0$13223 g$0$19772)))) (quote #f))) ((lambda (g$0$19788) (list g$0$19788)) (g$0$13219 g$0$19772)))) (quote #f))) g$0$19620))) g$0$19612))) ((lambda (g$0$19790) (list g$0$19790)) g$0$19612))) g$0$19606))) (g$0$19604 g$0$19598 (quote 0) (quote ())))) (quote #f) (quote #f)))) (set! g$0$13568 (lambda (g$0$19806 g$0$19807) ((lambda (g$0$19810 g$0$19812 g$0$19814 g$0$19816 g$0$19818 g$0$19820 g$0$19822 g$0$19824) (begin (set! g$0$19810 (lambda (g$0$19932 g$0$19933 g$0$19934) (if (if (null? g$0$19933) (begin (quote #f) (null? g$0$19934)) (quote #f)) g$0$19932 (g$0$13201 g$0$19932 g$0$19933 g$0$19934)))) (set! g$0$19812 (lambda (g$0$19916 g$0$19917 g$0$19918 g$0$19919) (if (pair? g$0$19916) ((lambda (g$0$19924) (if g$0$19924 (begin (quote #f) ((lambda (g$0$19926) (if g$0$19926 (begin (quote #f) (cons g$0$19924 g$0$19926)) (quote #f))) (g$0$19812 (cdr g$0$19916) g$0$19917 g$0$19918 g$0$19919))) (quote #f))) (g$0$19824 (car g$0$19916) g$0$19917 g$0$19918 g$0$19919 (quote ()))) (if (null? g$0$19916) (quote ()) (if (g$0$13177 g$0$19916) (call-with-values (lambda () (g$0$13199 g$0$19918 g$0$19919 g$0$19916)) (lambda (g$0$19928 g$0$19929) (g$0$19812 (g$0$13179 g$0$19916) g$0$19917 g$0$19928 g$0$19929))) (quote #f)))))) (set! g$0$19814 (lambda (g$0$19882 g$0$19883 g$0$19884 g$0$19885 g$0$19886 g$0$19887 g$0$19888) (letrec ((g$0$19896 (lambda (g$0$19898 g$0$19899 g$0$19900) (if (pair? g$0$19898) (call-with-values (lambda () (g$0$19896 (cdr g$0$19898) g$0$19899 g$0$19900)) (lambda (g$0$19904 g$0$19905 g$0$19906) (if g$0$19906 (if (null? g$0$19905) ((lambda (g$0$19910) (if g$0$19910 (values (cons g$0$19910 g$0$19904) g$0$19905 g$0$19906) (values (quote #f) (quote #f) (quote #f)))) (g$0$19824 (car g$0$19898) g$0$19883 g$0$19899 g$0$19900 (quote ()))) (values (quote ()) (cdr g$0$19905) (g$0$19824 (car g$0$19898) (car g$0$19905) g$0$19899 g$0$19900 g$0$19906))) (values (quote #f) (quote #f) (quote #f))))) (if (g$0$13177 g$0$19898) (call-with-values (lambda () (g$0$13199 g$0$19899 g$0$19900 g$0$19898)) (lambda (g$0$19912 g$0$19913) (g$0$19896 (g$0$13179 g$0$19898) g$0$19912 g$0$19913))) (values (quote ()) g$0$19884 (g$0$19824 g$0$19898 g$0$19885 g$0$19899 g$0$19900 g$0$19888))))))) (g$0$19896 g$0$19882 g$0$19886 g$0$19887)))) (set! g$0$19816 (lambda (g$0$19870 g$0$19871 g$0$19872) (if (pair? g$0$19870) ((lambda (g$0$19876) (if g$0$19876 (begin (quote #f) (cons (g$0$19810 (car g$0$19870) g$0$19871 g$0$19872) g$0$19876)) (quote #f))) (g$0$19816 (cdr g$0$19870) g$0$19871 g$0$19872)) (if (null? g$0$19870) (quote ()) (if (g$0$13177 g$0$19870) (call-with-values (lambda () (g$0$13199 g$0$19871 g$0$19872 g$0$19870)) (lambda (g$0$19878 g$0$19879) (g$0$19816 (g$0$13179 g$0$19870) g$0$19878 g$0$19879))) (quote #f)))))) (set! g$0$19818 (lambda (g$0$19865 g$0$19866) (if (null? g$0$19865) g$0$19866 (if (eq? g$0$19865 (quote _)) g$0$19866 (if (eq? g$0$19865 (quote any)) (cons (quote ()) g$0$19866) (if (pair? g$0$19865) (g$0$19818 (car g$0$19865) (g$0$19818 (cdr g$0$19865) g$0$19866)) (if (eq? g$0$19865 (quote each-any)) (cons (quote ()) g$0$19866) ((lambda (g$0$19869) (if (memv g$0$19869 (quote (each))) (g$0$19818 (vector-ref g$0$19865 (quote 1)) g$0$19866) (if (memv g$0$19869 (quote (each+))) (g$0$19818 (vector-ref g$0$19865 (quote 1)) (g$0$19818 (reverse (vector-ref g$0$19865 (quote 2))) (g$0$19818 (vector-ref g$0$19865 (quote 3)) g$0$19866))) (if (memv g$0$19869 (quote (free-id atom))) g$0$19866 (if (memv g$0$19869 (quote (vector))) (g$0$19818 (vector-ref g$0$19865 (quote 1)) g$0$19866) (error (quote syntax-dispatch) (quote "invalid pattern") g$0$19865)))))) (vector-ref g$0$19865 (quote 0)))))))))) (set! g$0$19820 (lambda (g$0$19861 g$0$19862) (if (null? (car g$0$19861)) g$0$19862 (cons (map car g$0$19861) (g$0$19820 (map cdr g$0$19861) g$0$19862))))) (set! g$0$19822 (lambda (g$0$19840 g$0$19841 g$0$19842 g$0$19843 g$0$19844) (if (null? g$0$19841) (if (null? g$0$19840) (begin (quote #f) g$0$19844) (quote #f)) (if (pair? g$0$19841) (if (pair? g$0$19840) (begin (quote #f) (g$0$19824 (car g$0$19840) (car g$0$19841) g$0$19842 g$0$19843 (g$0$19824 (cdr g$0$19840) (cdr g$0$19841) g$0$19842 g$0$19843 g$0$19844))) (quote #f)) (if (eq? g$0$19841 (quote each-any)) ((lambda (g$0$19850) (if g$0$19850 (begin (quote #f) (cons g$0$19850 g$0$19844)) (quote #f))) (g$0$19816 g$0$19840 g$0$19842 g$0$19843)) ((lambda (g$0$19852) (if (memv g$0$19852 (quote (each))) (if (null? g$0$19840) (g$0$19818 (vector-ref g$0$19841 (quote 1)) g$0$19844) ((lambda (g$0$19859) (if g$0$19859 (begin (quote #f) (g$0$19820 g$0$19859 g$0$19844)) (quote #f))) (g$0$19812 g$0$19840 (vector-ref g$0$19841 (quote 1)) g$0$19842 g$0$19843))) (if (memv g$0$19852 (quote (free-id))) (if (symbol? g$0$19840) (if (g$0$13233 (g$0$19810 g$0$19840 g$0$19842 g$0$19843) (vector-ref g$0$19841 (quote 1))) (begin (quote #f) g$0$19844) (quote #f)) (quote #f)) (if (memv g$0$19852 (quote (each+))) (call-with-values (lambda () (g$0$19814 g$0$19840 (vector-ref g$0$19841 (quote 1)) (vector-ref g$0$19841 (quote 2)) (vector-ref g$0$19841 (quote 3)) g$0$19842 g$0$19843 g$0$19844)) (lambda (g$0$19853 g$0$19854 g$0$19855) (if g$0$19855 (if (null? g$0$19854) (begin (quote #f) (if (null? g$0$19853) (g$0$19818 (vector-ref g$0$19841 (quote 1)) g$0$19855) (g$0$19820 g$0$19853 g$0$19855))) (quote #f)) (quote #f)))) (if (memv g$0$19852 (quote (atom))) (if (equal? (vector-ref g$0$19841 (quote 1)) (g$0$13243 g$0$19840 g$0$19842)) (begin (quote #f) g$0$19844) (quote #f)) (if (memv g$0$19852 (quote (vector))) (if (vector? g$0$19840) (begin (quote #f) (g$0$19824 (vector->list g$0$19840) (vector-ref g$0$19841 (quote 1)) g$0$19842 g$0$19843 g$0$19844)) (quote #f)) (error (quote syntax-dispatch) (quote "invalid pattern") g$0$19841))))))) (vector-ref g$0$19841 (quote 0)))))))) (set! g$0$19824 (lambda (g$0$19826 g$0$19827 g$0$19828 g$0$19829 g$0$19830) (if (not g$0$19830) (quote #f) (if (eq? g$0$19827 (quote _)) g$0$19830 (if (eq? g$0$19827 (quote any)) (cons (g$0$19810 g$0$19826 g$0$19828 g$0$19829) g$0$19830) (if (g$0$13177 g$0$19826) (call-with-values (lambda () (g$0$13199 g$0$19828 g$0$19829 g$0$19826)) (lambda (g$0$19836 g$0$19837) (g$0$19824 (g$0$13179 g$0$19826) g$0$19827 g$0$19836 g$0$19837 g$0$19830))) (g$0$19822 g$0$19826 g$0$19827 g$0$19828 g$0$19829 g$0$19830))))))) (g$0$19824 g$0$19806 g$0$19807 (quote ()) (quote ()) (quote ())))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$13570 (lambda (g$0$19938) (if (g$0$13225 g$0$19938) (begin (quote #f) (g$0$13233 g$0$19938 (g$0$13478 (quote |...|)))) (quote #f)))) (set! g$0$13572 ((lambda () ((lambda (g$0$19940 g$0$19942 g$0$19944 g$0$19946) (begin (set! g$0$19940 (lambda (g$0$20080 g$0$20081 g$0$20082 g$0$20083 g$0$20084) ((lambda (g$0$20090 g$0$20091) ((lambda (g$0$20094 g$0$20095) ((lambda (g$0$20098) (list (quote (primitive apply)) (g$0$13114 (quote #f) g$0$20095 g$0$20098) g$0$20082)) (g$0$13596 (g$0$13205 (g$0$13172 g$0$20090 g$0$20094) g$0$20081) (append (map (lambda (g$0$20100 g$0$20101 g$0$20102) (cons g$0$20100 (g$0$13251 (quote syntax) (cons g$0$20101 g$0$20102)))) g$0$20094 g$0$20095 (map cdr g$0$20080)) g$0$20083) g$0$20084))) (map g$0$13139 g$0$20090) (map g$0$13135 g$0$20090))) (map car g$0$20080) (map cdr g$0$20080)))) (set! g$0$19942 (lambda (g$0$20068 g$0$20069 g$0$20070) (letrec ((g$0$20074 (lambda (g$0$20076 g$0$20077) (if (null? g$0$20076) (error (quote expander) (quote "invalid syntax") (g$0$13245 g$0$20069)) (if (g$0$13225 (car g$0$20076)) (if (g$0$13239 (car g$0$20076) g$0$20077) (g$0$13701 (car g$0$20076) (quote "duplicate ") g$0$20070) (g$0$20074 (cdr g$0$20076) (cons (car g$0$20076) g$0$20077))) (g$0$13701 (car g$0$20076) (quote "invalid ") g$0$20070)))))) (g$0$20074 g$0$20068 (quote ()))))) (set! g$0$19944 (lambda (g$0$20036 g$0$20037 g$0$20038 g$0$20039 g$0$20040 g$0$20041 g$0$20042 g$0$20043) (call-with-values (lambda () (g$0$13566 g$0$20041 g$0$20037)) (lambda (g$0$20052 g$0$20053) (if (not (g$0$13237 (map car g$0$20053))) (g$0$19942 (map car g$0$20053) g$0$20041 (quote "pattern variable")) (if (not (for-all (lambda (g$0$20056) (not (g$0$13570 (car g$0$20056)))) g$0$20053)) (error (quote expander) (quote "misplaced ellipsis in syntax-case pattern") (g$0$13243 g$0$20041 (quote ()))) ((lambda (g$0$20058) ((lambda (g$0$20060) ((lambda (g$0$20062) ((lambda (g$0$20064) (list (g$0$13114 (quote #f) (list g$0$20058) (list (quote if) g$0$20060 g$0$20062 g$0$20064)) (list (quote (primitive syntax-dispatch)) g$0$20036 (list (quote quote) g$0$20052)))) (g$0$19946 g$0$20036 g$0$20037 g$0$20038 g$0$20039 g$0$20040))) (g$0$19940 g$0$20053 g$0$20043 g$0$20058 g$0$20039 g$0$20040))) (if (eq? g$0$20042 (quote #t)) g$0$20058 ((lambda (g$0$20066) (list (quote if) g$0$20058 g$0$20066 (list (quote quote) (quote #f)))) (g$0$19940 g$0$20053 g$0$20042 g$0$20058 g$0$20039 g$0$20040))))) (g$0$13135 (quote tmp))))))))) (set! g$0$19946 (lambda (g$0$19948 g$0$19949 g$0$19950 g$0$19951 g$0$19952) (if (null? g$0$19950) (list (quote (primitive syntax-error)) g$0$19948) ((lambda (g$0$19958) ((lambda (g$0$19960) (if (if g$0$19960 (begin (quote #f) (apply (lambda (g$0$19962 g$0$19963) (quote #t)) g$0$19960)) (quote #f)) (apply (lambda (g$0$19966 g$0$19967) (if (if (g$0$13225 g$0$19966) (if (not (g$0$13239 g$0$19966 g$0$19949)) (begin (quote #f) (not (g$0$13570 g$0$19966))) (quote #f)) (quote #f)) (if (g$0$13233 g$0$19966 (g$0$13478 (quote _))) (g$0$13596 g$0$19967 g$0$19951 g$0$19952) ((lambda (g$0$19970 g$0$19971) ((lambda (g$0$19974) (list (g$0$13114 (quote #f) (list g$0$19971) g$0$19974) g$0$19948)) (g$0$13596 (g$0$13205 (g$0$13172 (list g$0$19966) (list g$0$19970)) g$0$19967) (cons (cons g$0$19970 (g$0$13251 (quote syntax) (cons g$0$19971 (quote 0)))) g$0$19951) g$0$19952))) (g$0$13139 g$0$19966) (g$0$13135 g$0$19966))) (g$0$19944 g$0$19948 g$0$19949 (cdr g$0$19950) g$0$19951 g$0$19952 g$0$19966 (quote #t) g$0$19967))) g$0$19960) ((lambda (g$0$19976) ((lambda (g$0$19978) (if (if g$0$19978 (begin (quote #f) (apply (lambda (g$0$19980 g$0$19981 g$0$19982) (quote #t)) g$0$19978)) (quote #f)) (apply (lambda (g$0$19986 g$0$19987 g$0$19988) (g$0$19944 g$0$19948 g$0$19949 (cdr g$0$19950) g$0$19951 g$0$19952 g$0$19986 g$0$19987 g$0$19988)) g$0$19978) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$19976 (quote ()))))) ((lambda (g$0$19992) (if (g$0$13211 g$0$19992) (begin (quote #f) ((lambda (g$0$19994) (if g$0$19994 (begin (quote #f) ((lambda (g$0$19996) (if g$0$19996 (begin (quote #f) (append g$0$19994 g$0$19996)) (quote #f))) ((lambda (g$0$19998) (if (g$0$13211 g$0$19998) (begin (quote #f) ((lambda (g$0$20000) (if g$0$20000 (begin (quote #f) ((lambda (g$0$20002) (if g$0$20002 (begin (quote #f) (append g$0$20000 g$0$20002)) (quote #f))) ((lambda (g$0$20004) (if (g$0$13211 g$0$20004) (begin (quote #f) ((lambda (g$0$20006) (if g$0$20006 (begin (quote #f) ((lambda (g$0$20008) (if g$0$20008 (begin (quote #f) (append g$0$20006 g$0$20008)) (quote #f))) ((lambda (g$0$20010) (if (equal? (g$0$13245 g$0$20010) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$20004)))) (quote #f))) ((lambda (g$0$20012) (list g$0$20012)) (g$0$13219 g$0$20004)))) (quote #f))) (g$0$13223 g$0$19998)))) (quote #f))) ((lambda (g$0$20014) (list g$0$20014)) (g$0$13219 g$0$19998)))) (quote #f))) (g$0$13223 g$0$19992)))) (quote #f))) ((lambda (g$0$20016) (list g$0$20016)) (g$0$13219 g$0$19992)))) (quote #f))) g$0$19976))) g$0$19958))) ((lambda (g$0$20018) (if (g$0$13211 g$0$20018) (begin (quote #f) ((lambda (g$0$20020) (if g$0$20020 (begin (quote #f) ((lambda (g$0$20022) (if g$0$20022 (begin (quote #f) (append g$0$20020 g$0$20022)) (quote #f))) ((lambda (g$0$20024) (if (g$0$13211 g$0$20024) (begin (quote #f) ((lambda (g$0$20026) (if g$0$20026 (begin (quote #f) ((lambda (g$0$20028) (if g$0$20028 (begin (quote #f) (append g$0$20026 g$0$20028)) (quote #f))) ((lambda (g$0$20030) (if (equal? (g$0$13245 g$0$20030) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$20024)))) (quote #f))) ((lambda (g$0$20032) (list g$0$20032)) (g$0$13219 g$0$20024)))) (quote #f))) (g$0$13223 g$0$20018)))) (quote #f))) ((lambda (g$0$20034) (list g$0$20034)) (g$0$13219 g$0$20018)))) (quote #f))) g$0$19958))) (car g$0$19950))))) (lambda (g$0$20106 g$0$20107 g$0$20108) ((lambda (g$0$20112) ((lambda (g$0$20114) (if (if g$0$20114 (begin (quote #f) (apply (lambda (g$0$20116 g$0$20117 g$0$20118) (quote #t)) g$0$20114)) (quote #f)) (apply (lambda (g$0$20122 g$0$20123 g$0$20124) (begin (if (for-all (lambda (g$0$20128) (if (g$0$13225 g$0$20128) (begin (quote #f) (not (g$0$13570 g$0$20128))) (quote #f))) g$0$20123) (void) (error (quote expander) (quote "invalid literals") (g$0$13243 g$0$20106 (quote ())))) ((lambda (g$0$20130) ((lambda (g$0$20132) (list (g$0$13114 (quote #f) (list g$0$20130) g$0$20132) (g$0$13596 g$0$20122 g$0$20107 g$0$20108))) (g$0$19946 g$0$20130 g$0$20123 g$0$20124 g$0$20107 g$0$20108))) (g$0$13135 (quote tmp))))) g$0$20114) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$20112 (quote ()))))) ((lambda (g$0$20134) (if (g$0$13211 g$0$20134) (begin (quote #f) ((lambda (g$0$20136) (if g$0$20136 (begin (quote #f) ((lambda (g$0$20138) (if g$0$20138 (begin (quote #f) (append g$0$20136 g$0$20138)) (quote #f))) ((lambda (g$0$20140) (if (g$0$13211 g$0$20140) (begin (quote #f) ((lambda (g$0$20142) (if g$0$20142 (begin (quote #f) ((lambda (g$0$20144) (if g$0$20144 (begin (quote #f) (append g$0$20142 g$0$20144)) (quote #f))) ((lambda (g$0$20146) (if (g$0$13211 g$0$20146) (begin (quote #f) ((lambda (g$0$20148) (if g$0$20148 (begin (quote #f) ((lambda (g$0$20150) (if g$0$20150 (begin (quote #f) (append g$0$20148 g$0$20150)) (quote #f))) ((letrec ((g$0$20152 (lambda (g$0$20154) (if (g$0$13211 g$0$20154) ((lambda (g$0$20156) (if g$0$20156 (begin (quote #f) ((lambda (g$0$20158) (if g$0$20158 (begin (quote #f) (map cons g$0$20156 g$0$20158)) (quote #f))) (g$0$20152 (g$0$13223 g$0$20154)))) (quote #f))) ((lambda (g$0$20160) (list g$0$20160)) (g$0$13219 g$0$20154))) (if (g$0$13215 g$0$20154) (list (begin (quote clauses) (quote ()))) (quote #f)))))) g$0$20152) (g$0$13223 g$0$20146)))) (quote #f))) ((letrec ((g$0$20162 (lambda (g$0$20164) (if (g$0$13211 g$0$20164) ((lambda (g$0$20166) (if g$0$20166 (begin (quote #f) ((lambda (g$0$20168) (if g$0$20168 (begin (quote #f) (map cons g$0$20166 g$0$20168)) (quote #f))) (g$0$20162 (g$0$13223 g$0$20164)))) (quote #f))) ((lambda (g$0$20170) (list g$0$20170)) (g$0$13219 g$0$20164))) (if (g$0$13215 g$0$20164) (list (begin (quote keys) (quote ()))) (quote #f)))))) g$0$20162) (g$0$13219 g$0$20146)))) (quote #f))) (g$0$13223 g$0$20140)))) (quote #f))) ((lambda (g$0$20172) (list g$0$20172)) (g$0$13219 g$0$20140)))) (quote #f))) (g$0$13223 g$0$20134)))) (quote #f))) ((lambda (g$0$20174) (quote ())) (g$0$13219 g$0$20134)))) (quote #f))) g$0$20112))) g$0$20106)))) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$0$13574 ((lambda () ((lambda (g$0$20176 g$0$20178 g$0$20180 g$0$20182 g$0$20184 g$0$20186 g$0$20188 g$0$20190) (begin (set! g$0$20176 (lambda (g$0$20262 g$0$20263 g$0$20264 g$0$20265 g$0$20266 g$0$20267) ((lambda (g$0$20274) ((lambda (g$0$20276) (if (if g$0$20276 (begin (quote #f) (apply (lambda (g$0$20278) (g$0$20266 g$0$20278)) g$0$20276)) (quote #f)) (apply (lambda (g$0$20280) (error (quote expander) (quote "misplaced ellipsis in syntax form") (g$0$13243 g$0$20262 (quote ())))) g$0$20276) ((lambda (g$0$20282) ((lambda (g$0$20284) (if (if g$0$20284 (begin (quote #f) (apply (lambda (g$0$20286) (g$0$13225 g$0$20286)) g$0$20284)) (quote #f)) (apply (lambda (g$0$20288) ((lambda (g$0$20290) ((lambda (g$0$20292) ((lambda () (if (eq? (g$0$13253 g$0$20292) (quote syntax)) (call-with-values (lambda () ((lambda (g$0$20294) (g$0$20178 g$0$20262 (car g$0$20294) (cdr g$0$20294) g$0$20265)) (g$0$13255 g$0$20292))) (lambda (g$0$20296 g$0$20297) (values (list (quote ref) g$0$20296) g$0$20297))) (values (list (quote quote) g$0$20263) g$0$20265))))) (g$0$13249 g$0$20290 g$0$20264))) (g$0$13247 g$0$20263))) g$0$20284) ((lambda (g$0$20300) ((lambda (g$0$20302) (if (if g$0$20302 (begin (quote #f) (apply (lambda (g$0$20304 g$0$20305) (g$0$20266 g$0$20304)) g$0$20302)) (quote #f)) (apply (lambda (g$0$20308 g$0$20309) (if g$0$20267 (error (quote expander) (quote "misplaced ellipsis in syntax form") (g$0$13243 g$0$20262 (quote ()))) (g$0$20176 g$0$20262 g$0$20309 g$0$20264 g$0$20265 (lambda (g$0$20312) (quote #f)) (quote #f)))) g$0$20302) ((lambda (g$0$20314) ((lambda (g$0$20316) (if (if g$0$20316 (begin (quote #f) (apply (lambda (g$0$20318 g$0$20319 g$0$20320) (g$0$20266 g$0$20319)) g$0$20316)) (quote #f)) (apply (lambda (g$0$20324 g$0$20325 g$0$20326) (letrec ((g$0$20330 (lambda (g$0$20338 g$0$20339) ((lambda (g$0$20342) ((lambda (g$0$20344) (if (if g$0$20344 (begin (quote #f) (apply (lambda () (quote #t)) g$0$20344)) (quote #f)) (apply (lambda () (g$0$20339 g$0$20265)) g$0$20344) ((lambda (g$0$20346) ((lambda (g$0$20348) (if (if g$0$20348 (begin (quote #f) (apply (lambda (g$0$20350 g$0$20351) (g$0$20266 g$0$20350)) g$0$20348)) (quote #f)) (apply (lambda (g$0$20354 g$0$20355) (g$0$20330 g$0$20355 (lambda (g$0$20358) (call-with-values (lambda () (g$0$20339 (cons (quote ()) g$0$20358))) (lambda (g$0$20360 g$0$20361) (if (null? (car g$0$20361)) (error (quote expander) (quote "extra ellipsis in syntax form") (g$0$13243 g$0$20262 (quote ()))) (values (g$0$20182 g$0$20360 (car g$0$20361)) (cdr g$0$20361)))))))) g$0$20348) ((lambda (g$0$20364) ((lambda (g$0$20366) (if (if g$0$20366 (begin (quote #f) (apply (lambda () (quote #t)) g$0$20366)) (quote #f)) (apply (lambda () (call-with-values (lambda () (g$0$20176 g$0$20262 g$0$20338 g$0$20264 g$0$20265 g$0$20266 g$0$20267)) (lambda (g$0$20368 g$0$20369) (call-with-values (lambda () (g$0$20339 g$0$20369)) (lambda (g$0$20372 g$0$20373) (values (g$0$20180 g$0$20372 g$0$20368) g$0$20373)))))) g$0$20366) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$20364 (quote ()))))) ((lambda (g$0$20376) (quote ())) g$0$20364))) g$0$20346))) ((lambda (g$0$20378) (if (g$0$13211 g$0$20378) (begin (quote #f) ((lambda (g$0$20380) (if g$0$20380 (begin (quote #f) ((lambda (g$0$20382) (if g$0$20382 (begin (quote #f) (append g$0$20380 g$0$20382)) (quote #f))) ((lambda (g$0$20384) (list g$0$20384)) (g$0$13223 g$0$20378)))) (quote #f))) ((lambda (g$0$20386) (list g$0$20386)) (g$0$13219 g$0$20378)))) (quote #f))) g$0$20346))) g$0$20342))) ((lambda (g$0$20388) (if (equal? (g$0$13245 g$0$20388) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$20342))) g$0$20338)))) (g$0$20330 g$0$20326 (lambda (g$0$20332) (call-with-values (lambda () (g$0$20176 g$0$20262 g$0$20324 g$0$20264 (cons (quote ()) g$0$20332) g$0$20266 (quote #f))) (lambda (g$0$20334 g$0$20335) (if (null? (car g$0$20335)) (error (quote expander) (quote "extra ellipsis in syntax form") (g$0$13243 g$0$20262 (quote ()))) (values (g$0$20184 g$0$20334 (car g$0$20335)) (cdr g$0$20335))))))))) g$0$20316) ((lambda (g$0$20390) ((lambda (g$0$20392) (if (if g$0$20392 (begin (quote #f) (apply (lambda (g$0$20394 g$0$20395) (quote #t)) g$0$20392)) (quote #f)) (apply (lambda (g$0$20398 g$0$20399) (call-with-values (lambda () (g$0$20176 g$0$20262 g$0$20398 g$0$20264 g$0$20265 g$0$20266 (quote #f))) (lambda (g$0$20402 g$0$20403) (call-with-values (lambda () (g$0$20176 g$0$20262 g$0$20399 g$0$20264 g$0$20403 g$0$20266 g$0$20267)) (lambda (g$0$20406 g$0$20407) (values (g$0$20186 g$0$20263 g$0$20398 g$0$20399 g$0$20402 g$0$20406) g$0$20407)))))) g$0$20392) ((lambda (g$0$20410) ((lambda (g$0$20412) (if (if g$0$20412 (begin (quote #f) (apply (lambda (g$0$20414) (not (g$0$13177 g$0$20263))) g$0$20412)) (quote #f)) (apply (lambda (g$0$20416) (call-with-values (lambda () (g$0$20176 g$0$20262 g$0$20416 g$0$20264 g$0$20265 g$0$20266 (quote #t))) (lambda (g$0$20418 g$0$20419) (values (g$0$20188 g$0$20263 g$0$20416 g$0$20418) g$0$20419)))) g$0$20412) ((lambda (g$0$20422) ((lambda (g$0$20424) (if (if g$0$20424 (begin (quote #f) (apply (lambda () (quote #t)) g$0$20424)) (quote #f)) (apply (lambda () (values (list (quote quote) g$0$20263) g$0$20265)) g$0$20424) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$20422 (quote ()))))) ((lambda (g$0$20426) (quote ())) g$0$20422))) g$0$20410))) ((lambda (g$0$20428) (if (g$0$13213 g$0$20428) (begin (quote #f) ((letrec ((g$0$20430 (lambda (g$0$20432) (if (g$0$13211 g$0$20432) ((lambda (g$0$20434) (if g$0$20434 (begin (quote #f) ((lambda (g$0$20436) (if g$0$20436 (begin (quote #f) (map cons g$0$20434 g$0$20436)) (quote #f))) (g$0$20430 (g$0$13223 g$0$20432)))) (quote #f))) ((lambda (g$0$20438) (list g$0$20438)) (g$0$13219 g$0$20432))) (if (g$0$13215 g$0$20432) (list (begin (quote ls) (quote ()))) (quote #f)))))) g$0$20430) (g$0$13209 g$0$20428))) (quote #f))) g$0$20410))) g$0$20390))) ((lambda (g$0$20440) (if (g$0$13211 g$0$20440) (begin (quote #f) ((lambda (g$0$20442) (if g$0$20442 (begin (quote #f) ((lambda (g$0$20444) (if g$0$20444 (begin (quote #f) (append g$0$20442 g$0$20444)) (quote #f))) ((lambda (g$0$20446) (list g$0$20446)) (g$0$13223 g$0$20440)))) (quote #f))) ((lambda (g$0$20448) (list g$0$20448)) (g$0$13219 g$0$20440)))) (quote #f))) g$0$20390))) g$0$20314))) ((lambda (g$0$20450) (if (g$0$13211 g$0$20450) (begin (quote #f) ((lambda (g$0$20452) (if g$0$20452 (begin (quote #f) ((lambda (g$0$20454) (if g$0$20454 (begin (quote #f) (append g$0$20452 g$0$20454)) (quote #f))) ((lambda (g$0$20456) (if (g$0$13211 g$0$20456) (begin (quote #f) ((lambda (g$0$20458) (if g$0$20458 (begin (quote #f) ((lambda (g$0$20460) (if g$0$20460 (begin (quote #f) (append g$0$20458 g$0$20460)) (quote #f))) ((lambda (g$0$20462) (list g$0$20462)) (g$0$13223 g$0$20456)))) (quote #f))) ((lambda (g$0$20464) (list g$0$20464)) (g$0$13219 g$0$20456)))) (quote #f))) (g$0$13223 g$0$20450)))) (quote #f))) ((lambda (g$0$20466) (list g$0$20466)) (g$0$13219 g$0$20450)))) (quote #f))) g$0$20314))) g$0$20300))) ((lambda (g$0$20468) (if (g$0$13211 g$0$20468) (begin (quote #f) ((lambda (g$0$20470) (if g$0$20470 (begin (quote #f) ((lambda (g$0$20472) (if g$0$20472 (begin (quote #f) (append g$0$20470 g$0$20472)) (quote #f))) ((lambda (g$0$20474) (if (g$0$13211 g$0$20474) (begin (quote #f) ((lambda (g$0$20476) (if g$0$20476 (begin (quote #f) ((lambda (g$0$20478) (if g$0$20478 (begin (quote #f) (append g$0$20476 g$0$20478)) (quote #f))) ((lambda (g$0$20480) (if (equal? (g$0$13245 g$0$20480) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$20474)))) (quote #f))) ((lambda (g$0$20482) (list g$0$20482)) (g$0$13219 g$0$20474)))) (quote #f))) (g$0$13223 g$0$20468)))) (quote #f))) ((lambda (g$0$20484) (list g$0$20484)) (g$0$13219 g$0$20468)))) (quote #f))) g$0$20300))) g$0$20282))) ((lambda (g$0$20486) (list g$0$20486)) g$0$20282))) g$0$20274))) ((lambda (g$0$20488) (list g$0$20488)) g$0$20274))) g$0$20263))) (set! g$0$20178 (lambda (g$0$20244 g$0$20245 g$0$20246 g$0$20247) (if (= g$0$20246 (quote 0)) (values g$0$20245 g$0$20247) (if (null? g$0$20247) (error (quote expander) (quote "missing ellipsis in syntax form") (g$0$13243 g$0$20244 (quote ()))) (call-with-values (lambda () (g$0$20178 g$0$20244 g$0$20245 (- g$0$20246 (quote 1)) (cdr g$0$20247))) (lambda (g$0$20252 g$0$20253) ((lambda (g$0$20256) (if g$0$20256 ((lambda (g$0$20258) (values (cdr g$0$20258) g$0$20247)) g$0$20256) ((lambda (g$0$20260) (values g$0$20260 (cons (cons (cons g$0$20252 g$0$20260) (car g$0$20247)) g$0$20253))) (g$0$13135 (quote tmp))))) (assq g$0$20252 (car g$0$20247))))))))) (set! g$0$20180 (lambda (g$0$20240 g$0$20241) (if (equal? g$0$20241 (quote (quote ()))) g$0$20240 (list (quote append) g$0$20240 g$0$20241)))) (set! g$0$20182 (lambda (g$0$20236 g$0$20237) (list (quote apply) (quote (primitive append)) (g$0$20184 g$0$20236 g$0$20237)))) (set! g$0$20184 (lambda (g$0$20218 g$0$20219) ((lambda (g$0$20222 g$0$20223) (if (eq? (car g$0$20218) (quote ref)) (car g$0$20223) (if (for-all (lambda (g$0$20226) (if (eq? (car g$0$20226) (quote ref)) (begin (quote #f) (memq (cadr g$0$20226) g$0$20222)) (quote #f))) (cdr g$0$20218)) ((lambda (g$0$20228) (cons (quote map) (cons (list (quote primitive) (car g$0$20218)) g$0$20228))) (map ((lambda (g$0$20230) (lambda (g$0$20232) (cdr (assq (cadr g$0$20232) g$0$20230)))) (map cons g$0$20222 g$0$20223)) (cdr g$0$20218))) (cons* (quote map) (list (quote lambda) g$0$20222 g$0$20218) g$0$20223)))) (map cdr g$0$20219) (map (lambda (g$0$20234) (list (quote ref) (car g$0$20234))) g$0$20219)))) (set! g$0$20186 (lambda (g$0$20203 g$0$20204 g$0$20205 g$0$20206 g$0$20207) ((lambda (g$0$20213) (if (memv g$0$20213 (quote (quote))) (if (eq? (car g$0$20206) (quote quote)) ((lambda (g$0$20214 g$0$20215) (if (if (eq? g$0$20214 g$0$20204) (begin (quote #f) (eq? g$0$20215 g$0$20205)) (quote #f)) (list (quote quote) g$0$20203) (list (quote quote) (cons g$0$20214 g$0$20215)))) (cadr g$0$20206) (cadr g$0$20207)) (if (null? (cadr g$0$20207)) (list (quote list) g$0$20206) (list (quote cons) g$0$20206 g$0$20207))) (if (memv g$0$20213 (quote (list))) (cons (quote list) (cons g$0$20206 (cdr g$0$20207))) (list (quote cons) g$0$20206 g$0$20207)))) (car g$0$20207)))) (set! g$0$20188 (lambda (g$0$20197 g$0$20198 g$0$20199) (if (eq? (car g$0$20199) (quote quote)) (if (eq? (cadr g$0$20199) g$0$20198) (list (quote quote) g$0$20197) (list (quote quote) (list->vector (cadr g$0$20199)))) (if (eq? (car g$0$20199) (quote list)) (cons (quote vector) (cdr g$0$20199)) (list (quote list->vector) g$0$20199))))) (set! g$0$20190 (lambda (g$0$20192) ((lambda (g$0$20194) (if (memv g$0$20194 (quote (ref))) (cadr g$0$20192) (if (memv g$0$20194 (quote (primitive))) (list (quote primitive) (cadr g$0$20192)) (if (memv g$0$20194 (quote (quote))) (list (quote quote) (cadr g$0$20192)) (if (memv g$0$20194 (quote (lambda))) (g$0$13114 (quote #f) (cadr g$0$20192) (g$0$20190 (caddr g$0$20192))) (if (memv g$0$20194 (quote (map))) ((lambda (g$0$20195) (cons (quote (primitive map)) g$0$20195)) (map g$0$20190 (cdr g$0$20192))) (cons (list (quote primitive) (car g$0$20192)) (map g$0$20190 (cdr g$0$20192))))))))) (car g$0$20192)))) (lambda (g$0$20490 g$0$20491 g$0$20492) ((lambda (g$0$20496) ((lambda (g$0$20498) (if (if g$0$20498 (begin (quote #f) (apply (lambda (g$0$20500) (quote #t)) g$0$20498)) (quote #f)) (apply (lambda (g$0$20502) (call-with-values (lambda () (g$0$20176 g$0$20490 g$0$20502 g$0$20491 (quote ()) g$0$13570 (quote #f))) (lambda (g$0$20504 g$0$20505) (g$0$20190 g$0$20504)))) g$0$20498) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$20496 (quote ()))))) ((lambda (g$0$20508) (if (g$0$13211 g$0$20508) (begin (quote #f) ((lambda (g$0$20510) (if g$0$20510 (begin (quote #f) ((lambda (g$0$20512) (if g$0$20512 (begin (quote #f) (append g$0$20510 g$0$20512)) (quote #f))) ((lambda (g$0$20514) (if (g$0$13211 g$0$20514) (begin (quote #f) ((lambda (g$0$20516) (if g$0$20516 (begin (quote #f) ((lambda (g$0$20518) (if g$0$20518 (begin (quote #f) (append g$0$20516 g$0$20518)) (quote #f))) ((lambda (g$0$20520) (if (equal? (g$0$13245 g$0$20520) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$20514)))) (quote #f))) ((lambda (g$0$20522) (list g$0$20522)) (g$0$13219 g$0$20514)))) (quote #f))) (g$0$13223 g$0$20508)))) (quote #f))) ((lambda (g$0$20524) (quote ())) (g$0$13219 g$0$20508)))) (quote #f))) g$0$20496))) g$0$20490)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$0$13576 (lambda (g$0$20526) ((lambda (g$0$20528) (if (memv g$0$20528 (quote (quote))) g$0$13506 (if (memv g$0$20528 (quote (lambda))) g$0$13510 (if (memv g$0$20528 (quote (case-lambda))) g$0$13508 (if (memv g$0$20528 (quote (let-values))) g$0$13484 (if (memv g$0$20528 (quote (letrec))) g$0$13488 (if (memv g$0$20528 (quote (letrec*))) g$0$13490 (if (memv g$0$20528 (quote (case))) g$0$13504 (if (memv g$0$20528 (quote (if))) g$0$13502 (if (memv g$0$20528 (quote (when))) g$0$13498 (if (memv g$0$20528 (quote (unless))) g$0$13500 (if (memv g$0$20528 (quote (parameterize))) g$0$13562 (if (memv g$0$20528 (quote (foreign-call))) g$0$13564 (if (memv g$0$20528 (quote (syntax-case))) g$0$13572 (if (memv g$0$20528 (quote (syntax))) g$0$13574 (if (memv g$0$20528 (quote (type-descriptor))) g$0$13492 (if (memv g$0$20528 (quote (record-type-descriptor))) g$0$13494 (if (memv g$0$20528 (quote (record-constructor-descriptor))) g$0$13496 (error (quote macro-transformer) (quote "cannot find transformer") g$0$20526))))))))))))))))))) g$0$20526))) (set! g$0$13578 (lambda (g$0$20529) ((lambda (g$0$20531) ((lambda (g$0$20533) (if (if g$0$20533 (begin (quote #f) (apply (lambda (g$0$20535) (if (for-all g$0$13225 g$0$20535) (begin (quote #f) (g$0$12315 (map g$0$13227 g$0$20535))) (quote #f))) g$0$20533)) (quote #f)) (apply (lambda (g$0$20537) (g$0$13512 (list (quote quote) (g$0$12315 (map g$0$13227 g$0$20537))))) g$0$20533) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$20531 (quote ()))))) ((lambda (g$0$20539) (if (g$0$13211 g$0$20539) (begin (quote #f) ((lambda (g$0$20541) (if g$0$20541 (begin (quote #f) ((lambda (g$0$20543) (if g$0$20543 (begin (quote #f) (append g$0$20541 g$0$20543)) (quote #f))) ((letrec ((g$0$20545 (lambda (g$0$20547) (if (g$0$13211 g$0$20547) ((lambda (g$0$20549) (if g$0$20549 (begin (quote #f) ((lambda (g$0$20551) (if g$0$20551 (begin (quote #f) (map cons g$0$20549 g$0$20551)) (quote #f))) (g$0$20545 (g$0$13223 g$0$20547)))) (quote #f))) ((lambda (g$0$20553) (list g$0$20553)) (g$0$13219 g$0$20547))) (if (g$0$13215 g$0$20547) (list (begin (quote opt*) (quote ()))) (quote #f)))))) g$0$20545) (g$0$13223 g$0$20539)))) (quote #f))) ((lambda (g$0$20555) (quote ())) (g$0$13219 g$0$20539)))) (quote #f))) g$0$20531))) g$0$20529))) (set! g$0$13580 (lambda (g$0$20557 g$0$20558) ((lambda (g$0$20561) ((lambda (g$0$20563) (if (if g$0$20563 (begin (quote #f) (apply (lambda (g$0$20565) (if (g$0$13225 g$0$20565) (begin (quote #f) (memq (g$0$13227 g$0$20565) g$0$20558)) (quote #f))) g$0$20563)) (quote #f)) (apply (lambda (g$0$20567) (g$0$13512 (list (quote quote) g$0$20567))) g$0$20563) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$20561 (quote ()))))) ((lambda (g$0$20569) (if (g$0$13211 g$0$20569) (begin (quote #f) ((lambda (g$0$20571) (if g$0$20571 (begin (quote #f) ((lambda (g$0$20573) (if g$0$20573 (begin (quote #f) (append g$0$20571 g$0$20573)) (quote #f))) ((lambda (g$0$20575) (if (g$0$13211 g$0$20575) (begin (quote #f) ((lambda (g$0$20577) (if g$0$20577 (begin (quote #f) ((lambda (g$0$20579) (if g$0$20579 (begin (quote #f) (append g$0$20577 g$0$20579)) (quote #f))) ((lambda (g$0$20581) (if (equal? (g$0$13245 g$0$20581) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$20575)))) (quote #f))) ((lambda (g$0$20583) (list g$0$20583)) (g$0$13219 g$0$20575)))) (quote #f))) (g$0$13223 g$0$20569)))) (quote #f))) ((lambda (g$0$20585) (quote ())) (g$0$13219 g$0$20569)))) (quote #f))) g$0$20561))) g$0$20557))) (set! g$0$13582 (lambda (g$0$20587) (if (procedure? g$0$20587) g$0$20587 (if (symbol? g$0$20587) ((lambda (g$0$20589) (if (memv g$0$20589 (quote (define-record-type))) g$0$13556 (if (memv g$0$20589 (quote (define-struct))) g$0$13554 (if (memv g$0$20589 (quote (include))) g$0$13546 (if (memv g$0$20589 (quote (cond))) g$0$13544 (if (memv g$0$20589 (quote (let))) g$0$13516 (if (memv g$0$20589 (quote (do))) g$0$13536 (if (memv g$0$20589 (quote (or))) g$0$13540 (if (memv g$0$20589 (quote (and))) g$0$13542 (if (memv g$0$20589 (quote (let*))) g$0$13538 (if (memv g$0$20589 (quote (syntax-rules))) g$0$13548 (if (memv g$0$20589 (quote (quasiquote))) g$0$13550 (if (memv g$0$20589 (quote (quasisyntax))) g$0$13552 (if (memv g$0$20589 (quote (with-syntax))) g$0$13514 (if (memv g$0$20589 (quote (identifier-syntax))) g$0$13534 (if (memv g$0$20589 (quote (time))) g$0$13526 (if (memv g$0$20589 (quote (delay))) g$0$13528 (if (memv g$0$20589 (quote (assert))) g$0$13530 (if (memv g$0$20589 (quote (endianness))) g$0$13532 (if (memv g$0$20589 (quote (guard))) g$0$13522 (if (memv g$0$20589 (quote (define-enumeration))) g$0$13524 (if (memv g$0$20589 (quote (trace-lambda))) g$0$13518 (if (memv g$0$20589 (quote (trace-define))) g$0$13520 (if (memv g$0$20589 (quote (define-condition-type))) g$0$13558 (if (memv g$0$20589 (quote (eol-style))) (lambda (g$0$20594) (g$0$13580 g$0$20594 (quote (none lf cr crlf nel crnel ls)))) (if (memv g$0$20589 (quote (error-handling-mode))) (lambda (g$0$20592) (g$0$13580 g$0$20592 (quote (ignore raise replace)))) (if (memv g$0$20589 (quote (buffer-mode))) (lambda (g$0$20590) (g$0$13580 g$0$20590 (quote (none line block)))) (if (memv g$0$20589 (quote (file-options))) g$0$13578 (if (memv g$0$20589 (quote (|...| => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd))) g$0$13560 (error (quote macro-transformer) (quote "invalid macro") g$0$20587)))))))))))))))))))))))))))))) g$0$20587) (error (quote core-macro-transformer) (quote "invalid macro") g$0$20587))))) (set! g$0$13584 (lambda (g$0$20596) (car g$0$20596))) (set! g$0$13586 (lambda (g$0$20598 g$0$20599) ((lambda (g$0$20602) (g$0$13203 (g$0$13193) g$0$20602)) ((g$0$13582 g$0$20598) (g$0$13203 g$0$13195 g$0$20599))))) (set! g$0$13588 (lambda (g$0$20604 g$0$20605) ((lambda (g$0$20608) (g$0$13203 (g$0$13193) g$0$20608)) ((g$0$13584 g$0$20604) (g$0$13203 g$0$13195 g$0$20605))))) (set! g$0$13590 (lambda (g$0$20610 g$0$20611) ((lambda (g$0$20614 g$0$20615) (begin (g$0$12829 g$0$20614) ((lambda (g$0$20618) ((lambda (g$0$20620) ((lambda (g$0$20622) (g$0$13203 (g$0$13193) g$0$20622)) (g$0$20620 (g$0$13203 g$0$13195 g$0$20611)))) (if (procedure? g$0$20618) g$0$20618 (error (quote chi-global-macro) (quote "not a procedure"))))) (symbol-value g$0$20615)))) (car g$0$20610) (cdr g$0$20610)))) (set! g$0$13592 (lambda (g$0$20624 g$0$20625 g$0$20626) (if (null? g$0$20624) (quote ()) ((lambda (g$0$20630) (cons g$0$20630 (g$0$13592 (cdr g$0$20624) g$0$20625 g$0$20626))) (g$0$13596 (car g$0$20624) g$0$20625 g$0$20626))))) (set! g$0$13594 (lambda (g$0$20632 g$0$20633 g$0$20634) ((lambda (g$0$20638) ((lambda (g$0$20640) (if (if g$0$20640 (begin (quote #f) (apply (lambda (g$0$20642 g$0$20643) (quote #t)) g$0$20640)) (quote #f)) (apply (lambda (g$0$20646 g$0$20647) ((lambda (g$0$20650) (cons g$0$20650 (g$0$13592 g$0$20647 g$0$20633 g$0$20634))) (g$0$13596 g$0$20646 g$0$20633 g$0$20634))) g$0$20640) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$20638 (quote ()))))) ((lambda (g$0$20652) (if (g$0$13211 g$0$20652) (begin (quote #f) ((lambda (g$0$20654) (if g$0$20654 (begin (quote #f) ((lambda (g$0$20656) (if g$0$20656 (begin (quote #f) (append g$0$20654 g$0$20656)) (quote #f))) ((letrec ((g$0$20658 (lambda (g$0$20660) (if (g$0$13211 g$0$20660) ((lambda (g$0$20662) (if g$0$20662 (begin (quote #f) ((lambda (g$0$20664) (if g$0$20664 (begin (quote #f) (map cons g$0$20662 g$0$20664)) (quote #f))) (g$0$20658 (g$0$13223 g$0$20660)))) (quote #f))) ((lambda (g$0$20666) (list g$0$20666)) (g$0$13219 g$0$20660))) (if (g$0$13215 g$0$20660) (list (begin (quote rands) (quote ()))) (quote #f)))))) g$0$20658) (g$0$13223 g$0$20652)))) (quote #f))) ((lambda (g$0$20668) (list g$0$20668)) (g$0$13219 g$0$20652)))) (quote #f))) g$0$20638))) g$0$20632))) (set! g$0$13596 (lambda (g$0$20670 g$0$20671 g$0$20672) (call-with-values (lambda () (g$0$13257 g$0$20670 g$0$20671)) (lambda (g$0$20676 g$0$20677 g$0$20678) ((lambda (g$0$20682) (if (memv g$0$20682 (quote (core-macro))) ((lambda (g$0$20819) (g$0$20819 g$0$20670 g$0$20671 g$0$20672)) (g$0$13576 g$0$20677)) (if (memv g$0$20682 (quote (global))) ((lambda (g$0$20815) ((lambda (g$0$20817) ((lambda () (begin ((g$0$13644) g$0$20815) g$0$20817)))) (cdr g$0$20677))) (car g$0$20677)) (if (memv g$0$20682 (quote (core-prim))) ((lambda (g$0$20813) (list (quote primitive) g$0$20813)) g$0$20677) (if (memv g$0$20682 (quote (call))) (g$0$13594 g$0$20670 g$0$20671 g$0$20672) (if (memv g$0$20682 (quote (lexical))) ((lambda (g$0$20811) g$0$20811) g$0$20677) (if (memv g$0$20682 (quote (global-macro global-macro!))) (g$0$13596 (g$0$13590 g$0$20677 g$0$20670) g$0$20671 g$0$20672) (if (memv g$0$20682 (quote (local-macro local-macro!))) (g$0$13596 (g$0$13588 g$0$20677 g$0$20670) g$0$20671 g$0$20672) (if (memv g$0$20682 (quote (macro macro!))) (g$0$13596 (g$0$13586 g$0$20677 g$0$20670) g$0$20671 g$0$20672) (if (memv g$0$20682 (quote (constant))) ((lambda (g$0$20809) (list (quote quote) g$0$20809)) g$0$20677) (if (memv g$0$20682 (quote (set!))) (g$0$13598 g$0$20670 g$0$20671 g$0$20672) (if (memv g$0$20682 (quote (begin))) ((lambda (g$0$20771) ((lambda (g$0$20773) (if (if g$0$20773 (begin (quote #f) (apply (lambda (g$0$20775 g$0$20776) (quote #t)) g$0$20773)) (quote #f)) (apply (lambda (g$0$20779 g$0$20780) (g$0$13108 (quote #f) (g$0$13592 (cons g$0$20779 g$0$20780) g$0$20671 g$0$20672))) g$0$20773) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$20771 (quote ()))))) ((lambda (g$0$20783) (if (g$0$13211 g$0$20783) (begin (quote #f) ((lambda (g$0$20785) (if g$0$20785 (begin (quote #f) ((lambda (g$0$20787) (if g$0$20787 (begin (quote #f) (append g$0$20785 g$0$20787)) (quote #f))) ((lambda (g$0$20789) (if (g$0$13211 g$0$20789) (begin (quote #f) ((lambda (g$0$20791) (if g$0$20791 (begin (quote #f) ((lambda (g$0$20793) (if g$0$20793 (begin (quote #f) (append g$0$20791 g$0$20793)) (quote #f))) ((letrec ((g$0$20795 (lambda (g$0$20797) (if (g$0$13211 g$0$20797) ((lambda (g$0$20799) (if g$0$20799 (begin (quote #f) ((lambda (g$0$20801) (if g$0$20801 (begin (quote #f) (map cons g$0$20799 g$0$20801)) (quote #f))) (g$0$20795 (g$0$13223 g$0$20797)))) (quote #f))) ((lambda (g$0$20803) (list g$0$20803)) (g$0$13219 g$0$20797))) (if (g$0$13215 g$0$20797) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$20795) (g$0$13223 g$0$20789)))) (quote #f))) ((lambda (g$0$20805) (list g$0$20805)) (g$0$13219 g$0$20789)))) (quote #f))) (g$0$13223 g$0$20783)))) (quote #f))) ((lambda (g$0$20807) (quote ())) (g$0$13219 g$0$20783)))) (quote #f))) g$0$20771))) g$0$20670) (if (memv g$0$20682 (quote (let-syntax letrec-syntax))) ((lambda (g$0$20683) ((lambda (g$0$20685) (if (if g$0$20685 (begin (quote #f) (apply (lambda (g$0$20687 g$0$20688 g$0$20689 g$0$20690) (if (g$0$13235 g$0$20687) (void) (error (quote expander) (quote "invalid identifiers") (g$0$13243 g$0$20670 (quote ()))))) g$0$20685)) (quote #f)) (apply (lambda (g$0$20695 g$0$20696 g$0$20697 g$0$20698) ((lambda (g$0$20703) ((lambda (g$0$20705) ((lambda (g$0$20707) ((lambda () (g$0$13108 (quote #f) (g$0$13592 (map (lambda (g$0$20709) (g$0$13205 g$0$20705 g$0$20709)) (cons g$0$20697 g$0$20698)) (append (map cons g$0$20703 g$0$20707) g$0$20671) (append (map cons g$0$20703 g$0$20707) g$0$20672)))))) (map (lambda (g$0$20711) (g$0$13275 (g$0$13630 (if (eq? g$0$20676 (quote let-syntax)) g$0$20711 (g$0$13205 g$0$20705 g$0$20711)) g$0$20672))) g$0$20696))) (g$0$13172 g$0$20695 g$0$20703))) (map g$0$13139 g$0$20695))) g$0$20685) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$20683 (quote ()))))) ((lambda (g$0$20713) (if (g$0$13211 g$0$20713) (begin (quote #f) ((lambda (g$0$20715) (if g$0$20715 (begin (quote #f) ((lambda (g$0$20717) (if g$0$20717 (begin (quote #f) (append g$0$20715 g$0$20717)) (quote #f))) ((lambda (g$0$20719) (if (g$0$13211 g$0$20719) (begin (quote #f) ((lambda (g$0$20721) (if g$0$20721 (begin (quote #f) ((lambda (g$0$20723) (if g$0$20723 (begin (quote #f) (append g$0$20721 g$0$20723)) (quote #f))) ((lambda (g$0$20725) (if (g$0$13211 g$0$20725) (begin (quote #f) ((lambda (g$0$20727) (if g$0$20727 (begin (quote #f) ((lambda (g$0$20729) (if g$0$20729 (begin (quote #f) (append g$0$20727 g$0$20729)) (quote #f))) ((letrec ((g$0$20731 (lambda (g$0$20733) (if (g$0$13211 g$0$20733) ((lambda (g$0$20735) (if g$0$20735 (begin (quote #f) ((lambda (g$0$20737) (if g$0$20737 (begin (quote #f) (map cons g$0$20735 g$0$20737)) (quote #f))) (g$0$20731 (g$0$13223 g$0$20733)))) (quote #f))) ((lambda (g$0$20739) (list g$0$20739)) (g$0$13219 g$0$20733))) (if (g$0$13215 g$0$20733) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) g$0$20731) (g$0$13223 g$0$20725)))) (quote #f))) ((lambda (g$0$20741) (list g$0$20741)) (g$0$13219 g$0$20725)))) (quote #f))) (g$0$13223 g$0$20719)))) (quote #f))) ((letrec ((g$0$20743 (lambda (g$0$20745) (if (g$0$13211 g$0$20745) ((lambda (g$0$20747) (if g$0$20747 (begin (quote #f) ((lambda (g$0$20749) (if g$0$20749 (begin (quote #f) (map cons g$0$20747 g$0$20749)) (quote #f))) (g$0$20743 (g$0$13223 g$0$20745)))) (quote #f))) ((lambda (g$0$20751) (if (g$0$13211 g$0$20751) (begin (quote #f) ((lambda (g$0$20753) (if g$0$20753 (begin (quote #f) ((lambda (g$0$20755) (if g$0$20755 (begin (quote #f) (append g$0$20753 g$0$20755)) (quote #f))) ((lambda (g$0$20757) (if (g$0$13211 g$0$20757) (begin (quote #f) ((lambda (g$0$20759) (if g$0$20759 (begin (quote #f) ((lambda (g$0$20761) (if g$0$20761 (begin (quote #f) (append g$0$20759 g$0$20761)) (quote #f))) ((lambda (g$0$20763) (if (equal? (g$0$13245 g$0$20763) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$20757)))) (quote #f))) ((lambda (g$0$20765) (list g$0$20765)) (g$0$13219 g$0$20757)))) (quote #f))) (g$0$13223 g$0$20751)))) (quote #f))) ((lambda (g$0$20767) (list g$0$20767)) (g$0$13219 g$0$20751)))) (quote #f))) (g$0$13219 g$0$20745))) (if (g$0$13215 g$0$20745) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) g$0$20743) (g$0$13219 g$0$20719)))) (quote #f))) (g$0$13223 g$0$20713)))) (quote #f))) ((lambda (g$0$20769) (quote ())) (g$0$13219 g$0$20713)))) (quote #f))) g$0$20683))) g$0$20670) (if (memv g$0$20682 (quote (displaced-lexical))) (error (quote expander) (quote "identifier out of context") (g$0$13243 g$0$20670 (quote ()))) (if (memv g$0$20682 (quote (syntax))) (error (quote expander) (quote "reference to pattern variable outside a syntax form") (g$0$13243 g$0$20670 (quote ()))) (if (memv g$0$20682 (quote (define define-syntax module import))) (error (quote expander) (quote "invalid expression") (g$0$13243 g$0$20670 (quote ()))) (error (quote expander) (quote "invalid expression") (g$0$13243 g$0$20670 (quote ()))))))))))))))))))) g$0$20676))))) (set! g$0$13598 (lambda (g$0$20821 g$0$20822 g$0$20823) ((lambda (g$0$20827) ((lambda (g$0$20829) (if (if g$0$20829 (begin (quote #f) (apply (lambda (g$0$20831 g$0$20832) (g$0$13225 g$0$20831)) g$0$20829)) (quote #f)) (apply (lambda (g$0$20835 g$0$20836) (call-with-values (lambda () (g$0$13257 g$0$20835 g$0$20822)) (lambda (g$0$20839 g$0$20840 g$0$20841) ((lambda (g$0$20845) (if (memv g$0$20845 (quote (lexical))) (list (quote set!) g$0$20840 (g$0$13596 g$0$20836 g$0$20822 g$0$20823)) (if (memv g$0$20845 (quote (global core-prim))) (error (quote expander) (quote "cannot modify imported identifier in") (g$0$13243 g$0$20821 (quote ()))) (if (memv g$0$20845 (quote (global-macro!))) (g$0$13596 (g$0$13590 g$0$20840 g$0$20821) g$0$20822 g$0$20823) (if (memv g$0$20845 (quote (local-macro!))) (g$0$13596 (g$0$13588 g$0$20840 g$0$20821) g$0$20822 g$0$20823) (error (quote expander) (quote "invalid syntax") (g$0$13245 g$0$20821))))))) g$0$20839)))) g$0$20829) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$20827 (quote ()))))) ((lambda (g$0$20846) (if (g$0$13211 g$0$20846) (begin (quote #f) ((lambda (g$0$20848) (if g$0$20848 (begin (quote #f) ((lambda (g$0$20850) (if g$0$20850 (begin (quote #f) (append g$0$20848 g$0$20850)) (quote #f))) ((lambda (g$0$20852) (if (g$0$13211 g$0$20852) (begin (quote #f) ((lambda (g$0$20854) (if g$0$20854 (begin (quote #f) ((lambda (g$0$20856) (if g$0$20856 (begin (quote #f) (append g$0$20854 g$0$20856)) (quote #f))) ((lambda (g$0$20858) (if (g$0$13211 g$0$20858) (begin (quote #f) ((lambda (g$0$20860) (if g$0$20860 (begin (quote #f) ((lambda (g$0$20862) (if g$0$20862 (begin (quote #f) (append g$0$20860 g$0$20862)) (quote #f))) ((lambda (g$0$20864) (if (equal? (g$0$13245 g$0$20864) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$20858)))) (quote #f))) ((lambda (g$0$20866) (list g$0$20866)) (g$0$13219 g$0$20858)))) (quote #f))) (g$0$13223 g$0$20852)))) (quote #f))) ((lambda (g$0$20868) (list g$0$20868)) (g$0$13219 g$0$20852)))) (quote #f))) (g$0$13223 g$0$20846)))) (quote #f))) ((lambda (g$0$20870) (quote ())) (g$0$13219 g$0$20846)))) (quote #f))) g$0$20827))) g$0$20821))) (set! g$0$13600 (lambda (g$0$20872 g$0$20873 g$0$20874 g$0$20875) ((lambda (g$0$20880) ((lambda (g$0$20882) (if (if g$0$20882 (begin (quote #f) (apply (lambda (g$0$20884) (quote #t)) g$0$20882)) (quote #f)) (apply (lambda (g$0$20886) (if (g$0$13235 g$0$20886) ((lambda (g$0$20888 g$0$20889) (values g$0$20888 (g$0$13612 (g$0$13205 (g$0$13172 g$0$20886 g$0$20889) g$0$20873) (g$0$13482 g$0$20889 g$0$20888 g$0$20874) g$0$20875))) (map g$0$13135 g$0$20886) (map g$0$13139 g$0$20886)) (error (quote expander) (quote "invalid fmls") (g$0$13243 g$0$20872 (quote ()))))) g$0$20882) ((lambda (g$0$20892) ((lambda (g$0$20894) (if (if g$0$20894 (begin (quote #f) (apply (lambda (g$0$20896 g$0$20897) (quote #t)) g$0$20894)) (quote #f)) (apply (lambda (g$0$20900 g$0$20901) (if (g$0$13235 (cons g$0$20901 g$0$20900)) ((lambda (g$0$20904 g$0$20905 g$0$20906 g$0$20907) (values (append g$0$20904 g$0$20906) (g$0$13612 (g$0$13205 (g$0$13172 (cons g$0$20901 g$0$20900) (cons g$0$20907 g$0$20905)) g$0$20873) (g$0$13482 (cons g$0$20907 g$0$20905) (cons g$0$20906 g$0$20904) g$0$20874) g$0$20875))) (map g$0$13135 g$0$20900) (map g$0$13139 g$0$20900) (g$0$13135 g$0$20901) (g$0$13139 g$0$20901)) (error (quote expander) (quote "invalid fmls") (g$0$13243 g$0$20872 (quote ()))))) g$0$20894) ((lambda (g$0$20912) ((lambda (g$0$20914) (if (if g$0$20914 (begin (quote #f) (apply (lambda () (quote #t)) g$0$20914)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid fmls") (g$0$13243 g$0$20872 (quote ())))) g$0$20914) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$20912 (quote ()))))) ((lambda (g$0$20916) (quote ())) g$0$20912))) g$0$20892))) ((letrec ((g$0$20918 (lambda (g$0$20924) (if (g$0$13211 g$0$20924) ((lambda (g$0$20926) (if g$0$20926 (begin (quote #f) ((lambda (g$0$20928) (if g$0$20928 (begin (quote #f) (cons (map cons g$0$20926 (car g$0$20928)) (cdr g$0$20928))) (quote #f))) (g$0$20918 (g$0$13223 g$0$20924)))) (quote #f))) ((lambda (g$0$20930) (list g$0$20930)) (g$0$13219 g$0$20924))) ((lambda (g$0$20932) (if g$0$20932 (begin (quote #f) (cons (list (begin (quote x*) (quote ()))) g$0$20932)) (quote #f))) ((lambda (g$0$20934) (list g$0$20934)) g$0$20924)))))) (lambda (g$0$20920) ((lambda (g$0$20922) (if g$0$20922 (begin (quote #f) (append (car g$0$20922) (cdr g$0$20922))) (quote #f))) (g$0$20918 g$0$20920)))) g$0$20892))) g$0$20880))) ((letrec ((g$0$20936 (lambda (g$0$20938) (if (g$0$13211 g$0$20938) ((lambda (g$0$20940) (if g$0$20940 (begin (quote #f) ((lambda (g$0$20942) (if g$0$20942 (begin (quote #f) (map cons g$0$20940 g$0$20942)) (quote #f))) (g$0$20936 (g$0$13223 g$0$20938)))) (quote #f))) ((lambda (g$0$20944) (list g$0$20944)) (g$0$13219 g$0$20938))) (if (g$0$13215 g$0$20938) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$20936) g$0$20880))) g$0$20872))) (set! g$0$13602 (lambda (g$0$20946 g$0$20947 g$0$20948 g$0$20949) (if (null? g$0$20946) (values (quote ()) (quote ())) (call-with-values (lambda () (g$0$13600 (car g$0$20946) (car g$0$20947) g$0$20948 g$0$20949)) (lambda (g$0$20954 g$0$20955) (call-with-values (lambda () (g$0$13602 (cdr g$0$20946) (cdr g$0$20947) g$0$20948 g$0$20949)) (lambda (g$0$20958 g$0$20959) (values (cons g$0$20954 g$0$20958) (cons g$0$20955 g$0$20959))))))))) (set! g$0$13604 (lambda (g$0$20962 g$0$20963 g$0$20964) ((lambda (g$0$20968) (if (memv g$0$20968 (quote (defun))) ((lambda (g$0$20973) ((lambda (g$0$20975 g$0$20976) (call-with-values (lambda () (g$0$13600 g$0$20975 g$0$20976 g$0$20963 g$0$20964)) (lambda (g$0$20979 g$0$20980) (g$0$13114 (quote #f) g$0$20979 g$0$20980)))) (car g$0$20973) (cdr g$0$20973))) (cdr g$0$20962)) (if (memv g$0$20968 (quote (expr))) ((lambda (g$0$20971) (g$0$13596 g$0$20971 g$0$20963 g$0$20964)) (cdr g$0$20962)) (if (memv g$0$20968 (quote (top-expr))) ((lambda (g$0$20969) (g$0$13108 (quote #f) (list (g$0$13596 g$0$20969 g$0$20963 g$0$20964) (g$0$13107)))) (cdr g$0$20962)) (error (quote chi-rhs) (quote "invalid rhs") g$0$20962))))) (car g$0$20962)))) (set! g$0$13606 (lambda (g$0$20983 g$0$20984 g$0$20985) (letrec ((g$0$20989 (lambda (g$0$20991) (if (null? g$0$20991) (quote ()) ((lambda (g$0$20993) (cons g$0$20993 (g$0$20989 (cdr g$0$20991)))) (g$0$13604 (car g$0$20991) g$0$20984 g$0$20985)))))) (g$0$20989 g$0$20983)))) (set! g$0$13608 (lambda (g$0$20995 g$0$20996 g$0$20997) (if (null? g$0$20996) (quote #f) (if (g$0$13231 g$0$20995 (car g$0$20996)) (car g$0$20997) (g$0$13608 g$0$20995 (cdr g$0$20996) (cdr g$0$20997)))))) (set! g$0$13610 (lambda (g$0$21001) (letrec ((g$0$21003 (lambda (g$0$21005 g$0$21006) (if (null? g$0$21005) g$0$21006 ((lambda (g$0$21009) (if g$0$21009 ((lambda (g$0$21011) (g$0$21003 (cdr g$0$21005) (cons (list (car g$0$21005) g$0$21011) g$0$21006))) g$0$21009) (g$0$21003 (cdr g$0$21005) g$0$21006))) (g$0$13608 (car g$0$21005) (cdr g$0$21005) (cdr g$0$21005))))))) (g$0$21003 g$0$21001 (quote ()))))) (set! g$0$13612 (lambda (g$0$21013 g$0$21014 g$0$21015) ((lambda (g$0$21019) (call-with-values (lambda () (g$0$13618 (map (lambda (g$0$21021) (g$0$13205 g$0$21019 g$0$21021)) (g$0$13221 g$0$21013)) g$0$21014 g$0$21015 (quote ()) (quote ()) (quote ()) (quote ()) g$0$21019 (quote #f))) (lambda (g$0$21023 g$0$21024 g$0$21025 g$0$21026 g$0$21027 g$0$21028 g$0$21029) (begin (if (null? g$0$21023) (error (quote expander) (quote "no expression in body") (g$0$13243 g$0$21023 (quote ()))) (void)) ((lambda (g$0$21037 g$0$21038) (g$0$13105 (quote #f) (reverse g$0$21026) (reverse g$0$21037) (g$0$13108 (quote #f) g$0$21038))) (g$0$13606 g$0$21027 g$0$21024 g$0$21025) (g$0$13592 (append (apply append (reverse g$0$21028)) g$0$21023) g$0$21024 g$0$21025)))))) (g$0$13162)))) (set! g$0$13614 (lambda (g$0$21041) ((lambda (g$0$21043) ((lambda (g$0$21045) (if (if g$0$21045 (begin (quote #f) (apply (lambda (g$0$21047 g$0$21048) (quote #t)) g$0$21045)) (quote #f)) (apply (lambda (g$0$21051 g$0$21052) (begin (if (for-all g$0$13225 g$0$21051) (void) (error (quote expander) (quote "module exports must be identifiers") (g$0$13243 g$0$21041 (quote ())))) (values (quote #f) g$0$21051 g$0$21052))) g$0$21045) ((lambda (g$0$21055) ((lambda (g$0$21057) (if (if g$0$21057 (begin (quote #f) (apply (lambda (g$0$21059 g$0$21060 g$0$21061) (quote #t)) g$0$21057)) (quote #f)) (apply (lambda (g$0$21065 g$0$21066 g$0$21067) (begin (if (g$0$13225 g$0$21065) (void) (error (quote expander) (quote "module name must be an identifier") (g$0$13243 g$0$21041 (quote ())))) (if (for-all g$0$13225 g$0$21066) (void) (error (quote expander) (quote "module exports must be identifiers") (g$0$13243 g$0$21041 (quote ())))) (values g$0$21065 g$0$21066 g$0$21067))) g$0$21057) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$21055 (quote ()))))) ((lambda (g$0$21071) (if (g$0$13211 g$0$21071) (begin (quote #f) ((lambda (g$0$21073) (if g$0$21073 (begin (quote #f) ((lambda (g$0$21075) (if g$0$21075 (begin (quote #f) (append g$0$21073 g$0$21075)) (quote #f))) ((lambda (g$0$21077) (if (g$0$13211 g$0$21077) (begin (quote #f) ((lambda (g$0$21079) (if g$0$21079 (begin (quote #f) ((lambda (g$0$21081) (if g$0$21081 (begin (quote #f) (append g$0$21079 g$0$21081)) (quote #f))) ((lambda (g$0$21083) (if (g$0$13211 g$0$21083) (begin (quote #f) ((lambda (g$0$21085) (if g$0$21085 (begin (quote #f) ((lambda (g$0$21087) (if g$0$21087 (begin (quote #f) (append g$0$21085 g$0$21087)) (quote #f))) ((letrec ((g$0$21089 (lambda (g$0$21091) (if (g$0$13211 g$0$21091) ((lambda (g$0$21093) (if g$0$21093 (begin (quote #f) ((lambda (g$0$21095) (if g$0$21095 (begin (quote #f) (map cons g$0$21093 g$0$21095)) (quote #f))) (g$0$21089 (g$0$13223 g$0$21091)))) (quote #f))) ((lambda (g$0$21097) (list g$0$21097)) (g$0$13219 g$0$21091))) (if (g$0$13215 g$0$21091) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$21089) (g$0$13223 g$0$21083)))) (quote #f))) ((letrec ((g$0$21099 (lambda (g$0$21101) (if (g$0$13211 g$0$21101) ((lambda (g$0$21103) (if g$0$21103 (begin (quote #f) ((lambda (g$0$21105) (if g$0$21105 (begin (quote #f) (map cons g$0$21103 g$0$21105)) (quote #f))) (g$0$21099 (g$0$13223 g$0$21101)))) (quote #f))) ((lambda (g$0$21107) (list g$0$21107)) (g$0$13219 g$0$21101))) (if (g$0$13215 g$0$21101) (list (begin (quote export*) (quote ()))) (quote #f)))))) g$0$21099) (g$0$13219 g$0$21083)))) (quote #f))) (g$0$13223 g$0$21077)))) (quote #f))) ((lambda (g$0$21109) (list g$0$21109)) (g$0$13219 g$0$21077)))) (quote #f))) (g$0$13223 g$0$21071)))) (quote #f))) ((lambda (g$0$21111) (quote ())) (g$0$13219 g$0$21071)))) (quote #f))) g$0$21055))) g$0$21043))) ((lambda (g$0$21113) (if (g$0$13211 g$0$21113) (begin (quote #f) ((lambda (g$0$21115) (if g$0$21115 (begin (quote #f) ((lambda (g$0$21117) (if g$0$21117 (begin (quote #f) (append g$0$21115 g$0$21117)) (quote #f))) ((lambda (g$0$21119) (if (g$0$13211 g$0$21119) (begin (quote #f) ((lambda (g$0$21121) (if g$0$21121 (begin (quote #f) ((lambda (g$0$21123) (if g$0$21123 (begin (quote #f) (append g$0$21121 g$0$21123)) (quote #f))) ((letrec ((g$0$21125 (lambda (g$0$21127) (if (g$0$13211 g$0$21127) ((lambda (g$0$21129) (if g$0$21129 (begin (quote #f) ((lambda (g$0$21131) (if g$0$21131 (begin (quote #f) (map cons g$0$21129 g$0$21131)) (quote #f))) (g$0$21125 (g$0$13223 g$0$21127)))) (quote #f))) ((lambda (g$0$21133) (list g$0$21133)) (g$0$13219 g$0$21127))) (if (g$0$13215 g$0$21127) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$21125) (g$0$13223 g$0$21119)))) (quote #f))) ((letrec ((g$0$21135 (lambda (g$0$21137) (if (g$0$13211 g$0$21137) ((lambda (g$0$21139) (if g$0$21139 (begin (quote #f) ((lambda (g$0$21141) (if g$0$21141 (begin (quote #f) (map cons g$0$21139 g$0$21141)) (quote #f))) (g$0$21135 (g$0$13223 g$0$21137)))) (quote #f))) ((lambda (g$0$21143) (list g$0$21143)) (g$0$13219 g$0$21137))) (if (g$0$13215 g$0$21137) (list (begin (quote export*) (quote ()))) (quote #f)))))) g$0$21135) (g$0$13219 g$0$21119)))) (quote #f))) (g$0$13223 g$0$21113)))) (quote #f))) ((lambda (g$0$21145) (quote ())) (g$0$13219 g$0$21113)))) (quote #f))) g$0$21043))) g$0$21041))) (set! g$0$13616 (lambda (g$0$21147 g$0$21148 g$0$21149 g$0$21150 g$0$21151 g$0$21152 g$0$21153) (call-with-values (lambda () (g$0$13614 g$0$21147)) (lambda (g$0$21161 g$0$21162 g$0$21163) ((lambda (g$0$21167) ((lambda (g$0$21169) ((lambda () (call-with-values (lambda () (g$0$13618 g$0$21169 g$0$21148 g$0$21149 g$0$21150 g$0$21151 g$0$21152 g$0$21153 g$0$21167 (quote #f))) (lambda (g$0$21171 g$0$21172 g$0$21173 g$0$21174 g$0$21175 g$0$21176 g$0$21177) ((lambda (g$0$21185 g$0$21186) (if (not g$0$21161) (values g$0$21174 g$0$21175 g$0$21162 g$0$21185 g$0$21172 g$0$21173 g$0$21186 g$0$21177) ((lambda (g$0$21189 g$0$21190) (values g$0$21174 g$0$21175 (list g$0$21161) (list g$0$21189) (cons (cons g$0$21189 (cons (quote $module) g$0$21190)) g$0$21172) (cons (cons g$0$21189 (cons (quote $module) g$0$21190)) g$0$21173) g$0$21186 g$0$21177)) (g$0$13139 (quote module)) (cons g$0$21162 g$0$21185)))) (map (lambda (g$0$21193) ((lambda (g$0$21195) (if g$0$21195 g$0$21195 (begin (quote #f) (error (quote expander) (quote "cannot find module export") (g$0$13243 g$0$21193 (quote ())))))) (g$0$13247 (g$0$13201 (g$0$13227 g$0$21193) (g$0$13181 g$0$21193) (list g$0$21167))))) g$0$21162) (cons g$0$21171 g$0$21176))))))) (map (lambda (g$0$21197) (g$0$13205 g$0$21167 g$0$21197)) (g$0$13221 g$0$21163)))) (g$0$13162)))))) (set! g$0$13618 (lambda (g$0$21199 g$0$21200 g$0$21201 g$0$21202 g$0$21203 g$0$21204 g$0$21205 g$0$21206 g$0$21207) (if (null? g$0$21199) (values g$0$21199 g$0$21200 g$0$21201 g$0$21202 g$0$21203 g$0$21204 g$0$21205) ((lambda (g$0$21217) (call-with-values (lambda () (g$0$13257 g$0$21217 g$0$21200)) (lambda (g$0$21219 g$0$21220 g$0$21221) ((lambda (g$0$21225) ((lambda (g$0$21227) (if (memv g$0$21227 (quote (define))) (call-with-values (lambda () (g$0$13474 g$0$21217)) (lambda (g$0$21413 g$0$21414) (begin (if (g$0$13239 g$0$21413 g$0$21225) (error (quote expander) (quote "cannot redefine keyword") (g$0$13243 g$0$21217 (quote ()))) (void)) ((lambda (g$0$21417 g$0$21418) (begin (g$0$13164 g$0$21206 g$0$21413 g$0$21418) (g$0$13618 (cdr g$0$21199) (g$0$13480 g$0$21418 g$0$21417 g$0$21200) g$0$21201 (cons g$0$21417 g$0$21202) (cons g$0$21414 g$0$21203) g$0$21204 g$0$21225 g$0$21206 g$0$21207))) (g$0$13135 g$0$21413) (g$0$13139 g$0$21413))))) (if (memv g$0$21227 (quote (define-syntax))) (call-with-values (lambda () (g$0$13476 g$0$21217)) (lambda (g$0$21403 g$0$21404) (begin (if (g$0$13239 g$0$21403 g$0$21225) (error (quote expander) (quote "cannot redefine keyword") (g$0$13243 g$0$21217 (quote ()))) (void)) ((lambda (g$0$21407 g$0$21408) (begin (g$0$13164 g$0$21206 g$0$21403 g$0$21407) ((lambda (g$0$21411) (g$0$13618 (cdr g$0$21199) (cons (cons g$0$21407 g$0$21411) g$0$21200) (cons (cons g$0$21407 g$0$21411) g$0$21201) g$0$21202 g$0$21203 g$0$21204 g$0$21225 g$0$21206 g$0$21207)) (g$0$13275 g$0$21408)))) (g$0$13139 g$0$21403) (g$0$13630 g$0$21404 g$0$21201))))) (if (memv g$0$21227 (quote (let-syntax letrec-syntax))) ((lambda (g$0$21327) ((lambda (g$0$21329) (if (if g$0$21329 (begin (quote #f) (apply (lambda (g$0$21331 g$0$21332 g$0$21333) (if (g$0$13235 g$0$21331) (void) (error (quote expander) (quote "invalid identifiers") (g$0$13243 g$0$21217 (quote ()))))) g$0$21329)) (quote #f)) (apply (lambda (g$0$21337 g$0$21338 g$0$21339) ((lambda (g$0$21343) ((lambda (g$0$21345) ((lambda (g$0$21347) ((lambda () (g$0$13618 (append (map (lambda (g$0$21349) (g$0$13205 g$0$21345 g$0$21349)) g$0$21339) (cdr g$0$21199)) (append (map cons g$0$21343 g$0$21347) g$0$21200) (append (map cons g$0$21343 g$0$21347) g$0$21201) g$0$21202 g$0$21203 g$0$21204 g$0$21225 g$0$21206 g$0$21207)))) (map (lambda (g$0$21351) (g$0$13275 (g$0$13630 (if (eq? g$0$21219 (quote let-syntax)) g$0$21351 (g$0$13205 g$0$21345 g$0$21351)) g$0$21201))) g$0$21338))) (g$0$13172 g$0$21337 g$0$21343))) (map g$0$13139 g$0$21337))) g$0$21329) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$21327 (quote ()))))) ((lambda (g$0$21353) (if (g$0$13211 g$0$21353) (begin (quote #f) ((lambda (g$0$21355) (if g$0$21355 (begin (quote #f) ((lambda (g$0$21357) (if g$0$21357 (begin (quote #f) (append g$0$21355 g$0$21357)) (quote #f))) ((lambda (g$0$21359) (if (g$0$13211 g$0$21359) (begin (quote #f) ((lambda (g$0$21361) (if g$0$21361 (begin (quote #f) ((lambda (g$0$21363) (if g$0$21363 (begin (quote #f) (append g$0$21361 g$0$21363)) (quote #f))) ((letrec ((g$0$21365 (lambda (g$0$21367) (if (g$0$13211 g$0$21367) ((lambda (g$0$21369) (if g$0$21369 (begin (quote #f) ((lambda (g$0$21371) (if g$0$21371 (begin (quote #f) (map cons g$0$21369 g$0$21371)) (quote #f))) (g$0$21365 (g$0$13223 g$0$21367)))) (quote #f))) ((lambda (g$0$21373) (list g$0$21373)) (g$0$13219 g$0$21367))) (if (g$0$13215 g$0$21367) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) g$0$21365) (g$0$13223 g$0$21359)))) (quote #f))) ((letrec ((g$0$21375 (lambda (g$0$21377) (if (g$0$13211 g$0$21377) ((lambda (g$0$21379) (if g$0$21379 (begin (quote #f) ((lambda (g$0$21381) (if g$0$21381 (begin (quote #f) (map cons g$0$21379 g$0$21381)) (quote #f))) (g$0$21375 (g$0$13223 g$0$21377)))) (quote #f))) ((lambda (g$0$21383) (if (g$0$13211 g$0$21383) (begin (quote #f) ((lambda (g$0$21385) (if g$0$21385 (begin (quote #f) ((lambda (g$0$21387) (if g$0$21387 (begin (quote #f) (append g$0$21385 g$0$21387)) (quote #f))) ((lambda (g$0$21389) (if (g$0$13211 g$0$21389) (begin (quote #f) ((lambda (g$0$21391) (if g$0$21391 (begin (quote #f) ((lambda (g$0$21393) (if g$0$21393 (begin (quote #f) (append g$0$21391 g$0$21393)) (quote #f))) ((lambda (g$0$21395) (if (equal? (g$0$13245 g$0$21395) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$21389)))) (quote #f))) ((lambda (g$0$21397) (list g$0$21397)) (g$0$13219 g$0$21389)))) (quote #f))) (g$0$13223 g$0$21383)))) (quote #f))) ((lambda (g$0$21399) (list g$0$21399)) (g$0$13219 g$0$21383)))) (quote #f))) (g$0$13219 g$0$21377))) (if (g$0$13215 g$0$21377) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) g$0$21375) (g$0$13219 g$0$21359)))) (quote #f))) (g$0$13223 g$0$21353)))) (quote #f))) ((lambda (g$0$21401) (quote ())) (g$0$13219 g$0$21353)))) (quote #f))) g$0$21327))) g$0$21217) (if (memv g$0$21227 (quote (begin))) ((lambda (g$0$21301) ((lambda (g$0$21303) (if (if g$0$21303 (begin (quote #f) (apply (lambda (g$0$21305) (quote #t)) g$0$21303)) (quote #f)) (apply (lambda (g$0$21307) (g$0$13618 (append g$0$21307 (cdr g$0$21199)) g$0$21200 g$0$21201 g$0$21202 g$0$21203 g$0$21204 g$0$21225 g$0$21206 g$0$21207)) g$0$21303) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$21301 (quote ()))))) ((lambda (g$0$21309) (if (g$0$13211 g$0$21309) (begin (quote #f) ((lambda (g$0$21311) (if g$0$21311 (begin (quote #f) ((lambda (g$0$21313) (if g$0$21313 (begin (quote #f) (append g$0$21311 g$0$21313)) (quote #f))) ((letrec ((g$0$21315 (lambda (g$0$21317) (if (g$0$13211 g$0$21317) ((lambda (g$0$21319) (if g$0$21319 (begin (quote #f) ((lambda (g$0$21321) (if g$0$21321 (begin (quote #f) (map cons g$0$21319 g$0$21321)) (quote #f))) (g$0$21315 (g$0$13223 g$0$21317)))) (quote #f))) ((lambda (g$0$21323) (list g$0$21323)) (g$0$13219 g$0$21317))) (if (g$0$13215 g$0$21317) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$21315) (g$0$13223 g$0$21309)))) (quote #f))) ((lambda (g$0$21325) (quote ())) (g$0$13219 g$0$21309)))) (quote #f))) g$0$21301))) g$0$21217) (if (memv g$0$21227 (quote (global-macro global-macro!))) (g$0$13618 (cons (g$0$13205 g$0$21206 (g$0$13590 g$0$21220 g$0$21217)) (cdr g$0$21199)) g$0$21200 g$0$21201 g$0$21202 g$0$21203 g$0$21204 g$0$21225 g$0$21206 g$0$21207) (if (memv g$0$21227 (quote (local-macro local-macro!))) (g$0$13618 (cons (g$0$13205 g$0$21206 (g$0$13588 g$0$21220 g$0$21217)) (cdr g$0$21199)) g$0$21200 g$0$21201 g$0$21202 g$0$21203 g$0$21204 g$0$21225 g$0$21206 g$0$21207) (if (memv g$0$21227 (quote (macro macro!))) (g$0$13618 (cons (g$0$13205 g$0$21206 (g$0$13586 g$0$21220 g$0$21217)) (cdr g$0$21199)) g$0$21200 g$0$21201 g$0$21202 g$0$21203 g$0$21204 g$0$21225 g$0$21206 g$0$21207) (if (memv g$0$21227 (quote (module))) (call-with-values (lambda () (g$0$13616 g$0$21217 g$0$21200 g$0$21201 g$0$21202 g$0$21203 g$0$21204 g$0$21225)) (lambda (g$0$21281 g$0$21282 g$0$21283 g$0$21284 g$0$21285 g$0$21286 g$0$21287 g$0$21288) (begin (for-each (lambda (g$0$21297 g$0$21298) (g$0$13164 g$0$21206 g$0$21297 g$0$21298)) g$0$21283 g$0$21284) (g$0$13618 (cdr g$0$21199) g$0$21285 g$0$21286 g$0$21281 g$0$21282 g$0$21287 g$0$21288 g$0$21206 g$0$21207)))) (if (memv g$0$21227 (quote (import))) (begin ((lambda () ((lambda (g$0$21228) (begin (set! g$0$21228 (lambda (g$0$21230 g$0$21231) ((lambda (g$0$21234) ((lambda (g$0$21236) (if (if g$0$21236 (begin (quote #f) (apply (lambda (g$0$21238) (g$0$13225 g$0$21238)) g$0$21236)) (quote #f)) (apply (lambda (g$0$21240) (call-with-values (lambda () (g$0$13257 g$0$21240 g$0$21231)) (lambda (g$0$21242 g$0$21243 g$0$21244) ((lambda (g$0$21248) (if (memv g$0$21248 (quote ($module))) ((lambda (g$0$21249) ((lambda (g$0$21251 g$0$21252) (values g$0$21251 g$0$21252)) (car g$0$21249) (cdr g$0$21249))) g$0$21243) (error (quote expander) (quote "invalid import") (g$0$13243 g$0$21230 (quote ()))))) g$0$21242)))) g$0$21236) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$21234 (quote ()))))) ((lambda (g$0$21255) (if (g$0$13211 g$0$21255) (begin (quote #f) ((lambda (g$0$21257) (if g$0$21257 (begin (quote #f) ((lambda (g$0$21259) (if g$0$21259 (begin (quote #f) (append g$0$21257 g$0$21259)) (quote #f))) ((lambda (g$0$21261) (if (g$0$13211 g$0$21261) (begin (quote #f) ((lambda (g$0$21263) (if g$0$21263 (begin (quote #f) ((lambda (g$0$21265) (if g$0$21265 (begin (quote #f) (append g$0$21263 g$0$21265)) (quote #f))) ((lambda (g$0$21267) (if (equal? (g$0$13245 g$0$21267) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$21261)))) (quote #f))) ((lambda (g$0$21269) (list g$0$21269)) (g$0$13219 g$0$21261)))) (quote #f))) (g$0$13223 g$0$21255)))) (quote #f))) ((lambda (g$0$21271) (quote ())) (g$0$13219 g$0$21255)))) (quote #f))) g$0$21234))) g$0$21230))) (call-with-values (lambda () (g$0$21228 g$0$21217 g$0$21200)) (lambda (g$0$21273 g$0$21274) (for-each (lambda (g$0$21277 g$0$21278) (g$0$13164 g$0$21206 g$0$21277 g$0$21278)) g$0$21273 g$0$21274))))) (quote #f)))) (g$0$13618 (cdr g$0$21199) g$0$21200 g$0$21201 g$0$21202 g$0$21203 g$0$21204 g$0$21225 g$0$21206 g$0$21207)) (if g$0$21207 (g$0$13618 (cdr g$0$21199) g$0$21200 g$0$21201 (cons (g$0$13135 (quote dummy)) g$0$21202) (cons (cons (quote top-expr) g$0$21217) g$0$21203) g$0$21204 g$0$21225 g$0$21206 g$0$21207) (values g$0$21199 g$0$21200 g$0$21201 g$0$21202 g$0$21203 g$0$21204 g$0$21225)))))))))))) g$0$21219)) (if (g$0$13225 g$0$21221) (cons g$0$21221 g$0$21205) g$0$21205))))) (car g$0$21199))))) (set! g$0$13620 (lambda (g$0$21421 g$0$21422 g$0$21423) (begin (g$0$12833 (g$0$13711) g$0$21421 g$0$21422) (g$0$12832 (g$0$13711) g$0$21422 g$0$21423)))) (set! g$0$13622 (lambda (g$0$21427 g$0$21428) (g$0$13624 g$0$21427 g$0$21428))) (set! g$0$13624 (lambda (g$0$21431 g$0$21432) ((lambda (g$0$21435) ((lambda (g$0$21437) ((lambda (g$0$21439) (if (memv g$0$21439 (quote (global))) ((lambda (g$0$21440) ((lambda (g$0$21442 g$0$21443) (if (eq? g$0$21442 (g$0$13711)) g$0$21443 (error (quote expander) (quote "cannot modify imported binding") (g$0$13243 g$0$21432 (quote ()))))) (car g$0$21440) (cdr g$0$21440))) (g$0$13255 g$0$21437)) (error (quote expander) (quote "cannot modify binding in") (g$0$13243 g$0$21432 (quote ()))))) (g$0$13253 g$0$21437))) (g$0$12831 g$0$21435))) (g$0$13247 g$0$21431)))) (set! g$0$13626 (lambda (g$0$21446) ((lambda (g$0$21448) ((lambda (g$0$21450) (if (if g$0$21450 (begin (quote #f) (apply (lambda (g$0$21452 g$0$21453) (g$0$13225 g$0$21452)) g$0$21450)) (quote #f)) (apply (lambda (g$0$21456 g$0$21457) ((lambda (g$0$21460) ((lambda (g$0$21462) (values g$0$21460 g$0$21462)) (g$0$13596 g$0$21457 (quote ()) (quote ())))) (g$0$13624 g$0$21456 g$0$21446))) g$0$21450) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$21448 (quote ()))))) ((lambda (g$0$21464) (if (g$0$13211 g$0$21464) (begin (quote #f) ((lambda (g$0$21466) (if g$0$21466 (begin (quote #f) ((lambda (g$0$21468) (if g$0$21468 (begin (quote #f) (append g$0$21466 g$0$21468)) (quote #f))) ((lambda (g$0$21470) (if (g$0$13211 g$0$21470) (begin (quote #f) ((lambda (g$0$21472) (if g$0$21472 (begin (quote #f) ((lambda (g$0$21474) (if g$0$21474 (begin (quote #f) (append g$0$21472 g$0$21474)) (quote #f))) ((lambda (g$0$21476) (if (g$0$13211 g$0$21476) (begin (quote #f) ((lambda (g$0$21478) (if g$0$21478 (begin (quote #f) ((lambda (g$0$21480) (if g$0$21480 (begin (quote #f) (append g$0$21478 g$0$21480)) (quote #f))) ((lambda (g$0$21482) (if (equal? (g$0$13245 g$0$21482) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$21476)))) (quote #f))) ((lambda (g$0$21484) (list g$0$21484)) (g$0$13219 g$0$21476)))) (quote #f))) (g$0$13223 g$0$21470)))) (quote #f))) ((lambda (g$0$21486) (list g$0$21486)) (g$0$13219 g$0$21470)))) (quote #f))) (g$0$13223 g$0$21464)))) (quote #f))) ((lambda (g$0$21488) (quote ())) (g$0$13219 g$0$21464)))) (quote #f))) g$0$21448))) g$0$21446))) (set! g$0$13628 (lambda (g$0$21490 g$0$21491) (if (null? g$0$21490) g$0$21491 ((lambda (g$0$21494) (call-with-values (lambda () (g$0$13257 g$0$21494 (quote ()))) (lambda (g$0$21496 g$0$21497 g$0$21498) ((lambda (g$0$21502) (if (memv g$0$21502 (quote (define))) (call-with-values (lambda () (g$0$13474 g$0$21494)) (lambda (g$0$21543 g$0$21544) ((lambda (g$0$21547) ((lambda (g$0$21549) (g$0$13628 (cdr g$0$21490) (cons (cons g$0$21547 g$0$21549) g$0$21491))) (g$0$13604 g$0$21544 (quote ()) (quote ())))) (g$0$13624 g$0$21543 g$0$21494)))) (if (memv g$0$21502 (quote (set!))) (call-with-values (lambda () (g$0$13626 g$0$21494)) (lambda (g$0$21539 g$0$21540) (g$0$13628 (cdr g$0$21490) (cons (cons g$0$21539 g$0$21540) g$0$21491)))) (if (memv g$0$21502 (quote (define-syntax))) (call-with-values (lambda () (g$0$13476 g$0$21494)) (lambda (g$0$21529 g$0$21530) ((lambda (g$0$21533) ((lambda (g$0$21535) ((lambda (g$0$21537) (begin (g$0$13620 (g$0$13227 g$0$21529) g$0$21533 g$0$21537) (g$0$13628 (cdr g$0$21490) g$0$21491))) (g$0$13275 g$0$21535))) (g$0$13630 g$0$21530 (quote ())))) (g$0$13622 g$0$21529 g$0$21494)))) (if (memv g$0$21502 (quote (let-syntax letrec-syntax))) (error (quote chi-top*) (quote "not supported yet at top level") g$0$21496) (if (memv g$0$21502 (quote (begin))) ((lambda (g$0$21503) ((lambda (g$0$21505) (if (if g$0$21505 (begin (quote #f) (apply (lambda (g$0$21507) (quote #t)) g$0$21505)) (quote #f)) (apply (lambda (g$0$21509) (g$0$13628 (append g$0$21509 (cdr g$0$21490)) g$0$21491)) g$0$21505) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$21503 (quote ()))))) ((lambda (g$0$21511) (if (g$0$13211 g$0$21511) (begin (quote #f) ((lambda (g$0$21513) (if g$0$21513 (begin (quote #f) ((lambda (g$0$21515) (if g$0$21515 (begin (quote #f) (append g$0$21513 g$0$21515)) (quote #f))) ((letrec ((g$0$21517 (lambda (g$0$21519) (if (g$0$13211 g$0$21519) ((lambda (g$0$21521) (if g$0$21521 (begin (quote #f) ((lambda (g$0$21523) (if g$0$21523 (begin (quote #f) (map cons g$0$21521 g$0$21523)) (quote #f))) (g$0$21517 (g$0$13223 g$0$21519)))) (quote #f))) ((lambda (g$0$21525) (list g$0$21525)) (g$0$13219 g$0$21519))) (if (g$0$13215 g$0$21519) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$21517) (g$0$13223 g$0$21511)))) (quote #f))) ((lambda (g$0$21527) (quote ())) (g$0$13219 g$0$21511)))) (quote #f))) g$0$21503))) g$0$21494) (if (memv g$0$21502 (quote (global-macro global-macro!))) (g$0$13628 (cons (g$0$13590 g$0$21497 g$0$21494) (cdr g$0$21490)) g$0$21491) (if (memv g$0$21502 (quote (local-macro local-macro!))) (g$0$13628 (cons (g$0$13588 g$0$21497 g$0$21494) (cdr g$0$21490)) g$0$21491) (if (memv g$0$21502 (quote (macro macro!))) (g$0$13628 (cons (g$0$13586 g$0$21497 g$0$21494) (cdr g$0$21490)) g$0$21491) (g$0$13628 (cdr g$0$21490) (cons (cons (quote #f) (g$0$13596 g$0$21494 (quote ()) (quote ()))) g$0$21491))))))))))) g$0$21496)))) (car g$0$21490))))) (set! g$0$13630 (lambda (g$0$21551 g$0$21552) ((lambda (g$0$21555) ((lambda (g$0$21557) (begin (for-each ((lambda (g$0$21559) (lambda (g$0$21561) (begin (g$0$12830 g$0$21561) (g$0$21559 g$0$21561)))) (g$0$13646)) (g$0$21555)) g$0$21557)) ((lambda (g$0$21567 g$0$21568 g$0$21569 g$0$21570) ((lambda (g$0$21575) (dynamic-wind g$0$21575 (lambda () (g$0$13596 g$0$21551 g$0$21552 g$0$21552)) g$0$21575)) (lambda () (begin ((lambda (g$0$21577) (begin (g$0$21567 g$0$21569) (set! g$0$21569 g$0$21577))) (g$0$21567)) ((lambda (g$0$21579) (begin (g$0$21568 g$0$21570) (set! g$0$21570 g$0$21579))) (g$0$21568)))))) g$0$13644 g$0$13646 g$0$21555 (lambda (g$0$21581) (values))))) (g$0$13642)))) (set! g$0$13632 (lambda (g$0$21583) (letrec ((g$0$21585 (lambda (g$0$21587 g$0$21588 g$0$21589) (if (null? g$0$21587) (begin ((lambda (g$0$21593) (if (g$0$13235 g$0$21593) (void) (error (quote expander) (quote "invalid exports") (g$0$13610 g$0$21593)))) (map (lambda (g$0$21595) (g$0$13201 g$0$21595 g$0$13131 (quote ()))) g$0$21589)) (values g$0$21588 g$0$21589)) ((lambda (g$0$21597) ((lambda (g$0$21599) (if (if g$0$21599 (begin (quote #f) (apply (lambda (g$0$21601 g$0$21602 g$0$21603) (quote #t)) g$0$21599)) (quote #f)) (apply (lambda (g$0$21607 g$0$21608 g$0$21609) (begin (if (if (eq? g$0$21607 (quote rename)) (if (for-all symbol? g$0$21608) (begin (quote #f) (for-all symbol? g$0$21609)) (quote #f)) (quote #f)) (void) (error (quote expander) (quote "invalid export specifier") (car g$0$21587))) (g$0$21585 (cdr g$0$21587) (append g$0$21608 g$0$21588) (append g$0$21609 g$0$21589)))) g$0$21599) ((lambda (g$0$21613) ((lambda (g$0$21615) (if (if g$0$21615 (begin (quote #f) (apply (lambda (g$0$21617) (quote #t)) g$0$21615)) (quote #f)) (apply (lambda (g$0$21619) (begin (if (symbol? g$0$21619) (void) (error (quote expander) (quote "invalid export") g$0$21619)) (g$0$21585 (cdr g$0$21587) (cons g$0$21619 g$0$21588) (cons g$0$21619 g$0$21589)))) g$0$21615) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$21613 (quote ()))))) ((lambda (g$0$21621) (list g$0$21621)) g$0$21613))) g$0$21597))) ((lambda (g$0$21623) (if (g$0$13211 g$0$21623) (begin (quote #f) ((lambda (g$0$21625) (if g$0$21625 (begin (quote #f) ((lambda (g$0$21627) (if g$0$21627 (begin (quote #f) (append g$0$21625 g$0$21627)) (quote #f))) ((letrec ((g$0$21629 (lambda (g$0$21631) (if (g$0$13211 g$0$21631) ((lambda (g$0$21633) (if g$0$21633 (begin (quote #f) ((lambda (g$0$21635) (if g$0$21635 (begin (quote #f) (map cons g$0$21633 g$0$21635)) (quote #f))) (g$0$21629 (g$0$13223 g$0$21631)))) (quote #f))) ((lambda (g$0$21637) (if (g$0$13211 g$0$21637) (begin (quote #f) ((lambda (g$0$21639) (if g$0$21639 (begin (quote #f) ((lambda (g$0$21641) (if g$0$21641 (begin (quote #f) (append g$0$21639 g$0$21641)) (quote #f))) ((lambda (g$0$21643) (if (g$0$13211 g$0$21643) (begin (quote #f) ((lambda (g$0$21645) (if g$0$21645 (begin (quote #f) ((lambda (g$0$21647) (if g$0$21647 (begin (quote #f) (append g$0$21645 g$0$21647)) (quote #f))) ((lambda (g$0$21649) (if (equal? (g$0$13245 g$0$21649) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$21643)))) (quote #f))) ((lambda (g$0$21651) (list g$0$21651)) (g$0$13219 g$0$21643)))) (quote #f))) (g$0$13223 g$0$21637)))) (quote #f))) ((lambda (g$0$21653) (list g$0$21653)) (g$0$13219 g$0$21637)))) (quote #f))) (g$0$13219 g$0$21631))) (if (g$0$13215 g$0$21631) (list (begin (quote i*) (quote ())) (begin (quote e*) (quote ()))) (quote #f)))))) g$0$21629) (g$0$13223 g$0$21623)))) (quote #f))) ((lambda (g$0$21655) (list g$0$21655)) (g$0$13219 g$0$21623)))) (quote #f))) g$0$21597))) (car g$0$21587)))))) (g$0$21585 g$0$21583 (quote ()) (quote ()))))) (set! g$0$13634 (lambda (g$0$21657) ((lambda (g$0$21659) (begin (set! g$0$21659 (lambda (g$0$21661) ((lambda (g$0$21663) ((lambda (g$0$21665) (if (if g$0$21665 (begin (quote #f) (apply (lambda (g$0$21667) (for-all (lambda (g$0$21669) (if (integer? g$0$21669) (begin (quote #f) (exact? g$0$21669)) (quote #f))) g$0$21667)) g$0$21665)) (quote #f)) (apply (lambda (g$0$21671) (values (quote ()) g$0$21671)) g$0$21665) ((lambda (g$0$21673) ((lambda (g$0$21675) (if (if g$0$21675 (begin (quote #f) (apply (lambda (g$0$21677 g$0$21678) (symbol? g$0$21677)) g$0$21675)) (quote #f)) (apply (lambda (g$0$21681 g$0$21682) (call-with-values (lambda () (g$0$21659 g$0$21682)) (lambda (g$0$21685 g$0$21686) (values (cons g$0$21681 g$0$21685) g$0$21686)))) g$0$21675) ((lambda (g$0$21689) ((lambda (g$0$21691) (if (if g$0$21691 (begin (quote #f) (apply (lambda () (quote #t)) g$0$21691)) (quote #f)) (apply (lambda () (values (quote ()) (quote ()))) g$0$21691) ((lambda (g$0$21693) ((lambda (g$0$21695) (if (if g$0$21695 (begin (quote #f) (apply (lambda () (quote #t)) g$0$21695)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid library name") (g$0$13243 g$0$21657 (quote ())))) g$0$21695) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$21693 (quote ()))))) ((lambda (g$0$21697) (quote ())) g$0$21693))) g$0$21689))) ((lambda (g$0$21699) (if (equal? (g$0$13245 g$0$21699) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$21689))) g$0$21673))) ((lambda (g$0$21701) (if (g$0$13211 g$0$21701) (begin (quote #f) ((lambda (g$0$21703) (if g$0$21703 (begin (quote #f) ((lambda (g$0$21705) (if g$0$21705 (begin (quote #f) (append g$0$21703 g$0$21705)) (quote #f))) ((lambda (g$0$21707) (list g$0$21707)) (g$0$13223 g$0$21701)))) (quote #f))) ((lambda (g$0$21709) (list g$0$21709)) (g$0$13219 g$0$21701)))) (quote #f))) g$0$21673))) g$0$21663))) ((lambda (g$0$21711) (if (g$0$13211 g$0$21711) (begin (quote #f) ((lambda (g$0$21713) (if g$0$21713 (begin (quote #f) ((lambda (g$0$21715) (if g$0$21715 (begin (quote #f) (append g$0$21713 g$0$21715)) (quote #f))) ((lambda (g$0$21717) (if (equal? (g$0$13245 g$0$21717) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$21711)))) (quote #f))) ((letrec ((g$0$21719 (lambda (g$0$21721) (if (g$0$13211 g$0$21721) ((lambda (g$0$21723) (if g$0$21723 (begin (quote #f) ((lambda (g$0$21725) (if g$0$21725 (begin (quote #f) (map cons g$0$21723 g$0$21725)) (quote #f))) (g$0$21719 (g$0$13223 g$0$21721)))) (quote #f))) ((lambda (g$0$21727) (list g$0$21727)) (g$0$13219 g$0$21721))) (if (g$0$13215 g$0$21721) (list (begin (quote v*) (quote ()))) (quote #f)))))) g$0$21719) (g$0$13219 g$0$21711)))) (quote #f))) g$0$21663))) g$0$21661))) (call-with-values (lambda () (g$0$21659 g$0$21657)) (lambda (g$0$21729 g$0$21730) (begin (if (null? g$0$21729) (error (quote expander) (quote "empty library name") (g$0$13243 g$0$21657 (quote ()))) (void)) (values g$0$21729 g$0$21730)))))) (quote #f)))) (set! g$0$13636 (lambda (g$0$21733) ((lambda (g$0$21735) ((lambda (g$0$21737) (if (if g$0$21737 (begin (quote #f) (apply (lambda (g$0$21739 g$0$21740 g$0$21741 g$0$21742 g$0$21743 g$0$21744 g$0$21745) (if (eq? g$0$21741 (quote export)) (if (eq? g$0$21743 (quote import)) (begin (quote #f) (eq? g$0$21739 (quote library))) (quote #f)) (quote #f))) g$0$21737)) (quote #f)) (apply (lambda (g$0$21753 g$0$21754 g$0$21755 g$0$21756 g$0$21757 g$0$21758 g$0$21759) (values g$0$21754 g$0$21756 g$0$21758 g$0$21759)) g$0$21737) ((lambda (g$0$21767) ((lambda (g$0$21769) (if (if g$0$21769 (begin (quote #f) (apply (lambda () (quote #t)) g$0$21769)) (quote #f)) (apply (lambda () (error (quote expander) (quote "malformed library") (g$0$13243 g$0$21733 (quote ())))) g$0$21769) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$21767 (quote ()))))) ((lambda (g$0$21771) (quote ())) g$0$21767))) g$0$21735))) ((lambda (g$0$21773) (if (g$0$13211 g$0$21773) (begin (quote #f) ((lambda (g$0$21775) (if g$0$21775 (begin (quote #f) ((lambda (g$0$21777) (if g$0$21777 (begin (quote #f) (append g$0$21775 g$0$21777)) (quote #f))) ((lambda (g$0$21779) (if (g$0$13211 g$0$21779) (begin (quote #f) ((lambda (g$0$21781) (if g$0$21781 (begin (quote #f) ((lambda (g$0$21783) (if g$0$21783 (begin (quote #f) (append g$0$21781 g$0$21783)) (quote #f))) ((lambda (g$0$21785) (if (g$0$13211 g$0$21785) (begin (quote #f) ((lambda (g$0$21787) (if g$0$21787 (begin (quote #f) ((lambda (g$0$21789) (if g$0$21789 (begin (quote #f) (append g$0$21787 g$0$21789)) (quote #f))) ((lambda (g$0$21791) (if (g$0$13211 g$0$21791) (begin (quote #f) ((lambda (g$0$21793) (if g$0$21793 (begin (quote #f) ((lambda (g$0$21795) (if g$0$21795 (begin (quote #f) (append g$0$21793 g$0$21795)) (quote #f))) ((letrec ((g$0$21797 (lambda (g$0$21799) (if (g$0$13211 g$0$21799) ((lambda (g$0$21801) (if g$0$21801 (begin (quote #f) ((lambda (g$0$21803) (if g$0$21803 (begin (quote #f) (map cons g$0$21801 g$0$21803)) (quote #f))) (g$0$21797 (g$0$13223 g$0$21799)))) (quote #f))) ((lambda (g$0$21805) (list g$0$21805)) (g$0$13219 g$0$21799))) (if (g$0$13215 g$0$21799) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$21797) (g$0$13223 g$0$21791)))) (quote #f))) ((lambda (g$0$21807) (if (g$0$13211 g$0$21807) (begin (quote #f) ((lambda (g$0$21809) (if g$0$21809 (begin (quote #f) ((lambda (g$0$21811) (if g$0$21811 (begin (quote #f) (append g$0$21809 g$0$21811)) (quote #f))) ((letrec ((g$0$21813 (lambda (g$0$21815) (if (g$0$13211 g$0$21815) ((lambda (g$0$21817) (if g$0$21817 (begin (quote #f) ((lambda (g$0$21819) (if g$0$21819 (begin (quote #f) (map cons g$0$21817 g$0$21819)) (quote #f))) (g$0$21813 (g$0$13223 g$0$21815)))) (quote #f))) ((lambda (g$0$21821) (list g$0$21821)) (g$0$13219 g$0$21815))) (if (g$0$13215 g$0$21815) (list (begin (quote imp*) (quote ()))) (quote #f)))))) g$0$21813) (g$0$13223 g$0$21807)))) (quote #f))) ((lambda (g$0$21823) (list g$0$21823)) (g$0$13219 g$0$21807)))) (quote #f))) (g$0$13219 g$0$21791)))) (quote #f))) (g$0$13223 g$0$21785)))) (quote #f))) ((lambda (g$0$21825) (if (g$0$13211 g$0$21825) (begin (quote #f) ((lambda (g$0$21827) (if g$0$21827 (begin (quote #f) ((lambda (g$0$21829) (if g$0$21829 (begin (quote #f) (append g$0$21827 g$0$21829)) (quote #f))) ((letrec ((g$0$21831 (lambda (g$0$21833) (if (g$0$13211 g$0$21833) ((lambda (g$0$21835) (if g$0$21835 (begin (quote #f) ((lambda (g$0$21837) (if g$0$21837 (begin (quote #f) (map cons g$0$21835 g$0$21837)) (quote #f))) (g$0$21831 (g$0$13223 g$0$21833)))) (quote #f))) ((lambda (g$0$21839) (list g$0$21839)) (g$0$13219 g$0$21833))) (if (g$0$13215 g$0$21833) (list (begin (quote exp*) (quote ()))) (quote #f)))))) g$0$21831) (g$0$13223 g$0$21825)))) (quote #f))) ((lambda (g$0$21841) (list g$0$21841)) (g$0$13219 g$0$21825)))) (quote #f))) (g$0$13219 g$0$21785)))) (quote #f))) (g$0$13223 g$0$21779)))) (quote #f))) ((letrec ((g$0$21843 (lambda (g$0$21845) (if (g$0$13211 g$0$21845) ((lambda (g$0$21847) (if g$0$21847 (begin (quote #f) ((lambda (g$0$21849) (if g$0$21849 (begin (quote #f) (map cons g$0$21847 g$0$21849)) (quote #f))) (g$0$21843 (g$0$13223 g$0$21845)))) (quote #f))) ((lambda (g$0$21851) (list g$0$21851)) (g$0$13219 g$0$21845))) (if (g$0$13215 g$0$21845) (list (begin (quote name*) (quote ()))) (quote #f)))))) g$0$21843) (g$0$13219 g$0$21779)))) (quote #f))) (g$0$13223 g$0$21773)))) (quote #f))) ((lambda (g$0$21853) (list g$0$21853)) (g$0$13219 g$0$21773)))) (quote #f))) g$0$21735))) g$0$21733))) (set! g$0$13638 (lambda (g$0$21855) ((lambda (g$0$21857 g$0$21859 g$0$21861 g$0$21863 g$0$21865 g$0$21867 g$0$21869 g$0$21871) (begin (set! g$0$21857 (g$0$13642)) (set! g$0$21859 (lambda (g$0$22627 g$0$22628) ((lambda (g$0$22631) (begin (set! g$0$22631 (lambda (g$0$22633 g$0$22634) ((lambda (g$0$22637 g$0$22638) ((lambda (g$0$22641) (if g$0$22641 ((lambda (g$0$22643) (if (eq? (cdr g$0$22643) g$0$22638) g$0$22634 (error (quote import) (quote "two imports with different bindings") g$0$22637))) g$0$22641) (cons g$0$22633 g$0$22634))) (assq g$0$22637 g$0$22634))) (car g$0$22633) (cdr g$0$22633)))) (if (null? g$0$22627) g$0$22628 (g$0$22631 (car g$0$22627) (g$0$21859 (cdr g$0$22627) g$0$22628))))) (quote #f)))) (set! g$0$21861 (lambda (g$0$22603 g$0$22604) ((lambda (g$0$22607) (begin (set! g$0$22607 (lambda (g$0$22609 g$0$22610) (if (null? g$0$22610) (error (quote import) (quote "cannot rename unbound identifier") g$0$22609) (if (eq? g$0$22609 (caar g$0$22610)) (values (cdar g$0$22610) (cdr g$0$22610)) ((lambda (g$0$22613) (call-with-values (lambda () (g$0$22607 g$0$22609 (cdr g$0$22610))) (lambda (g$0$22615 g$0$22616) (values g$0$22615 (cons g$0$22613 g$0$22616))))) (car g$0$22610)))))) (if (null? g$0$22603) (values (quote ()) g$0$22604) (call-with-values (lambda () (g$0$22607 (car g$0$22603) g$0$22604)) (lambda (g$0$22619 g$0$22620) (call-with-values (lambda () (g$0$21861 (cdr g$0$22603) g$0$22620)) (lambda (g$0$22623 g$0$22624) (values (cons g$0$22619 g$0$22623) g$0$22624)))))))) (quote #f)))) (set! g$0$21863 (lambda (g$0$22595 g$0$22596) (map (lambda (g$0$22599) ((lambda (g$0$22601) (if g$0$22601 (cdr g$0$22601) (error (quote import) (quote "cannot find identifier") g$0$22599))) (assq g$0$22599 g$0$22596))) g$0$22595))) (set! g$0$21865 (lambda (g$0$22587 g$0$22588) (letrec ((g$0$22591 (lambda (g$0$22593) (if (null? g$0$22593) (quote ()) (if (memq (caar g$0$22593) g$0$22587) (g$0$22591 (cdr g$0$22593)) (cons (car g$0$22593) (g$0$22591 (cdr g$0$22593)))))))) (g$0$22591 g$0$22588)))) (set! g$0$21867 (lambda (g$0$22585) (if (null? g$0$22585) (quote ()) (if (memq (car g$0$22585) (cdr g$0$22585)) (g$0$21867 (cdr g$0$22585)) (cons (car g$0$22585) (g$0$21867 (cdr g$0$22585))))))) (set! g$0$21869 (lambda (g$0$22165) ((lambda (g$0$22167 g$0$22169 g$0$22171) (begin (set! g$0$22167 (lambda (g$0$22513) (if (integer? g$0$22513) (if (exact? g$0$22513) (begin (quote #f) (>= g$0$22513 (quote 0))) (quote #f)) (quote #f)))) (set! g$0$22169 (lambda (g$0$22323) ((lambda (g$0$22325) ((lambda (g$0$22327) (if (if g$0$22327 (begin (quote #f) (apply (lambda (g$0$22329) (g$0$22167 g$0$22329)) g$0$22327)) (quote #f)) (apply (lambda (g$0$22331) (lambda (g$0$22333) (= g$0$22333 g$0$22331))) g$0$22327) ((lambda (g$0$22335) ((lambda (g$0$22337) (if (if g$0$22337 (begin (quote #f) (apply (lambda (g$0$22339 g$0$22340) (eq? g$0$22339 (quote and))) g$0$22337)) (quote #f)) (apply (lambda (g$0$22343 g$0$22344) ((lambda (g$0$22347) (lambda (g$0$22349) (for-all (lambda (g$0$22351) (g$0$22351 g$0$22349)) g$0$22347))) (map g$0$22169 g$0$22344))) g$0$22337) ((lambda (g$0$22353) ((lambda (g$0$22355) (if (if g$0$22355 (begin (quote #f) (apply (lambda (g$0$22357 g$0$22358) (eq? g$0$22357 (quote or))) g$0$22355)) (quote #f)) (apply (lambda (g$0$22361 g$0$22362) ((lambda (g$0$22365) (lambda (g$0$22367) (exists (lambda (g$0$22369) (g$0$22369 g$0$22367)) g$0$22365))) (map g$0$22169 g$0$22362))) g$0$22355) ((lambda (g$0$22371) ((lambda (g$0$22373) (if (if g$0$22373 (begin (quote #f) (apply (lambda (g$0$22375 g$0$22376) (eq? g$0$22375 (quote not))) g$0$22373)) (quote #f)) (apply (lambda (g$0$22379 g$0$22380) ((lambda (g$0$22383) (lambda (g$0$22385) (not (g$0$22383 g$0$22385)))) (g$0$22169 g$0$22380))) g$0$22373) ((lambda (g$0$22387) ((lambda (g$0$22389) (if (if g$0$22389 (begin (quote #f) (apply (lambda (g$0$22391 g$0$22392) (if (eq? g$0$22391 (quote <=)) (begin (quote #f) (g$0$22167 g$0$22392)) (quote #f))) g$0$22389)) (quote #f)) (apply (lambda (g$0$22395 g$0$22396) (lambda (g$0$22399) (<= g$0$22399 g$0$22396))) g$0$22389) ((lambda (g$0$22401) ((lambda (g$0$22403) (if (if g$0$22403 (begin (quote #f) (apply (lambda (g$0$22405 g$0$22406) (if (eq? g$0$22405 (quote >=)) (begin (quote #f) (g$0$22167 g$0$22406)) (quote #f))) g$0$22403)) (quote #f)) (apply (lambda (g$0$22409 g$0$22410) (lambda (g$0$22413) (>= g$0$22413 g$0$22410))) g$0$22403) ((lambda (g$0$22415) ((lambda (g$0$22417) (if (if g$0$22417 (begin (quote #f) (apply (lambda () (quote #t)) g$0$22417)) (quote #f)) (apply (lambda () (error (quote import) (quote "invalid sub-version spec") g$0$22323 g$0$22165)) g$0$22417) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$22415 (quote ()))))) ((lambda (g$0$22419) (quote ())) g$0$22415))) g$0$22401))) ((lambda (g$0$22421) (if (g$0$13211 g$0$22421) (begin (quote #f) ((lambda (g$0$22423) (if g$0$22423 (begin (quote #f) ((lambda (g$0$22425) (if g$0$22425 (begin (quote #f) (append g$0$22423 g$0$22425)) (quote #f))) ((lambda (g$0$22427) (if (g$0$13211 g$0$22427) (begin (quote #f) ((lambda (g$0$22429) (if g$0$22429 (begin (quote #f) ((lambda (g$0$22431) (if g$0$22431 (begin (quote #f) (append g$0$22429 g$0$22431)) (quote #f))) ((lambda (g$0$22433) (if (equal? (g$0$13245 g$0$22433) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$22427)))) (quote #f))) ((lambda (g$0$22435) (list g$0$22435)) (g$0$13219 g$0$22427)))) (quote #f))) (g$0$13223 g$0$22421)))) (quote #f))) ((lambda (g$0$22437) (list g$0$22437)) (g$0$13219 g$0$22421)))) (quote #f))) g$0$22401))) g$0$22387))) ((lambda (g$0$22439) (if (g$0$13211 g$0$22439) (begin (quote #f) ((lambda (g$0$22441) (if g$0$22441 (begin (quote #f) ((lambda (g$0$22443) (if g$0$22443 (begin (quote #f) (append g$0$22441 g$0$22443)) (quote #f))) ((lambda (g$0$22445) (if (g$0$13211 g$0$22445) (begin (quote #f) ((lambda (g$0$22447) (if g$0$22447 (begin (quote #f) ((lambda (g$0$22449) (if g$0$22449 (begin (quote #f) (append g$0$22447 g$0$22449)) (quote #f))) ((lambda (g$0$22451) (if (equal? (g$0$13245 g$0$22451) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$22445)))) (quote #f))) ((lambda (g$0$22453) (list g$0$22453)) (g$0$13219 g$0$22445)))) (quote #f))) (g$0$13223 g$0$22439)))) (quote #f))) ((lambda (g$0$22455) (list g$0$22455)) (g$0$13219 g$0$22439)))) (quote #f))) g$0$22387))) g$0$22371))) ((lambda (g$0$22457) (if (g$0$13211 g$0$22457) (begin (quote #f) ((lambda (g$0$22459) (if g$0$22459 (begin (quote #f) ((lambda (g$0$22461) (if g$0$22461 (begin (quote #f) (append g$0$22459 g$0$22461)) (quote #f))) ((lambda (g$0$22463) (if (g$0$13211 g$0$22463) (begin (quote #f) ((lambda (g$0$22465) (if g$0$22465 (begin (quote #f) ((lambda (g$0$22467) (if g$0$22467 (begin (quote #f) (append g$0$22465 g$0$22467)) (quote #f))) ((lambda (g$0$22469) (if (equal? (g$0$13245 g$0$22469) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$22463)))) (quote #f))) ((lambda (g$0$22471) (list g$0$22471)) (g$0$13219 g$0$22463)))) (quote #f))) (g$0$13223 g$0$22457)))) (quote #f))) ((lambda (g$0$22473) (list g$0$22473)) (g$0$13219 g$0$22457)))) (quote #f))) g$0$22371))) g$0$22353))) ((lambda (g$0$22475) (if (g$0$13211 g$0$22475) (begin (quote #f) ((lambda (g$0$22477) (if g$0$22477 (begin (quote #f) ((lambda (g$0$22479) (if g$0$22479 (begin (quote #f) (append g$0$22477 g$0$22479)) (quote #f))) ((letrec ((g$0$22481 (lambda (g$0$22483) (if (g$0$13211 g$0$22483) ((lambda (g$0$22485) (if g$0$22485 (begin (quote #f) ((lambda (g$0$22487) (if g$0$22487 (begin (quote #f) (map cons g$0$22485 g$0$22487)) (quote #f))) (g$0$22481 (g$0$13223 g$0$22483)))) (quote #f))) ((lambda (g$0$22489) (list g$0$22489)) (g$0$13219 g$0$22483))) (if (g$0$13215 g$0$22483) (list (begin (quote sub*) (quote ()))) (quote #f)))))) g$0$22481) (g$0$13223 g$0$22475)))) (quote #f))) ((lambda (g$0$22491) (list g$0$22491)) (g$0$13219 g$0$22475)))) (quote #f))) g$0$22353))) g$0$22335))) ((lambda (g$0$22493) (if (g$0$13211 g$0$22493) (begin (quote #f) ((lambda (g$0$22495) (if g$0$22495 (begin (quote #f) ((lambda (g$0$22497) (if g$0$22497 (begin (quote #f) (append g$0$22495 g$0$22497)) (quote #f))) ((letrec ((g$0$22499 (lambda (g$0$22501) (if (g$0$13211 g$0$22501) ((lambda (g$0$22503) (if g$0$22503 (begin (quote #f) ((lambda (g$0$22505) (if g$0$22505 (begin (quote #f) (map cons g$0$22503 g$0$22505)) (quote #f))) (g$0$22499 (g$0$13223 g$0$22501)))) (quote #f))) ((lambda (g$0$22507) (list g$0$22507)) (g$0$13219 g$0$22501))) (if (g$0$13215 g$0$22501) (list (begin (quote sub*) (quote ()))) (quote #f)))))) g$0$22499) (g$0$13223 g$0$22493)))) (quote #f))) ((lambda (g$0$22509) (list g$0$22509)) (g$0$13219 g$0$22493)))) (quote #f))) g$0$22335))) g$0$22325))) ((lambda (g$0$22511) (list g$0$22511)) g$0$22325))) g$0$22323))) (set! g$0$22171 (lambda (g$0$22173) ((lambda (g$0$22175) ((lambda (g$0$22177) (if (if g$0$22177 (begin (quote #f) (apply (lambda () (quote #t)) g$0$22177)) (quote #f)) (apply (lambda () (lambda (g$0$22179) (quote #t))) g$0$22177) ((lambda (g$0$22181) ((lambda (g$0$22183) (if (if g$0$22183 (begin (quote #f) (apply (lambda (g$0$22185 g$0$22186) (eq? g$0$22185 (quote and))) g$0$22183)) (quote #f)) (apply (lambda (g$0$22189 g$0$22190) ((lambda (g$0$22193) (lambda (g$0$22195) (for-all (lambda (g$0$22197) (g$0$22197 g$0$22195)) g$0$22193))) (map g$0$22171 g$0$22190))) g$0$22183) ((lambda (g$0$22199) ((lambda (g$0$22201) (if (if g$0$22201 (begin (quote #f) (apply (lambda (g$0$22203 g$0$22204) (eq? g$0$22203 (quote or))) g$0$22201)) (quote #f)) (apply (lambda (g$0$22207 g$0$22208) ((lambda (g$0$22211) (lambda (g$0$22213) (exists (lambda (g$0$22215) (g$0$22215 g$0$22213)) g$0$22211))) (map g$0$22171 g$0$22208))) g$0$22201) ((lambda (g$0$22217) ((lambda (g$0$22219) (if (if g$0$22219 (begin (quote #f) (apply (lambda (g$0$22221 g$0$22222) (eq? g$0$22221 (quote not))) g$0$22219)) (quote #f)) (apply (lambda (g$0$22225 g$0$22226) ((lambda (g$0$22229) (lambda (g$0$22231) (not (g$0$22229 g$0$22231)))) (g$0$22171 g$0$22226))) g$0$22219) ((lambda (g$0$22233) ((lambda (g$0$22235) (if (if g$0$22235 (begin (quote #f) (apply (lambda (g$0$22237) (quote #t)) g$0$22235)) (quote #f)) (apply (lambda (g$0$22239) ((lambda (g$0$22241) (lambda (g$0$22243) (letrec ((g$0$22245 (lambda (g$0$22247 g$0$22248) (if (null? g$0$22247) (quote #t) (if (null? g$0$22248) (quote #f) (if ((car g$0$22247) (car g$0$22248)) (begin (quote #f) (g$0$22245 (cdr g$0$22247) (cdr g$0$22173))) (quote #f))))))) (g$0$22245 g$0$22241 g$0$22243)))) (map g$0$22169 g$0$22239))) g$0$22235) ((lambda (g$0$22251) ((lambda (g$0$22253) (if (if g$0$22253 (begin (quote #f) (apply (lambda () (quote #t)) g$0$22253)) (quote #f)) (apply (lambda () (error (quote import) (quote "invalid version spec") g$0$22173 g$0$22165)) g$0$22253) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$22251 (quote ()))))) ((lambda (g$0$22255) (quote ())) g$0$22251))) g$0$22233))) ((letrec ((g$0$22257 (lambda (g$0$22259) (if (g$0$13211 g$0$22259) ((lambda (g$0$22261) (if g$0$22261 (begin (quote #f) ((lambda (g$0$22263) (if g$0$22263 (begin (quote #f) (map cons g$0$22261 g$0$22263)) (quote #f))) (g$0$22257 (g$0$13223 g$0$22259)))) (quote #f))) ((lambda (g$0$22265) (list g$0$22265)) (g$0$13219 g$0$22259))) (if (g$0$13215 g$0$22259) (list (begin (quote sub*) (quote ()))) (quote #f)))))) g$0$22257) g$0$22233))) g$0$22217))) ((lambda (g$0$22267) (if (g$0$13211 g$0$22267) (begin (quote #f) ((lambda (g$0$22269) (if g$0$22269 (begin (quote #f) ((lambda (g$0$22271) (if g$0$22271 (begin (quote #f) (append g$0$22269 g$0$22271)) (quote #f))) ((lambda (g$0$22273) (if (g$0$13211 g$0$22273) (begin (quote #f) ((lambda (g$0$22275) (if g$0$22275 (begin (quote #f) ((lambda (g$0$22277) (if g$0$22277 (begin (quote #f) (append g$0$22275 g$0$22277)) (quote #f))) ((lambda (g$0$22279) (if (equal? (g$0$13245 g$0$22279) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$22273)))) (quote #f))) ((lambda (g$0$22281) (list g$0$22281)) (g$0$13219 g$0$22273)))) (quote #f))) (g$0$13223 g$0$22267)))) (quote #f))) ((lambda (g$0$22283) (list g$0$22283)) (g$0$13219 g$0$22267)))) (quote #f))) g$0$22217))) g$0$22199))) ((lambda (g$0$22285) (if (g$0$13211 g$0$22285) (begin (quote #f) ((lambda (g$0$22287) (if g$0$22287 (begin (quote #f) ((lambda (g$0$22289) (if g$0$22289 (begin (quote #f) (append g$0$22287 g$0$22289)) (quote #f))) ((letrec ((g$0$22291 (lambda (g$0$22293) (if (g$0$13211 g$0$22293) ((lambda (g$0$22295) (if g$0$22295 (begin (quote #f) ((lambda (g$0$22297) (if g$0$22297 (begin (quote #f) (map cons g$0$22295 g$0$22297)) (quote #f))) (g$0$22291 (g$0$13223 g$0$22293)))) (quote #f))) ((lambda (g$0$22299) (list g$0$22299)) (g$0$13219 g$0$22293))) (if (g$0$13215 g$0$22293) (list (begin (quote ver*) (quote ()))) (quote #f)))))) g$0$22291) (g$0$13223 g$0$22285)))) (quote #f))) ((lambda (g$0$22301) (list g$0$22301)) (g$0$13219 g$0$22285)))) (quote #f))) g$0$22199))) g$0$22181))) ((lambda (g$0$22303) (if (g$0$13211 g$0$22303) (begin (quote #f) ((lambda (g$0$22305) (if g$0$22305 (begin (quote #f) ((lambda (g$0$22307) (if g$0$22307 (begin (quote #f) (append g$0$22305 g$0$22307)) (quote #f))) ((letrec ((g$0$22309 (lambda (g$0$22311) (if (g$0$13211 g$0$22311) ((lambda (g$0$22313) (if g$0$22313 (begin (quote #f) ((lambda (g$0$22315) (if g$0$22315 (begin (quote #f) (map cons g$0$22313 g$0$22315)) (quote #f))) (g$0$22309 (g$0$13223 g$0$22311)))) (quote #f))) ((lambda (g$0$22317) (list g$0$22317)) (g$0$13219 g$0$22311))) (if (g$0$13215 g$0$22311) (list (begin (quote ver*) (quote ()))) (quote #f)))))) g$0$22309) (g$0$13223 g$0$22303)))) (quote #f))) ((lambda (g$0$22319) (list g$0$22319)) (g$0$13219 g$0$22303)))) (quote #f))) g$0$22181))) g$0$22175))) ((lambda (g$0$22321) (if (equal? (g$0$13245 g$0$22321) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$22175))) g$0$22173))) (letrec ((g$0$22515 (lambda (g$0$22517) ((lambda (g$0$22519) ((lambda (g$0$22521) (if (if g$0$22521 (begin (quote #f) (apply (lambda (g$0$22523) (quote #t)) g$0$22521)) (quote #f)) (apply (lambda (g$0$22525) (values (quote ()) (g$0$22171 g$0$22525))) g$0$22521) ((lambda (g$0$22527) ((lambda (g$0$22529) (if (if g$0$22529 (begin (quote #f) (apply (lambda (g$0$22531 g$0$22532) (symbol? g$0$22531)) g$0$22529)) (quote #f)) (apply (lambda (g$0$22535 g$0$22536) (call-with-values (lambda () (g$0$22515 g$0$22536)) (lambda (g$0$22539 g$0$22540) (values (cons g$0$22535 g$0$22539) g$0$22540)))) g$0$22529) ((lambda (g$0$22543) ((lambda (g$0$22545) (if (if g$0$22545 (begin (quote #f) (apply (lambda () (quote #t)) g$0$22545)) (quote #f)) (apply (lambda () (values (quote ()) (lambda (g$0$22547) (quote #t)))) g$0$22545) ((lambda (g$0$22549) ((lambda (g$0$22551) (if (if g$0$22551 (begin (quote #f) (apply (lambda () (quote #t)) g$0$22551)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid import spec") (g$0$13243 g$0$22165 (quote ())))) g$0$22551) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$22549 (quote ()))))) ((lambda (g$0$22553) (quote ())) g$0$22549))) g$0$22543))) ((lambda (g$0$22555) (if (equal? (g$0$13245 g$0$22555) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$22543))) g$0$22527))) ((lambda (g$0$22557) (if (g$0$13211 g$0$22557) (begin (quote #f) ((lambda (g$0$22559) (if g$0$22559 (begin (quote #f) ((lambda (g$0$22561) (if g$0$22561 (begin (quote #f) (append g$0$22559 g$0$22561)) (quote #f))) ((lambda (g$0$22563) (list g$0$22563)) (g$0$13223 g$0$22557)))) (quote #f))) ((lambda (g$0$22565) (list g$0$22565)) (g$0$13219 g$0$22557)))) (quote #f))) g$0$22527))) g$0$22519))) ((lambda (g$0$22567) (if (g$0$13211 g$0$22567) (begin (quote #f) ((lambda (g$0$22569) (if g$0$22569 (begin (quote #f) ((lambda (g$0$22571) (if g$0$22571 (begin (quote #f) (append g$0$22569 g$0$22571)) (quote #f))) ((lambda (g$0$22573) (if (equal? (g$0$13245 g$0$22573) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$22567)))) (quote #f))) ((letrec ((g$0$22575 (lambda (g$0$22577) (if (g$0$13211 g$0$22577) ((lambda (g$0$22579) (if g$0$22579 (begin (quote #f) ((lambda (g$0$22581) (if g$0$22581 (begin (quote #f) (map cons g$0$22579 g$0$22581)) (quote #f))) (g$0$22575 (g$0$13223 g$0$22577)))) (quote #f))) ((lambda (g$0$22583) (list g$0$22583)) (g$0$13219 g$0$22577))) (if (g$0$13215 g$0$22577) (list (begin (quote version-spec*) (quote ()))) (quote #f)))))) g$0$22575) (g$0$13219 g$0$22567)))) (quote #f))) g$0$22519))) g$0$22517)))) (g$0$22515 g$0$22165)))) (quote #f) (quote #f) (quote #f)))) (set! g$0$21871 (lambda (g$0$21873) ((lambda (g$0$21875) ((lambda (g$0$21877) (if (if g$0$21877 (begin (quote #f) (apply (lambda (g$0$21879 g$0$21880 g$0$21881 g$0$21882) (if (eq? g$0$21879 (quote rename)) (if (for-all symbol? g$0$21881) (begin (quote #f) (for-all symbol? g$0$21882)) (quote #f)) (quote #f))) g$0$21877)) (quote #f)) (apply (lambda (g$0$21887 g$0$21888 g$0$21889 g$0$21890) ((lambda (g$0$21895) ((lambda (g$0$21897) ((lambda (g$0$21899) (g$0$21859 (map cons g$0$21890 g$0$21897) g$0$21899)) (g$0$21865 g$0$21889 g$0$21895))) (g$0$21863 g$0$21889 g$0$21895))) (g$0$21871 g$0$21888))) g$0$21877) ((lambda (g$0$21901) ((lambda (g$0$21903) (if (if g$0$21903 (begin (quote #f) (apply (lambda (g$0$21905 g$0$21906 g$0$21907) (if (eq? g$0$21905 (quote except)) (begin (quote #f) (for-all symbol? g$0$21907)) (quote #f))) g$0$21903)) (quote #f)) (apply (lambda (g$0$21911 g$0$21912 g$0$21913) ((lambda (g$0$21917) (g$0$21865 g$0$21913 g$0$21917)) (g$0$21871 g$0$21912))) g$0$21903) ((lambda (g$0$21919) ((lambda (g$0$21921) (if (if g$0$21921 (begin (quote #f) (apply (lambda (g$0$21923 g$0$21924 g$0$21925) (if (eq? g$0$21923 (quote only)) (begin (quote #f) (for-all symbol? g$0$21925)) (quote #f))) g$0$21921)) (quote #f)) (apply (lambda (g$0$21929 g$0$21930 g$0$21931) ((lambda (g$0$21935) ((lambda (g$0$21937) ((lambda (g$0$21939) (map cons g$0$21937 g$0$21939)) (g$0$21863 g$0$21937 g$0$21935))) (g$0$21867 g$0$21931))) (g$0$21871 g$0$21930))) g$0$21921) ((lambda (g$0$21941) ((lambda (g$0$21943) (if (if g$0$21943 (begin (quote #f) (apply (lambda (g$0$21945 g$0$21946 g$0$21947) (if (eq? g$0$21945 (quote prefix)) (begin (quote #f) (symbol? g$0$21947)) (quote #f))) g$0$21943)) (quote #f)) (apply (lambda (g$0$21951 g$0$21952 g$0$21953) ((lambda (g$0$21957) (map (lambda (g$0$21959) (cons (string->symbol (string-append (symbol->string g$0$21953) (symbol->string (car g$0$21959)))) (cdr g$0$21959))) g$0$21957)) (g$0$21871 g$0$21952))) g$0$21943) ((lambda (g$0$21961) ((lambda (g$0$21963) (if (if g$0$21963 (begin (quote #f) (apply (lambda (g$0$21965 g$0$21966) (eq? g$0$21965 (quote library))) g$0$21963)) (quote #f)) (apply (lambda (g$0$21969 g$0$21970) (call-with-values (lambda () (g$0$21869 g$0$21970)) (lambda (g$0$21973 g$0$21974) (begin (if (null? g$0$21973) (error (quote import) (quote "empty library name") g$0$21970) (void)) ((lambda (g$0$21977) (begin (if g$0$21977 (void) (error (quote import) (quote "cannot find library with required name") g$0$21973)) (if (g$0$21974 (g$0$12868 g$0$21977)) (void) (error (quote import) (quote "library does not satisfy version specification") g$0$21977 g$0$21970)) (g$0$21857 g$0$21977) (g$0$12864 g$0$21977))) (g$0$12839 g$0$21973)))))) g$0$21963) ((lambda (g$0$21979) ((lambda (g$0$21981) (if (if g$0$21981 (begin (quote #f) (apply (lambda (g$0$21983 g$0$21984) (not (memq g$0$21983 (quote (rename except only prefix library))))) g$0$21981)) (quote #f)) (apply (lambda (g$0$21987 g$0$21988) (g$0$21871 (list (quote library) (cons g$0$21987 g$0$21988)))) g$0$21981) ((lambda (g$0$21991) ((lambda (g$0$21993) (if (if g$0$21993 (begin (quote #f) (apply (lambda (g$0$21995) (quote #t)) g$0$21993)) (quote #f)) (apply (lambda (g$0$21997) (error (quote import) (quote "invalid import spec") g$0$21997)) g$0$21993) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$21991 (quote ()))))) ((lambda (g$0$21999) (list g$0$21999)) g$0$21991))) g$0$21979))) ((lambda (g$0$22001) (if (g$0$13211 g$0$22001) (begin (quote #f) ((lambda (g$0$22003) (if g$0$22003 (begin (quote #f) ((lambda (g$0$22005) (if g$0$22005 (begin (quote #f) (append g$0$22003 g$0$22005)) (quote #f))) ((letrec ((g$0$22007 (lambda (g$0$22009) (if (g$0$13211 g$0$22009) ((lambda (g$0$22011) (if g$0$22011 (begin (quote #f) ((lambda (g$0$22013) (if g$0$22013 (begin (quote #f) (map cons g$0$22011 g$0$22013)) (quote #f))) (g$0$22007 (g$0$13223 g$0$22009)))) (quote #f))) ((lambda (g$0$22015) (list g$0$22015)) (g$0$13219 g$0$22009))) (if (g$0$13215 g$0$22009) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$22007) (g$0$13223 g$0$22001)))) (quote #f))) ((lambda (g$0$22017) (list g$0$22017)) (g$0$13219 g$0$22001)))) (quote #f))) g$0$21979))) g$0$21961))) ((lambda (g$0$22019) (if (g$0$13211 g$0$22019) (begin (quote #f) ((lambda (g$0$22021) (if g$0$22021 (begin (quote #f) ((lambda (g$0$22023) (if g$0$22023 (begin (quote #f) (append g$0$22021 g$0$22023)) (quote #f))) ((lambda (g$0$22025) (if (g$0$13211 g$0$22025) (begin (quote #f) ((lambda (g$0$22027) (if g$0$22027 (begin (quote #f) ((lambda (g$0$22029) (if g$0$22029 (begin (quote #f) (append g$0$22027 g$0$22029)) (quote #f))) ((lambda (g$0$22031) (if (equal? (g$0$13245 g$0$22031) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$22025)))) (quote #f))) ((letrec ((g$0$22033 (lambda (g$0$22035) (if (g$0$13211 g$0$22035) ((lambda (g$0$22037) (if g$0$22037 (begin (quote #f) ((lambda (g$0$22039) (if g$0$22039 (begin (quote #f) (map cons g$0$22037 g$0$22039)) (quote #f))) (g$0$22033 (g$0$13223 g$0$22035)))) (quote #f))) ((lambda (g$0$22041) (list g$0$22041)) (g$0$13219 g$0$22035))) (if (g$0$13215 g$0$22035) (list (begin (quote spec*) (quote ()))) (quote #f)))))) g$0$22033) (g$0$13219 g$0$22025)))) (quote #f))) (g$0$13223 g$0$22019)))) (quote #f))) ((lambda (g$0$22043) (list g$0$22043)) (g$0$13219 g$0$22019)))) (quote #f))) g$0$21961))) g$0$21941))) ((lambda (g$0$22045) (if (g$0$13211 g$0$22045) (begin (quote #f) ((lambda (g$0$22047) (if g$0$22047 (begin (quote #f) ((lambda (g$0$22049) (if g$0$22049 (begin (quote #f) (append g$0$22047 g$0$22049)) (quote #f))) ((lambda (g$0$22051) (if (g$0$13211 g$0$22051) (begin (quote #f) ((lambda (g$0$22053) (if g$0$22053 (begin (quote #f) ((lambda (g$0$22055) (if g$0$22055 (begin (quote #f) (append g$0$22053 g$0$22055)) (quote #f))) ((lambda (g$0$22057) (if (g$0$13211 g$0$22057) (begin (quote #f) ((lambda (g$0$22059) (if g$0$22059 (begin (quote #f) ((lambda (g$0$22061) (if g$0$22061 (begin (quote #f) (append g$0$22059 g$0$22061)) (quote #f))) ((lambda (g$0$22063) (if (equal? (g$0$13245 g$0$22063) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$22057)))) (quote #f))) ((lambda (g$0$22065) (list g$0$22065)) (g$0$13219 g$0$22057)))) (quote #f))) (g$0$13223 g$0$22051)))) (quote #f))) ((lambda (g$0$22067) (list g$0$22067)) (g$0$13219 g$0$22051)))) (quote #f))) (g$0$13223 g$0$22045)))) (quote #f))) ((lambda (g$0$22069) (list g$0$22069)) (g$0$13219 g$0$22045)))) (quote #f))) g$0$21941))) g$0$21919))) ((lambda (g$0$22071) (if (g$0$13211 g$0$22071) (begin (quote #f) ((lambda (g$0$22073) (if g$0$22073 (begin (quote #f) ((lambda (g$0$22075) (if g$0$22075 (begin (quote #f) (append g$0$22073 g$0$22075)) (quote #f))) ((lambda (g$0$22077) (if (g$0$13211 g$0$22077) (begin (quote #f) ((lambda (g$0$22079) (if g$0$22079 (begin (quote #f) ((lambda (g$0$22081) (if g$0$22081 (begin (quote #f) (append g$0$22079 g$0$22081)) (quote #f))) ((letrec ((g$0$22083 (lambda (g$0$22085) (if (g$0$13211 g$0$22085) ((lambda (g$0$22087) (if g$0$22087 (begin (quote #f) ((lambda (g$0$22089) (if g$0$22089 (begin (quote #f) (map cons g$0$22087 g$0$22089)) (quote #f))) (g$0$22083 (g$0$13223 g$0$22085)))) (quote #f))) ((lambda (g$0$22091) (list g$0$22091)) (g$0$13219 g$0$22085))) (if (g$0$13215 g$0$22085) (list (begin (quote sym*) (quote ()))) (quote #f)))))) g$0$22083) (g$0$13223 g$0$22077)))) (quote #f))) ((lambda (g$0$22093) (list g$0$22093)) (g$0$13219 g$0$22077)))) (quote #f))) (g$0$13223 g$0$22071)))) (quote #f))) ((lambda (g$0$22095) (list g$0$22095)) (g$0$13219 g$0$22071)))) (quote #f))) g$0$21919))) g$0$21901))) ((lambda (g$0$22097) (if (g$0$13211 g$0$22097) (begin (quote #f) ((lambda (g$0$22099) (if g$0$22099 (begin (quote #f) ((lambda (g$0$22101) (if g$0$22101 (begin (quote #f) (append g$0$22099 g$0$22101)) (quote #f))) ((lambda (g$0$22103) (if (g$0$13211 g$0$22103) (begin (quote #f) ((lambda (g$0$22105) (if g$0$22105 (begin (quote #f) ((lambda (g$0$22107) (if g$0$22107 (begin (quote #f) (append g$0$22105 g$0$22107)) (quote #f))) ((letrec ((g$0$22109 (lambda (g$0$22111) (if (g$0$13211 g$0$22111) ((lambda (g$0$22113) (if g$0$22113 (begin (quote #f) ((lambda (g$0$22115) (if g$0$22115 (begin (quote #f) (map cons g$0$22113 g$0$22115)) (quote #f))) (g$0$22109 (g$0$13223 g$0$22111)))) (quote #f))) ((lambda (g$0$22117) (list g$0$22117)) (g$0$13219 g$0$22111))) (if (g$0$13215 g$0$22111) (list (begin (quote sym*) (quote ()))) (quote #f)))))) g$0$22109) (g$0$13223 g$0$22103)))) (quote #f))) ((lambda (g$0$22119) (list g$0$22119)) (g$0$13219 g$0$22103)))) (quote #f))) (g$0$13223 g$0$22097)))) (quote #f))) ((lambda (g$0$22121) (list g$0$22121)) (g$0$13219 g$0$22097)))) (quote #f))) g$0$21901))) g$0$21875))) ((lambda (g$0$22123) (if (g$0$13211 g$0$22123) (begin (quote #f) ((lambda (g$0$22125) (if g$0$22125 (begin (quote #f) ((lambda (g$0$22127) (if g$0$22127 (begin (quote #f) (append g$0$22125 g$0$22127)) (quote #f))) ((lambda (g$0$22129) (if (g$0$13211 g$0$22129) (begin (quote #f) ((lambda (g$0$22131) (if g$0$22131 (begin (quote #f) ((lambda (g$0$22133) (if g$0$22133 (begin (quote #f) (append g$0$22131 g$0$22133)) (quote #f))) ((letrec ((g$0$22135 (lambda (g$0$22137) (if (g$0$13211 g$0$22137) ((lambda (g$0$22139) (if g$0$22139 (begin (quote #f) ((lambda (g$0$22141) (if g$0$22141 (begin (quote #f) (map cons g$0$22139 g$0$22141)) (quote #f))) (g$0$22135 (g$0$13223 g$0$22137)))) (quote #f))) ((lambda (g$0$22143) (if (g$0$13211 g$0$22143) (begin (quote #f) ((lambda (g$0$22145) (if g$0$22145 (begin (quote #f) ((lambda (g$0$22147) (if g$0$22147 (begin (quote #f) (append g$0$22145 g$0$22147)) (quote #f))) ((lambda (g$0$22149) (if (g$0$13211 g$0$22149) (begin (quote #f) ((lambda (g$0$22151) (if g$0$22151 (begin (quote #f) ((lambda (g$0$22153) (if g$0$22153 (begin (quote #f) (append g$0$22151 g$0$22153)) (quote #f))) ((lambda (g$0$22155) (if (equal? (g$0$13245 g$0$22155) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$13223 g$0$22149)))) (quote #f))) ((lambda (g$0$22157) (list g$0$22157)) (g$0$13219 g$0$22149)))) (quote #f))) (g$0$13223 g$0$22143)))) (quote #f))) ((lambda (g$0$22159) (list g$0$22159)) (g$0$13219 g$0$22143)))) (quote #f))) (g$0$13219 g$0$22137))) (if (g$0$13215 g$0$22137) (list (begin (quote old*) (quote ())) (begin (quote new*) (quote ()))) (quote #f)))))) g$0$22135) (g$0$13223 g$0$22129)))) (quote #f))) ((lambda (g$0$22161) (list g$0$22161)) (g$0$13219 g$0$22129)))) (quote #f))) (g$0$13223 g$0$22123)))) (quote #f))) ((lambda (g$0$22163) (list g$0$22163)) (g$0$13219 g$0$22123)))) (quote #f))) g$0$21875))) g$0$21873))) (letrec ((g$0$22645 (lambda (g$0$22647 g$0$22648) (if (null? g$0$22647) (values g$0$22648 (g$0$21857)) (g$0$22645 (cdr g$0$22647) (g$0$21859 (g$0$21871 (car g$0$22647)) g$0$22648)))))) (g$0$22645 g$0$21855 (quote ()))))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$13640 (lambda (g$0$22651) ((lambda (g$0$22653) (begin (for-each (lambda (g$0$22655) ((lambda (g$0$22657 g$0$22658) (g$0$13164 g$0$22653 (g$0$13201 g$0$22657 g$0$13131 (quote ())) g$0$22658)) (car g$0$22655) (cdr g$0$22655))) g$0$22651) g$0$22653)) (g$0$13162)))) (set! g$0$13642 (lambda () ((lambda (g$0$22661) (lambda g$0$22665 ((lambda (g$0$22666) (if (= g$0$22666 (quote 0)) (apply (lambda () g$0$22661) g$0$22665) (if (= g$0$22666 (quote 1)) (apply (lambda (g$0$22663) (set! g$0$22661 (g$0$13124 g$0$22663 g$0$22661))) g$0$22665) (error (quote apply) (quote "invalid arg count"))))) (length g$0$22665)))) (quote ())))) (set! g$0$13644 (g$0$12318 (lambda g$0$22667 (error (quote inv-collector) (quote "not initialized"))) (lambda (g$0$22669) (begin (if (procedure? g$0$22669) (void) (error (quote inv-collector) (quote "not a procedure") g$0$22669)) g$0$22669)))) (set! g$0$13646 (g$0$12318 (lambda g$0$22671 (error (quote vis-collector) (quote "not initialized"))) (lambda (g$0$22673) (begin (if (procedure? g$0$22673) (void) (error (quote vis-collector) (quote "not a procedure") g$0$22673)) g$0$22673)))) (set! g$0$13648 (lambda (g$0$22675 g$0$22676 g$0$22677) (call-with-values (lambda () (g$0$13618 g$0$22675 (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) g$0$22676 g$0$22677)) (lambda (g$0$22681 g$0$22682 g$0$22683 g$0$22684 g$0$22685 g$0$22686 g$0$22687) (values (append (apply append (reverse g$0$22686)) g$0$22681) g$0$22682 g$0$22683 (reverse g$0$22684) (reverse g$0$22685)))))) (set! g$0$13650 (lambda (g$0$22695 g$0$22696 g$0$22697) (call-with-values (lambda () (g$0$13632 g$0$22695)) (lambda (g$0$22701 g$0$22702) (call-with-values (lambda () (g$0$13638 g$0$22696)) (lambda (g$0$22703 g$0$22704) ((lambda (g$0$22709) ((lambda (g$0$22711 g$0$22712 g$0$22713) ((lambda (g$0$22721 g$0$22722 g$0$22723 g$0$22724) ((lambda (g$0$22729) (dynamic-wind g$0$22729 (lambda () (call-with-values (lambda () (g$0$13648 g$0$22711 g$0$22709 (quote #f))) (lambda (g$0$22731 g$0$22732 g$0$22733 g$0$22734 g$0$22735) (begin (g$0$13166 g$0$22709) ((lambda (g$0$22741 g$0$22742) (begin (g$0$13168 g$0$22709) ((lambda (g$0$22745) (call-with-values (lambda () (g$0$13693 g$0$22732)) (lambda (g$0$22747 g$0$22748 g$0$22749) ((lambda (g$0$22753 g$0$22754) (values g$0$22704 (g$0$22712) (g$0$22713) (g$0$13108 (quote #f) (append g$0$22754 (list g$0$22753))) g$0$22749 g$0$22745 g$0$22747)) (g$0$13105 (quote #f) g$0$22734 g$0$22741 (g$0$13689 g$0$22748 g$0$22742)) (map g$0$13122 (map cdr g$0$22748)))))) (g$0$13691 g$0$22701 g$0$22702 g$0$22709)))) (g$0$13606 g$0$22735 g$0$22732 g$0$22733) (g$0$13592 g$0$22731 g$0$22732 g$0$22733)))))) g$0$22729)) (lambda () (begin ((lambda (g$0$22757) (begin (g$0$22721 g$0$22723) (set! g$0$22723 g$0$22757))) (g$0$22721)) ((lambda (g$0$22759) (begin (g$0$22722 g$0$22724) (set! g$0$22724 g$0$22759))) (g$0$22722)))))) g$0$13644 g$0$13646 g$0$22712 g$0$22713)) (map (lambda (g$0$22761) (g$0$13201 g$0$22761 g$0$13131 (list g$0$22709))) g$0$22697) (g$0$13642) (g$0$13642))) (g$0$13640 g$0$22703)))))))) (set! g$0$13652 (lambda (g$0$22763) (call-with-values (lambda () (g$0$13636 g$0$22763)) (lambda (g$0$22765 g$0$22766 g$0$22767 g$0$22768) (call-with-values (lambda () (g$0$13634 g$0$22765)) (lambda (g$0$22773 g$0$22774) (call-with-values (lambda () (g$0$13650 g$0$22766 g$0$22767 g$0$22768)) (lambda (g$0$22777 g$0$22778 g$0$22779 g$0$22780 g$0$22781 g$0$22782 g$0$22783) (values g$0$22773 g$0$22774 g$0$22777 g$0$22778 g$0$22779 g$0$22780 g$0$22781 g$0$22782 g$0$22783))))))))) (set! g$0$13654 (lambda (g$0$22791) ((lambda (g$0$22793) ((lambda (g$0$22795) (if (if g$0$22795 (begin (quote #f) (apply (lambda (g$0$22797 g$0$22798 g$0$22799) (eq? g$0$22797 (quote import))) g$0$22795)) (quote #f)) (apply (lambda (g$0$22803 g$0$22804 g$0$22805) (values g$0$22804 g$0$22805)) g$0$22795) ((lambda (g$0$22809) ((lambda (g$0$22811) (if (if g$0$22811 (begin (quote #f) (apply (lambda () (quote #t)) g$0$22811)) (quote #f)) (apply (lambda () (error (quote "invalid syntax of top-level program"))) g$0$22811) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$22809 (quote ()))))) ((lambda (g$0$22813) (quote ())) g$0$22809))) g$0$22793))) ((lambda (g$0$22815) (if (g$0$13211 g$0$22815) (begin (quote #f) ((lambda (g$0$22817) (if g$0$22817 (begin (quote #f) ((lambda (g$0$22819) (if g$0$22819 (begin (quote #f) (append g$0$22817 g$0$22819)) (quote #f))) ((letrec ((g$0$22821 (lambda (g$0$22823) (if (g$0$13211 g$0$22823) ((lambda (g$0$22825) (if g$0$22825 (begin (quote #f) ((lambda (g$0$22827) (if g$0$22827 (begin (quote #f) (map cons g$0$22825 g$0$22827)) (quote #f))) (g$0$22821 (g$0$13223 g$0$22823)))) (quote #f))) ((lambda (g$0$22829) (list g$0$22829)) (g$0$13219 g$0$22823))) (if (g$0$13215 g$0$22823) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$22821) (g$0$13223 g$0$22815)))) (quote #f))) ((lambda (g$0$22831) (if (g$0$13211 g$0$22831) (begin (quote #f) ((lambda (g$0$22833) (if g$0$22833 (begin (quote #f) ((lambda (g$0$22835) (if g$0$22835 (begin (quote #f) (append g$0$22833 g$0$22835)) (quote #f))) ((letrec ((g$0$22837 (lambda (g$0$22839) (if (g$0$13211 g$0$22839) ((lambda (g$0$22841) (if g$0$22841 (begin (quote #f) ((lambda (g$0$22843) (if g$0$22843 (begin (quote #f) (map cons g$0$22841 g$0$22843)) (quote #f))) (g$0$22837 (g$0$13223 g$0$22839)))) (quote #f))) ((lambda (g$0$22845) (list g$0$22845)) (g$0$13219 g$0$22839))) (if (g$0$13215 g$0$22839) (list (begin (quote imp*) (quote ()))) (quote #f)))))) g$0$22837) (g$0$13223 g$0$22831)))) (quote #f))) ((lambda (g$0$22847) (list g$0$22847)) (g$0$13219 g$0$22831)))) (quote #f))) (g$0$13219 g$0$22815)))) (quote #f))) g$0$22793))) g$0$22791))) (set! g$0$13656 (lambda (g$0$22849) (call-with-values (lambda () (g$0$13654 g$0$22849)) (lambda (g$0$22851 g$0$22852) (call-with-values (lambda () (g$0$13650 (quote ()) g$0$22851 g$0$22852)) (lambda (g$0$22855 g$0$22856 g$0$22857 g$0$22858 g$0$22859 g$0$22860 g$0$22861) (values g$0$22856 g$0$22858))))))) (set! g$0$13659 (lambda (g$0$22869 g$0$22870) (vector (quote g$0$13658) g$0$22869 g$0$22870))) (set! g$0$13661 (lambda (g$0$22873) (if (vector? g$0$22873) (if (= (vector-length g$0$22873) (+ (quote 1) (length (quote (subst imp*))))) (begin (quote #f) (eq? (vector-ref g$0$22873 (quote 0)) (quote g$0$13658))) (quote #f)) (quote #f)))) (set! g$0$13663 (lambda (g$0$22875) (if (g$0$13661 g$0$22875) (vector-ref g$0$22875 (quote 1)) (error (quote env-subst) (quote "~s is not of type ~s") g$0$22875 (quote env))))) (set! g$0$13665 (lambda (g$0$22877) (if (g$0$13661 g$0$22877) (vector-ref g$0$22877 (quote 2)) (error (quote env-imp*) (quote "~s is not of type ~s") g$0$22877 (quote env))))) (set! g$0$13667 (lambda (g$0$22879 g$0$22880) (if (g$0$13661 g$0$22879) (vector-set! g$0$22879 (quote 1) g$0$22880) (error (quote set-env-subst!) (quote "~s is not of type ~s") g$0$22879 (quote env))))) (set! g$0$13669 (lambda (g$0$22883 g$0$22884) (if (g$0$13661 g$0$22883) (vector-set! g$0$22883 (quote 2) g$0$22884) (error (quote set-env-imp*!) (quote "~s is not of type ~s") g$0$22883 (quote env))))) (set! g$0$13671 (lambda (g$0$22887) (g$0$13661 g$0$22887))) (set! g$0$13673 (lambda g$0$22889 (call-with-values (lambda () (g$0$13638 g$0$22889)) (lambda (g$0$22891 g$0$22892) (g$0$13659 g$0$22891 g$0$22892))))) (set! g$0$13675 (lambda (g$0$22895) (begin (if (eqv? g$0$22895 (quote 5)) (void) (error (quote null-environment) (quote "not 5") g$0$22895)) (g$0$13673 (quote (psyntax null-environment-5)))))) (set! g$0$13677 (lambda (g$0$22897) (begin (if (eqv? g$0$22897 (quote 5)) (void) (error (quote scheme-report-environment) (quote "not 5") g$0$22897)) (g$0$13673 (quote (psyntax scheme-report-environment-5)))))) (set! g$0$13679 (lambda (g$0$22899 g$0$22900) (begin (if (g$0$13661 g$0$22900) (void) (error (quote expand) (quote "not an environment") g$0$22900)) ((lambda (g$0$22903) ((lambda (g$0$22905) ((lambda (g$0$22907 g$0$22908 g$0$22909) ((lambda (g$0$22913) (begin (g$0$13166 g$0$22905) (values g$0$22913 (g$0$22908)))) ((lambda (g$0$22919 g$0$22920 g$0$22921 g$0$22922) ((lambda (g$0$22927) (dynamic-wind g$0$22927 (lambda () (g$0$13596 g$0$22907 (quote ()) (quote ()))) g$0$22927)) (lambda () (begin ((lambda (g$0$22929) (begin (g$0$22919 g$0$22921) (set! g$0$22921 g$0$22929))) (g$0$22919)) ((lambda (g$0$22931) (begin (g$0$22920 g$0$22922) (set! g$0$22922 g$0$22931))) (g$0$22920)))))) g$0$13644 g$0$13646 g$0$22908 g$0$22909))) (g$0$13201 g$0$22899 g$0$13131 (list g$0$22905)) (g$0$13642) (g$0$13642))) (g$0$13640 g$0$22903))) (g$0$13663 g$0$22900))))) (set! g$0$13681 (lambda (g$0$22933 g$0$22934) (begin (if (g$0$13661 g$0$22934) (void) (error (quote eval) (quote "not an environment") g$0$22934)) (call-with-values (lambda () (g$0$13679 g$0$22933 g$0$22934)) (lambda (g$0$22937 g$0$22938) (begin (for-each g$0$12830 g$0$22938) (eval-core (g$0$12392 g$0$22937)))))))) (set! g$0$13683 (lambda (g$0$22941) ((lambda (g$0$22943 g$0$22945) (begin (set! g$0$22943 (lambda (g$0$22955) (if (null? g$0$22955) (g$0$13107) (g$0$13108 (quote #f) (map (lambda (g$0$22957) ((lambda (g$0$22959 g$0$22960) (list (quote set!) g$0$22959 g$0$22960)) (car g$0$22957) (cddr g$0$22957))) g$0$22955))))) (set! g$0$22945 (lambda (g$0$22947) (for-each (lambda (g$0$22949) ((lambda (g$0$22951 g$0$22952) (set-symbol-value! g$0$22951 g$0$22952)) (car g$0$22949) (cadr g$0$22949))) g$0$22947))) (call-with-values (lambda () (g$0$13652 g$0$22941)) (lambda (g$0$22963 g$0$22964 g$0$22965 g$0$22966 g$0$22967 g$0$22968 g$0$22969 g$0$22970 g$0$22971) ((lambda (g$0$22981 g$0$22982 g$0$22983 g$0$22984 g$0$22985 g$0$22986) (begin (g$0$12834 g$0$22981 g$0$22982 g$0$22983 g$0$22984 g$0$22985 g$0$22986 g$0$22970 g$0$22971 (lambda () (g$0$22945 g$0$22969)) (lambda () (eval-core (g$0$12392 g$0$22968))) (quote #t)) (values g$0$22968 (g$0$22943 g$0$22969) g$0$22970 g$0$22971))) (gensym) g$0$22963 g$0$22964 (map g$0$12826 g$0$22965) (map g$0$12826 g$0$22967) (map g$0$12826 g$0$22966)))))) (quote #f) (quote #f)))) (set! g$0$13685 (lambda (g$0$22993) (call-with-values (lambda () (g$0$13683 g$0$22993)) (lambda (g$0$22995 g$0$22996 g$0$22997 g$0$22998) (values g$0$22995 g$0$22997 g$0$22998))))) (set! g$0$13687 (lambda (g$0$23003 g$0$23004 g$0$23005) (if (null? g$0$23004) g$0$23005 (g$0$13687 g$0$23003 (cdr g$0$23004) (cons (g$0$23003 (car g$0$23004)) g$0$23005))))) (set! g$0$13689 (lambda (g$0$23009 g$0$23010) (g$0$13108 (quote #f) (cons (g$0$13107) (g$0$13687 (lambda (g$0$23013) (list (quote set!) (cdr g$0$23013) (car g$0$23013))) g$0$23009 g$0$23010))))) (set! g$0$13691 (lambda (g$0$23015 g$0$23016 g$0$23017) (map (lambda (g$0$23021 g$0$23022) ((lambda (g$0$23025) ((lambda (g$0$23027) ((lambda () (begin (if g$0$23027 (void) (error (quote expander) (quote "cannot export unbound identifier") (g$0$13243 g$0$23025 (quote ())))) (cons g$0$23022 g$0$23027))))) (g$0$13247 g$0$23025))) (g$0$13201 g$0$23021 g$0$13131 (list g$0$23017)))) g$0$23015 g$0$23016))) (set! g$0$13693 (lambda (g$0$23029) (letrec ((g$0$23031 (lambda (g$0$23033 g$0$23034 g$0$23035 g$0$23036) (if (null? g$0$23033) (values g$0$23034 g$0$23035 g$0$23036) ((lambda (g$0$23041) ((lambda (g$0$23043 g$0$23044) ((lambda (g$0$23047) (if (memv g$0$23047 (quote (lexical))) ((lambda (g$0$23052) (g$0$23031 (cdr g$0$23033) (cons (cons* g$0$23043 (quote global) g$0$23052) g$0$23034) (cons (cons (g$0$13255 g$0$23044) g$0$23052) g$0$23035) g$0$23036)) (g$0$13137 (g$0$13255 g$0$23044))) (if (memv g$0$23047 (quote (local-macro))) ((lambda (g$0$23050) (g$0$23031 (cdr g$0$23033) (cons (cons* g$0$23043 (quote global-macro) g$0$23050) g$0$23034) g$0$23035 (cons (cons g$0$23050 (g$0$13255 g$0$23044)) g$0$23036))) (gensym)) (if (memv g$0$23047 (quote (local-macro!))) ((lambda (g$0$23048) (g$0$23031 (cdr g$0$23033) (cons (cons* g$0$23043 (quote global-macro!) g$0$23048) g$0$23034) g$0$23035 (cons (cons g$0$23048 (g$0$13255 g$0$23044)) g$0$23036))) (gensym)) (if (memv g$0$23047 (quote ($rtd $module))) (g$0$23031 (cdr g$0$23033) (cons g$0$23041 g$0$23034) g$0$23035 g$0$23036) (error (quote expander) (quote "BUG: do not know how to export") (g$0$13253 g$0$23044) (g$0$13255 g$0$23044))))))) (g$0$13253 g$0$23044))) (car g$0$23041) (cdr g$0$23041))) (car g$0$23033)))))) (g$0$23031 g$0$23029 (quote ()) (quote ()) (quote ()))))) (set! g$0$13695 (lambda (g$0$23054) ((lambda (g$0$23056) ((lambda (g$0$23058) (if (if g$0$23058 (begin (quote #f) (apply (lambda (g$0$23060) (quote #t)) g$0$23058)) (quote #f)) (apply (lambda (g$0$23062) (map (lambda (g$0$23064) (g$0$13175 (gensym (quote t)) g$0$13131 (quote ()))) g$0$23062)) g$0$23058) ((lambda (g$0$23066) ((lambda (g$0$23068) (if (if g$0$23068 (begin (quote #f) (apply (lambda () (quote #t)) g$0$23068)) (quote #f)) (apply (lambda () (error (quote generate-temporaries) (quote "not a list"))) g$0$23068) (error (quote expander) (quote "invalid syntax") (g$0$13243 g$0$23066 (quote ()))))) ((lambda (g$0$23070) (quote ())) g$0$23066))) g$0$23056))) ((letrec ((g$0$23072 (lambda (g$0$23074) (if (g$0$13211 g$0$23074) ((lambda (g$0$23076) (if g$0$23076 (begin (quote #f) ((lambda (g$0$23078) (if g$0$23078 (begin (quote #f) (map cons g$0$23076 g$0$23078)) (quote #f))) (g$0$23072 (g$0$13223 g$0$23074)))) (quote #f))) ((lambda (g$0$23080) (list g$0$23080)) (g$0$13219 g$0$23074))) (if (g$0$13215 g$0$23074) (list (begin (quote ls) (quote ()))) (quote #f)))))) g$0$23072) g$0$23056))) g$0$23054))) (set! g$0$13697 (lambda (g$0$23082 g$0$23083) (if (g$0$13225 g$0$23082) (if (g$0$13225 g$0$23083) (g$0$13233 g$0$23082 g$0$23083) (error (quote free-identifier=?) (quote "not an identifier") g$0$23083)) (error (quote free-identifier=?) (quote "not an identifier") g$0$23082)))) (set! g$0$13699 (lambda (g$0$23086 g$0$23087) (if (g$0$13225 g$0$23086) (if (g$0$13225 g$0$23087) (g$0$13231 g$0$23086 g$0$23087) (error (quote bound-identifier=?) (quote "not an identifier") g$0$23087)) (error (quote bound-identifier=?) (quote "not an identifier") g$0$23086)))) (set! g$0$13701 (lambda (g$0$23090 . g$0$23092) (begin (if (for-all string? g$0$23092) (void) (error (quote syntax-error) (quote "invalid argument") g$0$23092)) (error (quote expander) (quote "invalid syntax") (g$0$13245 g$0$23090) (apply string-append g$0$23092))))) (set! g$0$13703 (lambda (g$0$23094) (g$0$13225 g$0$23094))) (set! g$0$13705 (lambda (g$0$23096 g$0$23097) (if (g$0$13225 g$0$23096) (g$0$13191 g$0$23096 g$0$23097) (error (quote datum->syntax) (quote "not an identifier") g$0$23096)))) (set! g$0$13707 (lambda (g$0$23100) (g$0$13245 g$0$23100))) (set! g$0$13709 (lambda (g$0$23102) (call-with-values (lambda () (g$0$13656 g$0$23102)) (lambda (g$0$23104 g$0$23105) (begin (for-each g$0$12830 g$0$23104) (eval-core (g$0$12392 g$0$23105))))))) (set! g$0$13711 (g$0$12318 (quote #f))) (set! g$0$13713 (lambda (g$0$23108) ((lambda (g$0$23110) (if g$0$23110 ((lambda (g$0$23112) ((lambda (g$0$23114) (if g$0$23114 (cdr g$0$23114) ((lambda (g$0$23116) ((lambda (g$0$23118) (if g$0$23118 ((lambda (g$0$23120) ((lambda (g$0$23122) (begin (g$0$12833 g$0$23112 g$0$23108 g$0$23122) g$0$23122)) (cdr g$0$23120))) g$0$23118) ((lambda (g$0$23124) (begin (g$0$12833 g$0$23112 g$0$23108 g$0$23124) (g$0$12832 g$0$23112 g$0$23124 (cons (quote global) (cons g$0$23112 (g$0$13137 g$0$23108)))) g$0$23124)) (g$0$13139 g$0$23108)))) (assq g$0$23108 g$0$23116))) (if (g$0$12838 (quote (ikarus))) (g$0$12864 (g$0$12839 (quote (ikarus)))) (quote ()))))) (assq g$0$23108 (g$0$12864 g$0$23112)))) g$0$23110) (quote #f))) (g$0$13711)))) (set! g$0$13715 (lambda (g$0$23126) ((lambda (g$0$23128) (begin (set! g$0$23128 (lambda (g$0$23130) ((lambda (g$0$23132 g$0$23133) (if g$0$23132 (set-symbol-value! g$0$23132 (eval-core (g$0$12392 g$0$23133))) (eval-core (g$0$12392 g$0$23133)))) (car g$0$23130) (cdr g$0$23130)))) ((lambda (g$0$23136 g$0$23137) ((lambda (g$0$23140) (begin (for-each g$0$12830 (g$0$23136)) (if (null? g$0$23140) (void) (begin (for-each g$0$23128 (reverse (cdr g$0$23140))) (g$0$23128 (car g$0$23140)))))) ((lambda (g$0$23148 g$0$23149 g$0$23150 g$0$23151 g$0$23152 g$0$23153) ((lambda (g$0$23160) (dynamic-wind g$0$23160 (lambda () (g$0$13628 (list (g$0$13201 g$0$23126 g$0$13131 (quote ()))) (quote ()))) g$0$23160)) (lambda () (begin ((lambda (g$0$23162) (begin (g$0$23148 g$0$23151) (set! g$0$23151 g$0$23162))) (g$0$23148)) ((lambda (g$0$23164) (begin (g$0$23149 g$0$23152) (set! g$0$23152 g$0$23164))) (g$0$23149)) ((lambda (g$0$23166) (begin (g$0$23150 g$0$23153) (set! g$0$23153 g$0$23166))) (g$0$23150)))))) g$0$13644 g$0$13646 g$0$13711 g$0$23136 g$0$23137 (g$0$12839 (quote (ikarus interaction)))))) (g$0$13642) (g$0$13642)))) (quote #f)))) (begin (set! g$0$23168 g$0$13715) (set! g$0$23169 g$0$13713) (set! g$0$23170 g$0$13711) (set! g$0$23171 g$0$13709) (set! g$0$23172 g$0$13707) (set! g$0$23173 g$0$13705) (set! g$0$23174 g$0$13703) (set! g$0$23175 g$0$13701) (set! g$0$23176 g$0$13699) (set! g$0$23177 g$0$13697) (set! g$0$23178 g$0$13695) (set! g$0$23179 g$0$13693) (set! g$0$23180 g$0$13691) (set! g$0$23181 g$0$13689) (set! g$0$23182 g$0$13687) (set! g$0$23183 g$0$13685) (set! g$0$23184 g$0$13683) (set! g$0$23185 g$0$13681) (set! g$0$23186 g$0$13679) (set! g$0$23187 g$0$13677) (set! g$0$23188 g$0$13675) (set! g$0$23189 g$0$13673) (set! g$0$23190 g$0$13671) (set! g$0$23191 g$0$13669) (set! g$0$23192 g$0$13667) (set! g$0$23193 g$0$13665) (set! g$0$23194 g$0$13663) (set! g$0$23195 g$0$13661) (set! g$0$23196 g$0$13659) (set! g$0$23197 g$0$13656) (set! g$0$23198 g$0$13654) (set! g$0$23199 g$0$13652) (set! g$0$23200 g$0$13650) (set! g$0$23201 g$0$13648) (set! g$0$23202 g$0$13646) (set! g$0$23203 g$0$13644) (set! g$0$23204 g$0$13642) (set! g$0$23205 g$0$13640) (set! g$0$23206 g$0$13638) (set! g$0$23207 g$0$13636) (set! g$0$23208 g$0$13634) (set! g$0$23209 g$0$13632) (set! g$0$23210 g$0$13630) (set! g$0$23211 g$0$13628) (set! g$0$23212 g$0$13626) (set! g$0$23213 g$0$13624) (set! g$0$23214 g$0$13622) (set! g$0$23215 g$0$13620) (set! g$0$23216 g$0$13618) (set! g$0$23217 g$0$13616) (set! g$0$23218 g$0$13614) (set! g$0$23219 g$0$13612) (set! g$0$23220 g$0$13610) (set! g$0$23221 g$0$13608) (set! g$0$23222 g$0$13606) (set! g$0$23223 g$0$13604) (set! g$0$23224 g$0$13602) (set! g$0$23225 g$0$13600) (set! g$0$23226 g$0$13598) (set! g$0$23227 g$0$13596) (set! g$0$23228 g$0$13594) (set! g$0$23229 g$0$13592) (set! g$0$23230 g$0$13590) (set! g$0$23231 g$0$13588) (set! g$0$23232 g$0$13586) (set! g$0$23233 g$0$13584) (set! g$0$23234 g$0$13582) (set! g$0$23235 g$0$13580) (set! g$0$23236 g$0$13578) (set! g$0$23237 g$0$13576) (set! g$0$23238 g$0$13574) (set! g$0$23239 g$0$13572) (set! g$0$23240 g$0$13570) (set! g$0$23241 g$0$13568) (set! g$0$23242 g$0$13566) (set! g$0$23243 g$0$13564) (set! g$0$23244 g$0$13562) (set! g$0$23245 g$0$13560) (set! g$0$23246 g$0$13558) (set! g$0$23247 g$0$13556) (set! g$0$23248 g$0$13554) (set! g$0$23249 g$0$13552) (set! g$0$23250 g$0$13550) (set! g$0$23251 g$0$13548) (set! g$0$23252 g$0$13546) (set! g$0$23253 g$0$13544) (set! g$0$23254 g$0$13542) (set! g$0$23255 g$0$13540) (set! g$0$23256 g$0$13538) (set! g$0$23257 g$0$13536) (set! g$0$23258 g$0$13534) (set! g$0$23259 g$0$13532) (set! g$0$23260 g$0$13530) (set! g$0$23261 g$0$13528) (set! g$0$23262 g$0$13526) (set! g$0$23263 g$0$13524) (set! g$0$23264 g$0$13522) (set! g$0$23265 g$0$13520) (set! g$0$23266 g$0$13518) (set! g$0$23267 g$0$13516) (set! g$0$23268 g$0$13514) (set! g$0$23269 g$0$13512) (set! g$0$23270 g$0$13510) (set! g$0$23271 g$0$13508) (set! g$0$23272 g$0$13506) (set! g$0$23273 g$0$13504) (set! g$0$23274 g$0$13502) (set! g$0$23275 g$0$13500) (set! g$0$23276 g$0$13498) (set! g$0$23277 g$0$13496) (set! g$0$23278 g$0$13494) (set! g$0$23279 g$0$13492) (set! g$0$23280 g$0$13490) (set! g$0$23281 g$0$13488) (set! g$0$23282 g$0$13486) (set! g$0$23283 g$0$13484) (set! g$0$23284 g$0$13482) (set! g$0$23285 g$0$13480) (set! g$0$23286 g$0$13478) (set! g$0$23287 g$0$13476) (set! g$0$23288 g$0$13474) (set! g$0$23290 g$0$13275) (set! g$0$23291 g$0$13273) (set! g$0$23292 g$0$13271) (set! g$0$23294 g$0$13257) (set! g$0$23295 g$0$13255) (set! g$0$23296 g$0$13253) (set! g$0$23297 g$0$13251) (set! g$0$23298 g$0$13249) (set! g$0$23299 g$0$13247) (set! g$0$23300 g$0$13245) (set! g$0$23301 g$0$13243) (set! g$0$23302 g$0$13241) (set! g$0$23303 g$0$13239) (set! g$0$23304 g$0$13237) (set! g$0$23305 g$0$13235) (set! g$0$23306 g$0$13233) (set! g$0$23307 g$0$13231) (set! g$0$23308 g$0$13229) (set! g$0$23309 g$0$13227) (set! g$0$23310 g$0$13225) (set! g$0$23311 g$0$13223) (set! g$0$23312 g$0$13221) (set! g$0$23313 g$0$13219) (set! g$0$23314 g$0$13217) (set! g$0$23315 g$0$13215) (set! g$0$23316 g$0$13213) (set! g$0$23317 g$0$13211) (set! g$0$23318 g$0$13209) (set! g$0$23319 g$0$13207) (set! g$0$23320 g$0$13205) (set! g$0$23321 g$0$13203) (set! g$0$23322 g$0$13201) (set! g$0$23323 g$0$13199) (set! g$0$23324 g$0$13197) (set! g$0$23325 g$0$13195) (set! g$0$23326 g$0$13193) (set! g$0$23327 g$0$13191) (set! g$0$23328 g$0$13189) (set! g$0$23329 g$0$13187) (set! g$0$23330 g$0$13185) (set! g$0$23331 g$0$13183) (set! g$0$23332 g$0$13181) (set! g$0$23333 g$0$13179) (set! g$0$23334 g$0$13177) (set! g$0$23335 g$0$13175) (set! g$0$23336 g$0$13172) (set! g$0$23337 g$0$13170) (set! g$0$23338 g$0$13168) (set! g$0$23339 g$0$13166) (set! g$0$23340 g$0$13164) (set! g$0$23341 g$0$13162) (set! g$0$23342 g$0$13160) (set! g$0$23343 g$0$13158) (set! g$0$23344 g$0$13156) (set! g$0$23345 g$0$13154) (set! g$0$23346 g$0$13152) (set! g$0$23347 g$0$13150) (set! g$0$23348 g$0$13148) (set! g$0$23349 g$0$13146) (set! g$0$23350 g$0$13144) (set! g$0$23351 g$0$13142) (set! g$0$23352 g$0$13139) (set! g$0$23353 g$0$13137) (set! g$0$23354 g$0$13135) (set! g$0$23355 g$0$13133) (set! g$0$23356 g$0$13131) (set! g$0$23358 g$0$13126) (set! g$0$23359 g$0$13124) (g$0$12842 g$0$13683)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (g$0$12396 (lambda (g$0$24122) ((lambda (g$0$24124) (if g$0$24124 (cdr g$0$24124) (quote #f))) (assq g$0$24122 (quote ((syntax-error . g$0$23175) (syntax-dispatch . g$0$23241) (make-variable-transformer . g$0$23291) (identifier? . g$0$23174) (generate-temporaries . g$0$23178) (free-identifier=? . g$0$23177) (syntax->datum . g$0$23172) (datum->syntax . g$0$23173) (bound-identifier=? . g$0$23176) (null-environment . g$0$23188) (eval . g$0$23185) (environment . g$0$23189))))))) (g$0$12834 (quote g$0$24089) (quote (ikarus interaction)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24090) (quote (psyntax null-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((unquote-splicing . g$0$23426) (unquote . g$0$23425) (delay . g$0$23418) (or . g$0$23416) (and . g$0$23415) (do . g$0$23414) (cond . g$0$23413) (let* . g$0$23412) (let . g$0$23411) (quasiquote . g$0$23407) (syntax-rules . g$0$23406) (case . g$0$23400) (if . g$0$23396) (letrec . g$0$23394) (lambda . g$0$23391) (quote . g$0$23388) (letrec-syntax . g$0$23386) (let-syntax . g$0$23385) (set! . g$0$23384) (begin . g$0$23382) (define-syntax . g$0$23380) (define . g$0$23379))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24091) (quote (psyntax scheme-report-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-ci>? . g$0$24071) (string-ci>=? . g$0$24070) (string-ci=? . g$0$24069) (string-ci<? . g$0$24068) (string-ci<=? . g$0$24067) (char-whitespace? . g$0$24066) (char-upper-case? . g$0$24065) (char-numeric? . g$0$24063) (char-lower-case? . g$0$24062) (char-upcase . g$0$24060) (char-downcase . g$0$24057) (char-ci>? . g$0$24056) (char-ci>=? . g$0$24055) (char-ci=? . g$0$24054) (char-ci<? . g$0$24053) (char-ci<=? . g$0$24052) (char-alphabetic? . g$0$24051) (call-with-output-file . g$0$24007) (call-with-input-file . g$0$24006) (write-char . g$0$24005) (write . g$0$24004) (with-output-to-file . g$0$24003) (with-input-from-file . g$0$24002) (read-char . g$0$24001) (read . g$0$24000) (peek-char . g$0$23999) (open-output-file . g$0$23998) (open-input-file . g$0$23997) (newline . g$0$23996) (display . g$0$23995) (close-output-port . g$0$23994) (close-input-port . g$0$23993) (eof-object . g$0$23991) (current-output-port . g$0$23989) (current-input-port . g$0$23988) (output-port? . g$0$23987) (input-port? . g$0$23986) (scheme-report-environment . g$0$23901) (quotient . g$0$23900) (null-environment . g$0$13676) (remainder . g$0$23899) (modulo . g$0$23898) (inexact->exact . g$0$23897) (force . g$0$23896) (exact->inexact . g$0$23895) (string-fill! . g$0$23892) (string-set! . g$0$23891) (set-cdr! . g$0$23890) (set-car! . g$0$23889) (memv . g$0$23883) (memq . g$0$23882) (member . g$0$23880) (assv . g$0$23872) (assq . g$0$23871) (assoc . g$0$23869) (eval . g$0$13682) (zero? . g$0$23638) (vector? . g$0$23637) (vector-set! . g$0$23636) (vector-ref . g$0$23635) (vector-length . g$0$23633) (vector-fill! . g$0$23631) (vector->list . g$0$23630) (vector . g$0$23629) (values . g$0$23628) (truncate . g$0$23627) (tan . g$0$23626) (symbol? . g$0$23625) (symbol->string . g$0$23623) (substring . g$0$23622) (string? . g$0$23621) (string>? . g$0$23620) (string>=? . g$0$23619) (string=? . g$0$23618) (string<? . g$0$23617) (string<=? . g$0$23616) (string-ref . g$0$23615) (string-length . g$0$23614) (string-copy . g$0$23612) (string-append . g$0$23611) (string->symbol . g$0$23610) (string->number . g$0$23609) (string->list . g$0$23608) (string . g$0$23607) (sqrt . g$0$23606) (sin . g$0$23605) (round . g$0$23604) (reverse . g$0$23603) (real? . g$0$23602) (real-part . g$0$23600) (rationalize . g$0$23599) (rational? . g$0$23598) (procedure? . g$0$23596) (positive? . g$0$23595) (pair? . g$0$23594) (odd? . g$0$23593) (numerator . g$0$23592) (number? . g$0$23591) (number->string . g$0$23590) (not . g$0$23588) (negative? . g$0$23587) (min . g$0$23585) (max . g$0$23584) (map . g$0$23583) (make-vector . g$0$23582) (make-string . g$0$23581) (make-rectangular . g$0$23580) (make-polar . g$0$23579) (magnitude . g$0$23578) (log . g$0$23577) (list? . g$0$23576) (list-tail . g$0$23575) (list-ref . g$0$23574) (list->vector . g$0$23573) (list->string . g$0$23572) (list . g$0$23571) (length . g$0$23570) (lcm . g$0$23569) (integer? . g$0$23568) (integer->char . g$0$23566) (inexact? . g$0$23564) (imag-part . g$0$23562) (gcd . g$0$23561) (for-each . g$0$23560) (floor . g$0$23559) (expt . g$0$23557) (exp . g$0$23556) (exact? . g$0$23555) (even? . g$0$23552) (eqv? . g$0$23550) (equal? . g$0$23549) (eq? . g$0$23548) (dynamic-wind . g$0$23547) (denominator . g$0$23540) (cos . g$0$23539) (cons . g$0$23538) (complex? . g$0$23537) (char? . g$0$23536) (char>? . g$0$23535) (char>=? . g$0$23534) (char=? . g$0$23533) (char<? . g$0$23532) (char<=? . g$0$23531) (char->integer . g$0$23530) (ceiling . g$0$23529) (call-with-values . g$0$23528) (call-with-current-continuation . g$0$23526) (cddddr . g$0$23525) (cdddar . g$0$23524) (cddadr . g$0$23523) (cddaar . g$0$23522) (cdaddr . g$0$23521) (cdadar . g$0$23520) (cdaadr . g$0$23519) (cdaaar . g$0$23518) (cadddr . g$0$23517) (caddar . g$0$23516) (cadadr . g$0$23515) (cadaar . g$0$23514) (caaddr . g$0$23513) (caadar . g$0$23512) (caaadr . g$0$23511) (caaaar . g$0$23510) (cdddr . g$0$23509) (cddar . g$0$23508) (cdadr . g$0$23507) (cdaar . g$0$23506) (caddr . g$0$23505) (cadar . g$0$23504) (caadr . g$0$23503) (caaar . g$0$23502) (cddr . g$0$23501) (cdar . g$0$23500) (cadr . g$0$23499) (caar . g$0$23498) (cdr . g$0$23497) (car . g$0$23496) (boolean? . g$0$23495) (atan . g$0$23493) (asin . g$0$23491) (apply . g$0$23490) (append . g$0$23489) (angle . g$0$23488) (acos . g$0$23487) (abs . g$0$23486) (/ . g$0$23485) (* . g$0$23484) (- . g$0$23483) (+ . g$0$23482) (>= . g$0$23481) (> . g$0$23480) (= . g$0$23479) (<= . g$0$23478) (< . g$0$23477) (unquote-splicing . g$0$23426) (unquote . g$0$23425) (delay . g$0$23418) (or . g$0$23416) (and . g$0$23415) (do . g$0$23414) (cond . g$0$23413) (let* . g$0$23412) (let . g$0$23411) (quasiquote . g$0$23407) (syntax-rules . g$0$23406) (case . g$0$23400) (if . g$0$23396) (letrec . g$0$23394) (lambda . g$0$23391) (quote . g$0$23388) (letrec-syntax . g$0$23386) (let-syntax . g$0$23385) (set! . g$0$23384) (begin . g$0$23382) (define-syntax . g$0$23380) (define . g$0$23379))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24092) (quote (psyntax modules)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((module . g$0$23381))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24093) (quote (chez parameters)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24094) (quote (rnrs)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$0$24079) (string-titlecase . g$0$24078) (string-normalize-nfkd . g$0$24077) (string-normalize-nfkc . g$0$24076) (string-normalize-nfd . g$0$24075) (string-normalize-nfc . g$0$24074) (string-foldcase . g$0$24073) (string-downcase . g$0$24072) (string-ci>? . g$0$24071) (string-ci>=? . g$0$24070) (string-ci=? . g$0$24069) (string-ci<? . g$0$24068) (string-ci<=? . g$0$24067) (char-whitespace? . g$0$24066) (char-upper-case? . g$0$24065) (char-title-case? . g$0$24064) (char-numeric? . g$0$24063) (char-lower-case? . g$0$24062) (char-general-category . g$0$24061) (char-upcase . g$0$24060) (char-titlecase . g$0$24059) (char-foldcase . g$0$24058) (char-downcase . g$0$24057) (char-ci>? . g$0$24056) (char-ci>=? . g$0$24055) (char-ci=? . g$0$24054) (char-ci<? . g$0$24053) (char-ci<=? . g$0$24052) (char-alphabetic? . g$0$24051) (make-variable-transformer . g$0$13274) (identifier? . g$0$13704) (generate-temporaries . g$0$13696) (free-identifier=? . g$0$13698) (syntax->datum . g$0$13708) (datum->syntax . g$0$13706) (bound-identifier=? . g$0$13700) (record-type-descriptor? . g$0$24050) (record-predicate . g$0$24049) (record-mutator . g$0$24048) (record-constructor . g$0$24047) (record-accessor . g$0$24046) (make-record-type-descriptor . g$0$24045) (make-record-constructor-descriptor . g$0$24044) (record? . g$0$24043) (record-type-uid . g$0$24042) (record-type-sealed? . g$0$24041) (record-type-parent . g$0$24040) (record-type-opaque? . g$0$24039) (record-type-name . g$0$24038) (record-type-generative? . g$0$24037) (record-type-field-names . g$0$24036) (record-rtd . g$0$24035) (record-field-mutable? . g$0$24034) (delete-file . g$0$24033) (file-exists? . g$0$24032) (vector-sort! . g$0$24031) (vector-sort . g$0$24030) (list-sort . g$0$24029) (symbol-hash . g$0$24028) (string-ci-hash . g$0$24027) (string-hash . g$0$24026) (equal-hash . g$0$24025) (hashtable-equivalence-function . g$0$24024) (make-hashtable . g$0$24023) (hashtable-hash-function . g$0$24022) (make-eqv-hashtable . g$0$24021) (make-eq-hashtable . g$0$24020) (hashtable? . g$0$24019) (hashtable-update! . g$0$24018) (hashtable-size . g$0$24017) (hashtable-set! . g$0$24016) (hashtable-ref . g$0$24015) (hashtable-mutable? . g$0$24014) (hashtable-keys . g$0$24013) (hashtable-entries . g$0$24012) (hashtable-delete! . g$0$24011) (hashtable-copy . g$0$24010) (hashtable-contains? . g$0$24009) (hashtable-clear! . g$0$24008) (call-with-output-file . g$0$24007) (call-with-input-file . g$0$24006) (write-char . g$0$24005) (write . g$0$24004) (with-output-to-file . g$0$24003) (with-input-from-file . g$0$24002) (read-char . g$0$24001) (read . g$0$24000) (peek-char . g$0$23999) (open-output-file . g$0$23998) (open-input-file . g$0$23997) (newline . g$0$23996) (display . g$0$23995) (close-output-port . g$0$23994) (close-input-port . g$0$23993) (eof-object? . g$0$23992) (eof-object . g$0$23991) (current-error-port . g$0$23990) (current-output-port . g$0$23989) (current-input-port . g$0$23988) (output-port? . g$0$23987) (input-port? . g$0$23986) (utf-8-codec . g$0$23985) (utf-16-codec . g$0$23984) (transcoder-error-handling-mode . g$0$23983) (transcoder-eol-style . g$0$23982) (transcoder-codec . g$0$23981) (transcoded-port . g$0$23980) (textual-port? . g$0$23979) (string->bytevector . g$0$23978) (standard-output-port . g$0$23977) (standard-input-port . g$0$23976) (standard-error-port . g$0$23975) (set-port-position! . g$0$23974) (put-u8 . g$0$23973) (put-string . g$0$23972) (put-datum . g$0$23971) (put-char . g$0$23970) (put-bytevector . g$0$23969) (port? . g$0$23968) (port-transcoder . g$0$23967) (port-position . g$0$23966) (port-has-set-port-position!? . g$0$23965) (port-has-port-position? . g$0$23964) (port-eof? . g$0$23963) (output-port-buffer-mode . g$0$23962) (open-string-output-port . g$0$23961) (open-string-input-port . g$0$23960) (open-file-output-port . g$0$23959) (open-file-input/output-port . g$0$23958) (open-file-input-port . g$0$23957) (open-bytevector-output-port . g$0$23956) (open-bytevector-input-port . g$0$23955) (native-transcoder . g$0$23954) (native-eol-style . g$0$23953) (make-transcoder . g$0$23952) (latin-1-codec . g$0$23951) (make-i/o-write-error . g$0$23950) (make-i/o-read-error . g$0$23949) (make-i/o-port-error . g$0$23948) (make-i/o-invalid-position-error . g$0$23947) (make-i/o-filename-error . g$0$23946) (make-i/o-file-protection-error . g$0$23945) (make-i/o-file-is-read-only-error . g$0$23944) (make-i/o-file-does-not-exist-error . g$0$23943) (make-i/o-file-already-exists-error . g$0$23942) (make-i/o-error . g$0$23941) (make-i/o-encoding-error . g$0$23940) (make-i/o-decoding-error . g$0$23939) (make-custom-textual-output-port . g$0$23938) (make-custom-textual-input/output-port . g$0$23937) (make-custom-textual-input-port . g$0$23936) (make-custom-binary-output-port . g$0$23935) (make-custom-binary-input/output-port . g$0$23934) (make-custom-binary-input-port . g$0$23933) (make-bytevector . g$0$23932) (lookahead-u8 . g$0$23931) (lookahead-char . g$0$23930) (i/o-write-error? . g$0$23929) (i/o-read-error? . g$0$23928) (i/o-port-error? . g$0$23927) (i/o-invalid-position-error? . g$0$23926) (i/o-filename-error? . g$0$23925) (i/o-file-protection-error? . g$0$23924) (i/o-file-is-read-only-error? . g$0$23923) (i/o-file-does-not-exist-error? . g$0$23922) (i/o-file-already-exists-error? . g$0$23921) (i/o-error? . g$0$23920) (i/o-error-port . g$0$23919) (i/o-error-filename . g$0$23918) (i/o-encoding-error? . g$0$23917) (i/o-encoding-error-char . g$0$23916) (i/o-decoding-error? . g$0$23915) (get-u8 . g$0$23914) (get-string-n! . g$0$23913) (get-string-n . g$0$23912) (get-string-all . g$0$23911) (get-line . g$0$23910) (get-datum . g$0$23909) (get-char . g$0$23908) (get-bytevector-some . g$0$23907) (get-bytevector-n! . g$0$23906) (get-bytevector-n . g$0$23905) (get-bytevector-all . g$0$23904) (flush-output-port . g$0$23903) (close-port . g$0$23902) (exit . g$0$23894) (command-line . g$0$23893) (remove . g$0$23888) (remv . g$0$23887) (remp . g$0$23886) (remq . g$0$23885) (partition . g$0$23884) (memv . g$0$23883) (memq . g$0$23882) (memp . g$0$23881) (member . g$0$23880) (exists . g$0$23879) (for-all . g$0$23878) (fold-right . g$0$23877) (fold-left . g$0$23876) (find . g$0$23875) (filter . g$0$23874) (cons* . g$0$23873) (assv . g$0$23872) (assq . g$0$23871) (assp . g$0$23870) (assoc . g$0$23869) (call-with-string-output-port . g$0$23868) (call-with-port . g$0$23867) (call-with-bytevector-output-port . g$0$23866) (bytevector->string . g$0$23865) (buffer-mode? . g$0$23864) (binary-port? . g$0$23863) (with-exception-handler . g$0$23862) (raise-continuable . g$0$23861) (raise . g$0$23860) (make-enumeration . g$0$23859) (enum-set=? . g$0$23858) (enum-set-universe . g$0$23857) (enum-set-union . g$0$23856) (enum-set-subset? . g$0$23855) (enum-set-projection . g$0$23854) (enum-set-member? . g$0$23853) (enum-set-intersection . g$0$23852) (enum-set-indexer . g$0$23851) (enum-set-difference . g$0$23850) (enum-set-constructor . g$0$23849) (enum-set-complement . g$0$23848) (enum-set->list . g$0$23847) (who-condition? . g$0$23846) (warning? . g$0$23845) (violation? . g$0$23844) (undefined-violation? . g$0$23843) (syntax-violation? . g$0$23842) (syntax-violation-subform . g$0$23841) (syntax-violation-form . g$0$23840) (syntax-violation . g$0$23839) (simple-conditions . g$0$23838) (serious-condition? . g$0$23837) (non-continuable-violation? . g$0$23836) (&non-continuable . g$0$23835) (message-condition? . g$0$23834) (make-who-condition . g$0$23833) (make-warning . g$0$23832) (make-violation . g$0$23831) (make-undefined-violation . g$0$23830) (make-syntax-violation . g$0$23829) (make-serious-condition . g$0$23828) (make-non-continuable-violation . g$0$23827) (make-message-condition . g$0$23826) (make-lexical-violation . g$0$23825) (make-irritants-condition . g$0$23824) (make-implementation-restriction-violation . g$0$23823) (make-error . g$0$23822) (make-assertion-violation . g$0$23821) (lexical-violation? . g$0$23820) (irritants-condition? . g$0$23819) (implementation-restriction-violation? . g$0$23818) (&implementation-restriction . g$0$23817) (error? . g$0$23816) (condition-who . g$0$23815) (condition-predicate . g$0$23814) (condition-message . g$0$23813) (condition-irritants . g$0$23812) (condition-accessor . g$0$23811) (condition . g$0$23810) (assertion-violation? . g$0$23809) (condition? . g$0$23808) (utf32->string . g$0$23807) (utf16->string . g$0$23806) (utf8->string . g$0$23805) (uint-list->bytevector . g$0$23804) (u8-list->bytevector . g$0$23803) (string->utf8 . g$0$23802) (string->utf32 . g$0$23801) (string->utf16 . g$0$23800) (sint-list->bytevector . g$0$23799) (native-endianness . g$0$23798) (bytevector? . g$0$23797) (bytevector=? . g$0$23796) (bytevector-uint-set! . g$0$23795) (bytevector-uint-ref . g$0$23794) (bytevector-u8-set! . g$0$23793) (bytevector-u8-ref . g$0$23792) (bytevector-u64-set! . g$0$23791) (bytevector-u64-ref . g$0$23790) (bytevector-u64-native-set! . g$0$23789) (bytevector-u64-native-ref . g$0$23788) (bytevector-u32-set! . g$0$23787) (bytevector-u32-ref . g$0$23786) (bytevector-u32-native-set! . g$0$23785) (bytevector-u32-native-ref . g$0$23784) (bytevector-u16-set! . g$0$23783) (bytevector-u16-ref . g$0$23782) (bytevector-u16-native-set! . g$0$23781) (bytevector-u16-native-ref . g$0$23780) (bytevector-sint-set! . g$0$23779) (bytevector-sint-ref . g$0$23778) (bytevector-s8-set! . g$0$23777) (bytevector-s8-ref . g$0$23776) (bytevector-s64-set! . g$0$23775) (bytevector-s64-ref . g$0$23774) (bytevector-s64-native-set! . g$0$23773) (bytevector-s64-native-ref . g$0$23772) (bytevector-s32-set! . g$0$23771) (bytevector-s32-ref . g$0$23770) (bytevector-s32-native-set! . g$0$23769) (bytevector-s32-native-ref . g$0$23768) (bytevector-s16-set! . g$0$23767) (bytevector-s16-ref . g$0$23766) (bytevector-s16-native-set! . g$0$23765) (bytevector-s16-native-ref . g$0$23764) (bytevector-length . g$0$23763) (bytevector-ieee-single-ref . g$0$23762) (bytevector-ieee-single-native-set! . g$0$23761) (bytevector-ieee-single-native-ref . g$0$23760) (bytevector-ieee-double-ref . g$0$23759) (bytevector-ieee-double-native-set! . g$0$23758) (bytevector-ieee-double-native-ref . g$0$23757) (bytevector-fill! . g$0$23756) (bytevector-copy! . g$0$23755) (bytevector-copy . g$0$23754) (bytevector->uint-list . g$0$23753) (bytevector->u8-list . g$0$23752) (bytevector->sint-list . g$0$23751) (no-nans-violation? . g$0$23750) (no-infinities-violation? . g$0$23749) (make-no-nans-violation . g$0$23748) (make-no-infinities-violation . g$0$23747) (real->flonum . g$0$23746) (flzero? . g$0$23745) (fltruncate . g$0$23744) (fltan . g$0$23743) (flsqrt . g$0$23742) (flsin . g$0$23741) (flround . g$0$23740) (flpositive? . g$0$23739) (flonum? . g$0$23738) (flodd? . g$0$23737) (flnumerator . g$0$23736) (flnegative? . g$0$23735) (flnan? . g$0$23734) (flmod0 . g$0$23733) (flmod . g$0$23732) (flmin . g$0$23731) (flmax . g$0$23730) (fllog . g$0$23729) (flinteger? . g$0$23728) (flinfinite? . g$0$23727) (flfloor . g$0$23726) (flfinite? . g$0$23725) (flexpt . g$0$23724) (flexp . g$0$23723) (fleven? . g$0$23722) (fldiv0-and-mod0 . g$0$23721) (fldiv0 . g$0$23720) (fldiv-and-mod . g$0$23719) (fldiv . g$0$23718) (fldenominator . g$0$23717) (flcos . g$0$23716) (flceiling . g$0$23715) (flatan . g$0$23714) (flasin . g$0$23713) (flacos . g$0$23712) (flabs . g$0$23711) (fl>? . g$0$23710) (fl>=? . g$0$23709) (fl=? . g$0$23708) (fl<? . g$0$23707) (fl<=? . g$0$23706) (fl/ . g$0$23705) (fl- . g$0$23704) (fl+ . g$0$23703) (fl* . g$0$23702) (fixnum->flonum . g$0$23701) (fxzero? . g$0$23700) (fxxor . g$0$23699) (fxrotate-bit-field . g$0$23698) (fxreverse-bit-field . g$0$23697) (fxpositive? . g$0$23696) (fxodd? . g$0$23695) (fxnot . g$0$23694) (fxnegative? . g$0$23693) (fxmod0 . g$0$23692) (fxmod . g$0$23691) (fxmin . g$0$23690) (fxmax . g$0$23689) (fxlength . g$0$23688) (fxior . g$0$23687) (fxif . g$0$23686) (fxfirst-bit-set . g$0$23685) (fxeven? . g$0$23684) (fxdiv0-and-mod0 . g$0$23683) (fxdiv0 . g$0$23682) (fxdiv-and-mod . g$0$23681) (fxdiv . g$0$23680) (fxcopy-bit-field . g$0$23679) (fxcopy-bit . g$0$23678) (fxbit-set? . g$0$23677) (fxbit-field . g$0$23676) (fxbit-count . g$0$23675) (fxarithmetic-shift-right . g$0$23674) (fxarithmetic-shift-left . g$0$23673) (fxarithmetic-shift . g$0$23672) (fxand . g$0$23671) (fx>? . g$0$23670) (fx>=? . g$0$23669) (fx=? . g$0$23668) (fx<? . g$0$23667) (fx<=? . g$0$23666) (fx-/carry . g$0$23665) (fx- . g$0$23664) (fx+/carry . g$0$23663) (fx+ . g$0$23662) (fx*/carry . g$0$23661) (fx* . g$0$23660) (greatest-fixnum . g$0$23659) (least-fixnum . g$0$23658) (fixnum-width . g$0$23657) (fixnum? . g$0$23656) (bitwise-rotate-bit-field . g$0$23655) (bitwise-reverse-bit-field . g$0$23654) (bitwise-length . g$0$23653) (bitwise-if . g$0$23652) (bitwise-first-bit-set . g$0$23651) (bitwise-copy-bit-field . g$0$23650) (bitwise-copy-bit . g$0$23649) (bitwise-bit-set? . g$0$23648) (bitwise-bit-field . g$0$23647) (bitwise-bit-count . g$0$23646) (bitwise-xor . g$0$23645) (bitwise-ior . g$0$23644) (bitwise-and . g$0$23643) (bitwise-not . g$0$23642) (bitwise-arithmetic-shift-right . g$0$23641) (bitwise-arithmetic-shift-left . g$0$23640) (bitwise-arithmetic-shift . g$0$23639) (zero? . g$0$23638) (vector? . g$0$23637) (vector-set! . g$0$23636) (vector-ref . g$0$23635) (vector-map . g$0$23634) (vector-length . g$0$23633) (vector-for-each . g$0$23632) (vector-fill! . g$0$23631) (vector->list . g$0$23630) (vector . g$0$23629) (values . g$0$23628) (truncate . g$0$23627) (tan . g$0$23626) (symbol? . g$0$23625) (symbol=? . g$0$23624) (symbol->string . g$0$23623) (substring . g$0$23622) (string? . g$0$23621) (string>? . g$0$23620) (string>=? . g$0$23619) (string=? . g$0$23618) (string<? . g$0$23617) (string<=? . g$0$23616) (string-ref . g$0$23615) (string-length . g$0$23614) (string-for-each . g$0$23613) (string-copy . g$0$23612) (string-append . g$0$23611) (string->symbol . g$0$23610) (string->number . g$0$23609) (string->list . g$0$23608) (string . g$0$23607) (sqrt . g$0$23606) (sin . g$0$23605) (round . g$0$23604) (reverse . g$0$23603) (real? . g$0$23602) (real-valued? . g$0$23601) (real-part . g$0$23600) (rationalize . g$0$23599) (rational? . g$0$23598) (rational-valued? . g$0$23597) (procedure? . g$0$23596) (positive? . g$0$23595) (pair? . g$0$23594) (odd? . g$0$23593) (numerator . g$0$23592) (number? . g$0$23591) (number->string . g$0$23590) (null? . g$0$23589) (not . g$0$23588) (negative? . g$0$23587) (nan? . g$0$23586) (min . g$0$23585) (max . g$0$23584) (map . g$0$23583) (make-vector . g$0$23582) (make-string . g$0$23581) (make-rectangular . g$0$23580) (make-polar . g$0$23579) (magnitude . g$0$23578) (log . g$0$23577) (list? . g$0$23576) (list-tail . g$0$23575) (list-ref . g$0$23574) (list->vector . g$0$23573) (list->string . g$0$23572) (list . g$0$23571) (length . g$0$23570) (lcm . g$0$23569) (integer? . g$0$23568) (integer-valued? . g$0$23567) (integer->char . g$0$23566) (infinite? . g$0$23565) (inexact? . g$0$23564) (inexact . g$0$23563) (imag-part . g$0$23562) (gcd . g$0$23561) (for-each . g$0$23560) (floor . g$0$23559) (finite? . g$0$23558) (expt . g$0$23557) (exp . g$0$23556) (exact? . g$0$23555) (exact-integer-sqrt . g$0$23554) (exact . g$0$23553) (even? . g$0$23552) (error . g$0$23551) (eqv? . g$0$23550) (equal? . g$0$23549) (eq? . g$0$23548) (dynamic-wind . g$0$23547) (div0-and-mod0 . g$0$23546) (mod0 . g$0$23545) (div0 . g$0$23544) (div-and-mod . g$0$23543) (mod . g$0$23542) (div . g$0$23541) (denominator . g$0$23540) (cos . g$0$23539) (cons . g$0$23538) (complex? . g$0$23537) (char? . g$0$23536) (char>? . g$0$23535) (char>=? . g$0$23534) (char=? . g$0$23533) (char<? . g$0$23532) (char<=? . g$0$23531) (char->integer . g$0$23530) (ceiling . g$0$23529) (call-with-values . g$0$23528) (call/cc . g$0$23527) (call-with-current-continuation . g$0$23526) (cddddr . g$0$23525) (cdddar . g$0$23524) (cddadr . g$0$23523) (cddaar . g$0$23522) (cdaddr . g$0$23521) (cdadar . g$0$23520) (cdaadr . g$0$23519) (cdaaar . g$0$23518) (cadddr . g$0$23517) (caddar . g$0$23516) (cadadr . g$0$23515) (cadaar . g$0$23514) (caaddr . g$0$23513) (caadar . g$0$23512) (caaadr . g$0$23511) (caaaar . g$0$23510) (cdddr . g$0$23509) (cddar . g$0$23508) (cdadr . g$0$23507) (cdaar . g$0$23506) (caddr . g$0$23505) (cadar . g$0$23504) (caadr . g$0$23503) (caaar . g$0$23502) (cddr . g$0$23501) (cdar . g$0$23500) (cadr . g$0$23499) (caar . g$0$23498) (cdr . g$0$23497) (car . g$0$23496) (boolean? . g$0$23495) (boolean=? . g$0$23494) (atan . g$0$23493) (assertion-violation . g$0$23492) (asin . g$0$23491) (apply . g$0$23490) (append . g$0$23489) (angle . g$0$23488) (acos . g$0$23487) (abs . g$0$23486) (/ . g$0$23485) (* . g$0$23484) (- . g$0$23483) (+ . g$0$23482) (>= . g$0$23481) (> . g$0$23480) (= . g$0$23479) (<= . g$0$23478) (< . g$0$23477) (let*-values . g$0$23476) (&no-nans . g$0$23475) (&no-infinities . g$0$23474) (&i/o-encoding . g$0$23473) (&i/o-decoding . g$0$23472) (&i/o-port . g$0$23471) (&i/o-file-does-not-exist . g$0$23470) (&i/o-file-already-exists . g$0$23469) (&i/o-file-is-read-only . g$0$23468) (&i/o-file-protection . g$0$23467) (&i/o-filename . g$0$23466) (&i/o-invalid-position . g$0$23465) (&i/o-write . g$0$23464) (&i/o-read . g$0$23463) (&i/o . g$0$23462) (&undefined . g$0$23461) (&syntax . g$0$23460) (&lexical . g$0$23459) (&who . g$0$23456) (&irritants . g$0$23455) (&assertion . g$0$23454) (&violation . g$0$23453) (&error . g$0$23452) (&serious . g$0$23451) (&warning . g$0$23450) (&message . g$0$23449) (&condition . g$0$23448) (define-condition-type . g$0$23447) (define-enumeration . g$0$23446) (define-record-type . g$0$23445) (parent-rtd . g$0$23444) (nongenerative . g$0$23443) (opaque . g$0$23442) (sealed . g$0$23441) (protocol . g$0$23440) (parent . g$0$23439) (immutable . g$0$23438) (mutable . g$0$23437) (fields . g$0$23436) (error-handling-mode . g$0$23435) (file-options . g$0$23434) (buffer-mode . g$0$23433) (eol-style . g$0$23432) (guard . g$0$23431) (unsyntax-splicing . g$0$23428) (unsyntax . g$0$23427) (unquote-splicing . g$0$23426) (unquote . g$0$23425) (_ . g$0$23424) (else . g$0$23423) (=> . g$0$23422) (|...| . g$0$23421) (assert . g$0$23420) (endianness . g$0$23419) (or . g$0$23416) (and . g$0$23415) (do . g$0$23414) (cond . g$0$23413) (let* . g$0$23412) (let . g$0$23411) (identifier-syntax . g$0$23410) (with-syntax . g$0$23409) (quasisyntax . g$0$23408) (quasiquote . g$0$23407) (syntax-rules . g$0$23406) (record-constructor-descriptor . g$0$23403) (record-type-descriptor . g$0$23402) (let-values . g$0$23401) (case . g$0$23400) (unless . g$0$23398) (when . g$0$23397) (if . g$0$23396) (letrec* . g$0$23395) (letrec . g$0$23394) (case-lambda . g$0$23392) (lambda . g$0$23391) (syntax . g$0$23390) (syntax-case . g$0$23389) (quote . g$0$23388) (letrec-syntax . g$0$23386) (let-syntax . g$0$23385) (set! . g$0$23384) (begin . g$0$23382) (define-syntax . g$0$23380) (define . g$0$23379))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24095) (quote (rnrs r5rs)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((scheme-report-environment . g$0$23901) (quotient . g$0$23900) (null-environment . g$0$13676) (remainder . g$0$23899) (modulo . g$0$23898) (inexact->exact . g$0$23897) (force . g$0$23896) (exact->inexact . g$0$23895) (delay . g$0$23418))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24096) (quote (rnrs control)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((do . g$0$23414) (unless . g$0$23398) (when . g$0$23397) (case-lambda . g$0$23392))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24097) (quote (rnrs eval)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((eval . g$0$13682) (environment . g$0$13674))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24098) (quote (rnrs mutable-pairs)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((set-cdr! . g$0$23890) (set-car! . g$0$23889))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24099) (quote (rnrs mutable-strings)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((string-fill! . g$0$23892) (string-set! . g$0$23891))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24100) (quote (rnrs programs)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((exit . g$0$23894) (command-line . g$0$23893))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24101) (quote (rnrs syntax-case)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((make-variable-transformer . g$0$13274) (identifier? . g$0$13704) (generate-temporaries . g$0$13696) (free-identifier=? . g$0$13698) (syntax->datum . g$0$13708) (datum->syntax . g$0$13706) (bound-identifier=? . g$0$13700) (syntax-violation . g$0$23839) (unsyntax-splicing . g$0$23428) (unsyntax . g$0$23427) (_ . g$0$23424) (|...| . g$0$23421) (with-syntax . g$0$23409) (quasisyntax . g$0$23408) (syntax . g$0$23390) (syntax-case . g$0$23389))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24102) (quote (rnrs files)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((delete-file . g$0$24033) (file-exists? . g$0$24032) (make-i/o-write-error . g$0$23950) (make-i/o-read-error . g$0$23949) (make-i/o-port-error . g$0$23948) (make-i/o-invalid-position-error . g$0$23947) (make-i/o-filename-error . g$0$23946) (make-i/o-file-protection-error . g$0$23945) (make-i/o-file-is-read-only-error . g$0$23944) (make-i/o-file-does-not-exist-error . g$0$23943) (make-i/o-file-already-exists-error . g$0$23942) (make-i/o-error . g$0$23941) (i/o-write-error? . g$0$23929) (i/o-read-error? . g$0$23928) (i/o-port-error? . g$0$23927) (i/o-invalid-position-error? . g$0$23926) (i/o-filename-error? . g$0$23925) (i/o-file-protection-error? . g$0$23924) (i/o-file-is-read-only-error? . g$0$23923) (i/o-file-does-not-exist-error? . g$0$23922) (i/o-file-already-exists-error? . g$0$23921) (i/o-error? . g$0$23920) (i/o-error-port . g$0$23919) (i/o-error-filename . g$0$23918) (&i/o-port . g$0$23471) (&i/o-file-does-not-exist . g$0$23470) (&i/o-file-already-exists . g$0$23469) (&i/o-file-is-read-only . g$0$23468) (&i/o-file-protection . g$0$23467) (&i/o-filename . g$0$23466) (&i/o-invalid-position . g$0$23465) (&i/o-write . g$0$23464) (&i/o-read . g$0$23463) (&i/o . g$0$23462))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24103) (quote (rnrs sorting)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((vector-sort! . g$0$24031) (vector-sort . g$0$24030) (list-sort . g$0$24029))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24104) (quote (rnrs base)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((zero? . g$0$23638) (vector? . g$0$23637) (vector-set! . g$0$23636) (vector-ref . g$0$23635) (vector-map . g$0$23634) (vector-length . g$0$23633) (vector-for-each . g$0$23632) (vector-fill! . g$0$23631) (vector->list . g$0$23630) (vector . g$0$23629) (values . g$0$23628) (truncate . g$0$23627) (tan . g$0$23626) (symbol? . g$0$23625) (symbol=? . g$0$23624) (symbol->string . g$0$23623) (substring . g$0$23622) (string? . g$0$23621) (string>? . g$0$23620) (string>=? . g$0$23619) (string=? . g$0$23618) (string<? . g$0$23617) (string<=? . g$0$23616) (string-ref . g$0$23615) (string-length . g$0$23614) (string-for-each . g$0$23613) (string-copy . g$0$23612) (string-append . g$0$23611) (string->symbol . g$0$23610) (string->number . g$0$23609) (string->list . g$0$23608) (string . g$0$23607) (sqrt . g$0$23606) (sin . g$0$23605) (round . g$0$23604) (reverse . g$0$23603) (real? . g$0$23602) (real-valued? . g$0$23601) (real-part . g$0$23600) (rationalize . g$0$23599) (rational? . g$0$23598) (rational-valued? . g$0$23597) (procedure? . g$0$23596) (positive? . g$0$23595) (pair? . g$0$23594) (odd? . g$0$23593) (numerator . g$0$23592) (number? . g$0$23591) (number->string . g$0$23590) (null? . g$0$23589) (not . g$0$23588) (negative? . g$0$23587) (nan? . g$0$23586) (min . g$0$23585) (max . g$0$23584) (map . g$0$23583) (make-vector . g$0$23582) (make-string . g$0$23581) (make-rectangular . g$0$23580) (make-polar . g$0$23579) (magnitude . g$0$23578) (log . g$0$23577) (list? . g$0$23576) (list-tail . g$0$23575) (list-ref . g$0$23574) (list->vector . g$0$23573) (list->string . g$0$23572) (list . g$0$23571) (length . g$0$23570) (lcm . g$0$23569) (integer? . g$0$23568) (integer-valued? . g$0$23567) (integer->char . g$0$23566) (infinite? . g$0$23565) (inexact? . g$0$23564) (inexact . g$0$23563) (imag-part . g$0$23562) (gcd . g$0$23561) (for-each . g$0$23560) (floor . g$0$23559) (finite? . g$0$23558) (expt . g$0$23557) (exp . g$0$23556) (exact? . g$0$23555) (exact-integer-sqrt . g$0$23554) (exact . g$0$23553) (even? . g$0$23552) (error . g$0$23551) (eqv? . g$0$23550) (equal? . g$0$23549) (eq? . g$0$23548) (dynamic-wind . g$0$23547) (div0-and-mod0 . g$0$23546) (mod0 . g$0$23545) (div0 . g$0$23544) (div-and-mod . g$0$23543) (mod . g$0$23542) (div . g$0$23541) (denominator . g$0$23540) (cos . g$0$23539) (cons . g$0$23538) (complex? . g$0$23537) (char? . g$0$23536) (char>? . g$0$23535) (char>=? . g$0$23534) (char=? . g$0$23533) (char<? . g$0$23532) (char<=? . g$0$23531) (char->integer . g$0$23530) (ceiling . g$0$23529) (call-with-values . g$0$23528) (call/cc . g$0$23527) (call-with-current-continuation . g$0$23526) (cddddr . g$0$23525) (cdddar . g$0$23524) (cddadr . g$0$23523) (cddaar . g$0$23522) (cdaddr . g$0$23521) (cdadar . g$0$23520) (cdaadr . g$0$23519) (cdaaar . g$0$23518) (cadddr . g$0$23517) (caddar . g$0$23516) (cadadr . g$0$23515) (cadaar . g$0$23514) (caaddr . g$0$23513) (caadar . g$0$23512) (caaadr . g$0$23511) (caaaar . g$0$23510) (cdddr . g$0$23509) (cddar . g$0$23508) (cdadr . g$0$23507) (cdaar . g$0$23506) (caddr . g$0$23505) (cadar . g$0$23504) (caadr . g$0$23503) (caaar . g$0$23502) (cddr . g$0$23501) (cdar . g$0$23500) (cadr . g$0$23499) (caar . g$0$23498) (cdr . g$0$23497) (car . g$0$23496) (boolean? . g$0$23495) (boolean=? . g$0$23494) (atan . g$0$23493) (assertion-violation . g$0$23492) (asin . g$0$23491) (apply . g$0$23490) (append . g$0$23489) (angle . g$0$23488) (acos . g$0$23487) (abs . g$0$23486) (/ . g$0$23485) (* . g$0$23484) (- . g$0$23483) (+ . g$0$23482) (>= . g$0$23481) (> . g$0$23480) (= . g$0$23479) (<= . g$0$23478) (< . g$0$23477) (let*-values . g$0$23476) (unquote-splicing . g$0$23426) (unquote . g$0$23425) (_ . g$0$23424) (else . g$0$23423) (=> . g$0$23422) (|...| . g$0$23421) (assert . g$0$23420) (or . g$0$23416) (and . g$0$23415) (cond . g$0$23413) (let* . g$0$23412) (let . g$0$23411) (identifier-syntax . g$0$23410) (quasiquote . g$0$23407) (syntax-rules . g$0$23406) (let-values . g$0$23401) (case . g$0$23400) (if . g$0$23396) (letrec* . g$0$23395) (letrec . g$0$23394) (lambda . g$0$23391) (quote . g$0$23388) (letrec-syntax . g$0$23386) (let-syntax . g$0$23385) (set! . g$0$23384) (begin . g$0$23382) (define-syntax . g$0$23380) (define . g$0$23379))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24105) (quote (rnrs lists)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((remove . g$0$23888) (remv . g$0$23887) (remp . g$0$23886) (remq . g$0$23885) (partition . g$0$23884) (memv . g$0$23883) (memq . g$0$23882) (memp . g$0$23881) (member . g$0$23880) (exists . g$0$23879) (for-all . g$0$23878) (fold-right . g$0$23877) (fold-left . g$0$23876) (find . g$0$23875) (filter . g$0$23874) (cons* . g$0$23873) (assv . g$0$23872) (assq . g$0$23871) (assp . g$0$23870) (assoc . g$0$23869))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24106) (quote (rnrs io simple)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((call-with-output-file . g$0$24007) (call-with-input-file . g$0$24006) (write-char . g$0$24005) (write . g$0$24004) (with-output-to-file . g$0$24003) (with-input-from-file . g$0$24002) (read-char . g$0$24001) (read . g$0$24000) (peek-char . g$0$23999) (open-output-file . g$0$23998) (open-input-file . g$0$23997) (newline . g$0$23996) (display . g$0$23995) (close-output-port . g$0$23994) (close-input-port . g$0$23993) (eof-object? . g$0$23992) (eof-object . g$0$23991) (current-error-port . g$0$23990) (current-output-port . g$0$23989) (current-input-port . g$0$23988) (output-port? . g$0$23987) (input-port? . g$0$23986) (make-i/o-write-error . g$0$23950) (make-i/o-read-error . g$0$23949) (make-i/o-port-error . g$0$23948) (make-i/o-invalid-position-error . g$0$23947) (make-i/o-filename-error . g$0$23946) (make-i/o-file-protection-error . g$0$23945) (make-i/o-file-is-read-only-error . g$0$23944) (make-i/o-file-does-not-exist-error . g$0$23943) (make-i/o-file-already-exists-error . g$0$23942) (make-i/o-error . g$0$23941) (i/o-write-error? . g$0$23929) (i/o-read-error? . g$0$23928) (i/o-port-error? . g$0$23927) (i/o-invalid-position-error? . g$0$23926) (i/o-filename-error? . g$0$23925) (i/o-file-protection-error? . g$0$23924) (i/o-file-is-read-only-error? . g$0$23923) (i/o-file-does-not-exist-error? . g$0$23922) (i/o-file-already-exists-error? . g$0$23921) (i/o-error? . g$0$23920) (i/o-error-port . g$0$23919) (i/o-error-filename . g$0$23918) (&i/o-port . g$0$23471) (&i/o-file-does-not-exist . g$0$23470) (&i/o-file-already-exists . g$0$23469) (&i/o-file-is-read-only . g$0$23468) (&i/o-file-protection . g$0$23467) (&i/o-filename . g$0$23466) (&i/o-invalid-position . g$0$23465) (&i/o-write . g$0$23464) (&i/o-read . g$0$23463) (&i/o . g$0$23462))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24107) (quote (rnrs bytevectors)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((make-bytevector . g$0$23932) (utf32->string . g$0$23807) (utf16->string . g$0$23806) (utf8->string . g$0$23805) (uint-list->bytevector . g$0$23804) (u8-list->bytevector . g$0$23803) (string->utf8 . g$0$23802) (string->utf32 . g$0$23801) (string->utf16 . g$0$23800) (sint-list->bytevector . g$0$23799) (native-endianness . g$0$23798) (bytevector? . g$0$23797) (bytevector=? . g$0$23796) (bytevector-uint-set! . g$0$23795) (bytevector-uint-ref . g$0$23794) (bytevector-u8-set! . g$0$23793) (bytevector-u8-ref . g$0$23792) (bytevector-u64-set! . g$0$23791) (bytevector-u64-ref . g$0$23790) (bytevector-u64-native-set! . g$0$23789) (bytevector-u64-native-ref . g$0$23788) (bytevector-u32-set! . g$0$23787) (bytevector-u32-ref . g$0$23786) (bytevector-u32-native-set! . g$0$23785) (bytevector-u32-native-ref . g$0$23784) (bytevector-u16-set! . g$0$23783) (bytevector-u16-ref . g$0$23782) (bytevector-u16-native-set! . g$0$23781) (bytevector-u16-native-ref . g$0$23780) (bytevector-sint-set! . g$0$23779) (bytevector-sint-ref . g$0$23778) (bytevector-s8-set! . g$0$23777) (bytevector-s8-ref . g$0$23776) (bytevector-s64-set! . g$0$23775) (bytevector-s64-ref . g$0$23774) (bytevector-s64-native-set! . g$0$23773) (bytevector-s64-native-ref . g$0$23772) (bytevector-s32-set! . g$0$23771) (bytevector-s32-ref . g$0$23770) (bytevector-s32-native-set! . g$0$23769) (bytevector-s32-native-ref . g$0$23768) (bytevector-s16-set! . g$0$23767) (bytevector-s16-ref . g$0$23766) (bytevector-s16-native-set! . g$0$23765) (bytevector-s16-native-ref . g$0$23764) (bytevector-length . g$0$23763) (bytevector-ieee-single-ref . g$0$23762) (bytevector-ieee-single-native-set! . g$0$23761) (bytevector-ieee-single-native-ref . g$0$23760) (bytevector-ieee-double-ref . g$0$23759) (bytevector-ieee-double-native-set! . g$0$23758) (bytevector-ieee-double-native-ref . g$0$23757) (bytevector-fill! . g$0$23756) (bytevector-copy! . g$0$23755) (bytevector-copy . g$0$23754) (bytevector->uint-list . g$0$23753) (bytevector->u8-list . g$0$23752) (bytevector->sint-list . g$0$23751) (endianness . g$0$23419))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24108) (quote (rnrs unicode)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$0$24079) (string-titlecase . g$0$24078) (string-normalize-nfkd . g$0$24077) (string-normalize-nfkc . g$0$24076) (string-normalize-nfd . g$0$24075) (string-normalize-nfc . g$0$24074) (string-foldcase . g$0$24073) (string-downcase . g$0$24072) (string-ci>? . g$0$24071) (string-ci>=? . g$0$24070) (string-ci=? . g$0$24069) (string-ci<? . g$0$24068) (string-ci<=? . g$0$24067) (char-whitespace? . g$0$24066) (char-upper-case? . g$0$24065) (char-title-case? . g$0$24064) (char-numeric? . g$0$24063) (char-lower-case? . g$0$24062) (char-general-category . g$0$24061) (char-upcase . g$0$24060) (char-titlecase . g$0$24059) (char-foldcase . g$0$24058) (char-downcase . g$0$24057) (char-ci>? . g$0$24056) (char-ci>=? . g$0$24055) (char-ci=? . g$0$24054) (char-ci<? . g$0$24053) (char-ci<=? . g$0$24052) (char-alphabetic? . g$0$24051))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24109) (quote (rnrs exceptions)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((with-exception-handler . g$0$23862) (raise-continuable . g$0$23861) (raise . g$0$23860) (guard . g$0$23431) (else . g$0$23423) (=> . g$0$23422))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24110) (quote (rnrs arithmetic bitwise)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((bitwise-rotate-bit-field . g$0$23655) (bitwise-reverse-bit-field . g$0$23654) (bitwise-length . g$0$23653) (bitwise-if . g$0$23652) (bitwise-first-bit-set . g$0$23651) (bitwise-copy-bit-field . g$0$23650) (bitwise-copy-bit . g$0$23649) (bitwise-bit-set? . g$0$23648) (bitwise-bit-field . g$0$23647) (bitwise-bit-count . g$0$23646) (bitwise-xor . g$0$23645) (bitwise-ior . g$0$23644) (bitwise-and . g$0$23643) (bitwise-not . g$0$23642) (bitwise-arithmetic-shift-right . g$0$23641) (bitwise-arithmetic-shift-left . g$0$23640) (bitwise-arithmetic-shift . g$0$23639))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24111) (quote (rnrs arithmetic fixnums)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((fxzero? . g$0$23700) (fxxor . g$0$23699) (fxrotate-bit-field . g$0$23698) (fxreverse-bit-field . g$0$23697) (fxpositive? . g$0$23696) (fxodd? . g$0$23695) (fxnot . g$0$23694) (fxnegative? . g$0$23693) (fxmod0 . g$0$23692) (fxmod . g$0$23691) (fxmin . g$0$23690) (fxmax . g$0$23689) (fxlength . g$0$23688) (fxior . g$0$23687) (fxif . g$0$23686) (fxfirst-bit-set . g$0$23685) (fxeven? . g$0$23684) (fxdiv0-and-mod0 . g$0$23683) (fxdiv0 . g$0$23682) (fxdiv-and-mod . g$0$23681) (fxdiv . g$0$23680) (fxcopy-bit-field . g$0$23679) (fxcopy-bit . g$0$23678) (fxbit-set? . g$0$23677) (fxbit-field . g$0$23676) (fxbit-count . g$0$23675) (fxarithmetic-shift-right . g$0$23674) (fxarithmetic-shift-left . g$0$23673) (fxarithmetic-shift . g$0$23672) (fxand . g$0$23671) (fx>? . g$0$23670) (fx>=? . g$0$23669) (fx=? . g$0$23668) (fx<? . g$0$23667) (fx<=? . g$0$23666) (fx-/carry . g$0$23665) (fx- . g$0$23664) (fx+/carry . g$0$23663) (fx+ . g$0$23662) (fx*/carry . g$0$23661) (fx* . g$0$23660) (greatest-fixnum . g$0$23659) (least-fixnum . g$0$23658) (fixnum-width . g$0$23657) (fixnum? . g$0$23656))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24112) (quote (rnrs arithmetic flonums)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((no-nans-violation? . g$0$23750) (no-infinities-violation? . g$0$23749) (make-no-nans-violation . g$0$23748) (make-no-infinities-violation . g$0$23747) (real->flonum . g$0$23746) (flzero? . g$0$23745) (fltruncate . g$0$23744) (fltan . g$0$23743) (flsqrt . g$0$23742) (flsin . g$0$23741) (flround . g$0$23740) (flpositive? . g$0$23739) (flonum? . g$0$23738) (flodd? . g$0$23737) (flnumerator . g$0$23736) (flnegative? . g$0$23735) (flnan? . g$0$23734) (flmod0 . g$0$23733) (flmod . g$0$23732) (flmin . g$0$23731) (flmax . g$0$23730) (fllog . g$0$23729) (flinteger? . g$0$23728) (flinfinite? . g$0$23727) (flfloor . g$0$23726) (flfinite? . g$0$23725) (flexpt . g$0$23724) (flexp . g$0$23723) (fleven? . g$0$23722) (fldiv0-and-mod0 . g$0$23721) (fldiv0 . g$0$23720) (fldiv-and-mod . g$0$23719) (fldiv . g$0$23718) (fldenominator . g$0$23717) (flcos . g$0$23716) (flceiling . g$0$23715) (flatan . g$0$23714) (flasin . g$0$23713) (flacos . g$0$23712) (flabs . g$0$23711) (fl>? . g$0$23710) (fl>=? . g$0$23709) (fl=? . g$0$23708) (fl<? . g$0$23707) (fl<=? . g$0$23706) (fl/ . g$0$23705) (fl- . g$0$23704) (fl+ . g$0$23703) (fl* . g$0$23702) (fixnum->flonum . g$0$23701) (&no-nans . g$0$23475) (&no-infinities . g$0$23474))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24113) (quote (rnrs hashtables)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((symbol-hash . g$0$24028) (string-ci-hash . g$0$24027) (string-hash . g$0$24026) (equal-hash . g$0$24025) (hashtable-equivalence-function . g$0$24024) (make-hashtable . g$0$24023) (hashtable-hash-function . g$0$24022) (make-eqv-hashtable . g$0$24021) (make-eq-hashtable . g$0$24020) (hashtable? . g$0$24019) (hashtable-update! . g$0$24018) (hashtable-size . g$0$24017) (hashtable-set! . g$0$24016) (hashtable-ref . g$0$24015) (hashtable-mutable? . g$0$24014) (hashtable-keys . g$0$24013) (hashtable-entries . g$0$24012) (hashtable-delete! . g$0$24011) (hashtable-copy . g$0$24010) (hashtable-contains? . g$0$24009) (hashtable-clear! . g$0$24008))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24114) (quote (rnrs io ports)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((eof-object? . g$0$23992) (eof-object . g$0$23991) (current-error-port . g$0$23990) (current-output-port . g$0$23989) (current-input-port . g$0$23988) (output-port? . g$0$23987) (input-port? . g$0$23986) (utf-8-codec . g$0$23985) (utf-16-codec . g$0$23984) (transcoder-error-handling-mode . g$0$23983) (transcoder-eol-style . g$0$23982) (transcoder-codec . g$0$23981) (transcoded-port . g$0$23980) (textual-port? . g$0$23979) (string->bytevector . g$0$23978) (standard-output-port . g$0$23977) (standard-input-port . g$0$23976) (standard-error-port . g$0$23975) (set-port-position! . g$0$23974) (put-u8 . g$0$23973) (put-string . g$0$23972) (put-datum . g$0$23971) (put-char . g$0$23970) (put-bytevector . g$0$23969) (port? . g$0$23968) (port-transcoder . g$0$23967) (port-position . g$0$23966) (port-has-set-port-position!? . g$0$23965) (port-has-port-position? . g$0$23964) (port-eof? . g$0$23963) (output-port-buffer-mode . g$0$23962) (open-string-output-port . g$0$23961) (open-string-input-port . g$0$23960) (open-file-output-port . g$0$23959) (open-file-input/output-port . g$0$23958) (open-file-input-port . g$0$23957) (open-bytevector-output-port . g$0$23956) (open-bytevector-input-port . g$0$23955) (native-transcoder . g$0$23954) (native-eol-style . g$0$23953) (make-transcoder . g$0$23952) (latin-1-codec . g$0$23951) (make-i/o-write-error . g$0$23950) (make-i/o-read-error . g$0$23949) (make-i/o-port-error . g$0$23948) (make-i/o-invalid-position-error . g$0$23947) (make-i/o-filename-error . g$0$23946) (make-i/o-file-protection-error . g$0$23945) (make-i/o-file-is-read-only-error . g$0$23944) (make-i/o-file-does-not-exist-error . g$0$23943) (make-i/o-file-already-exists-error . g$0$23942) (make-i/o-error . g$0$23941) (make-i/o-encoding-error . g$0$23940) (make-i/o-decoding-error . g$0$23939) (make-custom-textual-output-port . g$0$23938) (make-custom-textual-input/output-port . g$0$23937) (make-custom-textual-input-port . g$0$23936) (make-custom-binary-output-port . g$0$23935) (make-custom-binary-input/output-port . g$0$23934) (make-custom-binary-input-port . g$0$23933) (lookahead-u8 . g$0$23931) (lookahead-char . g$0$23930) (i/o-write-error? . g$0$23929) (i/o-read-error? . g$0$23928) (i/o-port-error? . g$0$23927) (i/o-invalid-position-error? . g$0$23926) (i/o-filename-error? . g$0$23925) (i/o-file-protection-error? . g$0$23924) (i/o-file-is-read-only-error? . g$0$23923) (i/o-file-does-not-exist-error? . g$0$23922) (i/o-file-already-exists-error? . g$0$23921) (i/o-error? . g$0$23920) (i/o-error-port . g$0$23919) (i/o-error-filename . g$0$23918) (i/o-encoding-error? . g$0$23917) (i/o-encoding-error-char . g$0$23916) (i/o-decoding-error? . g$0$23915) (get-u8 . g$0$23914) (get-string-n! . g$0$23913) (get-string-n . g$0$23912) (get-string-all . g$0$23911) (get-line . g$0$23910) (get-datum . g$0$23909) (get-char . g$0$23908) (get-bytevector-some . g$0$23907) (get-bytevector-n! . g$0$23906) (get-bytevector-n . g$0$23905) (get-bytevector-all . g$0$23904) (flush-output-port . g$0$23903) (close-port . g$0$23902) (call-with-string-output-port . g$0$23868) (call-with-port . g$0$23867) (call-with-bytevector-output-port . g$0$23866) (bytevector->string . g$0$23865) (buffer-mode? . g$0$23864) (binary-port? . g$0$23863) (&i/o-encoding . g$0$23473) (&i/o-decoding . g$0$23472) (&i/o-port . g$0$23471) (&i/o-file-does-not-exist . g$0$23470) (&i/o-file-already-exists . g$0$23469) (&i/o-file-is-read-only . g$0$23468) (&i/o-file-protection . g$0$23467) (&i/o-filename . g$0$23466) (&i/o-invalid-position . g$0$23465) (&i/o-write . g$0$23464) (&i/o-read . g$0$23463) (&i/o . g$0$23462) (error-handling-mode . g$0$23435) (file-options . g$0$23434) (buffer-mode . g$0$23433) (eol-style . g$0$23432))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24115) (quote (rnrs enums)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((make-enumeration . g$0$23859) (enum-set=? . g$0$23858) (enum-set-universe . g$0$23857) (enum-set-union . g$0$23856) (enum-set-subset? . g$0$23855) (enum-set-projection . g$0$23854) (enum-set-member? . g$0$23853) (enum-set-intersection . g$0$23852) (enum-set-indexer . g$0$23851) (enum-set-difference . g$0$23850) (enum-set-constructor . g$0$23849) (enum-set-complement . g$0$23848) (enum-set->list . g$0$23847) (define-enumeration . g$0$23446))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24116) (quote (rnrs conditions)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((who-condition? . g$0$23846) (warning? . g$0$23845) (violation? . g$0$23844) (undefined-violation? . g$0$23843) (syntax-violation? . g$0$23842) (syntax-violation-subform . g$0$23841) (syntax-violation-form . g$0$23840) (syntax-violation . g$0$23839) (simple-conditions . g$0$23838) (serious-condition? . g$0$23837) (non-continuable-violation? . g$0$23836) (&non-continuable . g$0$23835) (message-condition? . g$0$23834) (make-who-condition . g$0$23833) (make-warning . g$0$23832) (make-violation . g$0$23831) (make-undefined-violation . g$0$23830) (make-syntax-violation . g$0$23829) (make-serious-condition . g$0$23828) (make-non-continuable-violation . g$0$23827) (make-message-condition . g$0$23826) (make-lexical-violation . g$0$23825) (make-irritants-condition . g$0$23824) (make-implementation-restriction-violation . g$0$23823) (make-error . g$0$23822) (make-assertion-violation . g$0$23821) (lexical-violation? . g$0$23820) (irritants-condition? . g$0$23819) (implementation-restriction-violation? . g$0$23818) (&implementation-restriction . g$0$23817) (error? . g$0$23816) (condition-who . g$0$23815) (condition-predicate . g$0$23814) (condition-message . g$0$23813) (condition-irritants . g$0$23812) (condition-accessor . g$0$23811) (condition . g$0$23810) (assertion-violation? . g$0$23809) (condition? . g$0$23808) (&undefined . g$0$23461) (&syntax . g$0$23460) (&lexical . g$0$23459) (&who . g$0$23456) (&irritants . g$0$23455) (&assertion . g$0$23454) (&violation . g$0$23453) (&error . g$0$23452) (&serious . g$0$23451) (&warning . g$0$23450) (&message . g$0$23449) (&condition . g$0$23448) (define-condition-type . g$0$23447))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24117) (quote (rnrs records inspection)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((record? . g$0$24043) (record-type-uid . g$0$24042) (record-type-sealed? . g$0$24041) (record-type-parent . g$0$24040) (record-type-opaque? . g$0$24039) (record-type-name . g$0$24038) (record-type-generative? . g$0$24037) (record-type-field-names . g$0$24036) (record-rtd . g$0$24035) (record-field-mutable? . g$0$24034))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24118) (quote (rnrs records procedural)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((record-type-descriptor? . g$0$24050) (record-predicate . g$0$24049) (record-mutator . g$0$24048) (record-constructor . g$0$24047) (record-accessor . g$0$24046) (make-record-type-descriptor . g$0$24045) (make-record-constructor-descriptor . g$0$24044))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24119) (quote (rnrs records syntactic)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((define-record-type . g$0$23445) (parent-rtd . g$0$23444) (nongenerative . g$0$23443) (opaque . g$0$23442) (sealed . g$0$23441) (protocol . g$0$23440) (parent . g$0$23439) (immutable . g$0$23438) (mutable . g$0$23437) (fields . g$0$23436) (record-constructor-descriptor . g$0$23403) (record-type-descriptor . g$0$23402))) (quote ()) values values (quote #t)) (g$0$12834 (quote g$0$24120) (quote (psyntax system $all)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((syntax-error . g$0$13702) (syntax-dispatch . g$0$13569) (pretty-print . g$0$24088) (eval-core . g$0$24087) (set-symbol-value! . g$0$24086) (symbol-value . g$0$24085) (gensym . g$0$24084) (void . g$0$24083) (load . g$0$24082) (interaction-environment . g$0$24081) (char-ready? . g$0$24080) (string-upcase . g$0$24079) (string-titlecase . g$0$24078) (string-normalize-nfkd . g$0$24077) (string-normalize-nfkc . g$0$24076) (string-normalize-nfd . g$0$24075) (string-normalize-nfc . g$0$24074) (string-foldcase . g$0$24073) (string-downcase . g$0$24072) (string-ci>? . g$0$24071) (string-ci>=? . g$0$24070) (string-ci=? . g$0$24069) (string-ci<? . g$0$24068) (string-ci<=? . g$0$24067) (char-whitespace? . g$0$24066) (char-upper-case? . g$0$24065) (char-title-case? . g$0$24064) (char-numeric? . g$0$24063) (char-lower-case? . g$0$24062) (char-general-category . g$0$24061) (char-upcase . g$0$24060) (char-titlecase . g$0$24059) (char-foldcase . g$0$24058) (char-downcase . g$0$24057) (char-ci>? . g$0$24056) (char-ci>=? . g$0$24055) (char-ci=? . g$0$24054) (char-ci<? . g$0$24053) (char-ci<=? . g$0$24052) (char-alphabetic? . g$0$24051) (make-variable-transformer . g$0$13274) (identifier? . g$0$13704) (generate-temporaries . g$0$13696) (free-identifier=? . g$0$13698) (syntax->datum . g$0$13708) (datum->syntax . g$0$13706) (bound-identifier=? . g$0$13700) (record-type-descriptor? . g$0$24050) (record-predicate . g$0$24049) (record-mutator . g$0$24048) (record-constructor . g$0$24047) (record-accessor . g$0$24046) (make-record-type-descriptor . g$0$24045) (make-record-constructor-descriptor . g$0$24044) (record? . g$0$24043) (record-type-uid . g$0$24042) (record-type-sealed? . g$0$24041) (record-type-parent . g$0$24040) (record-type-opaque? . g$0$24039) (record-type-name . g$0$24038) (record-type-generative? . g$0$24037) (record-type-field-names . g$0$24036) (record-rtd . g$0$24035) (record-field-mutable? . g$0$24034) (delete-file . g$0$24033) (file-exists? . g$0$24032) (vector-sort! . g$0$24031) (vector-sort . g$0$24030) (list-sort . g$0$24029) (symbol-hash . g$0$24028) (string-ci-hash . g$0$24027) (string-hash . g$0$24026) (equal-hash . g$0$24025) (hashtable-equivalence-function . g$0$24024) (make-hashtable . g$0$24023) (hashtable-hash-function . g$0$24022) (make-eqv-hashtable . g$0$24021) (make-eq-hashtable . g$0$24020) (hashtable? . g$0$24019) (hashtable-update! . g$0$24018) (hashtable-size . g$0$24017) (hashtable-set! . g$0$24016) (hashtable-ref . g$0$24015) (hashtable-mutable? . g$0$24014) (hashtable-keys . g$0$24013) (hashtable-entries . g$0$24012) (hashtable-delete! . g$0$24011) (hashtable-copy . g$0$24010) (hashtable-contains? . g$0$24009) (hashtable-clear! . g$0$24008) (call-with-output-file . g$0$24007) (call-with-input-file . g$0$24006) (write-char . g$0$24005) (write . g$0$24004) (with-output-to-file . g$0$24003) (with-input-from-file . g$0$24002) (read-char . g$0$24001) (read . g$0$24000) (peek-char . g$0$23999) (open-output-file . g$0$23998) (open-input-file . g$0$23997) (newline . g$0$23996) (display . g$0$23995) (close-output-port . g$0$23994) (close-input-port . g$0$23993) (eof-object? . g$0$23992) (eof-object . g$0$23991) (current-error-port . g$0$23990) (current-output-port . g$0$23989) (current-input-port . g$0$23988) (output-port? . g$0$23987) (input-port? . g$0$23986) (utf-8-codec . g$0$23985) (utf-16-codec . g$0$23984) (transcoder-error-handling-mode . g$0$23983) (transcoder-eol-style . g$0$23982) (transcoder-codec . g$0$23981) (transcoded-port . g$0$23980) (textual-port? . g$0$23979) (string->bytevector . g$0$23978) (standard-output-port . g$0$23977) (standard-input-port . g$0$23976) (standard-error-port . g$0$23975) (set-port-position! . g$0$23974) (put-u8 . g$0$23973) (put-string . g$0$23972) (put-datum . g$0$23971) (put-char . g$0$23970) (put-bytevector . g$0$23969) (port? . g$0$23968) (port-transcoder . g$0$23967) (port-position . g$0$23966) (port-has-set-port-position!? . g$0$23965) (port-has-port-position? . g$0$23964) (port-eof? . g$0$23963) (output-port-buffer-mode . g$0$23962) (open-string-output-port . g$0$23961) (open-string-input-port . g$0$23960) (open-file-output-port . g$0$23959) (open-file-input/output-port . g$0$23958) (open-file-input-port . g$0$23957) (open-bytevector-output-port . g$0$23956) (open-bytevector-input-port . g$0$23955) (native-transcoder . g$0$23954) (native-eol-style . g$0$23953) (make-transcoder . g$0$23952) (latin-1-codec . g$0$23951) (make-i/o-write-error . g$0$23950) (make-i/o-read-error . g$0$23949) (make-i/o-port-error . g$0$23948) (make-i/o-invalid-position-error . g$0$23947) (make-i/o-filename-error . g$0$23946) (make-i/o-file-protection-error . g$0$23945) (make-i/o-file-is-read-only-error . g$0$23944) (make-i/o-file-does-not-exist-error . g$0$23943) (make-i/o-file-already-exists-error . g$0$23942) (make-i/o-error . g$0$23941) (make-i/o-encoding-error . g$0$23940) (make-i/o-decoding-error . g$0$23939) (make-custom-textual-output-port . g$0$23938) (make-custom-textual-input/output-port . g$0$23937) (make-custom-textual-input-port . g$0$23936) (make-custom-binary-output-port . g$0$23935) (make-custom-binary-input/output-port . g$0$23934) (make-custom-binary-input-port . g$0$23933) (make-bytevector . g$0$23932) (lookahead-u8 . g$0$23931) (lookahead-char . g$0$23930) (i/o-write-error? . g$0$23929) (i/o-read-error? . g$0$23928) (i/o-port-error? . g$0$23927) (i/o-invalid-position-error? . g$0$23926) (i/o-filename-error? . g$0$23925) (i/o-file-protection-error? . g$0$23924) (i/o-file-is-read-only-error? . g$0$23923) (i/o-file-does-not-exist-error? . g$0$23922) (i/o-file-already-exists-error? . g$0$23921) (i/o-error? . g$0$23920) (i/o-error-port . g$0$23919) (i/o-error-filename . g$0$23918) (i/o-encoding-error? . g$0$23917) (i/o-encoding-error-char . g$0$23916) (i/o-decoding-error? . g$0$23915) (get-u8 . g$0$23914) (get-string-n! . g$0$23913) (get-string-n . g$0$23912) (get-string-all . g$0$23911) (get-line . g$0$23910) (get-datum . g$0$23909) (get-char . g$0$23908) (get-bytevector-some . g$0$23907) (get-bytevector-n! . g$0$23906) (get-bytevector-n . g$0$23905) (get-bytevector-all . g$0$23904) (flush-output-port . g$0$23903) (close-port . g$0$23902) (scheme-report-environment . g$0$23901) (quotient . g$0$23900) (null-environment . g$0$13676) (remainder . g$0$23899) (modulo . g$0$23898) (inexact->exact . g$0$23897) (force . g$0$23896) (exact->inexact . g$0$23895) (exit . g$0$23894) (command-line . g$0$23893) (string-fill! . g$0$23892) (string-set! . g$0$23891) (set-cdr! . g$0$23890) (set-car! . g$0$23889) (remove . g$0$23888) (remv . g$0$23887) (remp . g$0$23886) (remq . g$0$23885) (partition . g$0$23884) (memv . g$0$23883) (memq . g$0$23882) (memp . g$0$23881) (member . g$0$23880) (exists . g$0$23879) (for-all . g$0$23878) (fold-right . g$0$23877) (fold-left . g$0$23876) (find . g$0$23875) (filter . g$0$23874) (cons* . g$0$23873) (assv . g$0$23872) (assq . g$0$23871) (assp . g$0$23870) (assoc . g$0$23869) (call-with-string-output-port . g$0$23868) (call-with-port . g$0$23867) (call-with-bytevector-output-port . g$0$23866) (bytevector->string . g$0$23865) (buffer-mode? . g$0$23864) (binary-port? . g$0$23863) (with-exception-handler . g$0$23862) (raise-continuable . g$0$23861) (raise . g$0$23860) (eval . g$0$13682) (environment . g$0$13674) (make-enumeration . g$0$23859) (enum-set=? . g$0$23858) (enum-set-universe . g$0$23857) (enum-set-union . g$0$23856) (enum-set-subset? . g$0$23855) (enum-set-projection . g$0$23854) (enum-set-member? . g$0$23853) (enum-set-intersection . g$0$23852) (enum-set-indexer . g$0$23851) (enum-set-difference . g$0$23850) (enum-set-constructor . g$0$23849) (enum-set-complement . g$0$23848) (enum-set->list . g$0$23847) (who-condition? . g$0$23846) (warning? . g$0$23845) (violation? . g$0$23844) (undefined-violation? . g$0$23843) (syntax-violation? . g$0$23842) (syntax-violation-subform . g$0$23841) (syntax-violation-form . g$0$23840) (syntax-violation . g$0$23839) (simple-conditions . g$0$23838) (serious-condition? . g$0$23837) (non-continuable-violation? . g$0$23836) (&non-continuable . g$0$23835) (message-condition? . g$0$23834) (make-who-condition . g$0$23833) (make-warning . g$0$23832) (make-violation . g$0$23831) (make-undefined-violation . g$0$23830) (make-syntax-violation . g$0$23829) (make-serious-condition . g$0$23828) (make-non-continuable-violation . g$0$23827) (make-message-condition . g$0$23826) (make-lexical-violation . g$0$23825) (make-irritants-condition . g$0$23824) (make-implementation-restriction-violation . g$0$23823) (make-error . g$0$23822) (make-assertion-violation . g$0$23821) (lexical-violation? . g$0$23820) (irritants-condition? . g$0$23819) (implementation-restriction-violation? . g$0$23818) (&implementation-restriction . g$0$23817) (error? . g$0$23816) (condition-who . g$0$23815) (condition-predicate . g$0$23814) (condition-message . g$0$23813) (condition-irritants . g$0$23812) (condition-accessor . g$0$23811) (condition . g$0$23810) (assertion-violation? . g$0$23809) (condition? . g$0$23808) (utf32->string . g$0$23807) (utf16->string . g$0$23806) (utf8->string . g$0$23805) (uint-list->bytevector . g$0$23804) (u8-list->bytevector . g$0$23803) (string->utf8 . g$0$23802) (string->utf32 . g$0$23801) (string->utf16 . g$0$23800) (sint-list->bytevector . g$0$23799) (native-endianness . g$0$23798) (bytevector? . g$0$23797) (bytevector=? . g$0$23796) (bytevector-uint-set! . g$0$23795) (bytevector-uint-ref . g$0$23794) (bytevector-u8-set! . g$0$23793) (bytevector-u8-ref . g$0$23792) (bytevector-u64-set! . g$0$23791) (bytevector-u64-ref . g$0$23790) (bytevector-u64-native-set! . g$0$23789) (bytevector-u64-native-ref . g$0$23788) (bytevector-u32-set! . g$0$23787) (bytevector-u32-ref . g$0$23786) (bytevector-u32-native-set! . g$0$23785) (bytevector-u32-native-ref . g$0$23784) (bytevector-u16-set! . g$0$23783) (bytevector-u16-ref . g$0$23782) (bytevector-u16-native-set! . g$0$23781) (bytevector-u16-native-ref . g$0$23780) (bytevector-sint-set! . g$0$23779) (bytevector-sint-ref . g$0$23778) (bytevector-s8-set! . g$0$23777) (bytevector-s8-ref . g$0$23776) (bytevector-s64-set! . g$0$23775) (bytevector-s64-ref . g$0$23774) (bytevector-s64-native-set! . g$0$23773) (bytevector-s64-native-ref . g$0$23772) (bytevector-s32-set! . g$0$23771) (bytevector-s32-ref . g$0$23770) (bytevector-s32-native-set! . g$0$23769) (bytevector-s32-native-ref . g$0$23768) (bytevector-s16-set! . g$0$23767) (bytevector-s16-ref . g$0$23766) (bytevector-s16-native-set! . g$0$23765) (bytevector-s16-native-ref . g$0$23764) (bytevector-length . g$0$23763) (bytevector-ieee-single-ref . g$0$23762) (bytevector-ieee-single-native-set! . g$0$23761) (bytevector-ieee-single-native-ref . g$0$23760) (bytevector-ieee-double-ref . g$0$23759) (bytevector-ieee-double-native-set! . g$0$23758) (bytevector-ieee-double-native-ref . g$0$23757) (bytevector-fill! . g$0$23756) (bytevector-copy! . g$0$23755) (bytevector-copy . g$0$23754) (bytevector->uint-list . g$0$23753) (bytevector->u8-list . g$0$23752) (bytevector->sint-list . g$0$23751) (no-nans-violation? . g$0$23750) (no-infinities-violation? . g$0$23749) (make-no-nans-violation . g$0$23748) (make-no-infinities-violation . g$0$23747) (real->flonum . g$0$23746) (flzero? . g$0$23745) (fltruncate . g$0$23744) (fltan . g$0$23743) (flsqrt . g$0$23742) (flsin . g$0$23741) (flround . g$0$23740) (flpositive? . g$0$23739) (flonum? . g$0$23738) (flodd? . g$0$23737) (flnumerator . g$0$23736) (flnegative? . g$0$23735) (flnan? . g$0$23734) (flmod0 . g$0$23733) (flmod . g$0$23732) (flmin . g$0$23731) (flmax . g$0$23730) (fllog . g$0$23729) (flinteger? . g$0$23728) (flinfinite? . g$0$23727) (flfloor . g$0$23726) (flfinite? . g$0$23725) (flexpt . g$0$23724) (flexp . g$0$23723) (fleven? . g$0$23722) (fldiv0-and-mod0 . g$0$23721) (fldiv0 . g$0$23720) (fldiv-and-mod . g$0$23719) (fldiv . g$0$23718) (fldenominator . g$0$23717) (flcos . g$0$23716) (flceiling . g$0$23715) (flatan . g$0$23714) (flasin . g$0$23713) (flacos . g$0$23712) (flabs . g$0$23711) (fl>? . g$0$23710) (fl>=? . g$0$23709) (fl=? . g$0$23708) (fl<? . g$0$23707) (fl<=? . g$0$23706) (fl/ . g$0$23705) (fl- . g$0$23704) (fl+ . g$0$23703) (fl* . g$0$23702) (fixnum->flonum . g$0$23701) (fxzero? . g$0$23700) (fxxor . g$0$23699) (fxrotate-bit-field . g$0$23698) (fxreverse-bit-field . g$0$23697) (fxpositive? . g$0$23696) (fxodd? . g$0$23695) (fxnot . g$0$23694) (fxnegative? . g$0$23693) (fxmod0 . g$0$23692) (fxmod . g$0$23691) (fxmin . g$0$23690) (fxmax . g$0$23689) (fxlength . g$0$23688) (fxior . g$0$23687) (fxif . g$0$23686) (fxfirst-bit-set . g$0$23685) (fxeven? . g$0$23684) (fxdiv0-and-mod0 . g$0$23683) (fxdiv0 . g$0$23682) (fxdiv-and-mod . g$0$23681) (fxdiv . g$0$23680) (fxcopy-bit-field . g$0$23679) (fxcopy-bit . g$0$23678) (fxbit-set? . g$0$23677) (fxbit-field . g$0$23676) (fxbit-count . g$0$23675) (fxarithmetic-shift-right . g$0$23674) (fxarithmetic-shift-left . g$0$23673) (fxarithmetic-shift . g$0$23672) (fxand . g$0$23671) (fx>? . g$0$23670) (fx>=? . g$0$23669) (fx=? . g$0$23668) (fx<? . g$0$23667) (fx<=? . g$0$23666) (fx-/carry . g$0$23665) (fx- . g$0$23664) (fx+/carry . g$0$23663) (fx+ . g$0$23662) (fx*/carry . g$0$23661) (fx* . g$0$23660) (greatest-fixnum . g$0$23659) (least-fixnum . g$0$23658) (fixnum-width . g$0$23657) (fixnum? . g$0$23656) (bitwise-rotate-bit-field . g$0$23655) (bitwise-reverse-bit-field . g$0$23654) (bitwise-length . g$0$23653) (bitwise-if . g$0$23652) (bitwise-first-bit-set . g$0$23651) (bitwise-copy-bit-field . g$0$23650) (bitwise-copy-bit . g$0$23649) (bitwise-bit-set? . g$0$23648) (bitwise-bit-field . g$0$23647) (bitwise-bit-count . g$0$23646) (bitwise-xor . g$0$23645) (bitwise-ior . g$0$23644) (bitwise-and . g$0$23643) (bitwise-not . g$0$23642) (bitwise-arithmetic-shift-right . g$0$23641) (bitwise-arithmetic-shift-left . g$0$23640) (bitwise-arithmetic-shift . g$0$23639) (zero? . g$0$23638) (vector? . g$0$23637) (vector-set! . g$0$23636) (vector-ref . g$0$23635) (vector-map . g$0$23634) (vector-length . g$0$23633) (vector-for-each . g$0$23632) (vector-fill! . g$0$23631) (vector->list . g$0$23630) (vector . g$0$23629) (values . g$0$23628) (truncate . g$0$23627) (tan . g$0$23626) (symbol? . g$0$23625) (symbol=? . g$0$23624) (symbol->string . g$0$23623) (substring . g$0$23622) (string? . g$0$23621) (string>? . g$0$23620) (string>=? . g$0$23619) (string=? . g$0$23618) (string<? . g$0$23617) (string<=? . g$0$23616) (string-ref . g$0$23615) (string-length . g$0$23614) (string-for-each . g$0$23613) (string-copy . g$0$23612) (string-append . g$0$23611) (string->symbol . g$0$23610) (string->number . g$0$23609) (string->list . g$0$23608) (string . g$0$23607) (sqrt . g$0$23606) (sin . g$0$23605) (round . g$0$23604) (reverse . g$0$23603) (real? . g$0$23602) (real-valued? . g$0$23601) (real-part . g$0$23600) (rationalize . g$0$23599) (rational? . g$0$23598) (rational-valued? . g$0$23597) (procedure? . g$0$23596) (positive? . g$0$23595) (pair? . g$0$23594) (odd? . g$0$23593) (numerator . g$0$23592) (number? . g$0$23591) (number->string . g$0$23590) (null? . g$0$23589) (not . g$0$23588) (negative? . g$0$23587) (nan? . g$0$23586) (min . g$0$23585) (max . g$0$23584) (map . g$0$23583) (make-vector . g$0$23582) (make-string . g$0$23581) (make-rectangular . g$0$23580) (make-polar . g$0$23579) (magnitude . g$0$23578) (log . g$0$23577) (list? . g$0$23576) (list-tail . g$0$23575) (list-ref . g$0$23574) (list->vector . g$0$23573) (list->string . g$0$23572) (list . g$0$23571) (length . g$0$23570) (lcm . g$0$23569) (integer? . g$0$23568) (integer-valued? . g$0$23567) (integer->char . g$0$23566) (infinite? . g$0$23565) (inexact? . g$0$23564) (inexact . g$0$23563) (imag-part . g$0$23562) (gcd . g$0$23561) (for-each . g$0$23560) (floor . g$0$23559) (finite? . g$0$23558) (expt . g$0$23557) (exp . g$0$23556) (exact? . g$0$23555) (exact-integer-sqrt . g$0$23554) (exact . g$0$23553) (even? . g$0$23552) (error . g$0$23551) (eqv? . g$0$23550) (equal? . g$0$23549) (eq? . g$0$23548) (dynamic-wind . g$0$23547) (div0-and-mod0 . g$0$23546) (mod0 . g$0$23545) (div0 . g$0$23544) (div-and-mod . g$0$23543) (mod . g$0$23542) (div . g$0$23541) (denominator . g$0$23540) (cos . g$0$23539) (cons . g$0$23538) (complex? . g$0$23537) (char? . g$0$23536) (char>? . g$0$23535) (char>=? . g$0$23534) (char=? . g$0$23533) (char<? . g$0$23532) (char<=? . g$0$23531) (char->integer . g$0$23530) (ceiling . g$0$23529) (call-with-values . g$0$23528) (call/cc . g$0$23527) (call-with-current-continuation . g$0$23526) (cddddr . g$0$23525) (cdddar . g$0$23524) (cddadr . g$0$23523) (cddaar . g$0$23522) (cdaddr . g$0$23521) (cdadar . g$0$23520) (cdaadr . g$0$23519) (cdaaar . g$0$23518) (cadddr . g$0$23517) (caddar . g$0$23516) (cadadr . g$0$23515) (cadaar . g$0$23514) (caaddr . g$0$23513) (caadar . g$0$23512) (caaadr . g$0$23511) (caaaar . g$0$23510) (cdddr . g$0$23509) (cddar . g$0$23508) (cdadr . g$0$23507) (cdaar . g$0$23506) (caddr . g$0$23505) (cadar . g$0$23504) (caadr . g$0$23503) (caaar . g$0$23502) (cddr . g$0$23501) (cdar . g$0$23500) (cadr . g$0$23499) (caar . g$0$23498) (cdr . g$0$23497) (car . g$0$23496) (boolean? . g$0$23495) (boolean=? . g$0$23494) (atan . g$0$23493) (assertion-violation . g$0$23492) (asin . g$0$23491) (apply . g$0$23490) (append . g$0$23489) (angle . g$0$23488) (acos . g$0$23487) (abs . g$0$23486) (/ . g$0$23485) (* . g$0$23484) (- . g$0$23483) (+ . g$0$23482) (>= . g$0$23481) (> . g$0$23480) (= . g$0$23479) (<= . g$0$23478) (< . g$0$23477) (let*-values . g$0$23476) (&no-nans . g$0$23475) (&no-infinities . g$0$23474) (&i/o-encoding . g$0$23473) (&i/o-decoding . g$0$23472) (&i/o-port . g$0$23471) (&i/o-file-does-not-exist . g$0$23470) (&i/o-file-already-exists . g$0$23469) (&i/o-file-is-read-only . g$0$23468) (&i/o-file-protection . g$0$23467) (&i/o-filename . g$0$23466) (&i/o-invalid-position . g$0$23465) (&i/o-write . g$0$23464) (&i/o-read . g$0$23463) (&i/o . g$0$23462) (&undefined . g$0$23461) (&syntax . g$0$23460) (&lexical . g$0$23459) (&implementation . g$0$23458) (&non . g$0$23457) (&who . g$0$23456) (&irritants . g$0$23455) (&assertion . g$0$23454) (&violation . g$0$23453) (&error . g$0$23452) (&serious . g$0$23451) (&warning . g$0$23450) (&message . g$0$23449) (&condition . g$0$23448) (define-condition-type . g$0$23447) (define-enumeration . g$0$23446) (define-record-type . g$0$23445) (parent-rtd . g$0$23444) (nongenerative . g$0$23443) (opaque . g$0$23442) (sealed . g$0$23441) (protocol . g$0$23440) (parent . g$0$23439) (immutable . g$0$23438) (mutable . g$0$23437) (fields . g$0$23436) (error-handling-mode . g$0$23435) (file-options . g$0$23434) (buffer-mode . g$0$23433) (eol-style . g$0$23432) (guard . g$0$23431) (trace-define . g$0$23430) (trace-lambda . g$0$23429) (unsyntax-splicing . g$0$23428) (unsyntax . g$0$23427) (unquote-splicing . g$0$23426) (unquote . g$0$23425) (_ . g$0$23424) (else . g$0$23423) (=> . g$0$23422) (|...| . g$0$23421) (assert . g$0$23420) (endianness . g$0$23419) (delay . g$0$23418) (time . g$0$23417) (or . g$0$23416) (and . g$0$23415) (do . g$0$23414) (cond . g$0$23413) (let* . g$0$23412) (let . g$0$23411) (identifier-syntax . g$0$23410) (with-syntax . g$0$23409) (quasisyntax . g$0$23408) (quasiquote . g$0$23407) (syntax-rules . g$0$23406) (include . g$0$23405) (define-struct . g$0$23404) (record-constructor-descriptor . g$0$23403) (record-type-descriptor . g$0$23402) (let-values . g$0$23401) (case . g$0$23400) (parameterize . g$0$23399) (unless . g$0$23398) (when . g$0$23397) (if . g$0$23396) (letrec* . g$0$23395) (letrec . g$0$23394) (type-descriptor . g$0$23393) (case-lambda . g$0$23392) (lambda . g$0$23391) (syntax . g$0$23390) (syntax-case . g$0$23389) (quote . g$0$23388) (foreign-call . g$0$23387) (letrec-syntax . g$0$23386) (let-syntax . g$0$23385) (set! . g$0$23384) (import . g$0$23383) (begin . g$0$23382) (module . g$0$23381) (define-syntax . g$0$23380) (define . g$0$23379))) (quote ((g$0$13702 core-prim . syntax-error) (g$0$13569 core-prim . syntax-dispatch) (g$0$24088 core-prim . pretty-print) (g$0$24087 core-prim . eval-core) (g$0$24086 core-prim . set-symbol-value!) (g$0$24085 core-prim . symbol-value) (g$0$24084 core-prim . gensym) (g$0$24083 core-prim . void) (g$0$24082 core-prim . load) (g$0$24081 core-prim . interaction-environment) (g$0$24080 core-prim . char-ready?) (g$0$24079 core-prim . string-upcase) (g$0$24078 core-prim . string-titlecase) (g$0$24077 core-prim . string-normalize-nfkd) (g$0$24076 core-prim . string-normalize-nfkc) (g$0$24075 core-prim . string-normalize-nfd) (g$0$24074 core-prim . string-normalize-nfc) (g$0$24073 core-prim . string-foldcase) (g$0$24072 core-prim . string-downcase) (g$0$24071 core-prim . string-ci>?) (g$0$24070 core-prim . string-ci>=?) (g$0$24069 core-prim . string-ci=?) (g$0$24068 core-prim . string-ci<?) (g$0$24067 core-prim . string-ci<=?) (g$0$24066 core-prim . char-whitespace?) (g$0$24065 core-prim . char-upper-case?) (g$0$24064 core-prim . char-title-case?) (g$0$24063 core-prim . char-numeric?) (g$0$24062 core-prim . char-lower-case?) (g$0$24061 core-prim . char-general-category) (g$0$24060 core-prim . char-upcase) (g$0$24059 core-prim . char-titlecase) (g$0$24058 core-prim . char-foldcase) (g$0$24057 core-prim . char-downcase) (g$0$24056 core-prim . char-ci>?) (g$0$24055 core-prim . char-ci>=?) (g$0$24054 core-prim . char-ci=?) (g$0$24053 core-prim . char-ci<?) (g$0$24052 core-prim . char-ci<=?) (g$0$24051 core-prim . char-alphabetic?) (g$0$13274 core-prim . make-variable-transformer) (g$0$13704 core-prim . identifier?) (g$0$13696 core-prim . generate-temporaries) (g$0$13698 core-prim . free-identifier=?) (g$0$13708 core-prim . syntax->datum) (g$0$13706 core-prim . datum->syntax) (g$0$13700 core-prim . bound-identifier=?) (g$0$24050 core-prim . record-type-descriptor?) (g$0$24049 core-prim . record-predicate) (g$0$24048 core-prim . record-mutator) (g$0$24047 core-prim . record-constructor) (g$0$24046 core-prim . record-accessor) (g$0$24045 core-prim . make-record-type-descriptor) (g$0$24044 core-prim . make-record-constructor-descriptor) (g$0$24043 core-prim . record?) (g$0$24042 core-prim . record-type-uid) (g$0$24041 core-prim . record-type-sealed?) (g$0$24040 core-prim . record-type-parent) (g$0$24039 core-prim . record-type-opaque?) (g$0$24038 core-prim . record-type-name) (g$0$24037 core-prim . record-type-generative?) (g$0$24036 core-prim . record-type-field-names) (g$0$24035 core-prim . record-rtd) (g$0$24034 core-prim . record-field-mutable?) (g$0$24033 core-prim . delete-file) (g$0$24032 core-prim . file-exists?) (g$0$24031 core-prim . vector-sort!) (g$0$24030 core-prim . vector-sort) (g$0$24029 core-prim . list-sort) (g$0$24028 core-prim . symbol-hash) (g$0$24027 core-prim . string-ci-hash) (g$0$24026 core-prim . string-hash) (g$0$24025 core-prim . equal-hash) (g$0$24024 core-prim . hashtable-equivalence-function) (g$0$24023 core-prim . make-hashtable) (g$0$24022 core-prim . hashtable-hash-function) (g$0$24021 core-prim . make-eqv-hashtable) (g$0$24020 core-prim . make-eq-hashtable) (g$0$24019 core-prim . hashtable?) (g$0$24018 core-prim . hashtable-update!) (g$0$24017 core-prim . hashtable-size) (g$0$24016 core-prim . hashtable-set!) (g$0$24015 core-prim . hashtable-ref) (g$0$24014 core-prim . hashtable-mutable?) (g$0$24013 core-prim . hashtable-keys) (g$0$24012 core-prim . hashtable-entries) (g$0$24011 core-prim . hashtable-delete!) (g$0$24010 core-prim . hashtable-copy) (g$0$24009 core-prim . hashtable-contains?) (g$0$24008 core-prim . hashtable-clear!) (g$0$24007 core-prim . call-with-output-file) (g$0$24006 core-prim . call-with-input-file) (g$0$24005 core-prim . write-char) (g$0$24004 core-prim . write) (g$0$24003 core-prim . with-output-to-file) (g$0$24002 core-prim . with-input-from-file) (g$0$24001 core-prim . read-char) (g$0$24000 core-prim . read) (g$0$23999 core-prim . peek-char) (g$0$23998 core-prim . open-output-file) (g$0$23997 core-prim . open-input-file) (g$0$23996 core-prim . newline) (g$0$23995 core-prim . display) (g$0$23994 core-prim . close-output-port) (g$0$23993 core-prim . close-input-port) (g$0$23992 core-prim . eof-object?) (g$0$23991 core-prim . eof-object) (g$0$23990 core-prim . current-error-port) (g$0$23989 core-prim . current-output-port) (g$0$23988 core-prim . current-input-port) (g$0$23987 core-prim . output-port?) (g$0$23986 core-prim . input-port?) (g$0$23985 core-prim . utf-8-codec) (g$0$23984 core-prim . utf-16-codec) (g$0$23983 core-prim . transcoder-error-handling-mode) (g$0$23982 core-prim . transcoder-eol-style) (g$0$23981 core-prim . transcoder-codec) (g$0$23980 core-prim . transcoded-port) (g$0$23979 core-prim . textual-port?) (g$0$23978 core-prim . string->bytevector) (g$0$23977 core-prim . standard-output-port) (g$0$23976 core-prim . standard-input-port) (g$0$23975 core-prim . standard-error-port) (g$0$23974 core-prim . set-port-position!) (g$0$23973 core-prim . put-u8) (g$0$23972 core-prim . put-string) (g$0$23971 core-prim . put-datum) (g$0$23970 core-prim . put-char) (g$0$23969 core-prim . put-bytevector) (g$0$23968 core-prim . port?) (g$0$23967 core-prim . port-transcoder) (g$0$23966 core-prim . port-position) (g$0$23965 core-prim . port-has-set-port-position!?) (g$0$23964 core-prim . port-has-port-position?) (g$0$23963 core-prim . port-eof?) (g$0$23962 core-prim . output-port-buffer-mode) (g$0$23961 core-prim . open-string-output-port) (g$0$23960 core-prim . open-string-input-port) (g$0$23959 core-prim . open-file-output-port) (g$0$23958 core-prim . open-file-input/output-port) (g$0$23957 core-prim . open-file-input-port) (g$0$23956 core-prim . open-bytevector-output-port) (g$0$23955 core-prim . open-bytevector-input-port) (g$0$23954 core-prim . native-transcoder) (g$0$23953 core-prim . native-eol-style) (g$0$23952 core-prim . make-transcoder) (g$0$23951 core-prim . latin-1-codec) (g$0$23950 core-prim . make-i/o-write-error) (g$0$23949 core-prim . make-i/o-read-error) (g$0$23948 core-prim . make-i/o-port-error) (g$0$23947 core-prim . make-i/o-invalid-position-error) (g$0$23946 core-prim . make-i/o-filename-error) (g$0$23945 core-prim . make-i/o-file-protection-error) (g$0$23944 core-prim . make-i/o-file-is-read-only-error) (g$0$23943 core-prim . make-i/o-file-does-not-exist-error) (g$0$23942 core-prim . make-i/o-file-already-exists-error) (g$0$23941 core-prim . make-i/o-error) (g$0$23940 core-prim . make-i/o-encoding-error) (g$0$23939 core-prim . make-i/o-decoding-error) (g$0$23938 core-prim . make-custom-textual-output-port) (g$0$23937 core-prim . make-custom-textual-input/output-port) (g$0$23936 core-prim . make-custom-textual-input-port) (g$0$23935 core-prim . make-custom-binary-output-port) (g$0$23934 core-prim . make-custom-binary-input/output-port) (g$0$23933 core-prim . make-custom-binary-input-port) (g$0$23932 core-prim . make-bytevector) (g$0$23931 core-prim . lookahead-u8) (g$0$23930 core-prim . lookahead-char) (g$0$23929 core-prim . i/o-write-error?) (g$0$23928 core-prim . i/o-read-error?) (g$0$23927 core-prim . i/o-port-error?) (g$0$23926 core-prim . i/o-invalid-position-error?) (g$0$23925 core-prim . i/o-filename-error?) (g$0$23924 core-prim . i/o-file-protection-error?) (g$0$23923 core-prim . i/o-file-is-read-only-error?) (g$0$23922 core-prim . i/o-file-does-not-exist-error?) (g$0$23921 core-prim . i/o-file-already-exists-error?) (g$0$23920 core-prim . i/o-error?) (g$0$23919 core-prim . i/o-error-port) (g$0$23918 core-prim . i/o-error-filename) (g$0$23917 core-prim . i/o-encoding-error?) (g$0$23916 core-prim . i/o-encoding-error-char) (g$0$23915 core-prim . i/o-decoding-error?) (g$0$23914 core-prim . get-u8) (g$0$23913 core-prim . get-string-n!) (g$0$23912 core-prim . get-string-n) (g$0$23911 core-prim . get-string-all) (g$0$23910 core-prim . get-line) (g$0$23909 core-prim . get-datum) (g$0$23908 core-prim . get-char) (g$0$23907 core-prim . get-bytevector-some) (g$0$23906 core-prim . get-bytevector-n!) (g$0$23905 core-prim . get-bytevector-n) (g$0$23904 core-prim . get-bytevector-all) (g$0$23903 core-prim . flush-output-port) (g$0$23902 core-prim . close-port) (g$0$23901 core-prim . scheme-report-environment) (g$0$23900 core-prim . quotient) (g$0$13676 core-prim . null-environment) (g$0$23899 core-prim . remainder) (g$0$23898 core-prim . modulo) (g$0$23897 core-prim . inexact->exact) (g$0$23896 core-prim . force) (g$0$23895 core-prim . exact->inexact) (g$0$23894 core-prim . exit) (g$0$23893 core-prim . command-line) (g$0$23892 core-prim . string-fill!) (g$0$23891 core-prim . string-set!) (g$0$23890 core-prim . set-cdr!) (g$0$23889 core-prim . set-car!) (g$0$23888 core-prim . remove) (g$0$23887 core-prim . remv) (g$0$23886 core-prim . remp) (g$0$23885 core-prim . remq) (g$0$23884 core-prim . partition) (g$0$23883 core-prim . memv) (g$0$23882 core-prim . memq) (g$0$23881 core-prim . memp) (g$0$23880 core-prim . member) (g$0$23879 core-prim . exists) (g$0$23878 core-prim . for-all) (g$0$23877 core-prim . fold-right) (g$0$23876 core-prim . fold-left) (g$0$23875 core-prim . find) (g$0$23874 core-prim . filter) (g$0$23873 core-prim . cons*) (g$0$23872 core-prim . assv) (g$0$23871 core-prim . assq) (g$0$23870 core-prim . assp) (g$0$23869 core-prim . assoc) (g$0$23868 core-prim . call-with-string-output-port) (g$0$23867 core-prim . call-with-port) (g$0$23866 core-prim . call-with-bytevector-output-port) (g$0$23865 core-prim . bytevector->string) (g$0$23864 core-prim . buffer-mode?) (g$0$23863 core-prim . binary-port?) (g$0$23862 core-prim . with-exception-handler) (g$0$23861 core-prim . raise-continuable) (g$0$23860 core-prim . raise) (g$0$13682 core-prim . eval) (g$0$13674 core-prim . environment) (g$0$23859 core-prim . make-enumeration) (g$0$23858 core-prim . enum-set=?) (g$0$23857 core-prim . enum-set-universe) (g$0$23856 core-prim . enum-set-union) (g$0$23855 core-prim . enum-set-subset?) (g$0$23854 core-prim . enum-set-projection) (g$0$23853 core-prim . enum-set-member?) (g$0$23852 core-prim . enum-set-intersection) (g$0$23851 core-prim . enum-set-indexer) (g$0$23850 core-prim . enum-set-difference) (g$0$23849 core-prim . enum-set-constructor) (g$0$23848 core-prim . enum-set-complement) (g$0$23847 core-prim . enum-set->list) (g$0$23846 core-prim . who-condition?) (g$0$23845 core-prim . warning?) (g$0$23844 core-prim . violation?) (g$0$23843 core-prim . undefined-violation?) (g$0$23842 core-prim . syntax-violation?) (g$0$23841 core-prim . syntax-violation-subform) (g$0$23840 core-prim . syntax-violation-form) (g$0$23839 core-prim . syntax-violation) (g$0$23838 core-prim . simple-conditions) (g$0$23837 core-prim . serious-condition?) (g$0$23836 core-prim . non-continuable-violation?) (g$0$23835 core-prim . &non-continuable) (g$0$23834 core-prim . message-condition?) (g$0$23833 core-prim . make-who-condition) (g$0$23832 core-prim . make-warning) (g$0$23831 core-prim . make-violation) (g$0$23830 core-prim . make-undefined-violation) (g$0$23829 core-prim . make-syntax-violation) (g$0$23828 core-prim . make-serious-condition) (g$0$23827 core-prim . make-non-continuable-violation) (g$0$23826 core-prim . make-message-condition) (g$0$23825 core-prim . make-lexical-violation) (g$0$23824 core-prim . make-irritants-condition) (g$0$23823 core-prim . make-implementation-restriction-violation) (g$0$23822 core-prim . make-error) (g$0$23821 core-prim . make-assertion-violation) (g$0$23820 core-prim . lexical-violation?) (g$0$23819 core-prim . irritants-condition?) (g$0$23818 core-prim . implementation-restriction-violation?) (g$0$23817 core-prim . &implementation-restriction) (g$0$23816 core-prim . error?) (g$0$23815 core-prim . condition-who) (g$0$23814 core-prim . condition-predicate) (g$0$23813 core-prim . condition-message) (g$0$23812 core-prim . condition-irritants) (g$0$23811 core-prim . condition-accessor) (g$0$23810 core-prim . condition) (g$0$23809 core-prim . assertion-violation?) (g$0$23808 core-prim . condition?) (g$0$23807 core-prim . utf32->string) (g$0$23806 core-prim . utf16->string) (g$0$23805 core-prim . utf8->string) (g$0$23804 core-prim . uint-list->bytevector) (g$0$23803 core-prim . u8-list->bytevector) (g$0$23802 core-prim . string->utf8) (g$0$23801 core-prim . string->utf32) (g$0$23800 core-prim . string->utf16) (g$0$23799 core-prim . sint-list->bytevector) (g$0$23798 core-prim . native-endianness) (g$0$23797 core-prim . bytevector?) (g$0$23796 core-prim . bytevector=?) (g$0$23795 core-prim . bytevector-uint-set!) (g$0$23794 core-prim . bytevector-uint-ref) (g$0$23793 core-prim . bytevector-u8-set!) (g$0$23792 core-prim . bytevector-u8-ref) (g$0$23791 core-prim . bytevector-u64-set!) (g$0$23790 core-prim . bytevector-u64-ref) (g$0$23789 core-prim . bytevector-u64-native-set!) (g$0$23788 core-prim . bytevector-u64-native-ref) (g$0$23787 core-prim . bytevector-u32-set!) (g$0$23786 core-prim . bytevector-u32-ref) (g$0$23785 core-prim . bytevector-u32-native-set!) (g$0$23784 core-prim . bytevector-u32-native-ref) (g$0$23783 core-prim . bytevector-u16-set!) (g$0$23782 core-prim . bytevector-u16-ref) (g$0$23781 core-prim . bytevector-u16-native-set!) (g$0$23780 core-prim . bytevector-u16-native-ref) (g$0$23779 core-prim . bytevector-sint-set!) (g$0$23778 core-prim . bytevector-sint-ref) (g$0$23777 core-prim . bytevector-s8-set!) (g$0$23776 core-prim . bytevector-s8-ref) (g$0$23775 core-prim . bytevector-s64-set!) (g$0$23774 core-prim . bytevector-s64-ref) (g$0$23773 core-prim . bytevector-s64-native-set!) (g$0$23772 core-prim . bytevector-s64-native-ref) (g$0$23771 core-prim . bytevector-s32-set!) (g$0$23770 core-prim . bytevector-s32-ref) (g$0$23769 core-prim . bytevector-s32-native-set!) (g$0$23768 core-prim . bytevector-s32-native-ref) (g$0$23767 core-prim . bytevector-s16-set!) (g$0$23766 core-prim . bytevector-s16-ref) (g$0$23765 core-prim . bytevector-s16-native-set!) (g$0$23764 core-prim . bytevector-s16-native-ref) (g$0$23763 core-prim . bytevector-length) (g$0$23762 core-prim . bytevector-ieee-single-ref) (g$0$23761 core-prim . bytevector-ieee-single-native-set!) (g$0$23760 core-prim . bytevector-ieee-single-native-ref) (g$0$23759 core-prim . bytevector-ieee-double-ref) (g$0$23758 core-prim . bytevector-ieee-double-native-set!) (g$0$23757 core-prim . bytevector-ieee-double-native-ref) (g$0$23756 core-prim . bytevector-fill!) (g$0$23755 core-prim . bytevector-copy!) (g$0$23754 core-prim . bytevector-copy) (g$0$23753 core-prim . bytevector->uint-list) (g$0$23752 core-prim . bytevector->u8-list) (g$0$23751 core-prim . bytevector->sint-list) (g$0$23750 core-prim . no-nans-violation?) (g$0$23749 core-prim . no-infinities-violation?) (g$0$23748 core-prim . make-no-nans-violation) (g$0$23747 core-prim . make-no-infinities-violation) (g$0$23746 core-prim . real->flonum) (g$0$23745 core-prim . flzero?) (g$0$23744 core-prim . fltruncate) (g$0$23743 core-prim . fltan) (g$0$23742 core-prim . flsqrt) (g$0$23741 core-prim . flsin) (g$0$23740 core-prim . flround) (g$0$23739 core-prim . flpositive?) (g$0$23738 core-prim . flonum?) (g$0$23737 core-prim . flodd?) (g$0$23736 core-prim . flnumerator) (g$0$23735 core-prim . flnegative?) (g$0$23734 core-prim . flnan?) (g$0$23733 core-prim . flmod0) (g$0$23732 core-prim . flmod) (g$0$23731 core-prim . flmin) (g$0$23730 core-prim . flmax) (g$0$23729 core-prim . fllog) (g$0$23728 core-prim . flinteger?) (g$0$23727 core-prim . flinfinite?) (g$0$23726 core-prim . flfloor) (g$0$23725 core-prim . flfinite?) (g$0$23724 core-prim . flexpt) (g$0$23723 core-prim . flexp) (g$0$23722 core-prim . fleven?) (g$0$23721 core-prim . fldiv0-and-mod0) (g$0$23720 core-prim . fldiv0) (g$0$23719 core-prim . fldiv-and-mod) (g$0$23718 core-prim . fldiv) (g$0$23717 core-prim . fldenominator) (g$0$23716 core-prim . flcos) (g$0$23715 core-prim . flceiling) (g$0$23714 core-prim . flatan) (g$0$23713 core-prim . flasin) (g$0$23712 core-prim . flacos) (g$0$23711 core-prim . flabs) (g$0$23710 core-prim . fl>?) (g$0$23709 core-prim . fl>=?) (g$0$23708 core-prim . fl=?) (g$0$23707 core-prim . fl<?) (g$0$23706 core-prim . fl<=?) (g$0$23705 core-prim . fl/) (g$0$23704 core-prim . fl-) (g$0$23703 core-prim . fl+) (g$0$23702 core-prim . fl*) (g$0$23701 core-prim . fixnum->flonum) (g$0$23700 core-prim . fxzero?) (g$0$23699 core-prim . fxxor) (g$0$23698 core-prim . fxrotate-bit-field) (g$0$23697 core-prim . fxreverse-bit-field) (g$0$23696 core-prim . fxpositive?) (g$0$23695 core-prim . fxodd?) (g$0$23694 core-prim . fxnot) (g$0$23693 core-prim . fxnegative?) (g$0$23692 core-prim . fxmod0) (g$0$23691 core-prim . fxmod) (g$0$23690 core-prim . fxmin) (g$0$23689 core-prim . fxmax) (g$0$23688 core-prim . fxlength) (g$0$23687 core-prim . fxior) (g$0$23686 core-prim . fxif) (g$0$23685 core-prim . fxfirst-bit-set) (g$0$23684 core-prim . fxeven?) (g$0$23683 core-prim . fxdiv0-and-mod0) (g$0$23682 core-prim . fxdiv0) (g$0$23681 core-prim . fxdiv-and-mod) (g$0$23680 core-prim . fxdiv) (g$0$23679 core-prim . fxcopy-bit-field) (g$0$23678 core-prim . fxcopy-bit) (g$0$23677 core-prim . fxbit-set?) (g$0$23676 core-prim . fxbit-field) (g$0$23675 core-prim . fxbit-count) (g$0$23674 core-prim . fxarithmetic-shift-right) (g$0$23673 core-prim . fxarithmetic-shift-left) (g$0$23672 core-prim . fxarithmetic-shift) (g$0$23671 core-prim . fxand) (g$0$23670 core-prim . fx>?) (g$0$23669 core-prim . fx>=?) (g$0$23668 core-prim . fx=?) (g$0$23667 core-prim . fx<?) (g$0$23666 core-prim . fx<=?) (g$0$23665 core-prim . fx-/carry) (g$0$23664 core-prim . fx-) (g$0$23663 core-prim . fx+/carry) (g$0$23662 core-prim . fx+) (g$0$23661 core-prim . fx*/carry) (g$0$23660 core-prim . fx*) (g$0$23659 core-prim . greatest-fixnum) (g$0$23658 core-prim . least-fixnum) (g$0$23657 core-prim . fixnum-width) (g$0$23656 core-prim . fixnum?) (g$0$23655 core-prim . bitwise-rotate-bit-field) (g$0$23654 core-prim . bitwise-reverse-bit-field) (g$0$23653 core-prim . bitwise-length) (g$0$23652 core-prim . bitwise-if) (g$0$23651 core-prim . bitwise-first-bit-set) (g$0$23650 core-prim . bitwise-copy-bit-field) (g$0$23649 core-prim . bitwise-copy-bit) (g$0$23648 core-prim . bitwise-bit-set?) (g$0$23647 core-prim . bitwise-bit-field) (g$0$23646 core-prim . bitwise-bit-count) (g$0$23645 core-prim . bitwise-xor) (g$0$23644 core-prim . bitwise-ior) (g$0$23643 core-prim . bitwise-and) (g$0$23642 core-prim . bitwise-not) (g$0$23641 core-prim . bitwise-arithmetic-shift-right) (g$0$23640 core-prim . bitwise-arithmetic-shift-left) (g$0$23639 core-prim . bitwise-arithmetic-shift) (g$0$23638 core-prim . zero?) (g$0$23637 core-prim . vector?) (g$0$23636 core-prim . vector-set!) (g$0$23635 core-prim . vector-ref) (g$0$23634 core-prim . vector-map) (g$0$23633 core-prim . vector-length) (g$0$23632 core-prim . vector-for-each) (g$0$23631 core-prim . vector-fill!) (g$0$23630 core-prim . vector->list) (g$0$23629 core-prim . vector) (g$0$23628 core-prim . values) (g$0$23627 core-prim . truncate) (g$0$23626 core-prim . tan) (g$0$23625 core-prim . symbol?) (g$0$23624 core-prim . symbol=?) (g$0$23623 core-prim . symbol->string) (g$0$23622 core-prim . substring) (g$0$23621 core-prim . string?) (g$0$23620 core-prim . string>?) (g$0$23619 core-prim . string>=?) (g$0$23618 core-prim . string=?) (g$0$23617 core-prim . string<?) (g$0$23616 core-prim . string<=?) (g$0$23615 core-prim . string-ref) (g$0$23614 core-prim . string-length) (g$0$23613 core-prim . string-for-each) (g$0$23612 core-prim . string-copy) (g$0$23611 core-prim . string-append) (g$0$23610 core-prim . string->symbol) (g$0$23609 core-prim . string->number) (g$0$23608 core-prim . string->list) (g$0$23607 core-prim . string) (g$0$23606 core-prim . sqrt) (g$0$23605 core-prim . sin) (g$0$23604 core-prim . round) (g$0$23603 core-prim . reverse) (g$0$23602 core-prim . real?) (g$0$23601 core-prim . real-valued?) (g$0$23600 core-prim . real-part) (g$0$23599 core-prim . rationalize) (g$0$23598 core-prim . rational?) (g$0$23597 core-prim . rational-valued?) (g$0$23596 core-prim . procedure?) (g$0$23595 core-prim . positive?) (g$0$23594 core-prim . pair?) (g$0$23593 core-prim . odd?) (g$0$23592 core-prim . numerator) (g$0$23591 core-prim . number?) (g$0$23590 core-prim . number->string) (g$0$23589 core-prim . null?) (g$0$23588 core-prim . not) (g$0$23587 core-prim . negative?) (g$0$23586 core-prim . nan?) (g$0$23585 core-prim . min) (g$0$23584 core-prim . max) (g$0$23583 core-prim . map) (g$0$23582 core-prim . make-vector) (g$0$23581 core-prim . make-string) (g$0$23580 core-prim . make-rectangular) (g$0$23579 core-prim . make-polar) (g$0$23578 core-prim . magnitude) (g$0$23577 core-prim . log) (g$0$23576 core-prim . list?) (g$0$23575 core-prim . list-tail) (g$0$23574 core-prim . list-ref) (g$0$23573 core-prim . list->vector) (g$0$23572 core-prim . list->string) (g$0$23571 core-prim . list) (g$0$23570 core-prim . length) (g$0$23569 core-prim . lcm) (g$0$23568 core-prim . integer?) (g$0$23567 core-prim . integer-valued?) (g$0$23566 core-prim . integer->char) (g$0$23565 core-prim . infinite?) (g$0$23564 core-prim . inexact?) (g$0$23563 core-prim . inexact) (g$0$23562 core-prim . imag-part) (g$0$23561 core-prim . gcd) (g$0$23560 core-prim . for-each) (g$0$23559 core-prim . floor) (g$0$23558 core-prim . finite?) (g$0$23557 core-prim . expt) (g$0$23556 core-prim . exp) (g$0$23555 core-prim . exact?) (g$0$23554 core-prim . exact-integer-sqrt) (g$0$23553 core-prim . exact) (g$0$23552 core-prim . even?) (g$0$23551 core-prim . error) (g$0$23550 core-prim . eqv?) (g$0$23549 core-prim . equal?) (g$0$23548 core-prim . eq?) (g$0$23547 core-prim . dynamic-wind) (g$0$23546 core-prim . div0-and-mod0) (g$0$23545 core-prim . mod0) (g$0$23544 core-prim . div0) (g$0$23543 core-prim . div-and-mod) (g$0$23542 core-prim . mod) (g$0$23541 core-prim . div) (g$0$23540 core-prim . denominator) (g$0$23539 core-prim . cos) (g$0$23538 core-prim . cons) (g$0$23537 core-prim . complex?) (g$0$23536 core-prim . char?) (g$0$23535 core-prim . char>?) (g$0$23534 core-prim . char>=?) (g$0$23533 core-prim . char=?) (g$0$23532 core-prim . char<?) (g$0$23531 core-prim . char<=?) (g$0$23530 core-prim . char->integer) (g$0$23529 core-prim . ceiling) (g$0$23528 core-prim . call-with-values) (g$0$23527 core-prim . call/cc) (g$0$23526 core-prim . call-with-current-continuation) (g$0$23525 core-prim . cddddr) (g$0$23524 core-prim . cdddar) (g$0$23523 core-prim . cddadr) (g$0$23522 core-prim . cddaar) (g$0$23521 core-prim . cdaddr) (g$0$23520 core-prim . cdadar) (g$0$23519 core-prim . cdaadr) (g$0$23518 core-prim . cdaaar) (g$0$23517 core-prim . cadddr) (g$0$23516 core-prim . caddar) (g$0$23515 core-prim . cadadr) (g$0$23514 core-prim . cadaar) (g$0$23513 core-prim . caaddr) (g$0$23512 core-prim . caadar) (g$0$23511 core-prim . caaadr) (g$0$23510 core-prim . caaaar) (g$0$23509 core-prim . cdddr) (g$0$23508 core-prim . cddar) (g$0$23507 core-prim . cdadr) (g$0$23506 core-prim . cdaar) (g$0$23505 core-prim . caddr) (g$0$23504 core-prim . cadar) (g$0$23503 core-prim . caadr) (g$0$23502 core-prim . caaar) (g$0$23501 core-prim . cddr) (g$0$23500 core-prim . cdar) (g$0$23499 core-prim . cadr) (g$0$23498 core-prim . caar) (g$0$23497 core-prim . cdr) (g$0$23496 core-prim . car) (g$0$23495 core-prim . boolean?) (g$0$23494 core-prim . boolean=?) (g$0$23493 core-prim . atan) (g$0$23492 core-prim . assertion-violation) (g$0$23491 core-prim . asin) (g$0$23490 core-prim . apply) (g$0$23489 core-prim . append) (g$0$23488 core-prim . angle) (g$0$23487 core-prim . acos) (g$0$23486 core-prim . abs) (g$0$23485 core-prim . /) (g$0$23484 core-prim . *) (g$0$23483 core-prim . -) (g$0$23482 core-prim . +) (g$0$23481 core-prim . >=) (g$0$23480 core-prim . >) (g$0$23479 core-prim . =) (g$0$23478 core-prim . <=) (g$0$23477 core-prim . <) (g$0$23476 core-prim . let*-values) (g$0$23475 $core-rtd &no-nans-rtd &no-nans-rcd) (g$0$23474 $core-rtd &no-infinities-rtd &no-infinities-rcd) (g$0$23473 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g$0$23472 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g$0$23471 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g$0$23470 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g$0$23469 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g$0$23468 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g$0$23467 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g$0$23466 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g$0$23465 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g$0$23464 $core-rtd &i/o-write-rtd &i/o-write-rcd) (g$0$23463 $core-rtd &i/o-read-rtd &i/o-read-rcd) (g$0$23462 $core-rtd &i/o-rtd &i/o-rcd) (g$0$23461 $core-rtd &undefined-rtd &undefined-rcd) (g$0$23460 $core-rtd &syntax-rtd &syntax-rcd) (g$0$23459 $core-rtd &lexical-rtd &lexical-rcd) (g$0$23458 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g$0$23457 $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$0$23456 $core-rtd &who-rtd &who-rcd) (g$0$23455 $core-rtd &irritants-rtd &irritants-rcd) (g$0$23454 $core-rtd &assertion-rtd &assertion-rcd) (g$0$23453 $core-rtd &violation-rtd &violation-rcd) (g$0$23452 $core-rtd &error-rtd &error-rcd) (g$0$23451 $core-rtd &serious-rtd &serious-rcd) (g$0$23450 $core-rtd &warning-rtd &warning-rcd) (g$0$23449 $core-rtd &message-rtd &message-rcd) (g$0$23448 $core-rtd &condition-rtd &condition-rcd) (g$0$23447 macro . define-condition-type) (g$0$23446 macro . define-enumeration) (g$0$23445 macro . define-record-type) (g$0$23444 macro . parent-rtd) (g$0$23443 macro . nongenerative) (g$0$23442 macro . opaque) (g$0$23441 macro . sealed) (g$0$23440 macro . protocol) (g$0$23439 macro . parent) (g$0$23438 macro . immutable) (g$0$23437 macro . mutable) (g$0$23436 macro . fields) (g$0$23435 macro . error-handling-mode) (g$0$23434 macro . file-options) (g$0$23433 macro . buffer-mode) (g$0$23432 macro . eol-style) (g$0$23431 macro . guard) (g$0$23430 macro . trace-define) (g$0$23429 macro . trace-lambda) (g$0$23428 macro . unsyntax-splicing) (g$0$23427 macro . unsyntax) (g$0$23426 macro . unquote-splicing) (g$0$23425 macro . unquote) (g$0$23424 macro . _) (g$0$23423 macro . else) (g$0$23422 macro . =>) (g$0$23421 macro . |...|) (g$0$23420 macro . assert) (g$0$23419 macro . endianness) (g$0$23418 macro . delay) (g$0$23417 macro . time) (g$0$23416 macro . or) (g$0$23415 macro . and) (g$0$23414 macro . do) (g$0$23413 macro . cond) (g$0$23412 macro . let*) (g$0$23411 macro . let) (g$0$23410 macro . identifier-syntax) (g$0$23409 macro . with-syntax) (g$0$23408 macro . quasisyntax) (g$0$23407 macro . quasiquote) (g$0$23406 macro . syntax-rules) (g$0$23405 macro . include) (g$0$23404 macro . define-struct) (g$0$23403 core-macro . record-constructor-descriptor) (g$0$23402 core-macro . record-type-descriptor) (g$0$23401 core-macro . let-values) (g$0$23400 core-macro . case) (g$0$23399 core-macro . parameterize) (g$0$23398 core-macro . unless) (g$0$23397 core-macro . when) (g$0$23396 core-macro . if) (g$0$23395 core-macro . letrec*) (g$0$23394 core-macro . letrec) (g$0$23393 core-macro . type-descriptor) (g$0$23392 core-macro . case-lambda) (g$0$23391 core-macro . lambda) (g$0$23390 core-macro . syntax) (g$0$23389 core-macro . syntax-case) (g$0$23388 core-macro . quote) (g$0$23387 core-macro . foreign-call) (g$0$23386 letrec-syntax) (g$0$23385 let-syntax) (g$0$23384 set!) (g$0$23383 import) (g$0$23382 begin) (g$0$23381 module) (g$0$23380 define-syntax) (g$0$23379 define))) values values (quote #f)) (g$0$12834 (quote g$0$24121) (quote (psyntax system $bootstrap)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((pretty-print . g$0$24088) (eval-core . g$0$24087) (set-symbol-value! . g$0$24086) (symbol-value . g$0$24085) (gensym . g$0$24084) (void . g$0$24083))) (quote ()) values values (quote #f)))


(begin (define g$0$23377 (quote #f)) ((lambda (g$0$23361) (begin (set! g$0$23361 (lambda (g$0$23363) ((lambda (g$0$23365) (g$0$23171 g$0$23365)) (with-input-from-file g$0$23363 (lambda () (letrec ((g$0$23367 (lambda () ((lambda (g$0$23369) (if (eof-object? g$0$23369) (quote ()) (cons g$0$23369 (g$0$23367)))) (read))))) (g$0$23367))))))) (begin (set! g$0$23377 g$0$23361) (display (quote "r6rs psyntax ready\n")) ((lambda (g$0$23371) (begin (if (= (length g$0$23371) (quote 2)) (void) (begin (display (quote "provide a script name argument\n")) (exit (quote 17)))) ((lambda (g$0$23373 g$0$23374) (g$0$23361 (car g$0$23374))) (car g$0$23371) (cdr g$0$23371)))) (command-line)) (exit (quote 0))))) (quote #f)))


