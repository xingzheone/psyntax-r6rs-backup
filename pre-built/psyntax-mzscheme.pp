;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define make-parameter$735$13361 (quote #f)) (define file-options-spec$735$13358 (quote #f)) ((lambda (make-parameter$735$13141 file-options-spec$735$13338) (begin (set! make-parameter$735$13141 (lambda g$735$13354 ((lambda (g$735$13355) (if (= g$735$13355 (quote 1)) (apply (lambda (x$735$13340) (make-parameter$735$13141 x$735$13340 (lambda (x$735$13342) x$735$13342))) g$735$13354) (if (= g$735$13355 (quote 2)) (apply (lambda (x$735$13344 fender$735$13345) (begin (if (procedure? fender$735$13345) (void) (error (quote assert) (quote "assertion failed") (quote (procedure? fender)))) ((lambda (x$735$13348) (lambda g$735$13352 ((lambda (g$735$13353) (if (= g$735$13353 (quote 0)) (apply (lambda () x$735$13348) g$735$13352) (if (= g$735$13353 (quote 1)) (apply (lambda (v$735$13350) (set! x$735$13348 (fender$735$13345 v$735$13350))) g$735$13352) (error (quote apply) (quote "invalid arg count"))))) (length g$735$13352)))) (fender$735$13345 x$735$13344)))) g$735$13354) (error (quote apply) (quote "invalid arg count"))))) (length g$735$13354)))) (set! file-options-spec$735$13338 (lambda (x$735$13356) (error (quote file-options-spec) (quote "not implemented")))) (begin (set! file-options-spec$735$13358 file-options-spec$735$13338) (set! make-parameter$735$13361 make-parameter$735$13141)))) (quote #f) (quote #f)))


(begin (define current-primitive-locations$735$13439 (quote #f)) (define mutable?$735$13438 (quote #f)) (define rewriter$735$13437 (quote #f)) (define need-quote-hack?$735$13436 (quote #f)) (define expanded->core$735$13435 (quote #f)) (define compile-core-expr-to-port$735$13434 (quote #f)) ((lambda (current-primitive-locations$735$13363 mutable?$735$13365 rewriter$735$13367 need-quote-hack?$735$13369 expanded->core$735$13371 compile-core-expr-to-port$735$13373) (begin (set! current-primitive-locations$735$13363 (make-parameter$735$13361 (lambda (x$735$13375) (quote #f)) (lambda (p$735$13377) (begin (if (procedure? p$735$13377) (void) (error (quote assert) (quote "assertion failed") (quote (procedure? p)))) p$735$13377)))) (set! mutable?$735$13365 (lambda (x$735$13379) ((lambda (simple?$735$13381) (begin (set! simple?$735$13381 (lambda (x$735$13383) ((lambda (t$735$13385) (if t$735$13385 t$735$13385 ((lambda (t$735$13387) (if t$735$13387 t$735$13387 ((lambda (t$735$13389) (if t$735$13389 t$735$13389 ((lambda (t$735$13391) (if t$735$13391 t$735$13391 (begin (quote #f) (number? x$735$13383)))) (boolean? x$735$13383)))) (symbol? x$735$13383)))) (char? x$735$13383)))) (null? x$735$13383)))) (not (simple?$735$13381 x$735$13379)))) (quote #f)))) (set! rewriter$735$13367 (lambda (quote-hack?$735$13393) ((lambda (f$735$13395) (begin (set! f$735$13395 (lambda (x$735$13397) (if (pair? x$735$13397) ((lambda (t$735$13399) (if (memv t$735$13399 (quote (quote))) (if (if quote-hack?$735$13393 (begin (quote #f) (mutable?$735$13365 (cadr x$735$13397))) (quote #f)) ((lambda (g$735$13424) (begin (set-symbol-value! g$735$13424 (cadr x$735$13397)) g$735$13424)) (gensym)) x$735$13397) (if (memv t$735$13399 (quote (case-lambda))) (cons (quote case-lambda) (map (lambda (x$735$13422) (cons (car x$735$13422) (map f$735$13395 (cdr x$735$13422)))) (cdr x$735$13397))) (if (memv t$735$13399 (quote (lambda))) (cons* (quote lambda) (cadr x$735$13397) (map f$735$13395 (cddr x$735$13397))) (if (memv t$735$13399 (quote (letrec))) ((lambda (bindings$735$13414 body*$735$13415) ((lambda (lhs*$735$13418 rhs*$735$13419) (cons* (quote letrec) (map list lhs*$735$13418 (map f$735$13395 rhs*$735$13419)) (map f$735$13395 body*$735$13415))) (map car bindings$735$13414) (map cadr bindings$735$13414))) (cadr x$735$13397) (cddr x$735$13397)) (if (memv t$735$13399 (quote (letrec*))) ((lambda (bindings$735$13406 body*$735$13407) ((lambda (lhs*$735$13410 rhs*$735$13411) (cons* (quote letrec*) (map list lhs*$735$13410 (map f$735$13395 rhs*$735$13411)) (map f$735$13395 body*$735$13407))) (map car bindings$735$13406) (map cadr bindings$735$13406))) (cadr x$735$13397) (cddr x$735$13397)) (if (memv t$735$13399 (quote (begin))) (cons (quote begin) (map f$735$13395 (cdr x$735$13397))) (if (memv t$735$13399 (quote (set!))) (list (quote set!) (cadr x$735$13397) (f$735$13395 (caddr x$735$13397))) (if (memv t$735$13399 (quote (primitive))) ((lambda (op$735$13400) ((lambda (t$735$13402) (if t$735$13402 ((lambda (loc$735$13404) loc$735$13404) t$735$13402) op$735$13400)) ((current-primitive-locations$735$13363) op$735$13400))) (cadr x$735$13397)) (if (memv t$735$13399 (quote (define))) x$735$13397 (if (list? x$735$13397) (map f$735$13395 x$735$13397) (error (quote rewrite) (quote "invalid form ~s ~s") x$735$13397 (list? x$735$13397))))))))))))) (car x$735$13397)) x$735$13397))) f$735$13395)) (quote #f)))) (set! need-quote-hack?$735$13369 ((lambda (x$735$13426) (not (eq? (eval-core (list (quote quote) x$735$13426)) (eval-core (list (quote quote) x$735$13426))))) (cons (quote 1) (quote 2)))) (set! expanded->core$735$13371 (lambda (x$735$13428) ((rewriter$735$13367 need-quote-hack?$735$13369) x$735$13428))) (set! compile-core-expr-to-port$735$13373 (lambda (x$735$13430 p$735$13431) (begin (pretty-print ((rewriter$735$13367 (quote #f)) x$735$13430) p$735$13431) (newline p$735$13431)))) (begin (set! compile-core-expr-to-port$735$13434 compile-core-expr-to-port$735$13373) (set! expanded->core$735$13435 expanded->core$735$13371) (set! need-quote-hack?$735$13436 need-quote-hack?$735$13369) (set! rewriter$735$13437 rewriter$735$13367) (set! mutable?$735$13438 mutable?$735$13365) (set! current-primitive-locations$735$13439 current-primitive-locations$735$13363)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(void)


(begin (define make-collection$735$13927 (quote #f)) (define current-library-collection$735$13926 (quote #f)) (define make-library$735$13925 (quote #f)) (define library?$735$13924 (quote #f)) (define library-id$735$13923 (quote #f)) (define library-name$735$13922 (quote #f)) (define library-version$735$13921 (quote #f)) (define library-imp*$735$13920 (quote #f)) (define library-vis*$735$13919 (quote #f)) (define library-inv*$735$13918 (quote #f)) (define library-subst$735$13917 (quote #f)) (define library-env$735$13916 (quote #f)) (define library-visit-state$735$13915 (quote #f)) (define library-invoke-state$735$13914 (quote #f)) (define library-visible?$735$13913 (quote #f)) (define set-library-id!$735$13912 (quote #f)) (define set-library-name!$735$13911 (quote #f)) (define set-library-version!$735$13910 (quote #f)) (define set-library-imp*!$735$13909 (quote #f)) (define set-library-vis*!$735$13908 (quote #f)) (define set-library-inv*!$735$13907 (quote #f)) (define set-library-subst!$735$13906 (quote #f)) (define set-library-env!$735$13905 (quote #f)) (define set-library-visit-state!$735$13904 (quote #f)) (define set-library-invoke-state!$735$13903 (quote #f)) (define set-library-visible?!$735$13902 (quote #f)) (define find-dependencies$735$13901 (quote #f)) (define find-library-by$735$13900 (quote #f)) (define library-path$735$13899 (quote #f)) (define library-name->file-name$735$13898 (quote #f)) (define file-locator$735$13897 (quote #f)) (define library-locator$735$13896 (quote #f)) (define current-library-expander$735$13895 (quote #f)) (define external-pending-libraries$735$13894 (quote #f)) (define find-external-library$735$13893 (quote #f)) (define find-library-by-name$735$13892 (quote #f)) (define library-exists?$735$13891 (quote #f)) (define find-library-by-spec/die$735$13890 (quote #f)) (define label->binding-table$735$13889 (quote #f)) (define install-library-record$735$13888 (quote #f)) (define install-library$735$13887 (quote #f)) (define extend-library-subst!$735$13886 (quote #f)) (define extend-library-env!$735$13885 (quote #f)) (define imported-label->binding$735$13884 (quote #f)) (define invoke-library$735$13883 (quote #f)) (define visit-library$735$13882 (quote #f)) (define invoke-library-by-spec$735$13881 (quote #f)) (define installed-libraries$735$13880 (quote #f)) (define library-spec$735$13879 (quote #f)) ((lambda (make-collection$735$13503 current-library-collection$735$13505 make-library$735$13508 library?$735$13510 library-id$735$13512 library-name$735$13514 library-version$735$13516 library-imp*$735$13518 library-vis*$735$13520 library-inv*$735$13522 library-subst$735$13524 library-env$735$13526 library-visit-state$735$13528 library-invoke-state$735$13530 library-visible?$735$13532 set-library-id!$735$13534 set-library-name!$735$13536 set-library-version!$735$13538 set-library-imp*!$735$13540 set-library-vis*!$735$13542 set-library-inv*!$735$13544 set-library-subst!$735$13546 set-library-env!$735$13548 set-library-visit-state!$735$13550 set-library-invoke-state!$735$13552 set-library-visible?!$735$13554 find-dependencies$735$13556 find-library-by$735$13558 library-path$735$13560 library-name->file-name$735$13562 file-locator$735$13564 library-locator$735$13566 current-library-expander$735$13568 external-pending-libraries$735$13570 find-external-library$735$13572 find-library-by-name$735$13574 library-exists?$735$13576 find-library-by-spec/die$735$13578 label->binding-table$735$13580 install-library-record$735$13582 install-library$735$13584 extend-library-subst!$735$13586 extend-library-env!$735$13588 imported-label->binding$735$13590 invoke-library$735$13592 visit-library$735$13594 invoke-library-by-spec$735$13596 installed-libraries$735$13598 library-spec$735$13600) (begin (set! make-collection$735$13503 (lambda () ((lambda (set$735$13602) ((lambda (set-cons$735$13604) (begin (set! set-cons$735$13604 (lambda (x$735$13606 ls$735$13607) (if (memq x$735$13606 ls$735$13607) ls$735$13607 (cons x$735$13606 ls$735$13607)))) (lambda g$735$13612 ((lambda (g$735$13613) (if (= g$735$13613 (quote 0)) (apply (lambda () set$735$13602) g$735$13612) (if (= g$735$13613 (quote 1)) (apply (lambda (x$735$13610) (set! set$735$13602 (set-cons$735$13604 x$735$13610 set$735$13602))) g$735$13612) (error (quote apply) (quote "invalid arg count"))))) (length g$735$13612))))) (quote #f))) (quote ())))) (set! current-library-collection$735$13505 (make-parameter$735$13361 (make-collection$735$13503) (lambda (x$735$13614) (begin (if (procedure? x$735$13614) (void) (error (quote current-library-collection) (quote "not a procedure") x$735$13614)) x$735$13614)))) (set! make-library$735$13508 (lambda (id$735$13616 name$735$13617 version$735$13618 imp*$735$13619 vis*$735$13620 inv*$735$13621 subst$735$13622 env$735$13623 visit-state$735$13624 invoke-state$735$13625 visible?$735$13626) (vector (quote g$735$13507) id$735$13616 name$735$13617 version$735$13618 imp*$735$13619 vis*$735$13620 inv*$735$13621 subst$735$13622 env$735$13623 visit-state$735$13624 invoke-state$735$13625 visible?$735$13626))) (set! library?$735$13510 (lambda (x$735$13638) (if (vector? x$735$13638) (if (= (vector-length x$735$13638) (+ (quote 1) (length (quote (id name version imp* vis* inv* subst env visit-state invoke-state visible?))))) (begin (quote #f) (eq? (vector-ref x$735$13638 (quote 0)) (quote g$735$13507))) (quote #f)) (quote #f)))) (set! library-id$735$13512 (lambda (x$735$13640) (if (library?$735$13510 x$735$13640) (vector-ref x$735$13640 (quote 1)) (error (quote library-id) (quote "~s is not of type ~s") x$735$13640 (quote library))))) (set! library-name$735$13514 (lambda (x$735$13642) (if (library?$735$13510 x$735$13642) (vector-ref x$735$13642 (quote 2)) (error (quote library-name) (quote "~s is not of type ~s") x$735$13642 (quote library))))) (set! library-version$735$13516 (lambda (x$735$13644) (if (library?$735$13510 x$735$13644) (vector-ref x$735$13644 (quote 3)) (error (quote library-version) (quote "~s is not of type ~s") x$735$13644 (quote library))))) (set! library-imp*$735$13518 (lambda (x$735$13646) (if (library?$735$13510 x$735$13646) (vector-ref x$735$13646 (quote 4)) (error (quote library-imp*) (quote "~s is not of type ~s") x$735$13646 (quote library))))) (set! library-vis*$735$13520 (lambda (x$735$13648) (if (library?$735$13510 x$735$13648) (vector-ref x$735$13648 (quote 5)) (error (quote library-vis*) (quote "~s is not of type ~s") x$735$13648 (quote library))))) (set! library-inv*$735$13522 (lambda (x$735$13650) (if (library?$735$13510 x$735$13650) (vector-ref x$735$13650 (quote 6)) (error (quote library-inv*) (quote "~s is not of type ~s") x$735$13650 (quote library))))) (set! library-subst$735$13524 (lambda (x$735$13652) (if (library?$735$13510 x$735$13652) (vector-ref x$735$13652 (quote 7)) (error (quote library-subst) (quote "~s is not of type ~s") x$735$13652 (quote library))))) (set! library-env$735$13526 (lambda (x$735$13654) (if (library?$735$13510 x$735$13654) (vector-ref x$735$13654 (quote 8)) (error (quote library-env) (quote "~s is not of type ~s") x$735$13654 (quote library))))) (set! library-visit-state$735$13528 (lambda (x$735$13656) (if (library?$735$13510 x$735$13656) (vector-ref x$735$13656 (quote 9)) (error (quote library-visit-state) (quote "~s is not of type ~s") x$735$13656 (quote library))))) (set! library-invoke-state$735$13530 (lambda (x$735$13658) (if (library?$735$13510 x$735$13658) (vector-ref x$735$13658 (quote 10)) (error (quote library-invoke-state) (quote "~s is not of type ~s") x$735$13658 (quote library))))) (set! library-visible?$735$13532 (lambda (x$735$13660) (if (library?$735$13510 x$735$13660) (vector-ref x$735$13660 (quote 11)) (error (quote library-visible?) (quote "~s is not of type ~s") x$735$13660 (quote library))))) (set! set-library-id!$735$13534 (lambda (x$735$13662 v$735$13663) (if (library?$735$13510 x$735$13662) (vector-set! x$735$13662 (quote 1) v$735$13663) (error (quote set-library-id!) (quote "~s is not of type ~s") x$735$13662 (quote library))))) (set! set-library-name!$735$13536 (lambda (x$735$13666 v$735$13667) (if (library?$735$13510 x$735$13666) (vector-set! x$735$13666 (quote 2) v$735$13667) (error (quote set-library-name!) (quote "~s is not of type ~s") x$735$13666 (quote library))))) (set! set-library-version!$735$13538 (lambda (x$735$13670 v$735$13671) (if (library?$735$13510 x$735$13670) (vector-set! x$735$13670 (quote 3) v$735$13671) (error (quote set-library-version!) (quote "~s is not of type ~s") x$735$13670 (quote library))))) (set! set-library-imp*!$735$13540 (lambda (x$735$13674 v$735$13675) (if (library?$735$13510 x$735$13674) (vector-set! x$735$13674 (quote 4) v$735$13675) (error (quote set-library-imp*!) (quote "~s is not of type ~s") x$735$13674 (quote library))))) (set! set-library-vis*!$735$13542 (lambda (x$735$13678 v$735$13679) (if (library?$735$13510 x$735$13678) (vector-set! x$735$13678 (quote 5) v$735$13679) (error (quote set-library-vis*!) (quote "~s is not of type ~s") x$735$13678 (quote library))))) (set! set-library-inv*!$735$13544 (lambda (x$735$13682 v$735$13683) (if (library?$735$13510 x$735$13682) (vector-set! x$735$13682 (quote 6) v$735$13683) (error (quote set-library-inv*!) (quote "~s is not of type ~s") x$735$13682 (quote library))))) (set! set-library-subst!$735$13546 (lambda (x$735$13686 v$735$13687) (if (library?$735$13510 x$735$13686) (vector-set! x$735$13686 (quote 7) v$735$13687) (error (quote set-library-subst!) (quote "~s is not of type ~s") x$735$13686 (quote library))))) (set! set-library-env!$735$13548 (lambda (x$735$13690 v$735$13691) (if (library?$735$13510 x$735$13690) (vector-set! x$735$13690 (quote 8) v$735$13691) (error (quote set-library-env!) (quote "~s is not of type ~s") x$735$13690 (quote library))))) (set! set-library-visit-state!$735$13550 (lambda (x$735$13694 v$735$13695) (if (library?$735$13510 x$735$13694) (vector-set! x$735$13694 (quote 9) v$735$13695) (error (quote set-library-visit-state!) (quote "~s is not of type ~s") x$735$13694 (quote library))))) (set! set-library-invoke-state!$735$13552 (lambda (x$735$13698 v$735$13699) (if (library?$735$13510 x$735$13698) (vector-set! x$735$13698 (quote 10) v$735$13699) (error (quote set-library-invoke-state!) (quote "~s is not of type ~s") x$735$13698 (quote library))))) (set! set-library-visible?!$735$13554 (lambda (x$735$13702 v$735$13703) (if (library?$735$13510 x$735$13702) (vector-set! x$735$13702 (quote 11) v$735$13703) (error (quote set-library-visible?!) (quote "~s is not of type ~s") x$735$13702 (quote library))))) (set! find-dependencies$735$13556 (lambda (ls$735$13706) (if (null? ls$735$13706) (quote ()) (error (quote find-dependencies) (quote "cannot handle deps yet"))))) (set! find-library-by$735$13558 (lambda (pred$735$13708) (letrec ((f$735$13710 (lambda (ls$735$13712) (if (null? ls$735$13712) (quote #f) (if (pred$735$13708 (car ls$735$13712)) (car ls$735$13712) (f$735$13710 (cdr ls$735$13712))))))) (f$735$13710 ((current-library-collection$735$13505)))))) (set! library-path$735$13560 (make-parameter$735$13361 (quote (".")) (lambda (x$735$13714) (if (if (list? x$735$13714) (begin (quote #f) (for-all string? x$735$13714)) (quote #f)) (map (lambda (x$735$13716) x$735$13716) x$735$13714) (error (quote library-path) (quote "not a list of strings") x$735$13714))))) (set! library-name->file-name$735$13562 (lambda (x$735$13718) (call-with-values (lambda () (open-string-output-port)) (lambda (p$735$13720 extract$735$13721) ((lambda (display-hex$735$13724) (begin (set! display-hex$735$13724 (lambda (n$735$13726) (if (<= (quote 0) n$735$13726 (quote 9)) (display n$735$13726 p$735$13720) (display (integer->char (+ (char->integer (quote #\A)) (- n$735$13726 (quote 10)))) p$735$13720)))) (begin (letrec ((f$735$13728 (lambda (ls$735$13730) (if (null? ls$735$13730) (display (quote ".ss") p$735$13720) (begin (display (quote "/") p$735$13720) (for-each (lambda (c$735$13732) (if ((lambda (t$735$13734) (if t$735$13734 t$735$13734 ((lambda (t$735$13736) (if t$735$13736 t$735$13736 ((lambda (t$735$13738) (if t$735$13738 t$735$13738 (begin (quote #f) (memv c$735$13732 (quote (#\- #\. #\_ #\~)))))) (char<=? (quote #\0) c$735$13732 (quote #\9))))) (char<=? (quote #\A) c$735$13732 (quote #\Z))))) (char<=? (quote #\a) c$735$13732 (quote #\z))) (display c$735$13732 p$735$13720) (begin (display (quote "%") p$735$13720) ((lambda (n$735$13740) (begin (display-hex$735$13724 (quotient n$735$13740 (quote 16))) (display-hex$735$13724 (remainder n$735$13740 (quote 16))))) (char->integer c$735$13732))))) (string->list (symbol->string (car ls$735$13730)))) (f$735$13728 (cdr ls$735$13730))))))) (f$735$13728 x$735$13718)) (extract$735$13721)))) (quote #f)))))) (set! file-locator$735$13564 (make-parameter$735$13361 (lambda (x$735$13742) ((lambda (str$735$13744) (letrec ((f$735$13746 (lambda (ls$735$13748) (if (pair? ls$735$13748) (begin (quote #f) ((lambda (name$735$13750) (if (file-exists? name$735$13750) name$735$13750 (f$735$13746 (cdr ls$735$13748)))) (string-append (car ls$735$13748) str$735$13744))) (quote #f))))) (f$735$13746 (library-path$735$13560)))) (library-name->file-name$735$13562 x$735$13742))) (lambda (f$735$13752) (if (procedure? f$735$13752) f$735$13752 (error (quote file-locator) (quote "not a procedure") f$735$13752))))) (set! library-locator$735$13566 (make-parameter$735$13361 (lambda (x$735$13754) ((lambda (file-name$735$13756) (if (string? file-name$735$13756) (begin (quote #f) (with-input-from-file file-name$735$13756 read)) (quote #f))) ((file-locator$735$13564) x$735$13754))) (lambda (f$735$13758) (if (procedure? f$735$13758) f$735$13758 (error (quote library-locator) (quote "not a procedure") f$735$13758))))) (set! current-library-expander$735$13568 (make-parameter$735$13361 (lambda (x$735$13760) (error (quote library-expander) (quote "not initialized"))) (lambda (f$735$13762) (if (procedure? f$735$13762) f$735$13762 (error (quote library-expander) (quote "not a procedure") f$735$13762))))) (set! external-pending-libraries$735$13570 (make-parameter$735$13361 (quote ()))) (set! find-external-library$735$13572 (lambda (name$735$13764) (begin (if (member name$735$13764 (external-pending-libraries$735$13570)) (error (quote #f) (quote "circular attempt to import library was detected") name$735$13764) (void)) ((lambda (t$735$13768 t$735$13769) ((lambda (swap$735$13772) (dynamic-wind swap$735$13772 (lambda () ((lambda (lib-expr$735$13774) (begin (if lib-expr$735$13774 (void) (error (quote #f) (quote "cannot find library") name$735$13764)) ((current-library-expander$735$13568) lib-expr$735$13774) ((lambda (t$735$13776) (if t$735$13776 t$735$13776 (begin (quote #f) (error (quote #f) (quote "handling external library did not yield the currect library") name$735$13764)))) (find-library-by$735$13558 (lambda (x$735$13778) (equal? (library-name$735$13514 x$735$13778) name$735$13764)))))) ((library-locator$735$13566) name$735$13764))) swap$735$13772)) (lambda () ((lambda (t$735$13780) (begin (t$735$13768 t$735$13769) (set! t$735$13769 t$735$13780))) (t$735$13768))))) external-pending-libraries$735$13570 (cons name$735$13764 (external-pending-libraries$735$13570)))))) (set! find-library-by-name$735$13574 (lambda (name$735$13782) ((lambda (t$735$13784) (if t$735$13784 t$735$13784 (begin (quote #f) (find-external-library$735$13572 name$735$13782)))) (find-library-by$735$13558 (lambda (x$735$13786) (equal? (library-name$735$13514 x$735$13786) name$735$13782)))))) (set! library-exists?$735$13576 (lambda (name$735$13788) (if (find-library-by$735$13558 (lambda (x$735$13790) (equal? (library-name$735$13514 x$735$13790) name$735$13788))) (begin (quote #f) (quote #t)) (quote #f)))) (set! find-library-by-spec/die$735$13578 (lambda (spec$735$13792) ((lambda (id$735$13794) ((lambda (t$735$13796) (if t$735$13796 t$735$13796 (begin (quote #f) (error (quote #f) (quote "cannot find library with required spec") spec$735$13792)))) (find-library-by$735$13558 (lambda (x$735$13798) (eq? id$735$13794 (library-id$735$13512 x$735$13798)))))) (car spec$735$13792)))) (set! label->binding-table$735$13580 (make-eq-hashtable)) (set! install-library-record$735$13582 (lambda (lib$735$13800) (begin ((lambda (exp-env$735$13802) (for-each (lambda (x$735$13804) ((lambda (label$735$13806 binding$735$13807) ((lambda (binding$735$13810) (hashtable-set! label->binding-table$735$13580 label$735$13806 binding$735$13810)) ((lambda (t$735$13812) (if (memv t$735$13812 (quote (global))) (cons (quote global) (cons lib$735$13800 (cdr binding$735$13807))) (if (memv t$735$13812 (quote (global-macro))) (cons (quote global-macro) (cons lib$735$13800 (cdr binding$735$13807))) (if (memv t$735$13812 (quote (global-macro!))) (cons (quote global-macro!) (cons lib$735$13800 (cdr binding$735$13807))) binding$735$13807)))) (car binding$735$13807)))) (car x$735$13804) (cdr x$735$13804))) exp-env$735$13802)) (library-env$735$13526 lib$735$13800)) ((current-library-collection$735$13505) lib$735$13800)))) (set! install-library$735$13584 (lambda (id$735$13813 name$735$13814 ver$735$13815 imp*$735$13816 vis*$735$13817 inv*$735$13818 exp-subst$735$13819 exp-env$735$13820 visit-code$735$13821 invoke-code$735$13822 visible?$735$13823) ((lambda (imp-lib*$735$13835 vis-lib*$735$13836 inv-lib*$735$13837) (begin (if (if (symbol? id$735$13813) (if (list? name$735$13814) (begin (quote #f) (list? ver$735$13815)) (quote #f)) (quote #f)) (void) (error (quote install-library) (quote "invalid spec with id/name/ver") id$735$13813 name$735$13814 ver$735$13815)) (if (library-exists?$735$13576 name$735$13814) (error (quote install-library) (quote "library is already installed") name$735$13814) (void)) ((lambda (lib$735$13841) (install-library-record$735$13582 lib$735$13841)) (make-library$735$13508 id$735$13813 name$735$13814 ver$735$13815 imp-lib*$735$13835 vis-lib*$735$13836 inv-lib*$735$13837 exp-subst$735$13819 exp-env$735$13820 visit-code$735$13821 invoke-code$735$13822 visible?$735$13823)))) (map find-library-by-spec/die$735$13578 imp*$735$13816) (map find-library-by-spec/die$735$13578 vis*$735$13817) (map find-library-by-spec/die$735$13578 inv*$735$13818)))) (set! extend-library-subst!$735$13586 (lambda (lib$735$13843 sym$735$13844 label$735$13845) (set-library-subst!$735$13546 lib$735$13843 (cons (cons sym$735$13844 label$735$13845) (library-subst$735$13524 lib$735$13843))))) (set! extend-library-env!$735$13588 (lambda (lib$735$13849 label$735$13850 binding$735$13851) (begin (set-library-env!$735$13548 lib$735$13849 (cons (cons label$735$13850 binding$735$13851) (library-env$735$13526 lib$735$13849))) (hashtable-set! label->binding-table$735$13580 label$735$13850 binding$735$13851)))) (set! imported-label->binding$735$13590 (lambda (lab$735$13855) (hashtable-ref label->binding-table$735$13580 lab$735$13855 (quote #f)))) (set! invoke-library$735$13592 (lambda (lib$735$13857) ((lambda (invoke$735$13859) (if (procedure? invoke$735$13859) (begin (set-library-invoke-state!$735$13552 lib$735$13857 (lambda () (error (quote invoke) (quote "circularity detected") lib$735$13857))) (for-each invoke-library$735$13592 (library-inv*$735$13522 lib$735$13857)) (set-library-invoke-state!$735$13552 lib$735$13857 (lambda () (error (quote invoke) (quote "first invoke did not return") lib$735$13857))) (invoke$735$13859) (set-library-invoke-state!$735$13552 lib$735$13857 (quote #t))) (void))) (library-invoke-state$735$13530 lib$735$13857)))) (set! visit-library$735$13594 (lambda (lib$735$13861) ((lambda (visit$735$13863) (if (procedure? visit$735$13863) (begin (set-library-visit-state!$735$13550 lib$735$13861 (lambda () (error (quote visit) (quote "circularity detected") lib$735$13861))) (for-each invoke-library$735$13592 (library-vis*$735$13520 lib$735$13861)) (set-library-visit-state!$735$13550 lib$735$13861 (lambda () (error (quote invoke) (quote "first visit did not return") lib$735$13861))) (visit$735$13863) (set-library-visit-state!$735$13550 lib$735$13861 (quote #t))) (void))) (library-visit-state$735$13528 lib$735$13861)))) (set! invoke-library-by-spec$735$13596 (lambda (spec$735$13865) (invoke-library$735$13592 (find-library-by-spec/die$735$13578 spec$735$13865)))) (set! installed-libraries$735$13598 (lambda g$735$13875 ((lambda (g$735$13876) (if (= g$735$13876 (quote 1)) (apply (lambda (all?$735$13867) (letrec ((f$735$13869 (lambda (ls$735$13871) (if (null? ls$735$13871) (quote ()) (if ((lambda (t$735$13873) (if t$735$13873 t$735$13873 (begin (quote #f) (library-visible?$735$13532 (car ls$735$13871))))) all?$735$13867) (cons (car ls$735$13871) (f$735$13869 (cdr ls$735$13871))) (f$735$13869 (cdr ls$735$13871))))))) (f$735$13869 ((current-library-collection$735$13505))))) g$735$13875) (if (= g$735$13876 (quote 0)) (apply (lambda () (installed-libraries$735$13598 (quote #f))) g$735$13875) (error (quote apply) (quote "invalid arg count"))))) (length g$735$13875)))) (set! library-spec$735$13600 (lambda (x$735$13877) (begin (if (library?$735$13510 x$735$13877) (void) (error (quote library-spec) (quote "not a library") x$735$13877)) (list (library-id$735$13512 x$735$13877) (library-name$735$13514 x$735$13877) (library-version$735$13516 x$735$13877))))) (begin (set! library-spec$735$13879 library-spec$735$13600) (set! installed-libraries$735$13880 installed-libraries$735$13598) (set! invoke-library-by-spec$735$13881 invoke-library-by-spec$735$13596) (set! visit-library$735$13882 visit-library$735$13594) (set! invoke-library$735$13883 invoke-library$735$13592) (set! imported-label->binding$735$13884 imported-label->binding$735$13590) (set! extend-library-env!$735$13885 extend-library-env!$735$13588) (set! extend-library-subst!$735$13886 extend-library-subst!$735$13586) (set! install-library$735$13887 install-library$735$13584) (set! install-library-record$735$13888 install-library-record$735$13582) (set! label->binding-table$735$13889 label->binding-table$735$13580) (set! find-library-by-spec/die$735$13890 find-library-by-spec/die$735$13578) (set! library-exists?$735$13891 library-exists?$735$13576) (set! find-library-by-name$735$13892 find-library-by-name$735$13574) (set! find-external-library$735$13893 find-external-library$735$13572) (set! external-pending-libraries$735$13894 external-pending-libraries$735$13570) (set! current-library-expander$735$13895 current-library-expander$735$13568) (set! library-locator$735$13896 library-locator$735$13566) (set! file-locator$735$13897 file-locator$735$13564) (set! library-name->file-name$735$13898 library-name->file-name$735$13562) (set! library-path$735$13899 library-path$735$13560) (set! find-library-by$735$13900 find-library-by$735$13558) (set! find-dependencies$735$13901 find-dependencies$735$13556) (set! set-library-visible?!$735$13902 set-library-visible?!$735$13554) (set! set-library-invoke-state!$735$13903 set-library-invoke-state!$735$13552) (set! set-library-visit-state!$735$13904 set-library-visit-state!$735$13550) (set! set-library-env!$735$13905 set-library-env!$735$13548) (set! set-library-subst!$735$13906 set-library-subst!$735$13546) (set! set-library-inv*!$735$13907 set-library-inv*!$735$13544) (set! set-library-vis*!$735$13908 set-library-vis*!$735$13542) (set! set-library-imp*!$735$13909 set-library-imp*!$735$13540) (set! set-library-version!$735$13910 set-library-version!$735$13538) (set! set-library-name!$735$13911 set-library-name!$735$13536) (set! set-library-id!$735$13912 set-library-id!$735$13534) (set! library-visible?$735$13913 library-visible?$735$13532) (set! library-invoke-state$735$13914 library-invoke-state$735$13530) (set! library-visit-state$735$13915 library-visit-state$735$13528) (set! library-env$735$13916 library-env$735$13526) (set! library-subst$735$13917 library-subst$735$13524) (set! library-inv*$735$13918 library-inv*$735$13522) (set! library-vis*$735$13919 library-vis*$735$13520) (set! library-imp*$735$13920 library-imp*$735$13518) (set! library-version$735$13921 library-version$735$13516) (set! library-name$735$13922 library-name$735$13514) (set! library-id$735$13923 library-id$735$13512) (set! library?$735$13924 library?$735$13510) (set! make-library$735$13925 make-library$735$13508) (set! current-library-collection$735$13926 current-library-collection$735$13505) (set! make-collection$735$13927 make-collection$735$13503)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define build-global-define$735$14242 (quote #f)) (define build-lambda$735$14234 (quote #f)) (define build-case-lambda$735$14233 (quote #f)) (define build-let$735$14232 (quote #f)) (define build-sequence$735$14228 (quote #f)) (define build-void$735$14227 (quote #f)) (define build-letrec$735$14226 (quote #f)) (define build-letrec*$735$14225 (quote #f)) ((lambda (build-global-define$735$13929 build-lambda$735$14047 build-case-lambda$735$14049 build-let$735$14051 build-sequence$735$14115 build-void$735$14117 build-letrec$735$14119 build-letrec*$735$14121) (begin (set! build-global-define$735$13929 (lambda (x$735$14123) (cons (quote define) (cons x$735$14123 (quote ((quote #f))))))) (set! build-lambda$735$14047 (lambda (ae$735$14125 vars$735$14126 exp$735$14127) (list (quote lambda) vars$735$14126 exp$735$14127))) (set! build-case-lambda$735$14049 (lambda (ae$735$14131 vars*$735$14132 exp*$735$14133) ((lambda (build-error$735$14137 build-pred$735$14139 build-apply$735$14141 expand-case-lambda$735$14143) (begin (set! build-error$735$14137 (lambda (ae$735$14185) (list (quote (primitive error)) (quote (quote apply)) (list (quote quote) (quote "invalid arg count"))))) (set! build-pred$735$14139 (lambda (ae$735$14169 n$735$14170 vars$735$14171) (call-with-values (lambda () (letrec ((f$735$14175 (lambda (vars$735$14177 count$735$14178) (if (pair? vars$735$14177) (f$735$14175 (cdr vars$735$14177) (+ count$735$14178 (quote 1))) (if (null? vars$735$14177) (values count$735$14178 (quote =)) (values count$735$14178 (quote >=))))))) (f$735$14175 vars$735$14171 (quote 0)))) (lambda (count$735$14181 pred$735$14182) (list (list (quote primitive) pred$735$14182) n$735$14170 (list (quote quote) count$735$14181)))))) (set! build-apply$735$14141 (lambda (ae$735$14161 g$735$14162 vars$735$14163 exp$735$14164) (list (quote (primitive apply)) (build-lambda$735$14047 ae$735$14161 vars$735$14163 exp$735$14164) g$735$14162))) (set! expand-case-lambda$735$14143 (lambda (ae$735$14145 vars$735$14146 exp*$735$14147) ((lambda (g$735$14151 n$735$14152) (list (quote lambda) g$735$14151 (build-let$735$14051 ae$735$14145 (list n$735$14152) (list (list (quote (primitive length)) g$735$14151)) (letrec ((f$735$14155 (lambda (vars*$735$14157 exp*$735$14158) (if (null? vars*$735$14157) (build-error$735$14137 ae$735$14145) (list (quote if) (build-pred$735$14139 ae$735$14145 n$735$14152 (car vars*$735$14157)) (build-apply$735$14141 ae$735$14145 g$735$14151 (car vars*$735$14157) (car exp*$735$14158)) (f$735$14155 (cdr vars*$735$14157) (cdr exp*$735$14158))))))) (f$735$14155 vars*$735$14132 exp*$735$14147))))) (gensym) (gensym)))) (if (= (length exp*$735$14133) (quote 1)) (build-lambda$735$14047 ae$735$14131 (car vars*$735$14132) (car exp*$735$14133)) (expand-case-lambda$735$14143 ae$735$14131 vars*$735$14132 exp*$735$14133)))) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! build-let$735$14051 (lambda (ae$735$14187 lhs*$735$14188 rhs*$735$14189 body$735$14190) (cons (build-lambda$735$14047 ae$735$14187 lhs*$735$14188 body$735$14190) rhs*$735$14189))) (set! build-sequence$735$14115 (lambda (ae$735$14195 exps$735$14196) (letrec ((loop$735$14199 (lambda (exps$735$14201) (if (null? (cdr exps$735$14201)) (car exps$735$14201) (if (equal? (car exps$735$14201) (build-void$735$14117)) (loop$735$14199 (cdr exps$735$14201)) (cons (quote begin) exps$735$14201)))))) (loop$735$14199 exps$735$14196)))) (set! build-void$735$14117 (lambda () (quote ((primitive void))))) (set! build-letrec$735$14119 (lambda (ae$735$14203 vars$735$14204 val-exps$735$14205 body-exp$735$14206) (if (null? vars$735$14204) body-exp$735$14206 (list (quote letrec) (map list vars$735$14204 val-exps$735$14205) body-exp$735$14206)))) (set! build-letrec*$735$14121 (lambda (ae$735$14211 vars$735$14212 val-exps$735$14213 body-exp$735$14214) (if (null? vars$735$14212) body-exp$735$14214 (build-let$735$14051 ae$735$14211 vars$735$14212 (map (lambda (x$735$14219) (list (quote quote) (quote #f))) vars$735$14212) (build-sequence$735$14115 ae$735$14211 (append (map (lambda (lhs$735$14221 rhs$735$14222) (list (quote set!) lhs$735$14221 rhs$735$14222)) vars$735$14212 val-exps$735$14213) (list body-exp$735$14214))))))) (begin (set! build-letrec*$735$14225 build-letrec*$735$14121) (set! build-letrec$735$14226 build-letrec$735$14119) (set! build-void$735$14227 build-void$735$14117) (set! build-sequence$735$14228 build-sequence$735$14115) (set! build-let$735$14232 build-let$735$14051) (set! build-case-lambda$735$14233 build-case-lambda$735$14049) (set! build-lambda$735$14234 build-lambda$735$14047) (set! build-global-define$735$14242 build-global-define$735$13929)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define set-cons$735$24668 (quote #f)) (define set-union$735$24667 (quote #f)) (define top-mark*$735$24665 (quote #f)) (define top-marked?$735$24664 (quote #f)) (define gen-lexical$735$24663 (quote #f)) (define gen-global$735$24662 (quote #f)) (define gen-label$735$24661 (quote #f)) (define make-rib$735$24660 (quote #f)) (define rib?$735$24659 (quote #f)) (define rib-sym*$735$24658 (quote #f)) (define rib-mark**$735$24657 (quote #f)) (define rib-label*$735$24656 (quote #f)) (define rib-sealed/freq$735$24655 (quote #f)) (define set-rib-sym*!$735$24654 (quote #f)) (define set-rib-mark**!$735$24653 (quote #f)) (define set-rib-label*!$735$24652 (quote #f)) (define set-rib-sealed/freq!$735$24651 (quote #f)) (define make-empty-rib$735$24650 (quote #f)) (define extend-rib!$735$24649 (quote #f)) (define seal-rib!$735$24648 (quote #f)) (define unseal-rib!$735$24647 (quote #f)) (define increment-rib-frequency!$735$24646 (quote #f)) (define make-full-rib$735$24645 (quote #f)) (define make-stx$735$24644 (quote #f)) (define stx?$735$24643 (quote #f)) (define stx-expr$735$24642 (quote #f)) (define stx-mark*$735$24641 (quote #f)) (define stx-subst*$735$24640 (quote #f)) (define set-stx-expr!$735$24639 (quote #f)) (define set-stx-mark*!$735$24638 (quote #f)) (define set-stx-subst*!$735$24637 (quote #f)) (define datum->stx$735$24636 (quote #f)) (define gen-mark$735$24635 (quote #f)) (define anti-mark$735$24634 (quote #f)) (define anti-mark?$735$24633 (quote #f)) (define join-wraps$735$24632 (quote #f)) (define mkstx$735$24631 (quote #f)) (define add-mark$735$24630 (quote #f)) (define add-subst$735$24629 (quote #f)) (define syntax-kind?$735$24628 (quote #f)) (define syntax-vector->list$735$24627 (quote #f)) (define syntax-pair?$735$24626 (quote #f)) (define syntax-vector?$735$24625 (quote #f)) (define syntax-null?$735$24624 (quote #f)) (define syntax-list?$735$24623 (quote #f)) (define syntax-car$735$24622 (quote #f)) (define syntax->list$735$24621 (quote #f)) (define syntax-cdr$735$24620 (quote #f)) (define id?$735$24619 (quote #f)) (define id->sym$735$24618 (quote #f)) (define same-marks?$735$24617 (quote #f)) (define bound-id=?$735$24616 (quote #f)) (define free-id=?$735$24615 (quote #f)) (define valid-bound-ids?$735$24614 (quote #f)) (define distinct-bound-ids?$735$24613 (quote #f)) (define bound-id-member?$735$24612 (quote #f)) (define self-evaluating?$735$24611 (quote #f)) (define strip$735$24610 (quote #f)) (define stx->datum$735$24609 (quote #f)) (define id->label$735$24608 (quote #f)) (define label->binding$735$24607 (quote #f)) (define make-binding$735$24606 (quote #f)) (define binding-type$735$24605 (quote #f)) (define binding-value$735$24604 (quote #f)) (define syntax-type$735$24603 (quote #f)) (define sanitize-binding$735$24601 (quote #f)) (define make-variable-transformer$735$24600 (quote #f)) (define make-eval-transformer$735$24599 (quote #f)) (define parse-define$735$24597 (quote #f)) (define parse-define-syntax$735$24596 (quote #f)) (define scheme-stx$735$24595 (quote #f)) (define add-lexical$735$24594 (quote #f)) (define add-lexicals$735$24593 (quote #f)) (define let-values-transformer$735$24592 (quote #f)) (define letrec-helper$735$24591 (quote #f)) (define letrec-transformer$735$24590 (quote #f)) (define letrec*-transformer$735$24589 (quote #f)) (define type-descriptor-transformer$735$24588 (quote #f)) (define record-type-descriptor-transformer$735$24587 (quote #f)) (define record-constructor-descriptor-transformer$735$24586 (quote #f)) (define when-transformer$735$24585 (quote #f)) (define unless-transformer$735$24584 (quote #f)) (define if-transformer$735$24583 (quote #f)) (define case-transformer$735$24582 (quote #f)) (define quote-transformer$735$24581 (quote #f)) (define case-lambda-transformer$735$24580 (quote #f)) (define lambda-transformer$735$24579 (quote #f)) (define bless$735$24578 (quote #f)) (define with-syntax-macro$735$24577 (quote #f)) (define let-macro$735$24576 (quote #f)) (define trace-lambda-macro$735$24575 (quote #f)) (define trace-define-macro$735$24574 (quote #f)) (define guard-macro$735$24573 (quote #f)) (define define-enumeration-macro$735$24572 (quote #f)) (define time-macro$735$24571 (quote #f)) (define delay-macro$735$24570 (quote #f)) (define assert-macro$735$24569 (quote #f)) (define endianness-macro$735$24568 (quote #f)) (define identifier-syntax-macro$735$24567 (quote #f)) (define do-macro$735$24566 (quote #f)) (define let*-macro$735$24565 (quote #f)) (define or-macro$735$24564 (quote #f)) (define and-macro$735$24563 (quote #f)) (define cond-macro$735$24562 (quote #f)) (define include-macro$735$24561 (quote #f)) (define syntax-rules-macro$735$24560 (quote #f)) (define quasiquote-macro$735$24559 (quote #f)) (define quasisyntax-macro$735$24558 (quote #f)) (define define-struct-macro$735$24557 (quote #f)) (define define-record-type-macro$735$24556 (quote #f)) (define define-condition-type-macro$735$24555 (quote #f)) (define incorrect-usage-macro$735$24554 (quote #f)) (define parameterize-transformer$735$24553 (quote #f)) (define foreign-call-transformer$735$24552 (quote #f)) (define convert-pattern$735$24551 (quote #f)) (define syntax-dispatch$735$24550 (quote #f)) (define ellipsis?$735$24549 (quote #f)) (define syntax-case-transformer$735$24548 (quote #f)) (define syntax-transformer$735$24547 (quote #f)) (define core-macro-transformer$735$24546 (quote #f)) (define file-options-macro$735$24545 (quote #f)) (define symbol-macro$735$24544 (quote #f)) (define macro-transformer$735$24543 (quote #f)) (define local-macro-transformer$735$24542 (quote #f)) (define chi-macro$735$24541 (quote #f)) (define chi-local-macro$735$24540 (quote #f)) (define chi-global-macro$735$24539 (quote #f)) (define chi-expr*$735$24538 (quote #f)) (define chi-application$735$24537 (quote #f)) (define chi-expr$735$24536 (quote #f)) (define chi-set!$735$24535 (quote #f)) (define chi-lambda-clause$735$24534 (quote #f)) (define chi-lambda-clause*$735$24533 (quote #f)) (define chi-rhs$735$24532 (quote #f)) (define chi-rhs*$735$24531 (quote #f)) (define find-bound=?$735$24530 (quote #f)) (define find-dups$735$24529 (quote #f)) (define chi-internal$735$24528 (quote #f)) (define parse-module$735$24527 (quote #f)) (define chi-internal-module$735$24526 (quote #f)) (define chi-body*$735$24525 (quote #f)) (define set-global-macro-binding!$735$24524 (quote #f)) (define gen-global-macro-binding$735$24523 (quote #f)) (define gen-global-var-binding$735$24522 (quote #f)) (define chi-top-set!$735$24521 (quote #f)) (define chi-top*$735$24520 (quote #f)) (define expand-transformer$735$24519 (quote #f)) (define parse-exports$735$24518 (quote #f)) (define parse-library-name$735$24517 (quote #f)) (define parse-library$735$24516 (quote #f)) (define parse-import-spec*$735$24515 (quote #f)) (define make-top-rib$735$24514 (quote #f)) (define make-collector$735$24513 (quote #f)) (define inv-collector$735$24512 (quote #f)) (define vis-collector$735$24511 (quote #f)) (define chi-library-internal$735$24510 (quote #f)) (define library-body-expander$735$24509 (quote #f)) (define core-library-expander$735$24508 (quote #f)) (define parse-top-level-program$735$24507 (quote #f)) (define top-level-expander$735$24506 (quote #f)) (define make-env$735$24505 (quote #f)) (define env?$735$24504 (quote #f)) (define env-subst$735$24503 (quote #f)) (define env-imp*$735$24502 (quote #f)) (define set-env-subst!$735$24501 (quote #f)) (define set-env-imp*!$735$24500 (quote #f)) (define environment?$735$24499 (quote #f)) (define environment$735$24498 (quote #f)) (define null-environment$735$24497 (quote #f)) (define scheme-report-environment$735$24496 (quote #f)) (define expand$735$24495 (quote #f)) (define eval$735$24494 (quote #f)) (define library-expander$735$24493 (quote #f)) (define boot-library-expand$735$24492 (quote #f)) (define rev-map-append$735$24491 (quote #f)) (define build-exports$735$24490 (quote #f)) (define make-export-subst$735$24489 (quote #f)) (define make-export-env/macros$735$24488 (quote #f)) (define generate-temporaries$735$24487 (quote #f)) (define free-identifier=?$735$24486 (quote #f)) (define bound-identifier=?$735$24485 (quote #f)) (define syntax-error$735$24484 (quote #f)) (define identifier?$735$24483 (quote #f)) (define datum->syntax$735$24482 (quote #f)) (define syntax->datum$735$24481 (quote #f)) (define eval-r6rs-top-level$735$24480 (quote #f)) (define interaction-library$735$24479 (quote #f)) (define interaction-sym->label$735$24478 (quote #f)) (define eval-top-level$735$24477 (quote #f)) ((lambda (set-cons$735$14244 set-union$735$14246 top-mark*$735$14251 top-marked?$735$14253 gen-lexical$735$14255 gen-global$735$14257 gen-label$735$14259 make-rib$735$14262 rib?$735$14264 rib-sym*$735$14266 rib-mark**$735$14268 rib-label*$735$14270 rib-sealed/freq$735$14272 set-rib-sym*!$735$14274 set-rib-mark**!$735$14276 set-rib-label*!$735$14278 set-rib-sealed/freq!$735$14280 make-empty-rib$735$14282 extend-rib!$735$14284 seal-rib!$735$14286 unseal-rib!$735$14288 increment-rib-frequency!$735$14290 make-full-rib$735$14292 make-stx$735$14295 stx?$735$14297 stx-expr$735$14299 stx-mark*$735$14301 stx-subst*$735$14303 set-stx-expr!$735$14305 set-stx-mark*!$735$14307 set-stx-subst*!$735$14309 datum->stx$735$14311 gen-mark$735$14313 anti-mark$735$14315 anti-mark?$735$14317 join-wraps$735$14319 mkstx$735$14321 add-mark$735$14323 add-subst$735$14325 syntax-kind?$735$14327 syntax-vector->list$735$14329 syntax-pair?$735$14331 syntax-vector?$735$14333 syntax-null?$735$14335 syntax-list?$735$14337 syntax-car$735$14339 syntax->list$735$14341 syntax-cdr$735$14343 id?$735$14345 id->sym$735$14347 same-marks?$735$14349 bound-id=?$735$14351 free-id=?$735$14353 valid-bound-ids?$735$14355 distinct-bound-ids?$735$14357 bound-id-member?$735$14359 self-evaluating?$735$14361 strip$735$14363 stx->datum$735$14365 id->label$735$14367 label->binding$735$14369 make-binding$735$14371 binding-type$735$14373 binding-value$735$14375 syntax-type$735$14377 sanitize-binding$735$14404 make-variable-transformer$735$14406 make-eval-transformer$735$14408 parse-define$735$14770 parse-define-syntax$735$14772 scheme-stx$735$14774 add-lexical$735$14776 add-lexicals$735$14778 let-values-transformer$735$14780 letrec-helper$735$14782 letrec-transformer$735$14784 letrec*-transformer$735$14786 type-descriptor-transformer$735$14788 record-type-descriptor-transformer$735$14790 record-constructor-descriptor-transformer$735$14792 when-transformer$735$14794 unless-transformer$735$14796 if-transformer$735$14798 case-transformer$735$14800 quote-transformer$735$14802 case-lambda-transformer$735$14804 lambda-transformer$735$14806 bless$735$14808 with-syntax-macro$735$14810 let-macro$735$14812 trace-lambda-macro$735$14814 trace-define-macro$735$14816 guard-macro$735$14818 define-enumeration-macro$735$14820 time-macro$735$14822 delay-macro$735$14824 assert-macro$735$14826 endianness-macro$735$14828 identifier-syntax-macro$735$14830 do-macro$735$14832 let*-macro$735$14834 or-macro$735$14836 and-macro$735$14838 cond-macro$735$14840 include-macro$735$14842 syntax-rules-macro$735$14844 quasiquote-macro$735$14846 quasisyntax-macro$735$14848 define-struct-macro$735$14850 define-record-type-macro$735$14852 define-condition-type-macro$735$14854 incorrect-usage-macro$735$14856 parameterize-transformer$735$14858 foreign-call-transformer$735$14860 convert-pattern$735$14862 syntax-dispatch$735$14864 ellipsis?$735$14866 syntax-case-transformer$735$14868 syntax-transformer$735$14870 core-macro-transformer$735$14872 file-options-macro$735$14874 symbol-macro$735$14876 macro-transformer$735$14878 local-macro-transformer$735$14880 chi-macro$735$14882 chi-local-macro$735$14884 chi-global-macro$735$14886 chi-expr*$735$14888 chi-application$735$14890 chi-expr$735$14892 chi-set!$735$14894 chi-lambda-clause$735$14896 chi-lambda-clause*$735$14898 chi-rhs$735$14900 chi-rhs*$735$14902 find-bound=?$735$14904 find-dups$735$14906 chi-internal$735$14908 parse-module$735$14910 chi-internal-module$735$14912 chi-body*$735$14914 set-global-macro-binding!$735$14916 gen-global-macro-binding$735$14918 gen-global-var-binding$735$14920 chi-top-set!$735$14922 chi-top*$735$14924 expand-transformer$735$14926 parse-exports$735$14928 parse-library-name$735$14930 parse-library$735$14932 parse-import-spec*$735$14934 make-top-rib$735$14936 make-collector$735$14938 inv-collector$735$14940 vis-collector$735$14942 chi-library-internal$735$14944 library-body-expander$735$14946 core-library-expander$735$14948 parse-top-level-program$735$14950 top-level-expander$735$14952 make-env$735$14955 env?$735$14957 env-subst$735$14959 env-imp*$735$14961 set-env-subst!$735$14963 set-env-imp*!$735$14965 environment?$735$14967 environment$735$14969 null-environment$735$14971 scheme-report-environment$735$14973 expand$735$14975 eval$735$14977 library-expander$735$14979 boot-library-expand$735$14981 rev-map-append$735$14983 build-exports$735$14985 make-export-subst$735$14987 make-export-env/macros$735$14989 generate-temporaries$735$14991 free-identifier=?$735$14993 bound-identifier=?$735$14995 syntax-error$735$14997 identifier?$735$14999 datum->syntax$735$15001 syntax->datum$735$15003 eval-r6rs-top-level$735$15005 interaction-library$735$15007 interaction-sym->label$735$15009 eval-top-level$735$15011) (begin (set! set-cons$735$14244 (lambda (x$735$15013 ls$735$15014) (if (memq x$735$15013 ls$735$15014) ls$735$15014 (cons x$735$15013 ls$735$15014)))) (set! set-union$735$14246 (lambda (ls1$735$15017 ls2$735$15018) (if (null? ls1$735$15017) ls2$735$15018 (if (memq (car ls1$735$15017) ls2$735$15018) (set-union$735$14246 (cdr ls1$735$15017) ls2$735$15018) (cons (car ls1$735$15017) (set-union$735$14246 (cdr ls1$735$15017) ls2$735$15018)))))) (set! top-mark*$735$14251 (quote (top))) (set! top-marked?$735$14253 (lambda (m*$735$15021) (memq (quote top) m*$735$15021))) (set! gen-lexical$735$14255 (lambda (sym$735$15023) (if (symbol? sym$735$15023) (gensym sym$735$15023) (if (stx?$735$14297 sym$735$15023) (gen-lexical$735$14255 (id->sym$735$14347 sym$735$15023)) (error (quote gen-lexical) (quote "BUG: invalid arg") sym$735$15023))))) (set! gen-global$735$14257 (lambda (x$735$15025) (gen-lexical$735$14255 x$735$15025))) (set! gen-label$735$14259 (lambda (_$735$15027) (gensym))) (set! make-rib$735$14262 (lambda (sym*$735$15029 mark**$735$15030 label*$735$15031 sealed/freq$735$15032) (vector (quote g$735$14261) sym*$735$15029 mark**$735$15030 label*$735$15031 sealed/freq$735$15032))) (set! rib?$735$14264 (lambda (x$735$15037) (if (vector? x$735$15037) (if (= (vector-length x$735$15037) (+ (quote 1) (length (quote (sym* mark** label* sealed/freq))))) (begin (quote #f) (eq? (vector-ref x$735$15037 (quote 0)) (quote g$735$14261))) (quote #f)) (quote #f)))) (set! rib-sym*$735$14266 (lambda (x$735$15039) (if (rib?$735$14264 x$735$15039) (vector-ref x$735$15039 (quote 1)) (error (quote rib-sym*) (quote "~s is not of type ~s") x$735$15039 (quote rib))))) (set! rib-mark**$735$14268 (lambda (x$735$15041) (if (rib?$735$14264 x$735$15041) (vector-ref x$735$15041 (quote 2)) (error (quote rib-mark**) (quote "~s is not of type ~s") x$735$15041 (quote rib))))) (set! rib-label*$735$14270 (lambda (x$735$15043) (if (rib?$735$14264 x$735$15043) (vector-ref x$735$15043 (quote 3)) (error (quote rib-label*) (quote "~s is not of type ~s") x$735$15043 (quote rib))))) (set! rib-sealed/freq$735$14272 (lambda (x$735$15045) (if (rib?$735$14264 x$735$15045) (vector-ref x$735$15045 (quote 4)) (error (quote rib-sealed/freq) (quote "~s is not of type ~s") x$735$15045 (quote rib))))) (set! set-rib-sym*!$735$14274 (lambda (x$735$15047 v$735$15048) (if (rib?$735$14264 x$735$15047) (vector-set! x$735$15047 (quote 1) v$735$15048) (error (quote set-rib-sym*!) (quote "~s is not of type ~s") x$735$15047 (quote rib))))) (set! set-rib-mark**!$735$14276 (lambda (x$735$15051 v$735$15052) (if (rib?$735$14264 x$735$15051) (vector-set! x$735$15051 (quote 2) v$735$15052) (error (quote set-rib-mark**!) (quote "~s is not of type ~s") x$735$15051 (quote rib))))) (set! set-rib-label*!$735$14278 (lambda (x$735$15055 v$735$15056) (if (rib?$735$14264 x$735$15055) (vector-set! x$735$15055 (quote 3) v$735$15056) (error (quote set-rib-label*!) (quote "~s is not of type ~s") x$735$15055 (quote rib))))) (set! set-rib-sealed/freq!$735$14280 (lambda (x$735$15059 v$735$15060) (if (rib?$735$14264 x$735$15059) (vector-set! x$735$15059 (quote 4) v$735$15060) (error (quote set-rib-sealed/freq!) (quote "~s is not of type ~s") x$735$15059 (quote rib))))) (set! make-empty-rib$735$14282 (lambda () (make-rib$735$14262 (quote ()) (quote ()) (quote ()) (quote #f)))) (set! extend-rib!$735$14284 (lambda (rib$735$15063 id$735$15064 label$735$15065) ((lambda (find$735$15069) (begin (set! find$735$15069 (lambda (sym$735$15071 mark*$735$15072 sym*$735$15073 mark**$735$15074) (if (pair? sym*$735$15073) (begin (quote #f) ((lambda (t$735$15079) (if t$735$15079 t$735$15079 (begin (quote #f) (find$735$15069 sym$735$15071 mark*$735$15072 (cdr sym*$735$15073) (cdr mark**$735$15074))))) (if (eq? sym$735$15071 (car sym*$735$15073)) (begin (quote #f) (same-marks?$735$14349 mark*$735$15072 (car mark**$735$15074))) (quote #f)))) (quote #f)))) (begin (if (rib-sealed/freq$735$14272 rib$735$15063) (error (quote extend-rib!) (quote "rib is sealed") rib$735$15063) (void)) ((lambda (sym$735$15081 mark*$735$15082) ((lambda (sym*$735$15085) (begin (if (if (memq sym$735$15081 (rib-sym*$735$14266 rib$735$15063)) (begin (quote #f) (find$735$15069 sym$735$15081 mark*$735$15082 sym*$735$15085 (rib-mark**$735$14268 rib$735$15063))) (quote #f)) (error (quote expander) (quote "cannot redefine") (strip$735$14363 id$735$15064 (quote ()))) (void)) (set-rib-sym*!$735$14274 rib$735$15063 (cons sym$735$15081 sym*$735$15085)) (set-rib-mark**!$735$14276 rib$735$15063 (cons mark*$735$15082 (rib-mark**$735$14268 rib$735$15063))) (set-rib-label*!$735$14278 rib$735$15063 (cons label$735$15065 (rib-label*$735$14270 rib$735$15063))))) (rib-sym*$735$14266 rib$735$15063))) (id->sym$735$14347 id$735$15064) (stx-mark*$735$14301 id$735$15064))))) (quote #f)))) (set! seal-rib!$735$14286 (lambda (rib$735$15087) ((lambda (sym*$735$15089) (if (null? sym*$735$15089) (void) ((lambda (sym*$735$15091) (begin (set-rib-sym*!$735$14274 rib$735$15087 sym*$735$15091) (set-rib-mark**!$735$14276 rib$735$15087 (list->vector (rib-mark**$735$14268 rib$735$15087))) (set-rib-label*!$735$14278 rib$735$15087 (list->vector (rib-label*$735$14270 rib$735$15087))) (set-rib-sealed/freq!$735$14280 rib$735$15087 (make-vector (vector-length sym*$735$15091) (quote 0))))) (list->vector sym*$735$15089)))) (rib-sym*$735$14266 rib$735$15087)))) (set! unseal-rib!$735$14288 (lambda (rib$735$15093) (if (rib-sealed/freq$735$14272 rib$735$15093) (begin (set-rib-sealed/freq!$735$14280 rib$735$15093 (quote #f)) (set-rib-sym*!$735$14274 rib$735$15093 (vector->list (rib-sym*$735$14266 rib$735$15093))) (set-rib-mark**!$735$14276 rib$735$15093 (vector->list (rib-mark**$735$14268 rib$735$15093))) (set-rib-label*!$735$14278 rib$735$15093 (vector->list (rib-label*$735$14270 rib$735$15093)))) (void)))) (set! increment-rib-frequency!$735$14290 (lambda (rib$735$15095 idx$735$15096) ((lambda (freq*$735$15099) ((lambda (freq$735$15101) ((lambda (i$735$15103) (begin (vector-set! freq*$735$15099 i$735$15103 (+ freq$735$15101 (quote 1))) (if (= i$735$15103 idx$735$15096) (void) ((lambda (sym*$735$15105 mark**$735$15106 label*$735$15107) (begin ((lambda (sym$735$15111) (begin (vector-set! sym*$735$15105 idx$735$15096 (vector-ref sym*$735$15105 i$735$15103)) (vector-set! sym*$735$15105 i$735$15103 sym$735$15111))) (vector-ref sym*$735$15105 idx$735$15096)) ((lambda (mark*$735$15113) (begin (vector-set! mark**$735$15106 idx$735$15096 (vector-ref mark**$735$15106 i$735$15103)) (vector-set! mark**$735$15106 i$735$15103 mark*$735$15113))) (vector-ref mark**$735$15106 idx$735$15096)) ((lambda (label$735$15115) (begin (vector-set! label*$735$15107 idx$735$15096 (vector-ref label*$735$15107 i$735$15103)) (vector-set! label*$735$15107 i$735$15103 label$735$15115))) (vector-ref label*$735$15107 idx$735$15096)))) (rib-sym*$735$14266 rib$735$15095) (rib-mark**$735$14268 rib$735$15095) (rib-label*$735$14270 rib$735$15095))))) (letrec ((f$735$15117 (lambda (i$735$15119) (if (zero? i$735$15119) (quote 0) ((lambda (j$735$15121) (if (= freq$735$15101 (vector-ref freq*$735$15099 j$735$15121)) (f$735$15117 j$735$15121) i$735$15119)) (- i$735$15119 (quote 1))))))) (f$735$15117 idx$735$15096)))) (vector-ref freq*$735$15099 idx$735$15096))) (rib-sealed/freq$735$14272 rib$735$15095)))) (set! make-full-rib$735$14292 (lambda (id*$735$15123 label*$735$15124) (make-rib$735$14262 (map id->sym$735$14347 id*$735$15123) (map stx-mark*$735$14301 id*$735$15123) label*$735$15124 (quote #f)))) (set! make-stx$735$14295 (lambda (expr$735$15127 mark*$735$15128 subst*$735$15129) (vector (quote g$735$14294) expr$735$15127 mark*$735$15128 subst*$735$15129))) (set! stx?$735$14297 (lambda (x$735$15133) (if (vector? x$735$15133) (if (= (vector-length x$735$15133) (+ (quote 1) (length (quote (expr mark* subst*))))) (begin (quote #f) (eq? (vector-ref x$735$15133 (quote 0)) (quote g$735$14294))) (quote #f)) (quote #f)))) (set! stx-expr$735$14299 (lambda (x$735$15135) (if (stx?$735$14297 x$735$15135) (vector-ref x$735$15135 (quote 1)) (error (quote stx-expr) (quote "~s is not of type ~s") x$735$15135 (quote stx))))) (set! stx-mark*$735$14301 (lambda (x$735$15137) (if (stx?$735$14297 x$735$15137) (vector-ref x$735$15137 (quote 2)) (error (quote stx-mark*) (quote "~s is not of type ~s") x$735$15137 (quote stx))))) (set! stx-subst*$735$14303 (lambda (x$735$15139) (if (stx?$735$14297 x$735$15139) (vector-ref x$735$15139 (quote 3)) (error (quote stx-subst*) (quote "~s is not of type ~s") x$735$15139 (quote stx))))) (set! set-stx-expr!$735$14305 (lambda (x$735$15141 v$735$15142) (if (stx?$735$14297 x$735$15141) (vector-set! x$735$15141 (quote 1) v$735$15142) (error (quote set-stx-expr!) (quote "~s is not of type ~s") x$735$15141 (quote stx))))) (set! set-stx-mark*!$735$14307 (lambda (x$735$15145 v$735$15146) (if (stx?$735$14297 x$735$15145) (vector-set! x$735$15145 (quote 2) v$735$15146) (error (quote set-stx-mark*!) (quote "~s is not of type ~s") x$735$15145 (quote stx))))) (set! set-stx-subst*!$735$14309 (lambda (x$735$15149 v$735$15150) (if (stx?$735$14297 x$735$15149) (vector-set! x$735$15149 (quote 3) v$735$15150) (error (quote set-stx-subst*!) (quote "~s is not of type ~s") x$735$15149 (quote stx))))) (set! datum->stx$735$14311 (lambda (id$735$15153 datum$735$15154) (make-stx$735$14295 datum$735$15154 (stx-mark*$735$14301 id$735$15153) (stx-subst*$735$14303 id$735$15153)))) (set! gen-mark$735$14313 (lambda () (string (quote #\m)))) (set! anti-mark$735$14315 (quote #f)) (set! anti-mark?$735$14317 not) (set! join-wraps$735$14319 (lambda (m1*$735$15157 s1*$735$15158 e$735$15159) ((lambda (cancel$735$15163) (begin (set! cancel$735$15163 (lambda (ls1$735$15165 ls2$735$15166) (letrec ((f$735$15169 (lambda (x$735$15171 ls1$735$15172) (if (null? ls1$735$15172) (cdr ls2$735$15166) (cons x$735$15171 (f$735$15169 (car ls1$735$15172) (cdr ls1$735$15172))))))) (f$735$15169 (car ls1$735$15165) (cdr ls1$735$15165))))) ((lambda (m2*$735$15175 s2*$735$15176) (if (if (not (null? m1*$735$15157)) (if (not (null? m2*$735$15175)) (begin (quote #f) (anti-mark?$735$14317 (car m2*$735$15175))) (quote #f)) (quote #f)) (values (cancel$735$15163 m1*$735$15157 m2*$735$15175) (cancel$735$15163 s1*$735$15158 s2*$735$15176)) (values (append m1*$735$15157 m2*$735$15175) (append s1*$735$15158 s2*$735$15176)))) (stx-mark*$735$14301 e$735$15159) (stx-subst*$735$14303 e$735$15159)))) (quote #f)))) (set! mkstx$735$14321 (lambda (e$735$15179 m*$735$15180 s*$735$15181) (if (stx?$735$14297 e$735$15179) (call-with-values (lambda () (join-wraps$735$14319 m*$735$15180 s*$735$15181 e$735$15179)) (lambda (m*$735$15185 s*$735$15186) (make-stx$735$14295 (stx-expr$735$14299 e$735$15179) m*$735$15185 s*$735$15186))) (make-stx$735$14295 e$735$15179 m*$735$15180 s*$735$15181)))) (set! add-mark$735$14323 (lambda (m$735$15189 e$735$15190) (mkstx$735$14321 e$735$15190 (list m$735$15189) (quote (shift))))) (set! add-subst$735$14325 (lambda (subst$735$15193 e$735$15194) (mkstx$735$14321 e$735$15194 (quote ()) (list subst$735$15193)))) (set! syntax-kind?$735$14327 (lambda (x$735$15197 p?$735$15198) (if (stx?$735$14297 x$735$15197) (syntax-kind?$735$14327 (stx-expr$735$14299 x$735$15197) p?$735$15198) (p?$735$15198 x$735$15197)))) (set! syntax-vector->list$735$14329 (lambda (x$735$15201) (if (stx?$735$14297 x$735$15201) ((lambda (ls$735$15203 m*$735$15204 s*$735$15205) (map (lambda (x$735$15209) (mkstx$735$14321 x$735$15209 m*$735$15204 s*$735$15205)) ls$735$15203)) (syntax-vector->list$735$14329 (stx-expr$735$14299 x$735$15201)) (stx-mark*$735$14301 x$735$15201) (stx-subst*$735$14303 x$735$15201)) (if (vector? x$735$15201) (vector->list x$735$15201) (error (quote syntax-vector->list) (quote "not a syntax vector") x$735$15201))))) (set! syntax-pair?$735$14331 (lambda (x$735$15211) (syntax-kind?$735$14327 x$735$15211 pair?))) (set! syntax-vector?$735$14333 (lambda (x$735$15213) (syntax-kind?$735$14327 x$735$15213 vector?))) (set! syntax-null?$735$14335 (lambda (x$735$15215) (syntax-kind?$735$14327 x$735$15215 null?))) (set! syntax-list?$735$14337 (lambda (x$735$15217) ((lambda (t$735$15219) (if t$735$15219 t$735$15219 (begin (quote #f) (if (syntax-pair?$735$14331 x$735$15217) (begin (quote #f) (syntax-list?$735$14337 (syntax-cdr$735$14343 x$735$15217))) (quote #f))))) (syntax-null?$735$14335 x$735$15217)))) (set! syntax-car$735$14339 (lambda (x$735$15221) (if (stx?$735$14297 x$735$15221) (mkstx$735$14321 (syntax-car$735$14339 (stx-expr$735$14299 x$735$15221)) (stx-mark*$735$14301 x$735$15221) (stx-subst*$735$14303 x$735$15221)) (if (pair? x$735$15221) (car x$735$15221) (error (quote syntax-car) (quote "not a pair") x$735$15221))))) (set! syntax->list$735$14341 (lambda (x$735$15223) (if (syntax-pair?$735$14331 x$735$15223) (cons (syntax-car$735$14339 x$735$15223) (syntax->list$735$14341 (syntax-cdr$735$14343 x$735$15223))) (if (syntax-null?$735$14335 x$735$15223) (quote ()) (error (quote syntax->list) (quote "invalid argument") x$735$15223))))) (set! syntax-cdr$735$14343 (lambda (x$735$15225) (if (stx?$735$14297 x$735$15225) (mkstx$735$14321 (syntax-cdr$735$14343 (stx-expr$735$14299 x$735$15225)) (stx-mark*$735$14301 x$735$15225) (stx-subst*$735$14303 x$735$15225)) (if (pair? x$735$15225) (cdr x$735$15225) (error (quote syntax-cdr) (quote "not a pair") x$735$15225))))) (set! id?$735$14345 (lambda (x$735$15227) (syntax-kind?$735$14327 x$735$15227 symbol?))) (set! id->sym$735$14347 (lambda (x$735$15229) (if (stx?$735$14297 x$735$15229) (id->sym$735$14347 (stx-expr$735$14299 x$735$15229)) (if (symbol? x$735$15229) x$735$15229 (error (quote id->sym) (quote "not an id") x$735$15229))))) (set! same-marks?$735$14349 (lambda (x$735$15231 y$735$15232) ((lambda (t$735$15235) (if t$735$15235 t$735$15235 (begin (quote #f) (if (pair? x$735$15231) (if (pair? y$735$15232) (if (eq? (car x$735$15231) (car y$735$15232)) (begin (quote #f) (same-marks?$735$14349 (cdr x$735$15231) (cdr y$735$15232))) (quote #f)) (quote #f)) (quote #f))))) (if (null? x$735$15231) (begin (quote #f) (null? y$735$15232)) (quote #f))))) (set! bound-id=?$735$14351 (lambda (x$735$15237 y$735$15238) (if (eq? (id->sym$735$14347 x$735$15237) (id->sym$735$14347 y$735$15238)) (begin (quote #f) (same-marks?$735$14349 (stx-mark*$735$14301 x$735$15237) (stx-mark*$735$14301 y$735$15238))) (quote #f)))) (set! free-id=?$735$14353 (lambda (i$735$15241 j$735$15242) ((lambda (t0$735$15245 t1$735$15246) (if ((lambda (t$735$15249) (if t$735$15249 t$735$15249 (begin (quote #f) t1$735$15246))) t0$735$15245) (eq? t0$735$15245 t1$735$15246) (eq? (id->sym$735$14347 i$735$15241) (id->sym$735$14347 j$735$15242)))) (id->label$735$14367 i$735$15241) (id->label$735$14367 j$735$15242)))) (set! valid-bound-ids?$735$14355 (lambda (id*$735$15251) (if (for-all id?$735$14345 id*$735$15251) (begin (quote #f) (distinct-bound-ids?$735$14357 id*$735$15251)) (quote #f)))) (set! distinct-bound-ids?$735$14357 (lambda (id*$735$15253) ((lambda (t$735$15255) (if t$735$15255 t$735$15255 (begin (quote #f) (if (not (bound-id-member?$735$14359 (car id*$735$15253) (cdr id*$735$15253))) (begin (quote #f) (distinct-bound-ids?$735$14357 (cdr id*$735$15253))) (quote #f))))) (null? id*$735$15253)))) (set! bound-id-member?$735$14359 (lambda (id$735$15257 id*$735$15258) (if (pair? id*$735$15258) (begin (quote #f) ((lambda (t$735$15261) (if t$735$15261 t$735$15261 (begin (quote #f) (bound-id-member?$735$14359 id$735$15257 (cdr id*$735$15258))))) (bound-id=?$735$14351 id$735$15257 (car id*$735$15258)))) (quote #f)))) (set! self-evaluating?$735$14361 (lambda (x$735$15263) ((lambda (t$735$15265) (if t$735$15265 t$735$15265 ((lambda (t$735$15267) (if t$735$15267 t$735$15267 ((lambda (t$735$15269) (if t$735$15269 t$735$15269 (begin (quote #f) (boolean? x$735$15263)))) (char? x$735$15263)))) (string? x$735$15263)))) (number? x$735$15263)))) (set! strip$735$14363 (lambda (x$735$15271 m*$735$15272) (if (top-marked?$735$14253 m*$735$15272) x$735$15271 (letrec ((f$735$15275 (lambda (x$735$15277) (if (stx?$735$14297 x$735$15277) (strip$735$14363 (stx-expr$735$14299 x$735$15277) (stx-mark*$735$14301 x$735$15277)) (if (pair? x$735$15277) ((lambda (a$735$15279 d$735$15280) (if (if (eq? a$735$15279 (car x$735$15277)) (begin (quote #f) (eq? d$735$15280 (cdr x$735$15277))) (quote #f)) x$735$15277 (cons a$735$15279 d$735$15280))) (f$735$15275 (car x$735$15277)) (f$735$15275 (cdr x$735$15277))) (if (vector? x$735$15277) ((lambda (old$735$15283) ((lambda (new$735$15285) (if (for-all eq? old$735$15283 new$735$15285) x$735$15277 (list->vector new$735$15285))) (map f$735$15275 old$735$15283))) (vector->list x$735$15277)) x$735$15277)))))) (f$735$15275 x$735$15271))))) (set! stx->datum$735$14365 (lambda (x$735$15287) (strip$735$14363 x$735$15287 (quote ())))) (set! id->label$735$14367 (lambda (id$735$15289) ((lambda (sym$735$15291) (letrec ((search$735$15293 (lambda (subst*$735$15295 mark*$735$15296) (if (null? subst*$735$15295) (interaction-sym->label$735$15009 sym$735$15291) (if (eq? (car subst*$735$15295) (quote shift)) (search$735$15293 (cdr subst*$735$15295) (cdr mark*$735$15296)) ((lambda (rib$735$15299) (if (rib-sealed/freq$735$14272 rib$735$15299) ((lambda (sym*$735$15301) (letrec ((f$735$15303 (lambda (i$735$15305 j$735$15306) (if (= i$735$15305 j$735$15306) (search$735$15293 (cdr subst*$735$15295) mark*$735$15296) (if (if (eq? (vector-ref sym*$735$15301 i$735$15305) sym$735$15291) (begin (quote #f) (same-marks?$735$14349 mark*$735$15296 (vector-ref (rib-mark**$735$14268 rib$735$15299) i$735$15305))) (quote #f)) ((lambda (label$735$15309) (begin (increment-rib-frequency!$735$14290 rib$735$15299 i$735$15305) label$735$15309)) (vector-ref (rib-label*$735$14270 rib$735$15299) i$735$15305)) (f$735$15303 (+ i$735$15305 (quote 1)) j$735$15306)))))) (f$735$15303 (quote 0) (vector-length sym*$735$15301)))) (rib-sym*$735$14266 rib$735$15299)) (letrec ((f$735$15311 (lambda (sym*$735$15313 mark**$735$15314 label*$735$15315) (if (null? sym*$735$15313) (search$735$15293 (cdr subst*$735$15295) mark*$735$15296) (if (if (eq? (car sym*$735$15313) sym$735$15291) (begin (quote #f) (same-marks?$735$14349 (car mark**$735$15314) mark*$735$15296)) (quote #f)) (car label*$735$15315) (f$735$15311 (cdr sym*$735$15313) (cdr mark**$735$15314) (cdr label*$735$15315))))))) (f$735$15311 (rib-sym*$735$14266 rib$735$15299) (rib-mark**$735$14268 rib$735$15299) (rib-label*$735$14270 rib$735$15299))))) (car subst*$735$15295))))))) (search$735$15293 (stx-subst*$735$14303 id$735$15289) (stx-mark*$735$14301 id$735$15289)))) (id->sym$735$14347 id$735$15289)))) (set! label->binding$735$14369 (lambda (x$735$15319 r$735$15320) ((lambda (t$735$15323) (if t$735$15323 ((lambda (b$735$15325) (if (if (pair? b$735$15325) (begin (quote #f) (eq? (car b$735$15325) (quote $core-rtd))) (quote #f)) (cons (quote $rtd) (map bless$735$14808 (cdr b$735$15325))) b$735$15325)) t$735$15323) ((lambda (t$735$15327) (if t$735$15327 (cdr t$735$15327) (quote (displaced-lexical . #f)))) (assq x$735$15319 r$735$15320)))) (imported-label->binding$735$13884 x$735$15319)))) (set! make-binding$735$14371 cons) (set! binding-type$735$14373 car) (set! binding-value$735$14375 cdr) (set! syntax-type$735$14377 (lambda (e$735$15329 r$735$15330) (if (id?$735$14345 e$735$15329) ((lambda (id$735$15333) ((lambda (label$735$15335) ((lambda (b$735$15337) ((lambda (type$735$15339) ((lambda () (begin (if label$735$15335 (void) (error (quote expander) (quote "unbound identifier") (strip$735$14363 e$735$15329 (quote ())))) ((lambda (t$735$15341) (if (memv t$735$15341 (quote (lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd))) (values type$735$15339 (binding-value$735$14375 b$735$15337) id$735$15333) (values (quote other) (quote #f) (quote #f)))) type$735$15339))))) (binding-type$735$14373 b$735$15337))) (label->binding$735$14369 label$735$15335 r$735$15330))) (id->label$735$14367 id$735$15333))) e$735$15329) (if (syntax-pair?$735$14331 e$735$15329) ((lambda (id$735$15342) (if (id?$735$14345 id$735$15342) ((lambda (label$735$15344) ((lambda (b$735$15346) ((lambda (type$735$15348) ((lambda () (begin (if label$735$15344 (void) (error (quote expander) (quote "unbound identifier") (strip$735$14363 e$735$15329 (quote ())))) ((lambda (t$735$15350) (if (memv t$735$15350 (quote (define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import $core-rtd))) (values type$735$15348 (binding-value$735$14375 b$735$15346) id$735$15342) (values (quote call) (quote #f) (quote #f)))) type$735$15348))))) (binding-type$735$14373 b$735$15346))) (label->binding$735$14369 label$735$15344 r$735$15330))) (id->label$735$14367 id$735$15342)) (values (quote call) (quote #f) (quote #f)))) (syntax-car$735$14339 e$735$15329)) ((lambda (d$735$15351) (if (self-evaluating?$735$14361 d$735$15351) (values (quote constant) d$735$15351 (quote #f)) (values (quote other) (quote #f) (quote #f)))) (stx->datum$735$14365 e$735$15329)))))) (set! sanitize-binding$735$14404 (lambda (x$735$15353 src$735$15354) (if (procedure? x$735$15353) (cons* (quote local-macro) x$735$15353 src$735$15354) (if (if (pair? x$735$15353) (if (eq? (car x$735$15353) (quote macro!)) (begin (quote #f) (procedure? (cdr x$735$15353))) (quote #f)) (quote #f)) (cons* (quote local-macro!) (cdr x$735$15353) src$735$15354) (if (if (pair? x$735$15353) (begin (quote #f) (eq? (car x$735$15353) (quote $rtd))) (quote #f)) x$735$15353 (error (quote expand) (quote "invalid transformer") x$735$15353)))))) (set! make-variable-transformer$735$14406 (lambda (x$735$15357) (if (procedure? x$735$15357) (cons (quote macro!) x$735$15357) (error (quote make-variable-transformer) (quote "not a procedure") x$735$15357)))) (set! make-eval-transformer$735$14408 (lambda (x$735$15359) (sanitize-binding$735$14404 (eval-core (expanded->core$735$13435 x$735$15359)) x$735$15359))) (set! parse-define$735$14770 (lambda (x$735$15361) ((lambda (t$735$15363) ((lambda (ls/false$735$15365) (if (if ls/false$735$15365 (begin (quote #f) (apply (lambda (id$735$15367 fmls$735$15368 b$735$15369 b*$735$15370) (id?$735$14345 id$735$15367)) ls/false$735$15365)) (quote #f)) (apply (lambda (id$735$15375 fmls$735$15376 b$735$15377 b*$735$15378) (values id$735$15375 (cons (quote defun) (cons fmls$735$15376 (cons b$735$15377 b*$735$15378))))) ls/false$735$15365) ((lambda (t$735$15383) ((lambda (ls/false$735$15385) (if (if ls/false$735$15385 (begin (quote #f) (apply (lambda (id$735$15387 val$735$15388) (id?$735$14345 id$735$15387)) ls/false$735$15385)) (quote #f)) (apply (lambda (id$735$15391 val$735$15392) (values id$735$15391 (cons (quote expr) val$735$15392))) ls/false$735$15385) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$15383 (quote ()))))) ((lambda (x$735$15395) (if (syntax-pair?$735$14331 x$735$15395) (begin (quote #f) ((lambda (q$735$15397) (if q$735$15397 (begin (quote #f) ((lambda (r$735$15399) (if r$735$15399 (begin (quote #f) (append q$735$15397 r$735$15399)) (quote #f))) ((lambda (x$735$15401) (if (syntax-pair?$735$14331 x$735$15401) (begin (quote #f) ((lambda (q$735$15403) (if q$735$15403 (begin (quote #f) ((lambda (r$735$15405) (if r$735$15405 (begin (quote #f) (append q$735$15403 r$735$15405)) (quote #f))) ((lambda (x$735$15407) (if (syntax-pair?$735$14331 x$735$15407) (begin (quote #f) ((lambda (q$735$15409) (if q$735$15409 (begin (quote #f) ((lambda (r$735$15411) (if r$735$15411 (begin (quote #f) (append q$735$15409 r$735$15411)) (quote #f))) ((lambda (x$735$15413) (if (equal? (stx->datum$735$14365 x$735$15413) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$15407)))) (quote #f))) ((lambda (x$735$15415) (list x$735$15415)) (syntax-car$735$14339 x$735$15407)))) (quote #f))) (syntax-cdr$735$14343 x$735$15401)))) (quote #f))) ((lambda (x$735$15417) (list x$735$15417)) (syntax-car$735$14339 x$735$15401)))) (quote #f))) (syntax-cdr$735$14343 x$735$15395)))) (quote #f))) ((lambda (x$735$15419) (quote ())) (syntax-car$735$14339 x$735$15395)))) (quote #f))) t$735$15383))) t$735$15363))) ((lambda (x$735$15421) (if (syntax-pair?$735$14331 x$735$15421) (begin (quote #f) ((lambda (q$735$15423) (if q$735$15423 (begin (quote #f) ((lambda (r$735$15425) (if r$735$15425 (begin (quote #f) (append q$735$15423 r$735$15425)) (quote #f))) ((lambda (x$735$15427) (if (syntax-pair?$735$14331 x$735$15427) (begin (quote #f) ((lambda (q$735$15429) (if q$735$15429 (begin (quote #f) ((lambda (r$735$15431) (if r$735$15431 (begin (quote #f) (append q$735$15429 r$735$15431)) (quote #f))) ((lambda (x$735$15433) (if (syntax-pair?$735$14331 x$735$15433) (begin (quote #f) ((lambda (q$735$15435) (if q$735$15435 (begin (quote #f) ((lambda (r$735$15437) (if r$735$15437 (begin (quote #f) (append q$735$15435 r$735$15437)) (quote #f))) ((letrec ((f$735$15439 (lambda (x$735$15441) (if (syntax-pair?$735$14331 x$735$15441) ((lambda (cars/f$735$15443) (if cars/f$735$15443 (begin (quote #f) ((lambda (cdrs/f$735$15445) (if cdrs/f$735$15445 (begin (quote #f) (map cons cars/f$735$15443 cdrs/f$735$15445)) (quote #f))) (f$735$15439 (syntax-cdr$735$14343 x$735$15441)))) (quote #f))) ((lambda (x$735$15447) (list x$735$15447)) (syntax-car$735$14339 x$735$15441))) (if (syntax-null?$735$14335 x$735$15441) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$15439) (syntax-cdr$735$14343 x$735$15433)))) (quote #f))) ((lambda (x$735$15449) (list x$735$15449)) (syntax-car$735$14339 x$735$15433)))) (quote #f))) (syntax-cdr$735$14343 x$735$15427)))) (quote #f))) ((lambda (x$735$15451) (if (syntax-pair?$735$14331 x$735$15451) (begin (quote #f) ((lambda (q$735$15453) (if q$735$15453 (begin (quote #f) ((lambda (r$735$15455) (if r$735$15455 (begin (quote #f) (append q$735$15453 r$735$15455)) (quote #f))) ((lambda (x$735$15457) (list x$735$15457)) (syntax-cdr$735$14343 x$735$15451)))) (quote #f))) ((lambda (x$735$15459) (list x$735$15459)) (syntax-car$735$14339 x$735$15451)))) (quote #f))) (syntax-car$735$14339 x$735$15427)))) (quote #f))) (syntax-cdr$735$14343 x$735$15421)))) (quote #f))) ((lambda (x$735$15461) (quote ())) (syntax-car$735$14339 x$735$15421)))) (quote #f))) t$735$15363))) x$735$15361))) (set! parse-define-syntax$735$14772 (lambda (x$735$15463) ((lambda (t$735$15465) ((lambda (ls/false$735$15467) (if (if ls/false$735$15467 (begin (quote #f) (apply (lambda (id$735$15469 val$735$15470) (id?$735$14345 id$735$15469)) ls/false$735$15467)) (quote #f)) (apply (lambda (id$735$15473 val$735$15474) (values id$735$15473 val$735$15474)) ls/false$735$15467) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$15465 (quote ()))))) ((lambda (x$735$15477) (if (syntax-pair?$735$14331 x$735$15477) (begin (quote #f) ((lambda (q$735$15479) (if q$735$15479 (begin (quote #f) ((lambda (r$735$15481) (if r$735$15481 (begin (quote #f) (append q$735$15479 r$735$15481)) (quote #f))) ((lambda (x$735$15483) (if (syntax-pair?$735$14331 x$735$15483) (begin (quote #f) ((lambda (q$735$15485) (if q$735$15485 (begin (quote #f) ((lambda (r$735$15487) (if r$735$15487 (begin (quote #f) (append q$735$15485 r$735$15487)) (quote #f))) ((lambda (x$735$15489) (if (syntax-pair?$735$14331 x$735$15489) (begin (quote #f) ((lambda (q$735$15491) (if q$735$15491 (begin (quote #f) ((lambda (r$735$15493) (if r$735$15493 (begin (quote #f) (append q$735$15491 r$735$15493)) (quote #f))) ((lambda (x$735$15495) (if (equal? (stx->datum$735$14365 x$735$15495) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$15489)))) (quote #f))) ((lambda (x$735$15497) (list x$735$15497)) (syntax-car$735$14339 x$735$15489)))) (quote #f))) (syntax-cdr$735$14343 x$735$15483)))) (quote #f))) ((lambda (x$735$15499) (list x$735$15499)) (syntax-car$735$14339 x$735$15483)))) (quote #f))) (syntax-cdr$735$14343 x$735$15477)))) (quote #f))) ((lambda (x$735$15501) (quote ())) (syntax-car$735$14339 x$735$15477)))) (quote #f))) t$735$15465))) x$735$15463))) (set! scheme-stx$735$14774 (lambda (sym$735$15503) ((lambda (subst$735$15505) ((lambda (t$735$15507) (if t$735$15507 ((lambda (x$735$15509) ((lambda (name$735$15511 label$735$15512) (add-subst$735$14325 (make-rib$735$14262 (list name$735$15511) (list top-mark*$735$14251) (list label$735$15512) (quote #f)) (mkstx$735$14321 sym$735$15503 top-mark*$735$14251 (quote ())))) (car x$735$15509) (cdr x$735$15509))) t$735$15507) (mkstx$735$14321 sym$735$15503 top-mark*$735$14251 (quote ())))) (assq sym$735$15503 subst$735$15505))) (library-subst$735$13917 (find-library-by-name$735$13892 (quote (psyntax system $all))))))) (set! add-lexical$735$14776 (lambda (lab$735$15515 lex$735$15516 r$735$15517) (cons (cons* lab$735$15515 (quote lexical) lex$735$15516) r$735$15517))) (set! add-lexicals$735$14778 (lambda (lab*$735$15521 lex*$735$15522 r$735$15523) (if (null? lab*$735$15521) r$735$15523 (add-lexicals$735$14778 (cdr lab*$735$15521) (cdr lex*$735$15522) (add-lexical$735$14776 (car lab*$735$15521) (car lex*$735$15522) r$735$15523))))) (set! let-values-transformer$735$14780 (lambda (e$735$15527 r$735$15528 mr$735$15529) ((lambda (t$735$15533) ((lambda (ls/false$735$15535) (if (if ls/false$735$15535 (begin (quote #f) (apply (lambda (fml**$735$15537 rhs*$735$15538 b$735$15539 b*$735$15540) (quote #t)) ls/false$735$15535)) (quote #f)) (apply (lambda (fml**$735$15545 rhs*$735$15546 b$735$15547 b*$735$15548) ((lambda (rhs*$735$15553) ((lambda (lex**$735$15555 lab**$735$15556) ((lambda (fml*$735$15559 lab*$735$15560 lex*$735$15561) (letrec ((f$735$15565 (lambda (lex**$735$15567 rhs*$735$15568) (if (null? lex**$735$15567) (chi-internal$735$14908 (add-subst$735$14325 (make-full-rib$735$14292 fml*$735$15559 lab*$735$15560) (cons b$735$15547 b*$735$15548)) (add-lexicals$735$14778 lab*$735$15560 lex*$735$15561 r$735$15528) mr$735$15529) (list (quote (primitive call-with-values)) (build-lambda$735$14234 (quote #f) (quote ()) (car rhs*$735$15568)) (build-lambda$735$14234 (quote #f) (car lex**$735$15567) (f$735$15565 (cdr lex**$735$15567) (cdr rhs*$735$15568)))))))) (f$735$15565 lex**$735$15555 rhs*$735$15553))) (apply append fml**$735$15545) (apply append lab**$735$15556) (apply append lex**$735$15555))) (map (lambda (ls$735$15571) (map gen-lexical$735$14255 ls$735$15571)) fml**$735$15545) (map (lambda (ls$735$15573) (map gen-label$735$14259 ls$735$15573)) fml**$735$15545))) (chi-expr*$735$14888 rhs*$735$15546 r$735$15528 mr$735$15529))) ls/false$735$15535) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$15533 (quote ()))))) ((lambda (x$735$15575) (if (syntax-pair?$735$14331 x$735$15575) (begin (quote #f) ((lambda (q$735$15577) (if q$735$15577 (begin (quote #f) ((lambda (r$735$15579) (if r$735$15579 (begin (quote #f) (append q$735$15577 r$735$15579)) (quote #f))) ((lambda (x$735$15581) (if (syntax-pair?$735$14331 x$735$15581) (begin (quote #f) ((lambda (q$735$15583) (if q$735$15583 (begin (quote #f) ((lambda (r$735$15585) (if r$735$15585 (begin (quote #f) (append q$735$15583 r$735$15585)) (quote #f))) ((lambda (x$735$15587) (if (syntax-pair?$735$14331 x$735$15587) (begin (quote #f) ((lambda (q$735$15589) (if q$735$15589 (begin (quote #f) ((lambda (r$735$15591) (if r$735$15591 (begin (quote #f) (append q$735$15589 r$735$15591)) (quote #f))) ((letrec ((f$735$15593 (lambda (x$735$15595) (if (syntax-pair?$735$14331 x$735$15595) ((lambda (cars/f$735$15597) (if cars/f$735$15597 (begin (quote #f) ((lambda (cdrs/f$735$15599) (if cdrs/f$735$15599 (begin (quote #f) (map cons cars/f$735$15597 cdrs/f$735$15599)) (quote #f))) (f$735$15593 (syntax-cdr$735$14343 x$735$15595)))) (quote #f))) ((lambda (x$735$15601) (list x$735$15601)) (syntax-car$735$14339 x$735$15595))) (if (syntax-null?$735$14335 x$735$15595) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$15593) (syntax-cdr$735$14343 x$735$15587)))) (quote #f))) ((lambda (x$735$15603) (list x$735$15603)) (syntax-car$735$14339 x$735$15587)))) (quote #f))) (syntax-cdr$735$14343 x$735$15581)))) (quote #f))) ((letrec ((f$735$15605 (lambda (x$735$15607) (if (syntax-pair?$735$14331 x$735$15607) ((lambda (cars/f$735$15609) (if cars/f$735$15609 (begin (quote #f) ((lambda (cdrs/f$735$15611) (if cdrs/f$735$15611 (begin (quote #f) (map cons cars/f$735$15609 cdrs/f$735$15611)) (quote #f))) (f$735$15605 (syntax-cdr$735$14343 x$735$15607)))) (quote #f))) ((lambda (x$735$15613) (if (syntax-pair?$735$14331 x$735$15613) (begin (quote #f) ((lambda (q$735$15615) (if q$735$15615 (begin (quote #f) ((lambda (r$735$15617) (if r$735$15617 (begin (quote #f) (append q$735$15615 r$735$15617)) (quote #f))) ((lambda (x$735$15619) (if (syntax-pair?$735$14331 x$735$15619) (begin (quote #f) ((lambda (q$735$15621) (if q$735$15621 (begin (quote #f) ((lambda (r$735$15623) (if r$735$15623 (begin (quote #f) (append q$735$15621 r$735$15623)) (quote #f))) ((lambda (x$735$15625) (if (equal? (stx->datum$735$14365 x$735$15625) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$15619)))) (quote #f))) ((lambda (x$735$15627) (list x$735$15627)) (syntax-car$735$14339 x$735$15619)))) (quote #f))) (syntax-cdr$735$14343 x$735$15613)))) (quote #f))) ((letrec ((f$735$15629 (lambda (x$735$15631) (if (syntax-pair?$735$14331 x$735$15631) ((lambda (cars/f$735$15633) (if cars/f$735$15633 (begin (quote #f) ((lambda (cdrs/f$735$15635) (if cdrs/f$735$15635 (begin (quote #f) (map cons cars/f$735$15633 cdrs/f$735$15635)) (quote #f))) (f$735$15629 (syntax-cdr$735$14343 x$735$15631)))) (quote #f))) ((lambda (x$735$15637) (list x$735$15637)) (syntax-car$735$14339 x$735$15631))) (if (syntax-null?$735$14335 x$735$15631) (list (begin (quote fml**) (quote ()))) (quote #f)))))) f$735$15629) (syntax-car$735$14339 x$735$15613)))) (quote #f))) (syntax-car$735$14339 x$735$15607))) (if (syntax-null?$735$14335 x$735$15607) (list (begin (quote fml**) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$735$15605) (syntax-car$735$14339 x$735$15581)))) (quote #f))) (syntax-cdr$735$14343 x$735$15575)))) (quote #f))) ((lambda (x$735$15639) (quote ())) (syntax-car$735$14339 x$735$15575)))) (quote #f))) t$735$15533))) e$735$15527))) (set! letrec-helper$735$14782 (lambda (e$735$15641 r$735$15642 mr$735$15643 build$735$15644) ((lambda (t$735$15649) ((lambda (ls/false$735$15651) (if (if ls/false$735$15651 (begin (quote #f) (apply (lambda (lhs*$735$15653 rhs*$735$15654 b$735$15655 b*$735$15656) (quote #t)) ls/false$735$15651)) (quote #f)) (apply (lambda (lhs*$735$15661 rhs*$735$15662 b$735$15663 b*$735$15664) (if (not (valid-bound-ids?$735$14355 lhs*$735$15661)) (error (quote expander) (quote "invalid identifiers") (strip$735$14363 e$735$15641 (quote ()))) ((lambda (lex*$735$15669 lab*$735$15670) ((lambda (rib$735$15673 r$735$15674) ((lambda (body$735$15677 rhs*$735$15678) (build$735$15644 (quote #f) lex*$735$15669 rhs*$735$15678 body$735$15677)) (chi-internal$735$14908 (add-subst$735$14325 rib$735$15673 (cons b$735$15663 b*$735$15664)) r$735$15674 mr$735$15643) (chi-expr*$735$14888 (map (lambda (x$735$15681) (add-subst$735$14325 rib$735$15673 x$735$15681)) rhs*$735$15662) r$735$15674 mr$735$15643))) (make-full-rib$735$14292 lhs*$735$15661 lab*$735$15670) (add-lexicals$735$14778 lab*$735$15670 lex*$735$15669 r$735$15642))) (map gen-lexical$735$14255 lhs*$735$15661) (map gen-label$735$14259 lhs*$735$15661)))) ls/false$735$15651) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$15649 (quote ()))))) ((lambda (x$735$15683) (if (syntax-pair?$735$14331 x$735$15683) (begin (quote #f) ((lambda (q$735$15685) (if q$735$15685 (begin (quote #f) ((lambda (r$735$15687) (if r$735$15687 (begin (quote #f) (append q$735$15685 r$735$15687)) (quote #f))) ((lambda (x$735$15689) (if (syntax-pair?$735$14331 x$735$15689) (begin (quote #f) ((lambda (q$735$15691) (if q$735$15691 (begin (quote #f) ((lambda (r$735$15693) (if r$735$15693 (begin (quote #f) (append q$735$15691 r$735$15693)) (quote #f))) ((lambda (x$735$15695) (if (syntax-pair?$735$14331 x$735$15695) (begin (quote #f) ((lambda (q$735$15697) (if q$735$15697 (begin (quote #f) ((lambda (r$735$15699) (if r$735$15699 (begin (quote #f) (append q$735$15697 r$735$15699)) (quote #f))) ((letrec ((f$735$15701 (lambda (x$735$15703) (if (syntax-pair?$735$14331 x$735$15703) ((lambda (cars/f$735$15705) (if cars/f$735$15705 (begin (quote #f) ((lambda (cdrs/f$735$15707) (if cdrs/f$735$15707 (begin (quote #f) (map cons cars/f$735$15705 cdrs/f$735$15707)) (quote #f))) (f$735$15701 (syntax-cdr$735$14343 x$735$15703)))) (quote #f))) ((lambda (x$735$15709) (list x$735$15709)) (syntax-car$735$14339 x$735$15703))) (if (syntax-null?$735$14335 x$735$15703) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$15701) (syntax-cdr$735$14343 x$735$15695)))) (quote #f))) ((lambda (x$735$15711) (list x$735$15711)) (syntax-car$735$14339 x$735$15695)))) (quote #f))) (syntax-cdr$735$14343 x$735$15689)))) (quote #f))) ((letrec ((f$735$15713 (lambda (x$735$15715) (if (syntax-pair?$735$14331 x$735$15715) ((lambda (cars/f$735$15717) (if cars/f$735$15717 (begin (quote #f) ((lambda (cdrs/f$735$15719) (if cdrs/f$735$15719 (begin (quote #f) (map cons cars/f$735$15717 cdrs/f$735$15719)) (quote #f))) (f$735$15713 (syntax-cdr$735$14343 x$735$15715)))) (quote #f))) ((lambda (x$735$15721) (if (syntax-pair?$735$14331 x$735$15721) (begin (quote #f) ((lambda (q$735$15723) (if q$735$15723 (begin (quote #f) ((lambda (r$735$15725) (if r$735$15725 (begin (quote #f) (append q$735$15723 r$735$15725)) (quote #f))) ((lambda (x$735$15727) (if (syntax-pair?$735$14331 x$735$15727) (begin (quote #f) ((lambda (q$735$15729) (if q$735$15729 (begin (quote #f) ((lambda (r$735$15731) (if r$735$15731 (begin (quote #f) (append q$735$15729 r$735$15731)) (quote #f))) ((lambda (x$735$15733) (if (equal? (stx->datum$735$14365 x$735$15733) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$15727)))) (quote #f))) ((lambda (x$735$15735) (list x$735$15735)) (syntax-car$735$14339 x$735$15727)))) (quote #f))) (syntax-cdr$735$14343 x$735$15721)))) (quote #f))) ((lambda (x$735$15737) (list x$735$15737)) (syntax-car$735$14339 x$735$15721)))) (quote #f))) (syntax-car$735$14339 x$735$15715))) (if (syntax-null?$735$14335 x$735$15715) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$735$15713) (syntax-car$735$14339 x$735$15689)))) (quote #f))) (syntax-cdr$735$14343 x$735$15683)))) (quote #f))) ((lambda (x$735$15739) (quote ())) (syntax-car$735$14339 x$735$15683)))) (quote #f))) t$735$15649))) e$735$15641))) (set! letrec-transformer$735$14784 (lambda (e$735$15741 r$735$15742 mr$735$15743) (letrec-helper$735$14782 e$735$15741 r$735$15742 mr$735$15743 build-letrec$735$14226))) (set! letrec*-transformer$735$14786 (lambda (e$735$15747 r$735$15748 mr$735$15749) (letrec-helper$735$14782 e$735$15747 r$735$15748 mr$735$15749 build-letrec*$735$14225))) (set! type-descriptor-transformer$735$14788 (lambda (e$735$15753 r$735$15754 mr$735$15755) ((lambda (t$735$15759) ((lambda (ls/false$735$15761) (if (if ls/false$735$15761 (begin (quote #f) (apply (lambda (id$735$15763) (id?$735$14345 id$735$15763)) ls/false$735$15761)) (quote #f)) (apply (lambda (id$735$15765) ((lambda (lab$735$15767) ((lambda (b$735$15769) ((lambda (type$735$15771) ((lambda () (begin (if lab$735$15767 (void) (error (quote expander) (quote "unbound identifier") (strip$735$14363 e$735$15753 (quote ())))) (if (if (eq? type$735$15771 (quote $rtd)) (begin (quote #f) (not (list? (binding-value$735$14375 b$735$15769)))) (quote #f)) (void) (error (quote expander) (quote "invalid type") (strip$735$14363 e$735$15753 (quote ())))) (list (quote quote) (binding-value$735$14375 b$735$15769)))))) (binding-type$735$14373 b$735$15769))) (label->binding$735$14369 lab$735$15767 r$735$15754))) (id->label$735$14367 id$735$15765))) ls/false$735$15761) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$15759 (quote ()))))) ((lambda (x$735$15773) (if (syntax-pair?$735$14331 x$735$15773) (begin (quote #f) ((lambda (q$735$15775) (if q$735$15775 (begin (quote #f) ((lambda (r$735$15777) (if r$735$15777 (begin (quote #f) (append q$735$15775 r$735$15777)) (quote #f))) ((lambda (x$735$15779) (if (syntax-pair?$735$14331 x$735$15779) (begin (quote #f) ((lambda (q$735$15781) (if q$735$15781 (begin (quote #f) ((lambda (r$735$15783) (if r$735$15783 (begin (quote #f) (append q$735$15781 r$735$15783)) (quote #f))) ((lambda (x$735$15785) (if (equal? (stx->datum$735$14365 x$735$15785) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$15779)))) (quote #f))) ((lambda (x$735$15787) (list x$735$15787)) (syntax-car$735$14339 x$735$15779)))) (quote #f))) (syntax-cdr$735$14343 x$735$15773)))) (quote #f))) ((lambda (x$735$15789) (quote ())) (syntax-car$735$14339 x$735$15773)))) (quote #f))) t$735$15759))) e$735$15753))) (set! record-type-descriptor-transformer$735$14790 (lambda (e$735$15791 r$735$15792 mr$735$15793) ((lambda (t$735$15797) ((lambda (ls/false$735$15799) (if (if ls/false$735$15799 (begin (quote #f) (apply (lambda (id$735$15801) (id?$735$14345 id$735$15801)) ls/false$735$15799)) (quote #f)) (apply (lambda (id$735$15803) ((lambda (lab$735$15805) ((lambda (b$735$15807) ((lambda (type$735$15809) ((lambda () (begin (if lab$735$15805 (void) (error (quote expander) (quote "unbound identifier") (strip$735$14363 e$735$15791 (quote ())))) (if (if (eq? type$735$15809 (quote $rtd)) (begin (quote #f) (list? (binding-value$735$14375 b$735$15807))) (quote #f)) (void) (error (quote expander) (quote "invalid type") (strip$735$14363 e$735$15791 (quote ())))) (chi-expr$735$14892 (car (binding-value$735$14375 b$735$15807)) r$735$15792 mr$735$15793))))) (binding-type$735$14373 b$735$15807))) (label->binding$735$14369 lab$735$15805 r$735$15792))) (id->label$735$14367 id$735$15803))) ls/false$735$15799) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$15797 (quote ()))))) ((lambda (x$735$15811) (if (syntax-pair?$735$14331 x$735$15811) (begin (quote #f) ((lambda (q$735$15813) (if q$735$15813 (begin (quote #f) ((lambda (r$735$15815) (if r$735$15815 (begin (quote #f) (append q$735$15813 r$735$15815)) (quote #f))) ((lambda (x$735$15817) (if (syntax-pair?$735$14331 x$735$15817) (begin (quote #f) ((lambda (q$735$15819) (if q$735$15819 (begin (quote #f) ((lambda (r$735$15821) (if r$735$15821 (begin (quote #f) (append q$735$15819 r$735$15821)) (quote #f))) ((lambda (x$735$15823) (if (equal? (stx->datum$735$14365 x$735$15823) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$15817)))) (quote #f))) ((lambda (x$735$15825) (list x$735$15825)) (syntax-car$735$14339 x$735$15817)))) (quote #f))) (syntax-cdr$735$14343 x$735$15811)))) (quote #f))) ((lambda (x$735$15827) (quote ())) (syntax-car$735$14339 x$735$15811)))) (quote #f))) t$735$15797))) e$735$15791))) (set! record-constructor-descriptor-transformer$735$14792 (lambda (e$735$15829 r$735$15830 mr$735$15831) ((lambda (t$735$15835) ((lambda (ls/false$735$15837) (if (if ls/false$735$15837 (begin (quote #f) (apply (lambda (id$735$15839) (id?$735$14345 id$735$15839)) ls/false$735$15837)) (quote #f)) (apply (lambda (id$735$15841) ((lambda (lab$735$15843) ((lambda (b$735$15845) ((lambda (type$735$15847) ((lambda () (begin (if lab$735$15843 (void) (error (quote expander) (quote "unbound identifier") (strip$735$14363 e$735$15829 (quote ())))) (if (if (eq? type$735$15847 (quote $rtd)) (begin (quote #f) (list? (binding-value$735$14375 b$735$15845))) (quote #f)) (void) (error (quote expander) (quote "invalid type") (strip$735$14363 e$735$15829 (quote ())))) (chi-expr$735$14892 (cadr (binding-value$735$14375 b$735$15845)) r$735$15830 mr$735$15831))))) (binding-type$735$14373 b$735$15845))) (label->binding$735$14369 lab$735$15843 r$735$15830))) (id->label$735$14367 id$735$15841))) ls/false$735$15837) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$15835 (quote ()))))) ((lambda (x$735$15849) (if (syntax-pair?$735$14331 x$735$15849) (begin (quote #f) ((lambda (q$735$15851) (if q$735$15851 (begin (quote #f) ((lambda (r$735$15853) (if r$735$15853 (begin (quote #f) (append q$735$15851 r$735$15853)) (quote #f))) ((lambda (x$735$15855) (if (syntax-pair?$735$14331 x$735$15855) (begin (quote #f) ((lambda (q$735$15857) (if q$735$15857 (begin (quote #f) ((lambda (r$735$15859) (if r$735$15859 (begin (quote #f) (append q$735$15857 r$735$15859)) (quote #f))) ((lambda (x$735$15861) (if (equal? (stx->datum$735$14365 x$735$15861) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$15855)))) (quote #f))) ((lambda (x$735$15863) (list x$735$15863)) (syntax-car$735$14339 x$735$15855)))) (quote #f))) (syntax-cdr$735$14343 x$735$15849)))) (quote #f))) ((lambda (x$735$15865) (quote ())) (syntax-car$735$14339 x$735$15849)))) (quote #f))) t$735$15835))) e$735$15829))) (set! when-transformer$735$14794 (lambda (e$735$15867 r$735$15868 mr$735$15869) ((lambda (t$735$15873) ((lambda (ls/false$735$15875) (if (if ls/false$735$15875 (begin (quote #f) (apply (lambda (test$735$15877 e$735$15878 e*$735$15879) (quote #t)) ls/false$735$15875)) (quote #f)) (apply (lambda (test$735$15883 e$735$15884 e*$735$15885) (list (quote if) (chi-expr$735$14892 test$735$15883 r$735$15868 mr$735$15869) (build-sequence$735$14228 (quote #f) (chi-expr*$735$14888 (cons e$735$15884 e*$735$15885) r$735$15868 mr$735$15869)) (build-void$735$14227))) ls/false$735$15875) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$15873 (quote ()))))) ((lambda (x$735$15889) (if (syntax-pair?$735$14331 x$735$15889) (begin (quote #f) ((lambda (q$735$15891) (if q$735$15891 (begin (quote #f) ((lambda (r$735$15893) (if r$735$15893 (begin (quote #f) (append q$735$15891 r$735$15893)) (quote #f))) ((lambda (x$735$15895) (if (syntax-pair?$735$14331 x$735$15895) (begin (quote #f) ((lambda (q$735$15897) (if q$735$15897 (begin (quote #f) ((lambda (r$735$15899) (if r$735$15899 (begin (quote #f) (append q$735$15897 r$735$15899)) (quote #f))) ((lambda (x$735$15901) (if (syntax-pair?$735$14331 x$735$15901) (begin (quote #f) ((lambda (q$735$15903) (if q$735$15903 (begin (quote #f) ((lambda (r$735$15905) (if r$735$15905 (begin (quote #f) (append q$735$15903 r$735$15905)) (quote #f))) ((letrec ((f$735$15907 (lambda (x$735$15909) (if (syntax-pair?$735$14331 x$735$15909) ((lambda (cars/f$735$15911) (if cars/f$735$15911 (begin (quote #f) ((lambda (cdrs/f$735$15913) (if cdrs/f$735$15913 (begin (quote #f) (map cons cars/f$735$15911 cdrs/f$735$15913)) (quote #f))) (f$735$15907 (syntax-cdr$735$14343 x$735$15909)))) (quote #f))) ((lambda (x$735$15915) (list x$735$15915)) (syntax-car$735$14339 x$735$15909))) (if (syntax-null?$735$14335 x$735$15909) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$735$15907) (syntax-cdr$735$14343 x$735$15901)))) (quote #f))) ((lambda (x$735$15917) (list x$735$15917)) (syntax-car$735$14339 x$735$15901)))) (quote #f))) (syntax-cdr$735$14343 x$735$15895)))) (quote #f))) ((lambda (x$735$15919) (list x$735$15919)) (syntax-car$735$14339 x$735$15895)))) (quote #f))) (syntax-cdr$735$14343 x$735$15889)))) (quote #f))) ((lambda (x$735$15921) (quote ())) (syntax-car$735$14339 x$735$15889)))) (quote #f))) t$735$15873))) e$735$15867))) (set! unless-transformer$735$14796 (lambda (e$735$15923 r$735$15924 mr$735$15925) ((lambda (t$735$15929) ((lambda (ls/false$735$15931) (if (if ls/false$735$15931 (begin (quote #f) (apply (lambda (test$735$15933 e$735$15934 e*$735$15935) (quote #t)) ls/false$735$15931)) (quote #f)) (apply (lambda (test$735$15939 e$735$15940 e*$735$15941) (list (quote if) (chi-expr$735$14892 test$735$15939 r$735$15924 mr$735$15925) (build-void$735$14227) (build-sequence$735$14228 (quote #f) (chi-expr*$735$14888 (cons e$735$15940 e*$735$15941) r$735$15924 mr$735$15925)))) ls/false$735$15931) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$15929 (quote ()))))) ((lambda (x$735$15945) (if (syntax-pair?$735$14331 x$735$15945) (begin (quote #f) ((lambda (q$735$15947) (if q$735$15947 (begin (quote #f) ((lambda (r$735$15949) (if r$735$15949 (begin (quote #f) (append q$735$15947 r$735$15949)) (quote #f))) ((lambda (x$735$15951) (if (syntax-pair?$735$14331 x$735$15951) (begin (quote #f) ((lambda (q$735$15953) (if q$735$15953 (begin (quote #f) ((lambda (r$735$15955) (if r$735$15955 (begin (quote #f) (append q$735$15953 r$735$15955)) (quote #f))) ((lambda (x$735$15957) (if (syntax-pair?$735$14331 x$735$15957) (begin (quote #f) ((lambda (q$735$15959) (if q$735$15959 (begin (quote #f) ((lambda (r$735$15961) (if r$735$15961 (begin (quote #f) (append q$735$15959 r$735$15961)) (quote #f))) ((letrec ((f$735$15963 (lambda (x$735$15965) (if (syntax-pair?$735$14331 x$735$15965) ((lambda (cars/f$735$15967) (if cars/f$735$15967 (begin (quote #f) ((lambda (cdrs/f$735$15969) (if cdrs/f$735$15969 (begin (quote #f) (map cons cars/f$735$15967 cdrs/f$735$15969)) (quote #f))) (f$735$15963 (syntax-cdr$735$14343 x$735$15965)))) (quote #f))) ((lambda (x$735$15971) (list x$735$15971)) (syntax-car$735$14339 x$735$15965))) (if (syntax-null?$735$14335 x$735$15965) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$735$15963) (syntax-cdr$735$14343 x$735$15957)))) (quote #f))) ((lambda (x$735$15973) (list x$735$15973)) (syntax-car$735$14339 x$735$15957)))) (quote #f))) (syntax-cdr$735$14343 x$735$15951)))) (quote #f))) ((lambda (x$735$15975) (list x$735$15975)) (syntax-car$735$14339 x$735$15951)))) (quote #f))) (syntax-cdr$735$14343 x$735$15945)))) (quote #f))) ((lambda (x$735$15977) (quote ())) (syntax-car$735$14339 x$735$15945)))) (quote #f))) t$735$15929))) e$735$15923))) (set! if-transformer$735$14798 (lambda (e$735$15979 r$735$15980 mr$735$15981) ((lambda (t$735$15985) ((lambda (ls/false$735$15987) (if (if ls/false$735$15987 (begin (quote #f) (apply (lambda (e0$735$15989 e1$735$15990 e2$735$15991) (quote #t)) ls/false$735$15987)) (quote #f)) (apply (lambda (e0$735$15995 e1$735$15996 e2$735$15997) (list (quote if) (chi-expr$735$14892 e0$735$15995 r$735$15980 mr$735$15981) (chi-expr$735$14892 e1$735$15996 r$735$15980 mr$735$15981) (chi-expr$735$14892 e2$735$15997 r$735$15980 mr$735$15981))) ls/false$735$15987) ((lambda (t$735$16001) ((lambda (ls/false$735$16003) (if (if ls/false$735$16003 (begin (quote #f) (apply (lambda (e0$735$16005 e1$735$16006) (quote #t)) ls/false$735$16003)) (quote #f)) (apply (lambda (e0$735$16009 e1$735$16010) (list (quote if) (chi-expr$735$14892 e0$735$16009 r$735$15980 mr$735$15981) (chi-expr$735$14892 e1$735$16010 r$735$15980 mr$735$15981) (build-void$735$14227))) ls/false$735$16003) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$16001 (quote ()))))) ((lambda (x$735$16013) (if (syntax-pair?$735$14331 x$735$16013) (begin (quote #f) ((lambda (q$735$16015) (if q$735$16015 (begin (quote #f) ((lambda (r$735$16017) (if r$735$16017 (begin (quote #f) (append q$735$16015 r$735$16017)) (quote #f))) ((lambda (x$735$16019) (if (syntax-pair?$735$14331 x$735$16019) (begin (quote #f) ((lambda (q$735$16021) (if q$735$16021 (begin (quote #f) ((lambda (r$735$16023) (if r$735$16023 (begin (quote #f) (append q$735$16021 r$735$16023)) (quote #f))) ((lambda (x$735$16025) (if (syntax-pair?$735$14331 x$735$16025) (begin (quote #f) ((lambda (q$735$16027) (if q$735$16027 (begin (quote #f) ((lambda (r$735$16029) (if r$735$16029 (begin (quote #f) (append q$735$16027 r$735$16029)) (quote #f))) ((lambda (x$735$16031) (if (equal? (stx->datum$735$14365 x$735$16031) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$16025)))) (quote #f))) ((lambda (x$735$16033) (list x$735$16033)) (syntax-car$735$14339 x$735$16025)))) (quote #f))) (syntax-cdr$735$14343 x$735$16019)))) (quote #f))) ((lambda (x$735$16035) (list x$735$16035)) (syntax-car$735$14339 x$735$16019)))) (quote #f))) (syntax-cdr$735$14343 x$735$16013)))) (quote #f))) ((lambda (x$735$16037) (quote ())) (syntax-car$735$14339 x$735$16013)))) (quote #f))) t$735$16001))) t$735$15985))) ((lambda (x$735$16039) (if (syntax-pair?$735$14331 x$735$16039) (begin (quote #f) ((lambda (q$735$16041) (if q$735$16041 (begin (quote #f) ((lambda (r$735$16043) (if r$735$16043 (begin (quote #f) (append q$735$16041 r$735$16043)) (quote #f))) ((lambda (x$735$16045) (if (syntax-pair?$735$14331 x$735$16045) (begin (quote #f) ((lambda (q$735$16047) (if q$735$16047 (begin (quote #f) ((lambda (r$735$16049) (if r$735$16049 (begin (quote #f) (append q$735$16047 r$735$16049)) (quote #f))) ((lambda (x$735$16051) (if (syntax-pair?$735$14331 x$735$16051) (begin (quote #f) ((lambda (q$735$16053) (if q$735$16053 (begin (quote #f) ((lambda (r$735$16055) (if r$735$16055 (begin (quote #f) (append q$735$16053 r$735$16055)) (quote #f))) ((lambda (x$735$16057) (if (syntax-pair?$735$14331 x$735$16057) (begin (quote #f) ((lambda (q$735$16059) (if q$735$16059 (begin (quote #f) ((lambda (r$735$16061) (if r$735$16061 (begin (quote #f) (append q$735$16059 r$735$16061)) (quote #f))) ((lambda (x$735$16063) (if (equal? (stx->datum$735$14365 x$735$16063) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$16057)))) (quote #f))) ((lambda (x$735$16065) (list x$735$16065)) (syntax-car$735$14339 x$735$16057)))) (quote #f))) (syntax-cdr$735$14343 x$735$16051)))) (quote #f))) ((lambda (x$735$16067) (list x$735$16067)) (syntax-car$735$14339 x$735$16051)))) (quote #f))) (syntax-cdr$735$14343 x$735$16045)))) (quote #f))) ((lambda (x$735$16069) (list x$735$16069)) (syntax-car$735$14339 x$735$16045)))) (quote #f))) (syntax-cdr$735$14343 x$735$16039)))) (quote #f))) ((lambda (x$735$16071) (quote ())) (syntax-car$735$14339 x$735$16039)))) (quote #f))) t$735$15985))) e$735$15979))) (set! case-transformer$735$14800 (lambda (e$735$16073 r$735$16074 mr$735$16075) ((lambda (build-one$735$16079 build-last$735$16081) (begin (set! build-one$735$16079 (lambda (t$735$16189 cls$735$16190 rest$735$16191) ((lambda (t$735$16195) ((lambda (ls/false$735$16197) (if (if ls/false$735$16197 (begin (quote #f) (apply (lambda (d*$735$16199 e$735$16200 e*$735$16201) (quote #t)) ls/false$735$16197)) (quote #f)) (apply (lambda (d*$735$16205 e$735$16206 e*$735$16207) (list (quote if) (list (quote (primitive memv)) t$735$16189 (list (quote quote) (stx->datum$735$14365 d*$735$16205))) (build-sequence$735$14228 (quote #f) (chi-expr*$735$14888 (cons e$735$16206 e*$735$16207) r$735$16074 mr$735$16075)) rest$735$16191)) ls/false$735$16197) ((lambda (t$735$16211) ((lambda (ls/false$735$16213) (if (if ls/false$735$16213 (begin (quote #f) (apply (lambda (else$735$16215) (quote #t)) ls/false$735$16213)) (quote #f)) (apply (lambda (else$735$16217) (error (quote expander) (quote "invalid syntax") (stx->datum$735$14365 e$735$16073))) ls/false$735$16213) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$16211 (quote ()))))) ((lambda (x$735$16219) (list x$735$16219)) t$735$16211))) t$735$16195))) ((lambda (x$735$16221) (if (syntax-pair?$735$14331 x$735$16221) (begin (quote #f) ((lambda (q$735$16223) (if q$735$16223 (begin (quote #f) ((lambda (r$735$16225) (if r$735$16225 (begin (quote #f) (append q$735$16223 r$735$16225)) (quote #f))) ((lambda (x$735$16227) (if (syntax-pair?$735$14331 x$735$16227) (begin (quote #f) ((lambda (q$735$16229) (if q$735$16229 (begin (quote #f) ((lambda (r$735$16231) (if r$735$16231 (begin (quote #f) (append q$735$16229 r$735$16231)) (quote #f))) ((letrec ((f$735$16233 (lambda (x$735$16235) (if (syntax-pair?$735$14331 x$735$16235) ((lambda (cars/f$735$16237) (if cars/f$735$16237 (begin (quote #f) ((lambda (cdrs/f$735$16239) (if cdrs/f$735$16239 (begin (quote #f) (map cons cars/f$735$16237 cdrs/f$735$16239)) (quote #f))) (f$735$16233 (syntax-cdr$735$14343 x$735$16235)))) (quote #f))) ((lambda (x$735$16241) (list x$735$16241)) (syntax-car$735$14339 x$735$16235))) (if (syntax-null?$735$14335 x$735$16235) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$735$16233) (syntax-cdr$735$14343 x$735$16227)))) (quote #f))) ((lambda (x$735$16243) (list x$735$16243)) (syntax-car$735$14339 x$735$16227)))) (quote #f))) (syntax-cdr$735$14343 x$735$16221)))) (quote #f))) ((letrec ((f$735$16245 (lambda (x$735$16247) (if (syntax-pair?$735$14331 x$735$16247) ((lambda (cars/f$735$16249) (if cars/f$735$16249 (begin (quote #f) ((lambda (cdrs/f$735$16251) (if cdrs/f$735$16251 (begin (quote #f) (map cons cars/f$735$16249 cdrs/f$735$16251)) (quote #f))) (f$735$16245 (syntax-cdr$735$14343 x$735$16247)))) (quote #f))) ((lambda (x$735$16253) (list x$735$16253)) (syntax-car$735$14339 x$735$16247))) (if (syntax-null?$735$14335 x$735$16247) (list (begin (quote d*) (quote ()))) (quote #f)))))) f$735$16245) (syntax-car$735$14339 x$735$16221)))) (quote #f))) t$735$16195))) cls$735$16190))) (set! build-last$735$16081 (lambda (t$735$16083 cls$735$16084) ((lambda (t$735$16087) ((lambda (ls/false$735$16089) (if (if ls/false$735$16089 (begin (quote #f) (apply (lambda (d*$735$16091 e$735$16092 e*$735$16093) (quote #t)) ls/false$735$16089)) (quote #f)) (apply (lambda (d*$735$16097 e$735$16098 e*$735$16099) (build-one$735$16079 t$735$16083 cls$735$16084 (build-void$735$14227))) ls/false$735$16089) ((lambda (t$735$16103) ((lambda (ls/false$735$16105) (if (if ls/false$735$16105 (begin (quote #f) (apply (lambda (else-kwd$735$16107 x$735$16108 x*$735$16109) (quote #t)) ls/false$735$16105)) (quote #f)) (apply (lambda (else-kwd$735$16113 x$735$16114 x*$735$16115) (if (if (id?$735$14345 else-kwd$735$16113) (begin (quote #f) (free-id=?$735$14353 else-kwd$735$16113 (scheme-stx$735$14774 (quote else)))) (quote #f)) (build-sequence$735$14228 (quote #f) (chi-expr*$735$14888 (cons x$735$16114 x*$735$16115) r$735$16074 mr$735$16075)) (error (quote expander) (quote "invalid syntax") (stx->datum$735$14365 e$735$16073)))) ls/false$735$16105) ((lambda (t$735$16119) ((lambda (ls/false$735$16121) (if (if ls/false$735$16121 (begin (quote #f) (apply (lambda (else$735$16123) (quote #t)) ls/false$735$16121)) (quote #f)) (apply (lambda (else$735$16125) (error (quote expander) (quote "invalid syntax") (stx->datum$735$14365 e$735$16073))) ls/false$735$16121) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$16119 (quote ()))))) ((lambda (x$735$16127) (list x$735$16127)) t$735$16119))) t$735$16103))) ((lambda (x$735$16129) (if (syntax-pair?$735$14331 x$735$16129) (begin (quote #f) ((lambda (q$735$16131) (if q$735$16131 (begin (quote #f) ((lambda (r$735$16133) (if r$735$16133 (begin (quote #f) (append q$735$16131 r$735$16133)) (quote #f))) ((lambda (x$735$16135) (if (syntax-pair?$735$14331 x$735$16135) (begin (quote #f) ((lambda (q$735$16137) (if q$735$16137 (begin (quote #f) ((lambda (r$735$16139) (if r$735$16139 (begin (quote #f) (append q$735$16137 r$735$16139)) (quote #f))) ((letrec ((f$735$16141 (lambda (x$735$16143) (if (syntax-pair?$735$14331 x$735$16143) ((lambda (cars/f$735$16145) (if cars/f$735$16145 (begin (quote #f) ((lambda (cdrs/f$735$16147) (if cdrs/f$735$16147 (begin (quote #f) (map cons cars/f$735$16145 cdrs/f$735$16147)) (quote #f))) (f$735$16141 (syntax-cdr$735$14343 x$735$16143)))) (quote #f))) ((lambda (x$735$16149) (list x$735$16149)) (syntax-car$735$14339 x$735$16143))) (if (syntax-null?$735$14335 x$735$16143) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$735$16141) (syntax-cdr$735$14343 x$735$16135)))) (quote #f))) ((lambda (x$735$16151) (list x$735$16151)) (syntax-car$735$14339 x$735$16135)))) (quote #f))) (syntax-cdr$735$14343 x$735$16129)))) (quote #f))) ((lambda (x$735$16153) (list x$735$16153)) (syntax-car$735$14339 x$735$16129)))) (quote #f))) t$735$16103))) t$735$16087))) ((lambda (x$735$16155) (if (syntax-pair?$735$14331 x$735$16155) (begin (quote #f) ((lambda (q$735$16157) (if q$735$16157 (begin (quote #f) ((lambda (r$735$16159) (if r$735$16159 (begin (quote #f) (append q$735$16157 r$735$16159)) (quote #f))) ((lambda (x$735$16161) (if (syntax-pair?$735$14331 x$735$16161) (begin (quote #f) ((lambda (q$735$16163) (if q$735$16163 (begin (quote #f) ((lambda (r$735$16165) (if r$735$16165 (begin (quote #f) (append q$735$16163 r$735$16165)) (quote #f))) ((letrec ((f$735$16167 (lambda (x$735$16169) (if (syntax-pair?$735$14331 x$735$16169) ((lambda (cars/f$735$16171) (if cars/f$735$16171 (begin (quote #f) ((lambda (cdrs/f$735$16173) (if cdrs/f$735$16173 (begin (quote #f) (map cons cars/f$735$16171 cdrs/f$735$16173)) (quote #f))) (f$735$16167 (syntax-cdr$735$14343 x$735$16169)))) (quote #f))) ((lambda (x$735$16175) (list x$735$16175)) (syntax-car$735$14339 x$735$16169))) (if (syntax-null?$735$14335 x$735$16169) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$735$16167) (syntax-cdr$735$14343 x$735$16161)))) (quote #f))) ((lambda (x$735$16177) (list x$735$16177)) (syntax-car$735$14339 x$735$16161)))) (quote #f))) (syntax-cdr$735$14343 x$735$16155)))) (quote #f))) ((letrec ((f$735$16179 (lambda (x$735$16181) (if (syntax-pair?$735$14331 x$735$16181) ((lambda (cars/f$735$16183) (if cars/f$735$16183 (begin (quote #f) ((lambda (cdrs/f$735$16185) (if cdrs/f$735$16185 (begin (quote #f) (map cons cars/f$735$16183 cdrs/f$735$16185)) (quote #f))) (f$735$16179 (syntax-cdr$735$14343 x$735$16181)))) (quote #f))) ((lambda (x$735$16187) (list x$735$16187)) (syntax-car$735$14339 x$735$16181))) (if (syntax-null?$735$14335 x$735$16181) (list (begin (quote d*) (quote ()))) (quote #f)))))) f$735$16179) (syntax-car$735$14339 x$735$16155)))) (quote #f))) t$735$16087))) cls$735$16084))) ((lambda (t$735$16255) ((lambda (ls/false$735$16257) (if (if ls/false$735$16257 (begin (quote #f) (apply (lambda (expr$735$16259) (quote #t)) ls/false$735$16257)) (quote #f)) (apply (lambda (expr$735$16261) (build-sequence$735$14228 (quote #f) (list (chi-expr$735$14892 expr$735$16261 r$735$16074 mr$735$16075) (build-void$735$14227)))) ls/false$735$16257) ((lambda (t$735$16263) ((lambda (ls/false$735$16265) (if (if ls/false$735$16265 (begin (quote #f) (apply (lambda (expr$735$16267 cls$735$16268 cls*$735$16269) (quote #t)) ls/false$735$16265)) (quote #f)) (apply (lambda (expr$735$16273 cls$735$16274 cls*$735$16275) ((lambda (t$735$16279) (build-let$735$14232 (quote #f) (list t$735$16279) (list (chi-expr$735$14892 expr$735$16273 r$735$16074 mr$735$16075)) (letrec ((f$735$16281 (lambda (cls$735$16283 cls*$735$16284) (if (null? cls*$735$16284) (build-last$735$16081 t$735$16279 cls$735$16283) (build-one$735$16079 t$735$16279 cls$735$16283 (f$735$16281 (car cls*$735$16284) (cdr cls*$735$16284))))))) (f$735$16281 cls$735$16274 cls*$735$16275)))) (gen-lexical$735$14255 (quote t)))) ls/false$735$16265) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$16263 (quote ()))))) ((lambda (x$735$16287) (if (syntax-pair?$735$14331 x$735$16287) (begin (quote #f) ((lambda (q$735$16289) (if q$735$16289 (begin (quote #f) ((lambda (r$735$16291) (if r$735$16291 (begin (quote #f) (append q$735$16289 r$735$16291)) (quote #f))) ((lambda (x$735$16293) (if (syntax-pair?$735$14331 x$735$16293) (begin (quote #f) ((lambda (q$735$16295) (if q$735$16295 (begin (quote #f) ((lambda (r$735$16297) (if r$735$16297 (begin (quote #f) (append q$735$16295 r$735$16297)) (quote #f))) ((lambda (x$735$16299) (if (syntax-pair?$735$14331 x$735$16299) (begin (quote #f) ((lambda (q$735$16301) (if q$735$16301 (begin (quote #f) ((lambda (r$735$16303) (if r$735$16303 (begin (quote #f) (append q$735$16301 r$735$16303)) (quote #f))) ((letrec ((f$735$16305 (lambda (x$735$16307) (if (syntax-pair?$735$14331 x$735$16307) ((lambda (cars/f$735$16309) (if cars/f$735$16309 (begin (quote #f) ((lambda (cdrs/f$735$16311) (if cdrs/f$735$16311 (begin (quote #f) (map cons cars/f$735$16309 cdrs/f$735$16311)) (quote #f))) (f$735$16305 (syntax-cdr$735$14343 x$735$16307)))) (quote #f))) ((lambda (x$735$16313) (list x$735$16313)) (syntax-car$735$14339 x$735$16307))) (if (syntax-null?$735$14335 x$735$16307) (list (begin (quote cls*) (quote ()))) (quote #f)))))) f$735$16305) (syntax-cdr$735$14343 x$735$16299)))) (quote #f))) ((lambda (x$735$16315) (list x$735$16315)) (syntax-car$735$14339 x$735$16299)))) (quote #f))) (syntax-cdr$735$14343 x$735$16293)))) (quote #f))) ((lambda (x$735$16317) (list x$735$16317)) (syntax-car$735$14339 x$735$16293)))) (quote #f))) (syntax-cdr$735$14343 x$735$16287)))) (quote #f))) ((lambda (x$735$16319) (quote ())) (syntax-car$735$14339 x$735$16287)))) (quote #f))) t$735$16263))) t$735$16255))) ((lambda (x$735$16321) (if (syntax-pair?$735$14331 x$735$16321) (begin (quote #f) ((lambda (q$735$16323) (if q$735$16323 (begin (quote #f) ((lambda (r$735$16325) (if r$735$16325 (begin (quote #f) (append q$735$16323 r$735$16325)) (quote #f))) ((lambda (x$735$16327) (if (syntax-pair?$735$14331 x$735$16327) (begin (quote #f) ((lambda (q$735$16329) (if q$735$16329 (begin (quote #f) ((lambda (r$735$16331) (if r$735$16331 (begin (quote #f) (append q$735$16329 r$735$16331)) (quote #f))) ((lambda (x$735$16333) (if (equal? (stx->datum$735$14365 x$735$16333) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$16327)))) (quote #f))) ((lambda (x$735$16335) (list x$735$16335)) (syntax-car$735$14339 x$735$16327)))) (quote #f))) (syntax-cdr$735$14343 x$735$16321)))) (quote #f))) ((lambda (x$735$16337) (quote ())) (syntax-car$735$14339 x$735$16321)))) (quote #f))) t$735$16255))) e$735$16073))) (quote #f) (quote #f)))) (set! quote-transformer$735$14802 (lambda (e$735$16339 r$735$16340 mr$735$16341) ((lambda (t$735$16345) ((lambda (ls/false$735$16347) (if (if ls/false$735$16347 (begin (quote #f) (apply (lambda (datum$735$16349) (quote #t)) ls/false$735$16347)) (quote #f)) (apply (lambda (datum$735$16351) (list (quote quote) (stx->datum$735$14365 datum$735$16351))) ls/false$735$16347) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$16345 (quote ()))))) ((lambda (x$735$16353) (if (syntax-pair?$735$14331 x$735$16353) (begin (quote #f) ((lambda (q$735$16355) (if q$735$16355 (begin (quote #f) ((lambda (r$735$16357) (if r$735$16357 (begin (quote #f) (append q$735$16355 r$735$16357)) (quote #f))) ((lambda (x$735$16359) (if (syntax-pair?$735$14331 x$735$16359) (begin (quote #f) ((lambda (q$735$16361) (if q$735$16361 (begin (quote #f) ((lambda (r$735$16363) (if r$735$16363 (begin (quote #f) (append q$735$16361 r$735$16363)) (quote #f))) ((lambda (x$735$16365) (if (equal? (stx->datum$735$14365 x$735$16365) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$16359)))) (quote #f))) ((lambda (x$735$16367) (list x$735$16367)) (syntax-car$735$14339 x$735$16359)))) (quote #f))) (syntax-cdr$735$14343 x$735$16353)))) (quote #f))) ((lambda (x$735$16369) (quote ())) (syntax-car$735$14339 x$735$16353)))) (quote #f))) t$735$16345))) e$735$16339))) (set! case-lambda-transformer$735$14804 (lambda (e$735$16371 r$735$16372 mr$735$16373) ((lambda (t$735$16377) ((lambda (ls/false$735$16379) (if (if ls/false$735$16379 (begin (quote #f) (apply (lambda (fmls*$735$16381 b*$735$16382 b**$735$16383) (quote #t)) ls/false$735$16379)) (quote #f)) (apply (lambda (fmls*$735$16387 b*$735$16388 b**$735$16389) (call-with-values (lambda () (chi-lambda-clause*$735$14898 fmls*$735$16387 (map cons b*$735$16388 b**$735$16389) r$735$16372 mr$735$16373)) (lambda (fmls*$735$16393 body*$735$16394) (build-case-lambda$735$14233 (quote #f) fmls*$735$16393 body*$735$16394)))) ls/false$735$16379) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$16377 (quote ()))))) ((lambda (x$735$16397) (if (syntax-pair?$735$14331 x$735$16397) (begin (quote #f) ((lambda (q$735$16399) (if q$735$16399 (begin (quote #f) ((lambda (r$735$16401) (if r$735$16401 (begin (quote #f) (append q$735$16399 r$735$16401)) (quote #f))) ((letrec ((f$735$16403 (lambda (x$735$16405) (if (syntax-pair?$735$14331 x$735$16405) ((lambda (cars/f$735$16407) (if cars/f$735$16407 (begin (quote #f) ((lambda (cdrs/f$735$16409) (if cdrs/f$735$16409 (begin (quote #f) (map cons cars/f$735$16407 cdrs/f$735$16409)) (quote #f))) (f$735$16403 (syntax-cdr$735$14343 x$735$16405)))) (quote #f))) ((lambda (x$735$16411) (if (syntax-pair?$735$14331 x$735$16411) (begin (quote #f) ((lambda (q$735$16413) (if q$735$16413 (begin (quote #f) ((lambda (r$735$16415) (if r$735$16415 (begin (quote #f) (append q$735$16413 r$735$16415)) (quote #f))) ((lambda (x$735$16417) (if (syntax-pair?$735$14331 x$735$16417) (begin (quote #f) ((lambda (q$735$16419) (if q$735$16419 (begin (quote #f) ((lambda (r$735$16421) (if r$735$16421 (begin (quote #f) (append q$735$16419 r$735$16421)) (quote #f))) ((letrec ((f$735$16423 (lambda (x$735$16425) (if (syntax-pair?$735$14331 x$735$16425) ((lambda (cars/f$735$16427) (if cars/f$735$16427 (begin (quote #f) ((lambda (cdrs/f$735$16429) (if cdrs/f$735$16429 (begin (quote #f) (map cons cars/f$735$16427 cdrs/f$735$16429)) (quote #f))) (f$735$16423 (syntax-cdr$735$14343 x$735$16425)))) (quote #f))) ((lambda (x$735$16431) (list x$735$16431)) (syntax-car$735$14339 x$735$16425))) (if (syntax-null?$735$14335 x$735$16425) (list (begin (quote b**) (quote ()))) (quote #f)))))) f$735$16423) (syntax-cdr$735$14343 x$735$16417)))) (quote #f))) ((lambda (x$735$16433) (list x$735$16433)) (syntax-car$735$14339 x$735$16417)))) (quote #f))) (syntax-cdr$735$14343 x$735$16411)))) (quote #f))) ((lambda (x$735$16435) (list x$735$16435)) (syntax-car$735$14339 x$735$16411)))) (quote #f))) (syntax-car$735$14339 x$735$16405))) (if (syntax-null?$735$14335 x$735$16405) (list (begin (quote fmls*) (quote ())) (begin (quote b*) (quote ())) (begin (quote b**) (quote ()))) (quote #f)))))) f$735$16403) (syntax-cdr$735$14343 x$735$16397)))) (quote #f))) ((lambda (x$735$16437) (quote ())) (syntax-car$735$14339 x$735$16397)))) (quote #f))) t$735$16377))) e$735$16371))) (set! lambda-transformer$735$14806 (lambda (e$735$16439 r$735$16440 mr$735$16441) ((lambda (t$735$16445) ((lambda (ls/false$735$16447) (if (if ls/false$735$16447 (begin (quote #f) (apply (lambda (fmls$735$16449 b$735$16450 b*$735$16451) (quote #t)) ls/false$735$16447)) (quote #f)) (apply (lambda (fmls$735$16455 b$735$16456 b*$735$16457) (call-with-values (lambda () (chi-lambda-clause$735$14896 fmls$735$16455 (cons b$735$16456 b*$735$16457) r$735$16440 mr$735$16441)) (lambda (fmls$735$16461 body$735$16462) (build-lambda$735$14234 (quote #f) fmls$735$16461 body$735$16462)))) ls/false$735$16447) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$16445 (quote ()))))) ((lambda (x$735$16465) (if (syntax-pair?$735$14331 x$735$16465) (begin (quote #f) ((lambda (q$735$16467) (if q$735$16467 (begin (quote #f) ((lambda (r$735$16469) (if r$735$16469 (begin (quote #f) (append q$735$16467 r$735$16469)) (quote #f))) ((lambda (x$735$16471) (if (syntax-pair?$735$14331 x$735$16471) (begin (quote #f) ((lambda (q$735$16473) (if q$735$16473 (begin (quote #f) ((lambda (r$735$16475) (if r$735$16475 (begin (quote #f) (append q$735$16473 r$735$16475)) (quote #f))) ((lambda (x$735$16477) (if (syntax-pair?$735$14331 x$735$16477) (begin (quote #f) ((lambda (q$735$16479) (if q$735$16479 (begin (quote #f) ((lambda (r$735$16481) (if r$735$16481 (begin (quote #f) (append q$735$16479 r$735$16481)) (quote #f))) ((letrec ((f$735$16483 (lambda (x$735$16485) (if (syntax-pair?$735$14331 x$735$16485) ((lambda (cars/f$735$16487) (if cars/f$735$16487 (begin (quote #f) ((lambda (cdrs/f$735$16489) (if cdrs/f$735$16489 (begin (quote #f) (map cons cars/f$735$16487 cdrs/f$735$16489)) (quote #f))) (f$735$16483 (syntax-cdr$735$14343 x$735$16485)))) (quote #f))) ((lambda (x$735$16491) (list x$735$16491)) (syntax-car$735$14339 x$735$16485))) (if (syntax-null?$735$14335 x$735$16485) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$16483) (syntax-cdr$735$14343 x$735$16477)))) (quote #f))) ((lambda (x$735$16493) (list x$735$16493)) (syntax-car$735$14339 x$735$16477)))) (quote #f))) (syntax-cdr$735$14343 x$735$16471)))) (quote #f))) ((lambda (x$735$16495) (list x$735$16495)) (syntax-car$735$14339 x$735$16471)))) (quote #f))) (syntax-cdr$735$14343 x$735$16465)))) (quote #f))) ((lambda (x$735$16497) (quote ())) (syntax-car$735$14339 x$735$16465)))) (quote #f))) t$735$16445))) e$735$16439))) (set! bless$735$14808 (lambda (x$735$16499) (mkstx$735$14321 (letrec ((f$735$16501 (lambda (x$735$16503) (if (stx?$735$14297 x$735$16503) x$735$16503 (if (pair? x$735$16503) (cons (f$735$16501 (car x$735$16503)) (f$735$16501 (cdr x$735$16503))) (if (symbol? x$735$16503) (scheme-stx$735$14774 x$735$16503) (if (vector? x$735$16503) (list->vector (map f$735$16501 (vector->list x$735$16503))) x$735$16503))))))) (f$735$16501 x$735$16499)) (quote ()) (quote ())))) (set! with-syntax-macro$735$14810 (lambda (e$735$16505) ((lambda (t$735$16507) ((lambda (ls/false$735$16509) (if (if ls/false$735$16509 (begin (quote #f) (apply (lambda (fml*$735$16511 expr*$735$16512 b$735$16513 b*$735$16514) (quote #t)) ls/false$735$16509)) (quote #f)) (apply (lambda (fml*$735$16519 expr*$735$16520 b$735$16521 b*$735$16522) (bless$735$14808 (list (quote syntax-case) (cons (quote list) expr*$735$16520) (quote ()) (list fml*$735$16519 (cons (quote begin) (cons b$735$16521 b*$735$16522)))))) ls/false$735$16509) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$16507 (quote ()))))) ((lambda (x$735$16527) (if (syntax-pair?$735$14331 x$735$16527) (begin (quote #f) ((lambda (q$735$16529) (if q$735$16529 (begin (quote #f) ((lambda (r$735$16531) (if r$735$16531 (begin (quote #f) (append q$735$16529 r$735$16531)) (quote #f))) ((lambda (x$735$16533) (if (syntax-pair?$735$14331 x$735$16533) (begin (quote #f) ((lambda (q$735$16535) (if q$735$16535 (begin (quote #f) ((lambda (r$735$16537) (if r$735$16537 (begin (quote #f) (append q$735$16535 r$735$16537)) (quote #f))) ((lambda (x$735$16539) (if (syntax-pair?$735$14331 x$735$16539) (begin (quote #f) ((lambda (q$735$16541) (if q$735$16541 (begin (quote #f) ((lambda (r$735$16543) (if r$735$16543 (begin (quote #f) (append q$735$16541 r$735$16543)) (quote #f))) ((letrec ((f$735$16545 (lambda (x$735$16547) (if (syntax-pair?$735$14331 x$735$16547) ((lambda (cars/f$735$16549) (if cars/f$735$16549 (begin (quote #f) ((lambda (cdrs/f$735$16551) (if cdrs/f$735$16551 (begin (quote #f) (map cons cars/f$735$16549 cdrs/f$735$16551)) (quote #f))) (f$735$16545 (syntax-cdr$735$14343 x$735$16547)))) (quote #f))) ((lambda (x$735$16553) (list x$735$16553)) (syntax-car$735$14339 x$735$16547))) (if (syntax-null?$735$14335 x$735$16547) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$16545) (syntax-cdr$735$14343 x$735$16539)))) (quote #f))) ((lambda (x$735$16555) (list x$735$16555)) (syntax-car$735$14339 x$735$16539)))) (quote #f))) (syntax-cdr$735$14343 x$735$16533)))) (quote #f))) ((letrec ((f$735$16557 (lambda (x$735$16559) (if (syntax-pair?$735$14331 x$735$16559) ((lambda (cars/f$735$16561) (if cars/f$735$16561 (begin (quote #f) ((lambda (cdrs/f$735$16563) (if cdrs/f$735$16563 (begin (quote #f) (map cons cars/f$735$16561 cdrs/f$735$16563)) (quote #f))) (f$735$16557 (syntax-cdr$735$14343 x$735$16559)))) (quote #f))) ((lambda (x$735$16565) (if (syntax-pair?$735$14331 x$735$16565) (begin (quote #f) ((lambda (q$735$16567) (if q$735$16567 (begin (quote #f) ((lambda (r$735$16569) (if r$735$16569 (begin (quote #f) (append q$735$16567 r$735$16569)) (quote #f))) ((lambda (x$735$16571) (if (syntax-pair?$735$14331 x$735$16571) (begin (quote #f) ((lambda (q$735$16573) (if q$735$16573 (begin (quote #f) ((lambda (r$735$16575) (if r$735$16575 (begin (quote #f) (append q$735$16573 r$735$16575)) (quote #f))) ((lambda (x$735$16577) (if (equal? (stx->datum$735$14365 x$735$16577) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$16571)))) (quote #f))) ((lambda (x$735$16579) (list x$735$16579)) (syntax-car$735$14339 x$735$16571)))) (quote #f))) (syntax-cdr$735$14343 x$735$16565)))) (quote #f))) ((lambda (x$735$16581) (list x$735$16581)) (syntax-car$735$14339 x$735$16565)))) (quote #f))) (syntax-car$735$14339 x$735$16559))) (if (syntax-null?$735$14335 x$735$16559) (list (begin (quote fml*) (quote ())) (begin (quote expr*) (quote ()))) (quote #f)))))) f$735$16557) (syntax-car$735$14339 x$735$16533)))) (quote #f))) (syntax-cdr$735$14343 x$735$16527)))) (quote #f))) ((lambda (x$735$16583) (quote ())) (syntax-car$735$14339 x$735$16527)))) (quote #f))) t$735$16507))) e$735$16505))) (set! let-macro$735$14812 (lambda (stx$735$16585) ((lambda (t$735$16587) ((lambda (ls/false$735$16589) (if (if ls/false$735$16589 (begin (quote #f) (apply (lambda (lhs*$735$16591 rhs*$735$16592 b$735$16593 b*$735$16594) (quote #t)) ls/false$735$16589)) (quote #f)) (apply (lambda (lhs*$735$16599 rhs*$735$16600 b$735$16601 b*$735$16602) (if (valid-bound-ids?$735$14355 lhs*$735$16599) (bless$735$14808 (cons (cons (quote lambda) (cons lhs*$735$16599 (cons b$735$16601 b*$735$16602))) rhs*$735$16600)) (error (quote expander) (quote "invalid bindings") (strip$735$14363 stx$735$16585 (quote ()))))) ls/false$735$16589) ((lambda (t$735$16607) ((lambda (ls/false$735$16609) (if (if ls/false$735$16609 (begin (quote #f) (apply (lambda (f$735$16611 lhs*$735$16612 rhs*$735$16613 b$735$16614 b*$735$16615) (id?$735$14345 f$735$16611)) ls/false$735$16609)) (quote #f)) (apply (lambda (f$735$16621 lhs*$735$16622 rhs*$735$16623 b$735$16624 b*$735$16625) (if (valid-bound-ids?$735$14355 lhs*$735$16622) (bless$735$14808 (list (quote letrec) (list (list f$735$16621 (cons (quote lambda) (cons lhs*$735$16622 (cons b$735$16624 b*$735$16625))))) (cons f$735$16621 rhs*$735$16623))) (error (quote expander) (quote "invalid syntax") (strip$735$14363 stx$735$16585 (quote ()))))) ls/false$735$16609) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$16607 (quote ()))))) ((lambda (x$735$16631) (if (syntax-pair?$735$14331 x$735$16631) (begin (quote #f) ((lambda (q$735$16633) (if q$735$16633 (begin (quote #f) ((lambda (r$735$16635) (if r$735$16635 (begin (quote #f) (append q$735$16633 r$735$16635)) (quote #f))) ((lambda (x$735$16637) (if (syntax-pair?$735$14331 x$735$16637) (begin (quote #f) ((lambda (q$735$16639) (if q$735$16639 (begin (quote #f) ((lambda (r$735$16641) (if r$735$16641 (begin (quote #f) (append q$735$16639 r$735$16641)) (quote #f))) ((lambda (x$735$16643) (if (syntax-pair?$735$14331 x$735$16643) (begin (quote #f) ((lambda (q$735$16645) (if q$735$16645 (begin (quote #f) ((lambda (r$735$16647) (if r$735$16647 (begin (quote #f) (append q$735$16645 r$735$16647)) (quote #f))) ((lambda (x$735$16649) (if (syntax-pair?$735$14331 x$735$16649) (begin (quote #f) ((lambda (q$735$16651) (if q$735$16651 (begin (quote #f) ((lambda (r$735$16653) (if r$735$16653 (begin (quote #f) (append q$735$16651 r$735$16653)) (quote #f))) ((letrec ((f$735$16655 (lambda (x$735$16657) (if (syntax-pair?$735$14331 x$735$16657) ((lambda (cars/f$735$16659) (if cars/f$735$16659 (begin (quote #f) ((lambda (cdrs/f$735$16661) (if cdrs/f$735$16661 (begin (quote #f) (map cons cars/f$735$16659 cdrs/f$735$16661)) (quote #f))) (f$735$16655 (syntax-cdr$735$14343 x$735$16657)))) (quote #f))) ((lambda (x$735$16663) (list x$735$16663)) (syntax-car$735$14339 x$735$16657))) (if (syntax-null?$735$14335 x$735$16657) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$16655) (syntax-cdr$735$14343 x$735$16649)))) (quote #f))) ((lambda (x$735$16665) (list x$735$16665)) (syntax-car$735$14339 x$735$16649)))) (quote #f))) (syntax-cdr$735$14343 x$735$16643)))) (quote #f))) ((letrec ((f$735$16667 (lambda (x$735$16669) (if (syntax-pair?$735$14331 x$735$16669) ((lambda (cars/f$735$16671) (if cars/f$735$16671 (begin (quote #f) ((lambda (cdrs/f$735$16673) (if cdrs/f$735$16673 (begin (quote #f) (map cons cars/f$735$16671 cdrs/f$735$16673)) (quote #f))) (f$735$16667 (syntax-cdr$735$14343 x$735$16669)))) (quote #f))) ((lambda (x$735$16675) (if (syntax-pair?$735$14331 x$735$16675) (begin (quote #f) ((lambda (q$735$16677) (if q$735$16677 (begin (quote #f) ((lambda (r$735$16679) (if r$735$16679 (begin (quote #f) (append q$735$16677 r$735$16679)) (quote #f))) ((lambda (x$735$16681) (if (syntax-pair?$735$14331 x$735$16681) (begin (quote #f) ((lambda (q$735$16683) (if q$735$16683 (begin (quote #f) ((lambda (r$735$16685) (if r$735$16685 (begin (quote #f) (append q$735$16683 r$735$16685)) (quote #f))) ((lambda (x$735$16687) (if (equal? (stx->datum$735$14365 x$735$16687) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$16681)))) (quote #f))) ((lambda (x$735$16689) (list x$735$16689)) (syntax-car$735$14339 x$735$16681)))) (quote #f))) (syntax-cdr$735$14343 x$735$16675)))) (quote #f))) ((lambda (x$735$16691) (list x$735$16691)) (syntax-car$735$14339 x$735$16675)))) (quote #f))) (syntax-car$735$14339 x$735$16669))) (if (syntax-null?$735$14335 x$735$16669) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$735$16667) (syntax-car$735$14339 x$735$16643)))) (quote #f))) (syntax-cdr$735$14343 x$735$16637)))) (quote #f))) ((lambda (x$735$16693) (list x$735$16693)) (syntax-car$735$14339 x$735$16637)))) (quote #f))) (syntax-cdr$735$14343 x$735$16631)))) (quote #f))) ((lambda (x$735$16695) (quote ())) (syntax-car$735$14339 x$735$16631)))) (quote #f))) t$735$16607))) t$735$16587))) ((lambda (x$735$16697) (if (syntax-pair?$735$14331 x$735$16697) (begin (quote #f) ((lambda (q$735$16699) (if q$735$16699 (begin (quote #f) ((lambda (r$735$16701) (if r$735$16701 (begin (quote #f) (append q$735$16699 r$735$16701)) (quote #f))) ((lambda (x$735$16703) (if (syntax-pair?$735$14331 x$735$16703) (begin (quote #f) ((lambda (q$735$16705) (if q$735$16705 (begin (quote #f) ((lambda (r$735$16707) (if r$735$16707 (begin (quote #f) (append q$735$16705 r$735$16707)) (quote #f))) ((lambda (x$735$16709) (if (syntax-pair?$735$14331 x$735$16709) (begin (quote #f) ((lambda (q$735$16711) (if q$735$16711 (begin (quote #f) ((lambda (r$735$16713) (if r$735$16713 (begin (quote #f) (append q$735$16711 r$735$16713)) (quote #f))) ((letrec ((f$735$16715 (lambda (x$735$16717) (if (syntax-pair?$735$14331 x$735$16717) ((lambda (cars/f$735$16719) (if cars/f$735$16719 (begin (quote #f) ((lambda (cdrs/f$735$16721) (if cdrs/f$735$16721 (begin (quote #f) (map cons cars/f$735$16719 cdrs/f$735$16721)) (quote #f))) (f$735$16715 (syntax-cdr$735$14343 x$735$16717)))) (quote #f))) ((lambda (x$735$16723) (list x$735$16723)) (syntax-car$735$14339 x$735$16717))) (if (syntax-null?$735$14335 x$735$16717) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$16715) (syntax-cdr$735$14343 x$735$16709)))) (quote #f))) ((lambda (x$735$16725) (list x$735$16725)) (syntax-car$735$14339 x$735$16709)))) (quote #f))) (syntax-cdr$735$14343 x$735$16703)))) (quote #f))) ((letrec ((f$735$16727 (lambda (x$735$16729) (if (syntax-pair?$735$14331 x$735$16729) ((lambda (cars/f$735$16731) (if cars/f$735$16731 (begin (quote #f) ((lambda (cdrs/f$735$16733) (if cdrs/f$735$16733 (begin (quote #f) (map cons cars/f$735$16731 cdrs/f$735$16733)) (quote #f))) (f$735$16727 (syntax-cdr$735$14343 x$735$16729)))) (quote #f))) ((lambda (x$735$16735) (if (syntax-pair?$735$14331 x$735$16735) (begin (quote #f) ((lambda (q$735$16737) (if q$735$16737 (begin (quote #f) ((lambda (r$735$16739) (if r$735$16739 (begin (quote #f) (append q$735$16737 r$735$16739)) (quote #f))) ((lambda (x$735$16741) (if (syntax-pair?$735$14331 x$735$16741) (begin (quote #f) ((lambda (q$735$16743) (if q$735$16743 (begin (quote #f) ((lambda (r$735$16745) (if r$735$16745 (begin (quote #f) (append q$735$16743 r$735$16745)) (quote #f))) ((lambda (x$735$16747) (if (equal? (stx->datum$735$14365 x$735$16747) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$16741)))) (quote #f))) ((lambda (x$735$16749) (list x$735$16749)) (syntax-car$735$14339 x$735$16741)))) (quote #f))) (syntax-cdr$735$14343 x$735$16735)))) (quote #f))) ((lambda (x$735$16751) (list x$735$16751)) (syntax-car$735$14339 x$735$16735)))) (quote #f))) (syntax-car$735$14339 x$735$16729))) (if (syntax-null?$735$14335 x$735$16729) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$735$16727) (syntax-car$735$14339 x$735$16703)))) (quote #f))) (syntax-cdr$735$14343 x$735$16697)))) (quote #f))) ((lambda (x$735$16753) (quote ())) (syntax-car$735$14339 x$735$16697)))) (quote #f))) t$735$16587))) stx$735$16585))) (set! trace-lambda-macro$735$14814 (lambda (stx$735$16755) ((lambda (t$735$16757) ((lambda (ls/false$735$16759) (if (if ls/false$735$16759 (begin (quote #f) (apply (lambda (who$735$16761 fmls$735$16762 b$735$16763 b*$735$16764) (quote #t)) ls/false$735$16759)) (quote #f)) (apply (lambda (who$735$16769 fmls$735$16770 b$735$16771 b*$735$16772) (if (valid-bound-ids?$735$14355 fmls$735$16770) (bless$735$14808 (list (quote make-traced-procedure) (list (quote quote) who$735$16769) (cons (quote lambda) (cons fmls$735$16770 (cons b$735$16771 b*$735$16772))))) (error (quote expander) (quote "invalid formals") (strip$735$14363 stx$735$16755 (quote ()))))) ls/false$735$16759) ((lambda (t$735$16777) ((lambda (ls/false$735$16779) (if (if ls/false$735$16779 (begin (quote #f) (apply (lambda (who$735$16781 fmls$735$16782 last$735$16783 b$735$16784 b*$735$16785) (quote #t)) ls/false$735$16779)) (quote #f)) (apply (lambda (who$735$16791 fmls$735$16792 last$735$16793 b$735$16794 b*$735$16795) (if (valid-bound-ids?$735$14355 (cons last$735$16793 fmls$735$16792)) (bless$735$14808 (list (quote make-traced-procedure) (list (quote quote) who$735$16791) (cons (quote lambda) (cons (append fmls$735$16792 last$735$16793) (cons b$735$16794 b*$735$16795))))) (error (quote expander) (quote "invalid formals") (strip$735$14363 stx$735$16755 (quote ()))))) ls/false$735$16779) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$16777 (quote ()))))) ((lambda (x$735$16801) (if (syntax-pair?$735$14331 x$735$16801) (begin (quote #f) ((lambda (q$735$16803) (if q$735$16803 (begin (quote #f) ((lambda (r$735$16805) (if r$735$16805 (begin (quote #f) (append q$735$16803 r$735$16805)) (quote #f))) ((lambda (x$735$16807) (if (syntax-pair?$735$14331 x$735$16807) (begin (quote #f) ((lambda (q$735$16809) (if q$735$16809 (begin (quote #f) ((lambda (r$735$16811) (if r$735$16811 (begin (quote #f) (append q$735$16809 r$735$16811)) (quote #f))) ((lambda (x$735$16813) (if (syntax-pair?$735$14331 x$735$16813) (begin (quote #f) ((lambda (q$735$16815) (if q$735$16815 (begin (quote #f) ((lambda (r$735$16817) (if r$735$16817 (begin (quote #f) (append q$735$16815 r$735$16817)) (quote #f))) ((lambda (x$735$16819) (if (syntax-pair?$735$14331 x$735$16819) (begin (quote #f) ((lambda (q$735$16821) (if q$735$16821 (begin (quote #f) ((lambda (r$735$16823) (if r$735$16823 (begin (quote #f) (append q$735$16821 r$735$16823)) (quote #f))) ((letrec ((f$735$16825 (lambda (x$735$16827) (if (syntax-pair?$735$14331 x$735$16827) ((lambda (cars/f$735$16829) (if cars/f$735$16829 (begin (quote #f) ((lambda (cdrs/f$735$16831) (if cdrs/f$735$16831 (begin (quote #f) (map cons cars/f$735$16829 cdrs/f$735$16831)) (quote #f))) (f$735$16825 (syntax-cdr$735$14343 x$735$16827)))) (quote #f))) ((lambda (x$735$16833) (list x$735$16833)) (syntax-car$735$14339 x$735$16827))) (if (syntax-null?$735$14335 x$735$16827) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$16825) (syntax-cdr$735$14343 x$735$16819)))) (quote #f))) ((lambda (x$735$16835) (list x$735$16835)) (syntax-car$735$14339 x$735$16819)))) (quote #f))) (syntax-cdr$735$14343 x$735$16813)))) (quote #f))) ((letrec ((f$735$16837 (lambda (x$735$16843) (if (syntax-pair?$735$14331 x$735$16843) ((lambda (cars/f$735$16845) (if cars/f$735$16845 (begin (quote #f) ((lambda (d/f$735$16847) (if d/f$735$16847 (begin (quote #f) (cons (map cons cars/f$735$16845 (car d/f$735$16847)) (cdr d/f$735$16847))) (quote #f))) (f$735$16837 (syntax-cdr$735$14343 x$735$16843)))) (quote #f))) ((lambda (x$735$16849) (list x$735$16849)) (syntax-car$735$14339 x$735$16843))) ((lambda (d$735$16851) (if d$735$16851 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) d$735$16851)) (quote #f))) ((lambda (x$735$16853) (list x$735$16853)) x$735$16843)))))) (lambda (x$735$16839) ((lambda (x$735$16841) (if x$735$16841 (begin (quote #f) (append (car x$735$16841) (cdr x$735$16841))) (quote #f))) (f$735$16837 x$735$16839)))) (syntax-car$735$14339 x$735$16813)))) (quote #f))) (syntax-cdr$735$14343 x$735$16807)))) (quote #f))) ((lambda (x$735$16855) (list x$735$16855)) (syntax-car$735$14339 x$735$16807)))) (quote #f))) (syntax-cdr$735$14343 x$735$16801)))) (quote #f))) ((lambda (x$735$16857) (quote ())) (syntax-car$735$14339 x$735$16801)))) (quote #f))) t$735$16777))) t$735$16757))) ((lambda (x$735$16859) (if (syntax-pair?$735$14331 x$735$16859) (begin (quote #f) ((lambda (q$735$16861) (if q$735$16861 (begin (quote #f) ((lambda (r$735$16863) (if r$735$16863 (begin (quote #f) (append q$735$16861 r$735$16863)) (quote #f))) ((lambda (x$735$16865) (if (syntax-pair?$735$14331 x$735$16865) (begin (quote #f) ((lambda (q$735$16867) (if q$735$16867 (begin (quote #f) ((lambda (r$735$16869) (if r$735$16869 (begin (quote #f) (append q$735$16867 r$735$16869)) (quote #f))) ((lambda (x$735$16871) (if (syntax-pair?$735$14331 x$735$16871) (begin (quote #f) ((lambda (q$735$16873) (if q$735$16873 (begin (quote #f) ((lambda (r$735$16875) (if r$735$16875 (begin (quote #f) (append q$735$16873 r$735$16875)) (quote #f))) ((lambda (x$735$16877) (if (syntax-pair?$735$14331 x$735$16877) (begin (quote #f) ((lambda (q$735$16879) (if q$735$16879 (begin (quote #f) ((lambda (r$735$16881) (if r$735$16881 (begin (quote #f) (append q$735$16879 r$735$16881)) (quote #f))) ((letrec ((f$735$16883 (lambda (x$735$16885) (if (syntax-pair?$735$14331 x$735$16885) ((lambda (cars/f$735$16887) (if cars/f$735$16887 (begin (quote #f) ((lambda (cdrs/f$735$16889) (if cdrs/f$735$16889 (begin (quote #f) (map cons cars/f$735$16887 cdrs/f$735$16889)) (quote #f))) (f$735$16883 (syntax-cdr$735$14343 x$735$16885)))) (quote #f))) ((lambda (x$735$16891) (list x$735$16891)) (syntax-car$735$14339 x$735$16885))) (if (syntax-null?$735$14335 x$735$16885) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$16883) (syntax-cdr$735$14343 x$735$16877)))) (quote #f))) ((lambda (x$735$16893) (list x$735$16893)) (syntax-car$735$14339 x$735$16877)))) (quote #f))) (syntax-cdr$735$14343 x$735$16871)))) (quote #f))) ((letrec ((f$735$16895 (lambda (x$735$16897) (if (syntax-pair?$735$14331 x$735$16897) ((lambda (cars/f$735$16899) (if cars/f$735$16899 (begin (quote #f) ((lambda (cdrs/f$735$16901) (if cdrs/f$735$16901 (begin (quote #f) (map cons cars/f$735$16899 cdrs/f$735$16901)) (quote #f))) (f$735$16895 (syntax-cdr$735$14343 x$735$16897)))) (quote #f))) ((lambda (x$735$16903) (list x$735$16903)) (syntax-car$735$14339 x$735$16897))) (if (syntax-null?$735$14335 x$735$16897) (list (begin (quote fmls) (quote ()))) (quote #f)))))) f$735$16895) (syntax-car$735$14339 x$735$16871)))) (quote #f))) (syntax-cdr$735$14343 x$735$16865)))) (quote #f))) ((lambda (x$735$16905) (list x$735$16905)) (syntax-car$735$14339 x$735$16865)))) (quote #f))) (syntax-cdr$735$14343 x$735$16859)))) (quote #f))) ((lambda (x$735$16907) (quote ())) (syntax-car$735$14339 x$735$16859)))) (quote #f))) t$735$16757))) stx$735$16755))) (set! trace-define-macro$735$14816 (lambda (stx$735$16909) ((lambda (t$735$16911) ((lambda (ls/false$735$16913) (if (if ls/false$735$16913 (begin (quote #f) (apply (lambda (who$735$16915 fmls$735$16916 b$735$16917 b*$735$16918) (quote #t)) ls/false$735$16913)) (quote #f)) (apply (lambda (who$735$16923 fmls$735$16924 b$735$16925 b*$735$16926) (if (valid-bound-ids?$735$14355 fmls$735$16924) (bless$735$14808 (list (quote define) who$735$16923 (list (quote make-traced-procedure) (list (quote quote) who$735$16923) (cons (quote lambda) (cons fmls$735$16924 (cons b$735$16925 b*$735$16926)))))) (error (quote expander) (quote "invalid formals") (strip$735$14363 stx$735$16909 (quote ()))))) ls/false$735$16913) ((lambda (t$735$16931) ((lambda (ls/false$735$16933) (if (if ls/false$735$16933 (begin (quote #f) (apply (lambda (who$735$16935 fmls$735$16936 last$735$16937 b$735$16938 b*$735$16939) (quote #t)) ls/false$735$16933)) (quote #f)) (apply (lambda (who$735$16945 fmls$735$16946 last$735$16947 b$735$16948 b*$735$16949) (if (valid-bound-ids?$735$14355 (cons last$735$16947 fmls$735$16946)) (bless$735$14808 (list (quote define) who$735$16945 (list (quote make-traced-procedure) (list (quote quote) who$735$16945) (cons (quote lambda) (cons (append fmls$735$16946 last$735$16947) (cons b$735$16948 b*$735$16949)))))) (error (quote expander) (quote "invalid formals") (strip$735$14363 stx$735$16909 (quote ()))))) ls/false$735$16933) ((lambda (t$735$16955) ((lambda (ls/false$735$16957) (if (if ls/false$735$16957 (begin (quote #f) (apply (lambda (who$735$16959 expr$735$16960) (quote #t)) ls/false$735$16957)) (quote #f)) (apply (lambda (who$735$16963 expr$735$16964) (if (id?$735$14345 who$735$16963) (bless$735$14808 (list (quote define) who$735$16963 (list (quote let) (list (list (quote v) expr$735$16964)) (cons (quote if) (cons (quote (procedure? v)) (cons (cons (quote make-traced-procedure) (cons (list (quote quote) who$735$16963) (quote (v)))) (quote ((error (quote trace-define) "not a procedure" v))))))))) (error (quote expander) (quote "invalid formals") (strip$735$14363 stx$735$16909 (quote ()))))) ls/false$735$16957) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$16955 (quote ()))))) ((lambda (x$735$16967) (if (syntax-pair?$735$14331 x$735$16967) (begin (quote #f) ((lambda (q$735$16969) (if q$735$16969 (begin (quote #f) ((lambda (r$735$16971) (if r$735$16971 (begin (quote #f) (append q$735$16969 r$735$16971)) (quote #f))) ((lambda (x$735$16973) (if (syntax-pair?$735$14331 x$735$16973) (begin (quote #f) ((lambda (q$735$16975) (if q$735$16975 (begin (quote #f) ((lambda (r$735$16977) (if r$735$16977 (begin (quote #f) (append q$735$16975 r$735$16977)) (quote #f))) ((lambda (x$735$16979) (if (syntax-pair?$735$14331 x$735$16979) (begin (quote #f) ((lambda (q$735$16981) (if q$735$16981 (begin (quote #f) ((lambda (r$735$16983) (if r$735$16983 (begin (quote #f) (append q$735$16981 r$735$16983)) (quote #f))) ((lambda (x$735$16985) (if (equal? (stx->datum$735$14365 x$735$16985) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$16979)))) (quote #f))) ((lambda (x$735$16987) (list x$735$16987)) (syntax-car$735$14339 x$735$16979)))) (quote #f))) (syntax-cdr$735$14343 x$735$16973)))) (quote #f))) ((lambda (x$735$16989) (list x$735$16989)) (syntax-car$735$14339 x$735$16973)))) (quote #f))) (syntax-cdr$735$14343 x$735$16967)))) (quote #f))) ((lambda (x$735$16991) (quote ())) (syntax-car$735$14339 x$735$16967)))) (quote #f))) t$735$16955))) t$735$16931))) ((lambda (x$735$16993) (if (syntax-pair?$735$14331 x$735$16993) (begin (quote #f) ((lambda (q$735$16995) (if q$735$16995 (begin (quote #f) ((lambda (r$735$16997) (if r$735$16997 (begin (quote #f) (append q$735$16995 r$735$16997)) (quote #f))) ((lambda (x$735$16999) (if (syntax-pair?$735$14331 x$735$16999) (begin (quote #f) ((lambda (q$735$17001) (if q$735$17001 (begin (quote #f) ((lambda (r$735$17003) (if r$735$17003 (begin (quote #f) (append q$735$17001 r$735$17003)) (quote #f))) ((lambda (x$735$17005) (if (syntax-pair?$735$14331 x$735$17005) (begin (quote #f) ((lambda (q$735$17007) (if q$735$17007 (begin (quote #f) ((lambda (r$735$17009) (if r$735$17009 (begin (quote #f) (append q$735$17007 r$735$17009)) (quote #f))) ((letrec ((f$735$17011 (lambda (x$735$17013) (if (syntax-pair?$735$14331 x$735$17013) ((lambda (cars/f$735$17015) (if cars/f$735$17015 (begin (quote #f) ((lambda (cdrs/f$735$17017) (if cdrs/f$735$17017 (begin (quote #f) (map cons cars/f$735$17015 cdrs/f$735$17017)) (quote #f))) (f$735$17011 (syntax-cdr$735$14343 x$735$17013)))) (quote #f))) ((lambda (x$735$17019) (list x$735$17019)) (syntax-car$735$14339 x$735$17013))) (if (syntax-null?$735$14335 x$735$17013) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$17011) (syntax-cdr$735$14343 x$735$17005)))) (quote #f))) ((lambda (x$735$17021) (list x$735$17021)) (syntax-car$735$14339 x$735$17005)))) (quote #f))) (syntax-cdr$735$14343 x$735$16999)))) (quote #f))) ((lambda (x$735$17023) (if (syntax-pair?$735$14331 x$735$17023) (begin (quote #f) ((lambda (q$735$17025) (if q$735$17025 (begin (quote #f) ((lambda (r$735$17027) (if r$735$17027 (begin (quote #f) (append q$735$17025 r$735$17027)) (quote #f))) ((letrec ((f$735$17029 (lambda (x$735$17035) (if (syntax-pair?$735$14331 x$735$17035) ((lambda (cars/f$735$17037) (if cars/f$735$17037 (begin (quote #f) ((lambda (d/f$735$17039) (if d/f$735$17039 (begin (quote #f) (cons (map cons cars/f$735$17037 (car d/f$735$17039)) (cdr d/f$735$17039))) (quote #f))) (f$735$17029 (syntax-cdr$735$14343 x$735$17035)))) (quote #f))) ((lambda (x$735$17041) (list x$735$17041)) (syntax-car$735$14339 x$735$17035))) ((lambda (d$735$17043) (if d$735$17043 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) d$735$17043)) (quote #f))) ((lambda (x$735$17045) (list x$735$17045)) x$735$17035)))))) (lambda (x$735$17031) ((lambda (x$735$17033) (if x$735$17033 (begin (quote #f) (append (car x$735$17033) (cdr x$735$17033))) (quote #f))) (f$735$17029 x$735$17031)))) (syntax-cdr$735$14343 x$735$17023)))) (quote #f))) ((lambda (x$735$17047) (list x$735$17047)) (syntax-car$735$14339 x$735$17023)))) (quote #f))) (syntax-car$735$14339 x$735$16999)))) (quote #f))) (syntax-cdr$735$14343 x$735$16993)))) (quote #f))) ((lambda (x$735$17049) (quote ())) (syntax-car$735$14339 x$735$16993)))) (quote #f))) t$735$16931))) t$735$16911))) ((lambda (x$735$17051) (if (syntax-pair?$735$14331 x$735$17051) (begin (quote #f) ((lambda (q$735$17053) (if q$735$17053 (begin (quote #f) ((lambda (r$735$17055) (if r$735$17055 (begin (quote #f) (append q$735$17053 r$735$17055)) (quote #f))) ((lambda (x$735$17057) (if (syntax-pair?$735$14331 x$735$17057) (begin (quote #f) ((lambda (q$735$17059) (if q$735$17059 (begin (quote #f) ((lambda (r$735$17061) (if r$735$17061 (begin (quote #f) (append q$735$17059 r$735$17061)) (quote #f))) ((lambda (x$735$17063) (if (syntax-pair?$735$14331 x$735$17063) (begin (quote #f) ((lambda (q$735$17065) (if q$735$17065 (begin (quote #f) ((lambda (r$735$17067) (if r$735$17067 (begin (quote #f) (append q$735$17065 r$735$17067)) (quote #f))) ((letrec ((f$735$17069 (lambda (x$735$17071) (if (syntax-pair?$735$14331 x$735$17071) ((lambda (cars/f$735$17073) (if cars/f$735$17073 (begin (quote #f) ((lambda (cdrs/f$735$17075) (if cdrs/f$735$17075 (begin (quote #f) (map cons cars/f$735$17073 cdrs/f$735$17075)) (quote #f))) (f$735$17069 (syntax-cdr$735$14343 x$735$17071)))) (quote #f))) ((lambda (x$735$17077) (list x$735$17077)) (syntax-car$735$14339 x$735$17071))) (if (syntax-null?$735$14335 x$735$17071) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$17069) (syntax-cdr$735$14343 x$735$17063)))) (quote #f))) ((lambda (x$735$17079) (list x$735$17079)) (syntax-car$735$14339 x$735$17063)))) (quote #f))) (syntax-cdr$735$14343 x$735$17057)))) (quote #f))) ((lambda (x$735$17081) (if (syntax-pair?$735$14331 x$735$17081) (begin (quote #f) ((lambda (q$735$17083) (if q$735$17083 (begin (quote #f) ((lambda (r$735$17085) (if r$735$17085 (begin (quote #f) (append q$735$17083 r$735$17085)) (quote #f))) ((letrec ((f$735$17087 (lambda (x$735$17089) (if (syntax-pair?$735$14331 x$735$17089) ((lambda (cars/f$735$17091) (if cars/f$735$17091 (begin (quote #f) ((lambda (cdrs/f$735$17093) (if cdrs/f$735$17093 (begin (quote #f) (map cons cars/f$735$17091 cdrs/f$735$17093)) (quote #f))) (f$735$17087 (syntax-cdr$735$14343 x$735$17089)))) (quote #f))) ((lambda (x$735$17095) (list x$735$17095)) (syntax-car$735$14339 x$735$17089))) (if (syntax-null?$735$14335 x$735$17089) (list (begin (quote fmls) (quote ()))) (quote #f)))))) f$735$17087) (syntax-cdr$735$14343 x$735$17081)))) (quote #f))) ((lambda (x$735$17097) (list x$735$17097)) (syntax-car$735$14339 x$735$17081)))) (quote #f))) (syntax-car$735$14339 x$735$17057)))) (quote #f))) (syntax-cdr$735$14343 x$735$17051)))) (quote #f))) ((lambda (x$735$17099) (quote ())) (syntax-car$735$14339 x$735$17051)))) (quote #f))) t$735$16911))) stx$735$16909))) (set! guard-macro$735$14818 (lambda (x$735$17101) ((lambda (gen-clauses$735$17103) (begin (set! gen-clauses$735$17103 (lambda (con$735$17105 outerk$735$17106 clause*$735$17107) ((lambda (f$735$17111 f*$735$17113) (begin (set! f$735$17111 (lambda (x$735$17207 k$735$17208) ((lambda (t$735$17211) ((lambda (ls/false$735$17213) (if (if ls/false$735$17213 (begin (quote #f) (apply (lambda (e$735$17215 p$735$17216) (quote #t)) ls/false$735$17213)) (quote #f)) (apply (lambda (e$735$17219 p$735$17220) ((lambda (t$735$17223) (list (quote let) (list (list t$735$17223 e$735$17219)) (list (quote if) t$735$17223 (list p$735$17220 t$735$17223) k$735$17208))) (gensym))) ls/false$735$17213) ((lambda (t$735$17225) ((lambda (ls/false$735$17227) (if (if ls/false$735$17227 (begin (quote #f) (apply (lambda (e$735$17229) (quote #t)) ls/false$735$17227)) (quote #f)) (apply (lambda (e$735$17231) ((lambda (t$735$17233) (list (quote let) (list (list t$735$17233 e$735$17231)) (list (quote if) t$735$17233 t$735$17233 k$735$17208))) (gensym))) ls/false$735$17227) ((lambda (t$735$17235) ((lambda (ls/false$735$17237) (if (if ls/false$735$17237 (begin (quote #f) (apply (lambda (e$735$17239 v$735$17240 v*$735$17241) (quote #t)) ls/false$735$17237)) (quote #f)) (apply (lambda (e$735$17245 v$735$17246 v*$735$17247) (list (quote if) e$735$17245 (cons (quote begin) (cons v$735$17246 v*$735$17247)) k$735$17208)) ls/false$735$17237) ((lambda (t$735$17251) ((lambda (ls/false$735$17253) (if (if ls/false$735$17253 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$17253)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid guard clause") (strip$735$14363 x$735$17207 (quote ())))) ls/false$735$17253) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$17251 (quote ()))))) ((lambda (x$735$17255) (quote ())) t$735$17251))) t$735$17235))) ((lambda (x$735$17257) (if (syntax-pair?$735$14331 x$735$17257) (begin (quote #f) ((lambda (q$735$17259) (if q$735$17259 (begin (quote #f) ((lambda (r$735$17261) (if r$735$17261 (begin (quote #f) (append q$735$17259 r$735$17261)) (quote #f))) ((lambda (x$735$17263) (if (syntax-pair?$735$14331 x$735$17263) (begin (quote #f) ((lambda (q$735$17265) (if q$735$17265 (begin (quote #f) ((lambda (r$735$17267) (if r$735$17267 (begin (quote #f) (append q$735$17265 r$735$17267)) (quote #f))) ((letrec ((f$735$17269 (lambda (x$735$17271) (if (syntax-pair?$735$14331 x$735$17271) ((lambda (cars/f$735$17273) (if cars/f$735$17273 (begin (quote #f) ((lambda (cdrs/f$735$17275) (if cdrs/f$735$17275 (begin (quote #f) (map cons cars/f$735$17273 cdrs/f$735$17275)) (quote #f))) (f$735$17269 (syntax-cdr$735$14343 x$735$17271)))) (quote #f))) ((lambda (x$735$17277) (list x$735$17277)) (syntax-car$735$14339 x$735$17271))) (if (syntax-null?$735$14335 x$735$17271) (list (begin (quote v*) (quote ()))) (quote #f)))))) f$735$17269) (syntax-cdr$735$14343 x$735$17263)))) (quote #f))) ((lambda (x$735$17279) (list x$735$17279)) (syntax-car$735$14339 x$735$17263)))) (quote #f))) (syntax-cdr$735$14343 x$735$17257)))) (quote #f))) ((lambda (x$735$17281) (list x$735$17281)) (syntax-car$735$14339 x$735$17257)))) (quote #f))) t$735$17235))) t$735$17225))) ((lambda (x$735$17283) (if (syntax-pair?$735$14331 x$735$17283) (begin (quote #f) ((lambda (q$735$17285) (if q$735$17285 (begin (quote #f) ((lambda (r$735$17287) (if r$735$17287 (begin (quote #f) (append q$735$17285 r$735$17287)) (quote #f))) ((lambda (x$735$17289) (if (equal? (stx->datum$735$14365 x$735$17289) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17283)))) (quote #f))) ((lambda (x$735$17291) (list x$735$17291)) (syntax-car$735$14339 x$735$17283)))) (quote #f))) t$735$17225))) t$735$17211))) ((lambda (x$735$17293) (if (syntax-pair?$735$14331 x$735$17293) (begin (quote #f) ((lambda (q$735$17295) (if q$735$17295 (begin (quote #f) ((lambda (r$735$17297) (if r$735$17297 (begin (quote #f) (append q$735$17295 r$735$17297)) (quote #f))) ((lambda (x$735$17299) (if (syntax-pair?$735$14331 x$735$17299) (begin (quote #f) ((lambda (q$735$17301) (if q$735$17301 (begin (quote #f) ((lambda (r$735$17303) (if r$735$17303 (begin (quote #f) (append q$735$17301 r$735$17303)) (quote #f))) ((lambda (x$735$17305) (if (syntax-pair?$735$14331 x$735$17305) (begin (quote #f) ((lambda (q$735$17307) (if q$735$17307 (begin (quote #f) ((lambda (r$735$17309) (if r$735$17309 (begin (quote #f) (append q$735$17307 r$735$17309)) (quote #f))) ((lambda (x$735$17311) (if (equal? (stx->datum$735$14365 x$735$17311) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17305)))) (quote #f))) ((lambda (x$735$17313) (list x$735$17313)) (syntax-car$735$14339 x$735$17305)))) (quote #f))) (syntax-cdr$735$14343 x$735$17299)))) (quote #f))) ((lambda (x$735$17315) (if (id?$735$14345 x$735$17315) (if (free-id=?$735$14353 x$735$17315 (scheme-stx$735$14774 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$17299)))) (quote #f))) (syntax-cdr$735$14343 x$735$17293)))) (quote #f))) ((lambda (x$735$17317) (list x$735$17317)) (syntax-car$735$14339 x$735$17293)))) (quote #f))) t$735$17211))) x$735$17207))) (set! f*$735$17113 (lambda (x*$735$17115) ((lambda (t$735$17117) ((lambda (ls/false$735$17119) (if (if ls/false$735$17119 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$17119)) (quote #f)) (apply (lambda () ((lambda (g$735$17121) (values (list g$735$17121 (list (quote lambda) (quote ()) (list (quote raise) con$735$17105))) g$735$17121)) (gensym))) ls/false$735$17119) ((lambda (t$735$17123) ((lambda (ls/false$735$17125) (if (if ls/false$735$17125 (begin (quote #f) (apply (lambda (e$735$17127 e*$735$17128) (quote #t)) ls/false$735$17125)) (quote #f)) (apply (lambda (e$735$17131 e*$735$17132) (values (cons (quote begin) (cons e$735$17131 e*$735$17132)) (quote #f))) ls/false$735$17125) ((lambda (t$735$17135) ((lambda (ls/false$735$17137) (if (if ls/false$735$17137 (begin (quote #f) (apply (lambda (cls$735$17139 cls*$735$17140) (quote #t)) ls/false$735$17137)) (quote #f)) (apply (lambda (cls$735$17143 cls*$735$17144) (call-with-values (lambda () (f*$735$17113 cls*$735$17144)) (lambda (e$735$17147 g$735$17148) (values (f$735$17111 cls$735$17143 e$735$17147) g$735$17148)))) ls/false$735$17137) ((lambda (t$735$17151) ((lambda (ls/false$735$17153) (if (if ls/false$735$17153 (begin (quote #f) (apply (lambda (others$735$17155) (quote #t)) ls/false$735$17153)) (quote #f)) (apply (lambda (others$735$17157) (error (quote expander) (quote "invalid guard clause") (strip$735$14363 others$735$17157 (quote ())))) ls/false$735$17153) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$17151 (quote ()))))) ((lambda (x$735$17159) (list x$735$17159)) t$735$17151))) t$735$17135))) ((lambda (x$735$17161) (if (syntax-pair?$735$14331 x$735$17161) (begin (quote #f) ((lambda (q$735$17163) (if q$735$17163 (begin (quote #f) ((lambda (r$735$17165) (if r$735$17165 (begin (quote #f) (append q$735$17163 r$735$17165)) (quote #f))) ((lambda (x$735$17167) (list x$735$17167)) (syntax-cdr$735$14343 x$735$17161)))) (quote #f))) ((lambda (x$735$17169) (list x$735$17169)) (syntax-car$735$14339 x$735$17161)))) (quote #f))) t$735$17135))) t$735$17123))) ((lambda (x$735$17171) (if (syntax-pair?$735$14331 x$735$17171) (begin (quote #f) ((lambda (q$735$17173) (if q$735$17173 (begin (quote #f) ((lambda (r$735$17175) (if r$735$17175 (begin (quote #f) (append q$735$17173 r$735$17175)) (quote #f))) ((lambda (x$735$17177) (if (equal? (stx->datum$735$14365 x$735$17177) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17171)))) (quote #f))) ((lambda (x$735$17179) (if (syntax-pair?$735$14331 x$735$17179) (begin (quote #f) ((lambda (q$735$17181) (if q$735$17181 (begin (quote #f) ((lambda (r$735$17183) (if r$735$17183 (begin (quote #f) (append q$735$17181 r$735$17183)) (quote #f))) ((lambda (x$735$17185) (if (syntax-pair?$735$14331 x$735$17185) (begin (quote #f) ((lambda (q$735$17187) (if q$735$17187 (begin (quote #f) ((lambda (r$735$17189) (if r$735$17189 (begin (quote #f) (append q$735$17187 r$735$17189)) (quote #f))) ((letrec ((f$735$17191 (lambda (x$735$17193) (if (syntax-pair?$735$14331 x$735$17193) ((lambda (cars/f$735$17195) (if cars/f$735$17195 (begin (quote #f) ((lambda (cdrs/f$735$17197) (if cdrs/f$735$17197 (begin (quote #f) (map cons cars/f$735$17195 cdrs/f$735$17197)) (quote #f))) (f$735$17191 (syntax-cdr$735$14343 x$735$17193)))) (quote #f))) ((lambda (x$735$17199) (list x$735$17199)) (syntax-car$735$14339 x$735$17193))) (if (syntax-null?$735$14335 x$735$17193) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$735$17191) (syntax-cdr$735$14343 x$735$17185)))) (quote #f))) ((lambda (x$735$17201) (list x$735$17201)) (syntax-car$735$14339 x$735$17185)))) (quote #f))) (syntax-cdr$735$14343 x$735$17179)))) (quote #f))) ((lambda (x$735$17203) (if (id?$735$14345 x$735$17203) (if (free-id=?$735$14353 x$735$17203 (scheme-stx$735$14774 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$17179)))) (quote #f))) (syntax-car$735$14339 x$735$17171)))) (quote #f))) t$735$17123))) t$735$17117))) ((lambda (x$735$17205) (if (equal? (stx->datum$735$14365 x$735$17205) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$735$17117))) x*$735$17115))) (call-with-values (lambda () (f*$735$17113 clause*$735$17107)) (lambda (code$735$17319 raisek$735$17320) (if raisek$735$17320 (list (list (quote call/cc) (list (quote lambda) (list raisek$735$17320) (list outerk$735$17106 (list (quote lambda) (quote ()) code$735$17319))))) (list outerk$735$17106 (list (quote lambda) (quote ()) code$735$17319))))))) (quote #f) (quote #f)))) ((lambda (t$735$17323) ((lambda (ls/false$735$17325) (if (if ls/false$735$17325 (begin (quote #f) (apply (lambda (con$735$17327 clause*$735$17328 b$735$17329 b*$735$17330) (id?$735$14345 con$735$17327)) ls/false$735$17325)) (quote #f)) (apply (lambda (con$735$17335 clause*$735$17336 b$735$17337 b*$735$17338) ((lambda (outerk$735$17343) (bless$735$14808 (list (list (quote call/cc) (list (quote lambda) (list outerk$735$17343) (list (quote lambda) (quote ()) (list (quote with-exception-handler) (list (quote lambda) (list con$735$17335) (gen-clauses$735$17103 con$735$17335 outerk$735$17343 clause*$735$17336)) (cons (quote lambda) (cons (quote ()) (cons (quote #f) (cons b$735$17337 b*$735$17338))))))))))) (gensym))) ls/false$735$17325) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$17323 (quote ()))))) ((lambda (x$735$17345) (if (syntax-pair?$735$14331 x$735$17345) (begin (quote #f) ((lambda (q$735$17347) (if q$735$17347 (begin (quote #f) ((lambda (r$735$17349) (if r$735$17349 (begin (quote #f) (append q$735$17347 r$735$17349)) (quote #f))) ((lambda (x$735$17351) (if (syntax-pair?$735$14331 x$735$17351) (begin (quote #f) ((lambda (q$735$17353) (if q$735$17353 (begin (quote #f) ((lambda (r$735$17355) (if r$735$17355 (begin (quote #f) (append q$735$17353 r$735$17355)) (quote #f))) ((lambda (x$735$17357) (if (syntax-pair?$735$14331 x$735$17357) (begin (quote #f) ((lambda (q$735$17359) (if q$735$17359 (begin (quote #f) ((lambda (r$735$17361) (if r$735$17361 (begin (quote #f) (append q$735$17359 r$735$17361)) (quote #f))) ((letrec ((f$735$17363 (lambda (x$735$17365) (if (syntax-pair?$735$14331 x$735$17365) ((lambda (cars/f$735$17367) (if cars/f$735$17367 (begin (quote #f) ((lambda (cdrs/f$735$17369) (if cdrs/f$735$17369 (begin (quote #f) (map cons cars/f$735$17367 cdrs/f$735$17369)) (quote #f))) (f$735$17363 (syntax-cdr$735$14343 x$735$17365)))) (quote #f))) ((lambda (x$735$17371) (list x$735$17371)) (syntax-car$735$14339 x$735$17365))) (if (syntax-null?$735$14335 x$735$17365) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$17363) (syntax-cdr$735$14343 x$735$17357)))) (quote #f))) ((lambda (x$735$17373) (list x$735$17373)) (syntax-car$735$14339 x$735$17357)))) (quote #f))) (syntax-cdr$735$14343 x$735$17351)))) (quote #f))) ((lambda (x$735$17375) (if (syntax-pair?$735$14331 x$735$17375) (begin (quote #f) ((lambda (q$735$17377) (if q$735$17377 (begin (quote #f) ((lambda (r$735$17379) (if r$735$17379 (begin (quote #f) (append q$735$17377 r$735$17379)) (quote #f))) ((letrec ((f$735$17381 (lambda (x$735$17383) (if (syntax-pair?$735$14331 x$735$17383) ((lambda (cars/f$735$17385) (if cars/f$735$17385 (begin (quote #f) ((lambda (cdrs/f$735$17387) (if cdrs/f$735$17387 (begin (quote #f) (map cons cars/f$735$17385 cdrs/f$735$17387)) (quote #f))) (f$735$17381 (syntax-cdr$735$14343 x$735$17383)))) (quote #f))) ((lambda (x$735$17389) (list x$735$17389)) (syntax-car$735$14339 x$735$17383))) (if (syntax-null?$735$14335 x$735$17383) (list (begin (quote clause*) (quote ()))) (quote #f)))))) f$735$17381) (syntax-cdr$735$14343 x$735$17375)))) (quote #f))) ((lambda (x$735$17391) (list x$735$17391)) (syntax-car$735$14339 x$735$17375)))) (quote #f))) (syntax-car$735$14339 x$735$17351)))) (quote #f))) (syntax-cdr$735$14343 x$735$17345)))) (quote #f))) ((lambda (x$735$17393) (quote ())) (syntax-car$735$14339 x$735$17345)))) (quote #f))) t$735$17323))) x$735$17101))) (quote #f)))) (set! define-enumeration-macro$735$14820 (lambda (stx$735$17395) ((lambda (set?$735$17397) (begin (set! set?$735$17397 (lambda (x$735$17399) ((lambda (t$735$17401) (if t$735$17401 t$735$17401 (begin (quote #f) (if (not (memq (car x$735$17399) (cdr x$735$17399))) (begin (quote #f) (set?$735$17397 (cdr x$735$17399))) (quote #f))))) (null? x$735$17399)))) ((lambda (t$735$17403) ((lambda (ls/false$735$17405) (if (if ls/false$735$17405 (begin (quote #f) (apply (lambda (name$735$17407 id*$735$17408 maker$735$17409) (if (id?$735$14345 name$735$17407) (if (id?$735$14345 maker$735$17409) (begin (quote #f) (for-all id?$735$14345 id*$735$17408)) (quote #f)) (quote #f))) ls/false$735$17405)) (quote #f)) (apply (lambda (name$735$17413 id*$735$17414 maker$735$17415) ((lambda (name*$735$17419 mk$735$17420) (begin (if (set?$735$17397 name*$735$17419) (void) (error (quote expander) (quote "duplicate names in enumeration set") (strip$735$14363 stx$735$17395 (quote ())))) (bless$735$14808 (list (quote begin) (list (quote define) mk$735$17420 (list (quote enum-set-constructor) (list (quote make-enumeration) (list (quote quote) name*$735$17419)))) (list (quote define-syntax) name$735$17413 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote (_ n)) (quote (identifier? (syntax n))) (list (quote if) (list (quote memq) (quote (syntax->datum (syntax n))) (list (quote quote) name*$735$17419)) (quote (syntax (quote n))) (list (quote syntax-error) (quote x) (quote "not a member of set") (list (quote quote) name*$735$17419))))))) (list (quote define-syntax) maker$735$17415 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote (_ n* ...)) (list (quote begin) (cons (quote for-each) (cons (list (quote lambda) (quote (n)) (quote (unless (identifier? n) (syntax-error x "non-identifier argument"))) (cons (quote unless) (cons (list (quote memq) (quote (syntax->datum n)) (list (quote quote) name*$735$17419)) (quote ((syntax-error n "not a member of set")))))) (quote ((syntax (n* ...)))))) (list (quote syntax) (cons mk$735$17420 (quote ((quote (n* ...))))))))))))))) (syntax->datum$735$15003 id*$735$17414) (gensym))) ls/false$735$17405) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$17403 (quote ()))))) ((lambda (x$735$17423) (if (syntax-pair?$735$14331 x$735$17423) (begin (quote #f) ((lambda (q$735$17425) (if q$735$17425 (begin (quote #f) ((lambda (r$735$17427) (if r$735$17427 (begin (quote #f) (append q$735$17425 r$735$17427)) (quote #f))) ((lambda (x$735$17429) (if (syntax-pair?$735$14331 x$735$17429) (begin (quote #f) ((lambda (q$735$17431) (if q$735$17431 (begin (quote #f) ((lambda (r$735$17433) (if r$735$17433 (begin (quote #f) (append q$735$17431 r$735$17433)) (quote #f))) ((lambda (x$735$17435) (if (syntax-pair?$735$14331 x$735$17435) (begin (quote #f) ((lambda (q$735$17437) (if q$735$17437 (begin (quote #f) ((lambda (r$735$17439) (if r$735$17439 (begin (quote #f) (append q$735$17437 r$735$17439)) (quote #f))) ((lambda (x$735$17441) (if (syntax-pair?$735$14331 x$735$17441) (begin (quote #f) ((lambda (q$735$17443) (if q$735$17443 (begin (quote #f) ((lambda (r$735$17445) (if r$735$17445 (begin (quote #f) (append q$735$17443 r$735$17445)) (quote #f))) ((lambda (x$735$17447) (if (equal? (stx->datum$735$14365 x$735$17447) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17441)))) (quote #f))) ((lambda (x$735$17449) (list x$735$17449)) (syntax-car$735$14339 x$735$17441)))) (quote #f))) (syntax-cdr$735$14343 x$735$17435)))) (quote #f))) ((letrec ((f$735$17451 (lambda (x$735$17453) (if (syntax-pair?$735$14331 x$735$17453) ((lambda (cars/f$735$17455) (if cars/f$735$17455 (begin (quote #f) ((lambda (cdrs/f$735$17457) (if cdrs/f$735$17457 (begin (quote #f) (map cons cars/f$735$17455 cdrs/f$735$17457)) (quote #f))) (f$735$17451 (syntax-cdr$735$14343 x$735$17453)))) (quote #f))) ((lambda (x$735$17459) (list x$735$17459)) (syntax-car$735$14339 x$735$17453))) (if (syntax-null?$735$14335 x$735$17453) (list (begin (quote id*) (quote ()))) (quote #f)))))) f$735$17451) (syntax-car$735$14339 x$735$17435)))) (quote #f))) (syntax-cdr$735$14343 x$735$17429)))) (quote #f))) ((lambda (x$735$17461) (list x$735$17461)) (syntax-car$735$14339 x$735$17429)))) (quote #f))) (syntax-cdr$735$14343 x$735$17423)))) (quote #f))) ((lambda (x$735$17463) (quote ())) (syntax-car$735$14339 x$735$17423)))) (quote #f))) t$735$17403))) stx$735$17395))) (quote #f)))) (set! time-macro$735$14822 (lambda (stx$735$17465) ((lambda (t$735$17467) ((lambda (ls/false$735$17469) (if (if ls/false$735$17469 (begin (quote #f) (apply (lambda (expr$735$17471) (quote #t)) ls/false$735$17469)) (quote #f)) (apply (lambda (expr$735$17473) (bless$735$14808 (list (quote time-it) (list (quote quote) expr$735$17473) (list (quote lambda) (quote ()) expr$735$17473)))) ls/false$735$17469) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$17467 (quote ()))))) ((lambda (x$735$17475) (if (syntax-pair?$735$14331 x$735$17475) (begin (quote #f) ((lambda (q$735$17477) (if q$735$17477 (begin (quote #f) ((lambda (r$735$17479) (if r$735$17479 (begin (quote #f) (append q$735$17477 r$735$17479)) (quote #f))) ((lambda (x$735$17481) (if (syntax-pair?$735$14331 x$735$17481) (begin (quote #f) ((lambda (q$735$17483) (if q$735$17483 (begin (quote #f) ((lambda (r$735$17485) (if r$735$17485 (begin (quote #f) (append q$735$17483 r$735$17485)) (quote #f))) ((lambda (x$735$17487) (if (equal? (stx->datum$735$14365 x$735$17487) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17481)))) (quote #f))) ((lambda (x$735$17489) (list x$735$17489)) (syntax-car$735$14339 x$735$17481)))) (quote #f))) (syntax-cdr$735$14343 x$735$17475)))) (quote #f))) ((lambda (x$735$17491) (quote ())) (syntax-car$735$14339 x$735$17475)))) (quote #f))) t$735$17467))) stx$735$17465))) (set! delay-macro$735$14824 (lambda (stx$735$17493) ((lambda (t$735$17495) ((lambda (ls/false$735$17497) (if (if ls/false$735$17497 (begin (quote #f) (apply (lambda (expr$735$17499) (quote #t)) ls/false$735$17497)) (quote #f)) (apply (lambda (expr$735$17501) (bless$735$14808 (list (quote make-promise) (list (quote lambda) (quote ()) expr$735$17501)))) ls/false$735$17497) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$17495 (quote ()))))) ((lambda (x$735$17503) (if (syntax-pair?$735$14331 x$735$17503) (begin (quote #f) ((lambda (q$735$17505) (if q$735$17505 (begin (quote #f) ((lambda (r$735$17507) (if r$735$17507 (begin (quote #f) (append q$735$17505 r$735$17507)) (quote #f))) ((lambda (x$735$17509) (if (syntax-pair?$735$14331 x$735$17509) (begin (quote #f) ((lambda (q$735$17511) (if q$735$17511 (begin (quote #f) ((lambda (r$735$17513) (if r$735$17513 (begin (quote #f) (append q$735$17511 r$735$17513)) (quote #f))) ((lambda (x$735$17515) (if (equal? (stx->datum$735$14365 x$735$17515) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17509)))) (quote #f))) ((lambda (x$735$17517) (list x$735$17517)) (syntax-car$735$14339 x$735$17509)))) (quote #f))) (syntax-cdr$735$14343 x$735$17503)))) (quote #f))) ((lambda (x$735$17519) (quote ())) (syntax-car$735$14339 x$735$17503)))) (quote #f))) t$735$17495))) stx$735$17493))) (set! assert-macro$735$14826 (lambda (stx$735$17521) ((lambda (t$735$17523) ((lambda (ls/false$735$17525) (if (if ls/false$735$17525 (begin (quote #f) (apply (lambda (expr$735$17527) (quote #t)) ls/false$735$17525)) (quote #f)) (apply (lambda (expr$735$17529) (bless$735$14808 (list (quote unless) expr$735$17529 (list (quote error) (quote (quote assert)) (quote "assertion failed") (list (quote quote) expr$735$17529))))) ls/false$735$17525) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$17523 (quote ()))))) ((lambda (x$735$17531) (if (syntax-pair?$735$14331 x$735$17531) (begin (quote #f) ((lambda (q$735$17533) (if q$735$17533 (begin (quote #f) ((lambda (r$735$17535) (if r$735$17535 (begin (quote #f) (append q$735$17533 r$735$17535)) (quote #f))) ((lambda (x$735$17537) (if (syntax-pair?$735$14331 x$735$17537) (begin (quote #f) ((lambda (q$735$17539) (if q$735$17539 (begin (quote #f) ((lambda (r$735$17541) (if r$735$17541 (begin (quote #f) (append q$735$17539 r$735$17541)) (quote #f))) ((lambda (x$735$17543) (if (equal? (stx->datum$735$14365 x$735$17543) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17537)))) (quote #f))) ((lambda (x$735$17545) (list x$735$17545)) (syntax-car$735$14339 x$735$17537)))) (quote #f))) (syntax-cdr$735$14343 x$735$17531)))) (quote #f))) ((lambda (x$735$17547) (quote ())) (syntax-car$735$14339 x$735$17531)))) (quote #f))) t$735$17523))) stx$735$17521))) (set! endianness-macro$735$14828 (lambda (stx$735$17549) ((lambda (t$735$17551) ((lambda (ls/false$735$17553) (if (if ls/false$735$17553 (begin (quote #f) (apply (lambda (e$735$17555) (quote #t)) ls/false$735$17553)) (quote #f)) (apply (lambda (e$735$17557) ((lambda (t$735$17559) (if (memv t$735$17559 (quote (little))) (bless$735$14808 (quote (quote little))) (if (memv t$735$17559 (quote (big))) (bless$735$14808 (quote (quote big))) (error (quote expander) (quote "endianness must be big or little") (strip$735$14363 stx$735$17549 (quote ())))))) (syntax->datum$735$15003 e$735$17557))) ls/false$735$17553) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$17551 (quote ()))))) ((lambda (x$735$17560) (if (syntax-pair?$735$14331 x$735$17560) (begin (quote #f) ((lambda (q$735$17562) (if q$735$17562 (begin (quote #f) ((lambda (r$735$17564) (if r$735$17564 (begin (quote #f) (append q$735$17562 r$735$17564)) (quote #f))) ((lambda (x$735$17566) (if (syntax-pair?$735$14331 x$735$17566) (begin (quote #f) ((lambda (q$735$17568) (if q$735$17568 (begin (quote #f) ((lambda (r$735$17570) (if r$735$17570 (begin (quote #f) (append q$735$17568 r$735$17570)) (quote #f))) ((lambda (x$735$17572) (if (equal? (stx->datum$735$14365 x$735$17572) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17566)))) (quote #f))) ((lambda (x$735$17574) (list x$735$17574)) (syntax-car$735$14339 x$735$17566)))) (quote #f))) (syntax-cdr$735$14343 x$735$17560)))) (quote #f))) ((lambda (x$735$17576) (quote ())) (syntax-car$735$14339 x$735$17560)))) (quote #f))) t$735$17551))) stx$735$17549))) (set! identifier-syntax-macro$735$14830 (lambda (stx$735$17578) ((lambda (t$735$17580) ((lambda (ls/false$735$17582) (if (if ls/false$735$17582 (begin (quote #f) (apply (lambda (expr$735$17584) (quote #t)) ls/false$735$17582)) (quote #f)) (apply (lambda (expr$735$17586) (bless$735$14808 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) expr$735$17586)) (list (quote (id e* ...)) (quote (identifier? (syntax id))) (cons (quote cons) (cons (list (quote syntax) expr$735$17586) (quote ((syntax (e* ...))))))))))) ls/false$735$17582) ((lambda (t$735$17588) ((lambda (ls/false$735$17590) (if (if ls/false$735$17590 (begin (quote #f) (apply (lambda (id1$735$17592 expr1$735$17593 id2$735$17594 expr2$735$17595 expr3$735$17596) (if (id?$735$14345 id1$735$17592) (if (id?$735$14345 id2$735$17594) (begin (quote #f) (id?$735$14345 expr2$735$17595)) (quote #f)) (quote #f))) ls/false$735$17590)) (quote #f)) (apply (lambda (id1$735$17602 expr1$735$17603 id2$735$17604 expr2$735$17605 expr3$735$17606) (bless$735$14808 (list (quote cons) (quote (quote macro!)) (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote (set!)) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) expr1$735$17603)) (list (list (quote set!) (quote id) expr2$735$17605) (list (quote syntax) expr3$735$17606)) (list (quote (id e* ...)) (quote (identifier? (syntax id))) (list (quote syntax) (cons expr1$735$17603 (quote (e* ...)))))))))) ls/false$735$17590) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$17588 (quote ()))))) ((lambda (x$735$17612) (if (syntax-pair?$735$14331 x$735$17612) (begin (quote #f) ((lambda (q$735$17614) (if q$735$17614 (begin (quote #f) ((lambda (r$735$17616) (if r$735$17616 (begin (quote #f) (append q$735$17614 r$735$17616)) (quote #f))) ((lambda (x$735$17618) (if (syntax-pair?$735$14331 x$735$17618) (begin (quote #f) ((lambda (q$735$17620) (if q$735$17620 (begin (quote #f) ((lambda (r$735$17622) (if r$735$17622 (begin (quote #f) (append q$735$17620 r$735$17622)) (quote #f))) ((lambda (x$735$17624) (if (syntax-pair?$735$14331 x$735$17624) (begin (quote #f) ((lambda (q$735$17626) (if q$735$17626 (begin (quote #f) ((lambda (r$735$17628) (if r$735$17628 (begin (quote #f) (append q$735$17626 r$735$17628)) (quote #f))) ((lambda (x$735$17630) (if (equal? (stx->datum$735$14365 x$735$17630) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17624)))) (quote #f))) ((lambda (x$735$17632) (if (syntax-pair?$735$14331 x$735$17632) (begin (quote #f) ((lambda (q$735$17634) (if q$735$17634 (begin (quote #f) ((lambda (r$735$17636) (if r$735$17636 (begin (quote #f) (append q$735$17634 r$735$17636)) (quote #f))) ((lambda (x$735$17638) (if (syntax-pair?$735$14331 x$735$17638) (begin (quote #f) ((lambda (q$735$17640) (if q$735$17640 (begin (quote #f) ((lambda (r$735$17642) (if r$735$17642 (begin (quote #f) (append q$735$17640 r$735$17642)) (quote #f))) ((lambda (x$735$17644) (if (equal? (stx->datum$735$14365 x$735$17644) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17638)))) (quote #f))) ((lambda (x$735$17646) (list x$735$17646)) (syntax-car$735$14339 x$735$17638)))) (quote #f))) (syntax-cdr$735$14343 x$735$17632)))) (quote #f))) ((lambda (x$735$17648) (if (syntax-pair?$735$14331 x$735$17648) (begin (quote #f) ((lambda (q$735$17650) (if q$735$17650 (begin (quote #f) ((lambda (r$735$17652) (if r$735$17652 (begin (quote #f) (append q$735$17650 r$735$17652)) (quote #f))) ((lambda (x$735$17654) (if (syntax-pair?$735$14331 x$735$17654) (begin (quote #f) ((lambda (q$735$17656) (if q$735$17656 (begin (quote #f) ((lambda (r$735$17658) (if r$735$17658 (begin (quote #f) (append q$735$17656 r$735$17658)) (quote #f))) ((lambda (x$735$17660) (if (syntax-pair?$735$14331 x$735$17660) (begin (quote #f) ((lambda (q$735$17662) (if q$735$17662 (begin (quote #f) ((lambda (r$735$17664) (if r$735$17664 (begin (quote #f) (append q$735$17662 r$735$17664)) (quote #f))) ((lambda (x$735$17666) (if (equal? (stx->datum$735$14365 x$735$17666) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17660)))) (quote #f))) ((lambda (x$735$17668) (list x$735$17668)) (syntax-car$735$14339 x$735$17660)))) (quote #f))) (syntax-cdr$735$14343 x$735$17654)))) (quote #f))) ((lambda (x$735$17670) (list x$735$17670)) (syntax-car$735$14339 x$735$17654)))) (quote #f))) (syntax-cdr$735$14343 x$735$17648)))) (quote #f))) ((lambda (x$735$17672) (if (id?$735$14345 x$735$17672) (if (free-id=?$735$14353 x$735$17672 (scheme-stx$735$14774 (quote set!))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$17648)))) (quote #f))) (syntax-car$735$14339 x$735$17632)))) (quote #f))) (syntax-car$735$14339 x$735$17624)))) (quote #f))) (syntax-cdr$735$14343 x$735$17618)))) (quote #f))) ((lambda (x$735$17674) (if (syntax-pair?$735$14331 x$735$17674) (begin (quote #f) ((lambda (q$735$17676) (if q$735$17676 (begin (quote #f) ((lambda (r$735$17678) (if r$735$17678 (begin (quote #f) (append q$735$17676 r$735$17678)) (quote #f))) ((lambda (x$735$17680) (if (syntax-pair?$735$14331 x$735$17680) (begin (quote #f) ((lambda (q$735$17682) (if q$735$17682 (begin (quote #f) ((lambda (r$735$17684) (if r$735$17684 (begin (quote #f) (append q$735$17682 r$735$17684)) (quote #f))) ((lambda (x$735$17686) (if (equal? (stx->datum$735$14365 x$735$17686) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17680)))) (quote #f))) ((lambda (x$735$17688) (list x$735$17688)) (syntax-car$735$14339 x$735$17680)))) (quote #f))) (syntax-cdr$735$14343 x$735$17674)))) (quote #f))) ((lambda (x$735$17690) (list x$735$17690)) (syntax-car$735$14339 x$735$17674)))) (quote #f))) (syntax-car$735$14339 x$735$17618)))) (quote #f))) (syntax-cdr$735$14343 x$735$17612)))) (quote #f))) ((lambda (x$735$17692) (quote ())) (syntax-car$735$14339 x$735$17612)))) (quote #f))) t$735$17588))) t$735$17580))) ((lambda (x$735$17694) (if (syntax-pair?$735$14331 x$735$17694) (begin (quote #f) ((lambda (q$735$17696) (if q$735$17696 (begin (quote #f) ((lambda (r$735$17698) (if r$735$17698 (begin (quote #f) (append q$735$17696 r$735$17698)) (quote #f))) ((lambda (x$735$17700) (if (syntax-pair?$735$14331 x$735$17700) (begin (quote #f) ((lambda (q$735$17702) (if q$735$17702 (begin (quote #f) ((lambda (r$735$17704) (if r$735$17704 (begin (quote #f) (append q$735$17702 r$735$17704)) (quote #f))) ((lambda (x$735$17706) (if (equal? (stx->datum$735$14365 x$735$17706) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17700)))) (quote #f))) ((lambda (x$735$17708) (list x$735$17708)) (syntax-car$735$14339 x$735$17700)))) (quote #f))) (syntax-cdr$735$14343 x$735$17694)))) (quote #f))) ((lambda (x$735$17710) (quote ())) (syntax-car$735$14339 x$735$17694)))) (quote #f))) t$735$17580))) stx$735$17578))) (set! do-macro$735$14832 (lambda (stx$735$17712) ((lambda (bind$735$17714) (begin (set! bind$735$17714 (lambda (x$735$17716) ((lambda (t$735$17718) ((lambda (ls/false$735$17720) (if (if ls/false$735$17720 (begin (quote #f) (apply (lambda (x$735$17722 init$735$17723) (quote #t)) ls/false$735$17720)) (quote #f)) (apply (lambda (x$735$17726 init$735$17727) (list x$735$17726 init$735$17727 x$735$17726)) ls/false$735$17720) ((lambda (t$735$17730) ((lambda (ls/false$735$17732) (if (if ls/false$735$17732 (begin (quote #f) (apply (lambda (x$735$17734 init$735$17735 step$735$17736) (quote #t)) ls/false$735$17732)) (quote #f)) (apply (lambda (x$735$17740 init$735$17741 step$735$17742) (list x$735$17740 init$735$17741 step$735$17742)) ls/false$735$17732) ((lambda (t$735$17746) ((lambda (ls/false$735$17748) (if (if ls/false$735$17748 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$17748)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid binding") (strip$735$14363 stx$735$17712 (quote ())))) ls/false$735$17748) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$17746 (quote ()))))) ((lambda (x$735$17750) (quote ())) t$735$17746))) t$735$17730))) ((lambda (x$735$17752) (if (syntax-pair?$735$14331 x$735$17752) (begin (quote #f) ((lambda (q$735$17754) (if q$735$17754 (begin (quote #f) ((lambda (r$735$17756) (if r$735$17756 (begin (quote #f) (append q$735$17754 r$735$17756)) (quote #f))) ((lambda (x$735$17758) (if (syntax-pair?$735$14331 x$735$17758) (begin (quote #f) ((lambda (q$735$17760) (if q$735$17760 (begin (quote #f) ((lambda (r$735$17762) (if r$735$17762 (begin (quote #f) (append q$735$17760 r$735$17762)) (quote #f))) ((lambda (x$735$17764) (if (syntax-pair?$735$14331 x$735$17764) (begin (quote #f) ((lambda (q$735$17766) (if q$735$17766 (begin (quote #f) ((lambda (r$735$17768) (if r$735$17768 (begin (quote #f) (append q$735$17766 r$735$17768)) (quote #f))) ((lambda (x$735$17770) (if (equal? (stx->datum$735$14365 x$735$17770) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17764)))) (quote #f))) ((lambda (x$735$17772) (list x$735$17772)) (syntax-car$735$14339 x$735$17764)))) (quote #f))) (syntax-cdr$735$14343 x$735$17758)))) (quote #f))) ((lambda (x$735$17774) (list x$735$17774)) (syntax-car$735$14339 x$735$17758)))) (quote #f))) (syntax-cdr$735$14343 x$735$17752)))) (quote #f))) ((lambda (x$735$17776) (list x$735$17776)) (syntax-car$735$14339 x$735$17752)))) (quote #f))) t$735$17730))) t$735$17718))) ((lambda (x$735$17778) (if (syntax-pair?$735$14331 x$735$17778) (begin (quote #f) ((lambda (q$735$17780) (if q$735$17780 (begin (quote #f) ((lambda (r$735$17782) (if r$735$17782 (begin (quote #f) (append q$735$17780 r$735$17782)) (quote #f))) ((lambda (x$735$17784) (if (syntax-pair?$735$14331 x$735$17784) (begin (quote #f) ((lambda (q$735$17786) (if q$735$17786 (begin (quote #f) ((lambda (r$735$17788) (if r$735$17788 (begin (quote #f) (append q$735$17786 r$735$17788)) (quote #f))) ((lambda (x$735$17790) (if (equal? (stx->datum$735$14365 x$735$17790) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17784)))) (quote #f))) ((lambda (x$735$17792) (list x$735$17792)) (syntax-car$735$14339 x$735$17784)))) (quote #f))) (syntax-cdr$735$14343 x$735$17778)))) (quote #f))) ((lambda (x$735$17794) (list x$735$17794)) (syntax-car$735$14339 x$735$17778)))) (quote #f))) t$735$17718))) x$735$17716))) ((lambda (t$735$17796) ((lambda (ls/false$735$17798) (if (if ls/false$735$17798 (begin (quote #f) (apply (lambda (binding*$735$17800 test$735$17801 expr*$735$17802 command*$735$17803) (quote #t)) ls/false$735$17798)) (quote #f)) (apply (lambda (binding*$735$17808 test$735$17809 expr*$735$17810 command*$735$17811) ((lambda (t$735$17816) ((lambda (ls/false$735$17818) (if (if ls/false$735$17818 (begin (quote #f) (apply (lambda (x*$735$17820 init*$735$17821 step*$735$17822) (quote #t)) ls/false$735$17818)) (quote #f)) (apply (lambda (x*$735$17826 init*$735$17827 step*$735$17828) (if (valid-bound-ids?$735$14355 x*$735$17826) (bless$735$14808 (list (quote letrec) (list (list (quote loop) (list (quote lambda) x*$735$17826 (list (quote if) test$735$17809 (cons (quote begin) (cons (quote (if #f #f)) expr*$735$17810)) (cons (quote begin) (append command*$735$17811 (list (cons (quote loop) step*$735$17828)))))))) (cons (quote loop) init*$735$17827))) (error (quote expander) (quote "invalid bindings") (strip$735$14363 stx$735$17712 (quote ()))))) ls/false$735$17818) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$17816 (quote ()))))) ((letrec ((f$735$17832 (lambda (x$735$17834) (if (syntax-pair?$735$14331 x$735$17834) ((lambda (cars/f$735$17836) (if cars/f$735$17836 (begin (quote #f) ((lambda (cdrs/f$735$17838) (if cdrs/f$735$17838 (begin (quote #f) (map cons cars/f$735$17836 cdrs/f$735$17838)) (quote #f))) (f$735$17832 (syntax-cdr$735$14343 x$735$17834)))) (quote #f))) ((lambda (x$735$17840) (if (syntax-pair?$735$14331 x$735$17840) (begin (quote #f) ((lambda (q$735$17842) (if q$735$17842 (begin (quote #f) ((lambda (r$735$17844) (if r$735$17844 (begin (quote #f) (append q$735$17842 r$735$17844)) (quote #f))) ((lambda (x$735$17846) (if (syntax-pair?$735$14331 x$735$17846) (begin (quote #f) ((lambda (q$735$17848) (if q$735$17848 (begin (quote #f) ((lambda (r$735$17850) (if r$735$17850 (begin (quote #f) (append q$735$17848 r$735$17850)) (quote #f))) ((lambda (x$735$17852) (if (syntax-pair?$735$14331 x$735$17852) (begin (quote #f) ((lambda (q$735$17854) (if q$735$17854 (begin (quote #f) ((lambda (r$735$17856) (if r$735$17856 (begin (quote #f) (append q$735$17854 r$735$17856)) (quote #f))) ((lambda (x$735$17858) (if (equal? (stx->datum$735$14365 x$735$17858) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17852)))) (quote #f))) ((lambda (x$735$17860) (list x$735$17860)) (syntax-car$735$14339 x$735$17852)))) (quote #f))) (syntax-cdr$735$14343 x$735$17846)))) (quote #f))) ((lambda (x$735$17862) (list x$735$17862)) (syntax-car$735$14339 x$735$17846)))) (quote #f))) (syntax-cdr$735$14343 x$735$17840)))) (quote #f))) ((lambda (x$735$17864) (list x$735$17864)) (syntax-car$735$14339 x$735$17840)))) (quote #f))) (syntax-car$735$14339 x$735$17834))) (if (syntax-null?$735$14335 x$735$17834) (list (begin (quote x*) (quote ())) (begin (quote init*) (quote ())) (begin (quote step*) (quote ()))) (quote #f)))))) f$735$17832) t$735$17816))) (map bind$735$17714 binding*$735$17808))) ls/false$735$17798) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$17796 (quote ()))))) ((lambda (x$735$17866) (if (syntax-pair?$735$14331 x$735$17866) (begin (quote #f) ((lambda (q$735$17868) (if q$735$17868 (begin (quote #f) ((lambda (r$735$17870) (if r$735$17870 (begin (quote #f) (append q$735$17868 r$735$17870)) (quote #f))) ((lambda (x$735$17872) (if (syntax-pair?$735$14331 x$735$17872) (begin (quote #f) ((lambda (q$735$17874) (if q$735$17874 (begin (quote #f) ((lambda (r$735$17876) (if r$735$17876 (begin (quote #f) (append q$735$17874 r$735$17876)) (quote #f))) ((lambda (x$735$17878) (if (syntax-pair?$735$14331 x$735$17878) (begin (quote #f) ((lambda (q$735$17880) (if q$735$17880 (begin (quote #f) ((lambda (r$735$17882) (if r$735$17882 (begin (quote #f) (append q$735$17880 r$735$17882)) (quote #f))) ((letrec ((f$735$17884 (lambda (x$735$17886) (if (syntax-pair?$735$14331 x$735$17886) ((lambda (cars/f$735$17888) (if cars/f$735$17888 (begin (quote #f) ((lambda (cdrs/f$735$17890) (if cdrs/f$735$17890 (begin (quote #f) (map cons cars/f$735$17888 cdrs/f$735$17890)) (quote #f))) (f$735$17884 (syntax-cdr$735$14343 x$735$17886)))) (quote #f))) ((lambda (x$735$17892) (list x$735$17892)) (syntax-car$735$14339 x$735$17886))) (if (syntax-null?$735$14335 x$735$17886) (list (begin (quote command*) (quote ()))) (quote #f)))))) f$735$17884) (syntax-cdr$735$14343 x$735$17878)))) (quote #f))) ((lambda (x$735$17894) (if (syntax-pair?$735$14331 x$735$17894) (begin (quote #f) ((lambda (q$735$17896) (if q$735$17896 (begin (quote #f) ((lambda (r$735$17898) (if r$735$17898 (begin (quote #f) (append q$735$17896 r$735$17898)) (quote #f))) ((letrec ((f$735$17900 (lambda (x$735$17902) (if (syntax-pair?$735$14331 x$735$17902) ((lambda (cars/f$735$17904) (if cars/f$735$17904 (begin (quote #f) ((lambda (cdrs/f$735$17906) (if cdrs/f$735$17906 (begin (quote #f) (map cons cars/f$735$17904 cdrs/f$735$17906)) (quote #f))) (f$735$17900 (syntax-cdr$735$14343 x$735$17902)))) (quote #f))) ((lambda (x$735$17908) (list x$735$17908)) (syntax-car$735$14339 x$735$17902))) (if (syntax-null?$735$14335 x$735$17902) (list (begin (quote expr*) (quote ()))) (quote #f)))))) f$735$17900) (syntax-cdr$735$14343 x$735$17894)))) (quote #f))) ((lambda (x$735$17910) (list x$735$17910)) (syntax-car$735$14339 x$735$17894)))) (quote #f))) (syntax-car$735$14339 x$735$17878)))) (quote #f))) (syntax-cdr$735$14343 x$735$17872)))) (quote #f))) ((letrec ((f$735$17912 (lambda (x$735$17914) (if (syntax-pair?$735$14331 x$735$17914) ((lambda (cars/f$735$17916) (if cars/f$735$17916 (begin (quote #f) ((lambda (cdrs/f$735$17918) (if cdrs/f$735$17918 (begin (quote #f) (map cons cars/f$735$17916 cdrs/f$735$17918)) (quote #f))) (f$735$17912 (syntax-cdr$735$14343 x$735$17914)))) (quote #f))) ((lambda (x$735$17920) (list x$735$17920)) (syntax-car$735$14339 x$735$17914))) (if (syntax-null?$735$14335 x$735$17914) (list (begin (quote binding*) (quote ()))) (quote #f)))))) f$735$17912) (syntax-car$735$14339 x$735$17872)))) (quote #f))) (syntax-cdr$735$14343 x$735$17866)))) (quote #f))) ((lambda (x$735$17922) (quote ())) (syntax-car$735$14339 x$735$17866)))) (quote #f))) t$735$17796))) stx$735$17712))) (quote #f)))) (set! let*-macro$735$14834 (lambda (stx$735$17924) ((lambda (t$735$17926) ((lambda (ls/false$735$17928) (if (if ls/false$735$17928 (begin (quote #f) (apply (lambda (lhs*$735$17930 rhs*$735$17931 b$735$17932 b*$735$17933) (for-all id?$735$14345 lhs*$735$17930)) ls/false$735$17928)) (quote #f)) (apply (lambda (lhs*$735$17938 rhs*$735$17939 b$735$17940 b*$735$17941) (bless$735$14808 (letrec ((f$735$17946 (lambda (x*$735$17948) (if (null? x*$735$17948) (cons (quote let) (cons (quote ()) (cons b$735$17940 b*$735$17941))) (list (quote let) (list (car x*$735$17948)) (f$735$17946 (cdr x*$735$17948))))))) (f$735$17946 (map list lhs*$735$17938 rhs*$735$17939))))) ls/false$735$17928) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$17926 (quote ()))))) ((lambda (x$735$17950) (if (syntax-pair?$735$14331 x$735$17950) (begin (quote #f) ((lambda (q$735$17952) (if q$735$17952 (begin (quote #f) ((lambda (r$735$17954) (if r$735$17954 (begin (quote #f) (append q$735$17952 r$735$17954)) (quote #f))) ((lambda (x$735$17956) (if (syntax-pair?$735$14331 x$735$17956) (begin (quote #f) ((lambda (q$735$17958) (if q$735$17958 (begin (quote #f) ((lambda (r$735$17960) (if r$735$17960 (begin (quote #f) (append q$735$17958 r$735$17960)) (quote #f))) ((lambda (x$735$17962) (if (syntax-pair?$735$14331 x$735$17962) (begin (quote #f) ((lambda (q$735$17964) (if q$735$17964 (begin (quote #f) ((lambda (r$735$17966) (if r$735$17966 (begin (quote #f) (append q$735$17964 r$735$17966)) (quote #f))) ((letrec ((f$735$17968 (lambda (x$735$17970) (if (syntax-pair?$735$14331 x$735$17970) ((lambda (cars/f$735$17972) (if cars/f$735$17972 (begin (quote #f) ((lambda (cdrs/f$735$17974) (if cdrs/f$735$17974 (begin (quote #f) (map cons cars/f$735$17972 cdrs/f$735$17974)) (quote #f))) (f$735$17968 (syntax-cdr$735$14343 x$735$17970)))) (quote #f))) ((lambda (x$735$17976) (list x$735$17976)) (syntax-car$735$14339 x$735$17970))) (if (syntax-null?$735$14335 x$735$17970) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$17968) (syntax-cdr$735$14343 x$735$17962)))) (quote #f))) ((lambda (x$735$17978) (list x$735$17978)) (syntax-car$735$14339 x$735$17962)))) (quote #f))) (syntax-cdr$735$14343 x$735$17956)))) (quote #f))) ((letrec ((f$735$17980 (lambda (x$735$17982) (if (syntax-pair?$735$14331 x$735$17982) ((lambda (cars/f$735$17984) (if cars/f$735$17984 (begin (quote #f) ((lambda (cdrs/f$735$17986) (if cdrs/f$735$17986 (begin (quote #f) (map cons cars/f$735$17984 cdrs/f$735$17986)) (quote #f))) (f$735$17980 (syntax-cdr$735$14343 x$735$17982)))) (quote #f))) ((lambda (x$735$17988) (if (syntax-pair?$735$14331 x$735$17988) (begin (quote #f) ((lambda (q$735$17990) (if q$735$17990 (begin (quote #f) ((lambda (r$735$17992) (if r$735$17992 (begin (quote #f) (append q$735$17990 r$735$17992)) (quote #f))) ((lambda (x$735$17994) (if (syntax-pair?$735$14331 x$735$17994) (begin (quote #f) ((lambda (q$735$17996) (if q$735$17996 (begin (quote #f) ((lambda (r$735$17998) (if r$735$17998 (begin (quote #f) (append q$735$17996 r$735$17998)) (quote #f))) ((lambda (x$735$18000) (if (equal? (stx->datum$735$14365 x$735$18000) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$17994)))) (quote #f))) ((lambda (x$735$18002) (list x$735$18002)) (syntax-car$735$14339 x$735$17994)))) (quote #f))) (syntax-cdr$735$14343 x$735$17988)))) (quote #f))) ((lambda (x$735$18004) (list x$735$18004)) (syntax-car$735$14339 x$735$17988)))) (quote #f))) (syntax-car$735$14339 x$735$17982))) (if (syntax-null?$735$14335 x$735$17982) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$735$17980) (syntax-car$735$14339 x$735$17956)))) (quote #f))) (syntax-cdr$735$14343 x$735$17950)))) (quote #f))) ((lambda (x$735$18006) (quote ())) (syntax-car$735$14339 x$735$17950)))) (quote #f))) t$735$17926))) stx$735$17924))) (set! or-macro$735$14836 (lambda (stx$735$18008) ((lambda (t$735$18010) ((lambda (ls/false$735$18012) (if (if ls/false$735$18012 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$18012)) (quote #f)) (apply (lambda () (quote #f)) ls/false$735$18012) ((lambda (t$735$18014) ((lambda (ls/false$735$18016) (if (if ls/false$735$18016 (begin (quote #f) (apply (lambda (e$735$18018 e*$735$18019) (quote #t)) ls/false$735$18016)) (quote #f)) (apply (lambda (e$735$18022 e*$735$18023) (bless$735$14808 (letrec ((f$735$18026 (lambda (e$735$18028 e*$735$18029) (if (null? e*$735$18029) (list (quote begin) (quote #f) e$735$18028) (list (quote let) (list (list (quote t) e$735$18028)) (list (quote if) (quote t) (quote t) (f$735$18026 (car e*$735$18029) (cdr e*$735$18029)))))))) (f$735$18026 e$735$18022 e*$735$18023)))) ls/false$735$18016) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$18014 (quote ()))))) ((lambda (x$735$18032) (if (syntax-pair?$735$14331 x$735$18032) (begin (quote #f) ((lambda (q$735$18034) (if q$735$18034 (begin (quote #f) ((lambda (r$735$18036) (if r$735$18036 (begin (quote #f) (append q$735$18034 r$735$18036)) (quote #f))) ((lambda (x$735$18038) (if (syntax-pair?$735$14331 x$735$18038) (begin (quote #f) ((lambda (q$735$18040) (if q$735$18040 (begin (quote #f) ((lambda (r$735$18042) (if r$735$18042 (begin (quote #f) (append q$735$18040 r$735$18042)) (quote #f))) ((letrec ((f$735$18044 (lambda (x$735$18046) (if (syntax-pair?$735$14331 x$735$18046) ((lambda (cars/f$735$18048) (if cars/f$735$18048 (begin (quote #f) ((lambda (cdrs/f$735$18050) (if cdrs/f$735$18050 (begin (quote #f) (map cons cars/f$735$18048 cdrs/f$735$18050)) (quote #f))) (f$735$18044 (syntax-cdr$735$14343 x$735$18046)))) (quote #f))) ((lambda (x$735$18052) (list x$735$18052)) (syntax-car$735$14339 x$735$18046))) (if (syntax-null?$735$14335 x$735$18046) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$735$18044) (syntax-cdr$735$14343 x$735$18038)))) (quote #f))) ((lambda (x$735$18054) (list x$735$18054)) (syntax-car$735$14339 x$735$18038)))) (quote #f))) (syntax-cdr$735$14343 x$735$18032)))) (quote #f))) ((lambda (x$735$18056) (quote ())) (syntax-car$735$14339 x$735$18032)))) (quote #f))) t$735$18014))) t$735$18010))) ((lambda (x$735$18058) (if (syntax-pair?$735$14331 x$735$18058) (begin (quote #f) ((lambda (q$735$18060) (if q$735$18060 (begin (quote #f) ((lambda (r$735$18062) (if r$735$18062 (begin (quote #f) (append q$735$18060 r$735$18062)) (quote #f))) ((lambda (x$735$18064) (if (equal? (stx->datum$735$14365 x$735$18064) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$18058)))) (quote #f))) ((lambda (x$735$18066) (quote ())) (syntax-car$735$14339 x$735$18058)))) (quote #f))) t$735$18010))) stx$735$18008))) (set! and-macro$735$14838 (lambda (stx$735$18068) ((lambda (t$735$18070) ((lambda (ls/false$735$18072) (if (if ls/false$735$18072 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$18072)) (quote #f)) (apply (lambda () (quote #t)) ls/false$735$18072) ((lambda (t$735$18074) ((lambda (ls/false$735$18076) (if (if ls/false$735$18076 (begin (quote #f) (apply (lambda (e$735$18078 e*$735$18079) (quote #t)) ls/false$735$18076)) (quote #f)) (apply (lambda (e$735$18082 e*$735$18083) (bless$735$14808 (letrec ((f$735$18086 (lambda (e$735$18088 e*$735$18089) (if (null? e*$735$18089) (list (quote begin) (quote #f) e$735$18088) (cons (quote if) (cons e$735$18088 (cons (f$735$18086 (car e*$735$18089) (cdr e*$735$18089)) (quote (#f))))))))) (f$735$18086 e$735$18082 e*$735$18083)))) ls/false$735$18076) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$18074 (quote ()))))) ((lambda (x$735$18092) (if (syntax-pair?$735$14331 x$735$18092) (begin (quote #f) ((lambda (q$735$18094) (if q$735$18094 (begin (quote #f) ((lambda (r$735$18096) (if r$735$18096 (begin (quote #f) (append q$735$18094 r$735$18096)) (quote #f))) ((lambda (x$735$18098) (if (syntax-pair?$735$14331 x$735$18098) (begin (quote #f) ((lambda (q$735$18100) (if q$735$18100 (begin (quote #f) ((lambda (r$735$18102) (if r$735$18102 (begin (quote #f) (append q$735$18100 r$735$18102)) (quote #f))) ((letrec ((f$735$18104 (lambda (x$735$18106) (if (syntax-pair?$735$14331 x$735$18106) ((lambda (cars/f$735$18108) (if cars/f$735$18108 (begin (quote #f) ((lambda (cdrs/f$735$18110) (if cdrs/f$735$18110 (begin (quote #f) (map cons cars/f$735$18108 cdrs/f$735$18110)) (quote #f))) (f$735$18104 (syntax-cdr$735$14343 x$735$18106)))) (quote #f))) ((lambda (x$735$18112) (list x$735$18112)) (syntax-car$735$14339 x$735$18106))) (if (syntax-null?$735$14335 x$735$18106) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$735$18104) (syntax-cdr$735$14343 x$735$18098)))) (quote #f))) ((lambda (x$735$18114) (list x$735$18114)) (syntax-car$735$14339 x$735$18098)))) (quote #f))) (syntax-cdr$735$14343 x$735$18092)))) (quote #f))) ((lambda (x$735$18116) (quote ())) (syntax-car$735$14339 x$735$18092)))) (quote #f))) t$735$18074))) t$735$18070))) ((lambda (x$735$18118) (if (syntax-pair?$735$14331 x$735$18118) (begin (quote #f) ((lambda (q$735$18120) (if q$735$18120 (begin (quote #f) ((lambda (r$735$18122) (if r$735$18122 (begin (quote #f) (append q$735$18120 r$735$18122)) (quote #f))) ((lambda (x$735$18124) (if (equal? (stx->datum$735$14365 x$735$18124) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$18118)))) (quote #f))) ((lambda (x$735$18126) (quote ())) (syntax-car$735$14339 x$735$18118)))) (quote #f))) t$735$18070))) stx$735$18068))) (set! cond-macro$735$14840 (lambda (stx$735$18128) ((lambda (t$735$18130) ((lambda (ls/false$735$18132) (if (if ls/false$735$18132 (begin (quote #f) (apply (lambda (cls$735$18134 cls*$735$18135) (quote #t)) ls/false$735$18132)) (quote #f)) (apply (lambda (cls$735$18138 cls*$735$18139) (bless$735$14808 (letrec ((f$735$18142 (lambda (cls$735$18144 cls*$735$18145) (if (null? cls*$735$18145) ((lambda (t$735$18148) ((lambda (ls/false$735$18150) (if (if ls/false$735$18150 (begin (quote #f) (apply (lambda (e$735$18152 e*$735$18153) (quote #t)) ls/false$735$18150)) (quote #f)) (apply (lambda (e$735$18156 e*$735$18157) (cons (quote begin) (cons e$735$18156 e*$735$18157))) ls/false$735$18150) ((lambda (t$735$18160) ((lambda (ls/false$735$18162) (if (if ls/false$735$18162 (begin (quote #f) (apply (lambda (e$735$18164 p$735$18165) (quote #t)) ls/false$735$18162)) (quote #f)) (apply (lambda (e$735$18168 p$735$18169) (list (quote let) (list (list (quote t) e$735$18168)) (list (quote if) (quote t) (cons p$735$18169 (quote (t)))))) ls/false$735$18162) ((lambda (t$735$18172) ((lambda (ls/false$735$18174) (if (if ls/false$735$18174 (begin (quote #f) (apply (lambda (e$735$18176) (quote #t)) ls/false$735$18174)) (quote #f)) (apply (lambda (e$735$18178) (cons (quote or) (cons e$735$18178 (quote ((if #f #f)))))) ls/false$735$18174) ((lambda (t$735$18180) ((lambda (ls/false$735$18182) (if (if ls/false$735$18182 (begin (quote #f) (apply (lambda (e$735$18184 e*$735$18185) (quote #t)) ls/false$735$18182)) (quote #f)) (apply (lambda (e$735$18188 e*$735$18189) (list (quote if) e$735$18188 (cons (quote begin) e*$735$18189))) ls/false$735$18182) ((lambda (t$735$18192) ((lambda (ls/false$735$18194) (if (if ls/false$735$18194 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$18194)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid last clause") (strip$735$14363 stx$735$18128 (quote ())))) ls/false$735$18194) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$18192 (quote ()))))) ((lambda (x$735$18196) (quote ())) t$735$18192))) t$735$18180))) ((lambda (x$735$18198) (if (syntax-pair?$735$14331 x$735$18198) (begin (quote #f) ((lambda (q$735$18200) (if q$735$18200 (begin (quote #f) ((lambda (r$735$18202) (if r$735$18202 (begin (quote #f) (append q$735$18200 r$735$18202)) (quote #f))) ((letrec ((f$735$18204 (lambda (x$735$18206) (if (syntax-pair?$735$14331 x$735$18206) ((lambda (cars/f$735$18208) (if cars/f$735$18208 (begin (quote #f) ((lambda (cdrs/f$735$18210) (if cdrs/f$735$18210 (begin (quote #f) (map cons cars/f$735$18208 cdrs/f$735$18210)) (quote #f))) (f$735$18204 (syntax-cdr$735$14343 x$735$18206)))) (quote #f))) ((lambda (x$735$18212) (list x$735$18212)) (syntax-car$735$14339 x$735$18206))) (if (syntax-null?$735$14335 x$735$18206) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$735$18204) (syntax-cdr$735$14343 x$735$18198)))) (quote #f))) ((lambda (x$735$18214) (list x$735$18214)) (syntax-car$735$14339 x$735$18198)))) (quote #f))) t$735$18180))) t$735$18172))) ((lambda (x$735$18216) (if (syntax-pair?$735$14331 x$735$18216) (begin (quote #f) ((lambda (q$735$18218) (if q$735$18218 (begin (quote #f) ((lambda (r$735$18220) (if r$735$18220 (begin (quote #f) (append q$735$18218 r$735$18220)) (quote #f))) ((lambda (x$735$18222) (if (equal? (stx->datum$735$14365 x$735$18222) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$18216)))) (quote #f))) ((lambda (x$735$18224) (list x$735$18224)) (syntax-car$735$14339 x$735$18216)))) (quote #f))) t$735$18172))) t$735$18160))) ((lambda (x$735$18226) (if (syntax-pair?$735$14331 x$735$18226) (begin (quote #f) ((lambda (q$735$18228) (if q$735$18228 (begin (quote #f) ((lambda (r$735$18230) (if r$735$18230 (begin (quote #f) (append q$735$18228 r$735$18230)) (quote #f))) ((lambda (x$735$18232) (if (syntax-pair?$735$14331 x$735$18232) (begin (quote #f) ((lambda (q$735$18234) (if q$735$18234 (begin (quote #f) ((lambda (r$735$18236) (if r$735$18236 (begin (quote #f) (append q$735$18234 r$735$18236)) (quote #f))) ((lambda (x$735$18238) (if (syntax-pair?$735$14331 x$735$18238) (begin (quote #f) ((lambda (q$735$18240) (if q$735$18240 (begin (quote #f) ((lambda (r$735$18242) (if r$735$18242 (begin (quote #f) (append q$735$18240 r$735$18242)) (quote #f))) ((lambda (x$735$18244) (if (equal? (stx->datum$735$14365 x$735$18244) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$18238)))) (quote #f))) ((lambda (x$735$18246) (list x$735$18246)) (syntax-car$735$14339 x$735$18238)))) (quote #f))) (syntax-cdr$735$14343 x$735$18232)))) (quote #f))) ((lambda (x$735$18248) (if (id?$735$14345 x$735$18248) (if (free-id=?$735$14353 x$735$18248 (scheme-stx$735$14774 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$18232)))) (quote #f))) (syntax-cdr$735$14343 x$735$18226)))) (quote #f))) ((lambda (x$735$18250) (list x$735$18250)) (syntax-car$735$14339 x$735$18226)))) (quote #f))) t$735$18160))) t$735$18148))) ((lambda (x$735$18252) (if (syntax-pair?$735$14331 x$735$18252) (begin (quote #f) ((lambda (q$735$18254) (if q$735$18254 (begin (quote #f) ((lambda (r$735$18256) (if r$735$18256 (begin (quote #f) (append q$735$18254 r$735$18256)) (quote #f))) ((lambda (x$735$18258) (if (syntax-pair?$735$14331 x$735$18258) (begin (quote #f) ((lambda (q$735$18260) (if q$735$18260 (begin (quote #f) ((lambda (r$735$18262) (if r$735$18262 (begin (quote #f) (append q$735$18260 r$735$18262)) (quote #f))) ((letrec ((f$735$18264 (lambda (x$735$18266) (if (syntax-pair?$735$14331 x$735$18266) ((lambda (cars/f$735$18268) (if cars/f$735$18268 (begin (quote #f) ((lambda (cdrs/f$735$18270) (if cdrs/f$735$18270 (begin (quote #f) (map cons cars/f$735$18268 cdrs/f$735$18270)) (quote #f))) (f$735$18264 (syntax-cdr$735$14343 x$735$18266)))) (quote #f))) ((lambda (x$735$18272) (list x$735$18272)) (syntax-car$735$14339 x$735$18266))) (if (syntax-null?$735$14335 x$735$18266) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$735$18264) (syntax-cdr$735$14343 x$735$18258)))) (quote #f))) ((lambda (x$735$18274) (list x$735$18274)) (syntax-car$735$14339 x$735$18258)))) (quote #f))) (syntax-cdr$735$14343 x$735$18252)))) (quote #f))) ((lambda (x$735$18276) (if (id?$735$14345 x$735$18276) (if (free-id=?$735$14353 x$735$18276 (scheme-stx$735$14774 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$18252)))) (quote #f))) t$735$18148))) cls$735$18144) ((lambda (t$735$18278) ((lambda (ls/false$735$18280) (if (if ls/false$735$18280 (begin (quote #f) (apply (lambda (e$735$18282 e*$735$18283) (quote #t)) ls/false$735$18280)) (quote #f)) (apply (lambda (e$735$18286 e*$735$18287) (error (quote expander) (quote "incorrect position of keyword else") (strip$735$14363 stx$735$18128 (quote ())))) ls/false$735$18280) ((lambda (t$735$18290) ((lambda (ls/false$735$18292) (if (if ls/false$735$18292 (begin (quote #f) (apply (lambda (e$735$18294 p$735$18295) (quote #t)) ls/false$735$18292)) (quote #f)) (apply (lambda (e$735$18298 p$735$18299) (list (quote let) (list (list (quote t) e$735$18298)) (list (quote if) (quote t) (cons p$735$18299 (quote (t))) (f$735$18142 (car cls*$735$18145) (cdr cls*$735$18145))))) ls/false$735$18292) ((lambda (t$735$18302) ((lambda (ls/false$735$18304) (if (if ls/false$735$18304 (begin (quote #f) (apply (lambda (e$735$18306) (quote #t)) ls/false$735$18304)) (quote #f)) (apply (lambda (e$735$18308) (list (quote or) e$735$18308 (f$735$18142 (car cls*$735$18145) (cdr cls*$735$18145)))) ls/false$735$18304) ((lambda (t$735$18310) ((lambda (ls/false$735$18312) (if (if ls/false$735$18312 (begin (quote #f) (apply (lambda (e$735$18314 e*$735$18315) (quote #t)) ls/false$735$18312)) (quote #f)) (apply (lambda (e$735$18318 e*$735$18319) (list (quote if) e$735$18318 (cons (quote begin) e*$735$18319) (f$735$18142 (car cls*$735$18145) (cdr cls*$735$18145)))) ls/false$735$18312) ((lambda (t$735$18322) ((lambda (ls/false$735$18324) (if (if ls/false$735$18324 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$18324)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid last clause") (strip$735$14363 stx$735$18128 (quote ())))) ls/false$735$18324) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$18322 (quote ()))))) ((lambda (x$735$18326) (quote ())) t$735$18322))) t$735$18310))) ((lambda (x$735$18328) (if (syntax-pair?$735$14331 x$735$18328) (begin (quote #f) ((lambda (q$735$18330) (if q$735$18330 (begin (quote #f) ((lambda (r$735$18332) (if r$735$18332 (begin (quote #f) (append q$735$18330 r$735$18332)) (quote #f))) ((letrec ((f$735$18334 (lambda (x$735$18336) (if (syntax-pair?$735$14331 x$735$18336) ((lambda (cars/f$735$18338) (if cars/f$735$18338 (begin (quote #f) ((lambda (cdrs/f$735$18340) (if cdrs/f$735$18340 (begin (quote #f) (map cons cars/f$735$18338 cdrs/f$735$18340)) (quote #f))) (f$735$18334 (syntax-cdr$735$14343 x$735$18336)))) (quote #f))) ((lambda (x$735$18342) (list x$735$18342)) (syntax-car$735$14339 x$735$18336))) (if (syntax-null?$735$14335 x$735$18336) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$735$18334) (syntax-cdr$735$14343 x$735$18328)))) (quote #f))) ((lambda (x$735$18344) (list x$735$18344)) (syntax-car$735$14339 x$735$18328)))) (quote #f))) t$735$18310))) t$735$18302))) ((lambda (x$735$18346) (if (syntax-pair?$735$14331 x$735$18346) (begin (quote #f) ((lambda (q$735$18348) (if q$735$18348 (begin (quote #f) ((lambda (r$735$18350) (if r$735$18350 (begin (quote #f) (append q$735$18348 r$735$18350)) (quote #f))) ((lambda (x$735$18352) (if (equal? (stx->datum$735$14365 x$735$18352) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$18346)))) (quote #f))) ((lambda (x$735$18354) (list x$735$18354)) (syntax-car$735$14339 x$735$18346)))) (quote #f))) t$735$18302))) t$735$18290))) ((lambda (x$735$18356) (if (syntax-pair?$735$14331 x$735$18356) (begin (quote #f) ((lambda (q$735$18358) (if q$735$18358 (begin (quote #f) ((lambda (r$735$18360) (if r$735$18360 (begin (quote #f) (append q$735$18358 r$735$18360)) (quote #f))) ((lambda (x$735$18362) (if (syntax-pair?$735$14331 x$735$18362) (begin (quote #f) ((lambda (q$735$18364) (if q$735$18364 (begin (quote #f) ((lambda (r$735$18366) (if r$735$18366 (begin (quote #f) (append q$735$18364 r$735$18366)) (quote #f))) ((lambda (x$735$18368) (if (syntax-pair?$735$14331 x$735$18368) (begin (quote #f) ((lambda (q$735$18370) (if q$735$18370 (begin (quote #f) ((lambda (r$735$18372) (if r$735$18372 (begin (quote #f) (append q$735$18370 r$735$18372)) (quote #f))) ((lambda (x$735$18374) (if (equal? (stx->datum$735$14365 x$735$18374) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$18368)))) (quote #f))) ((lambda (x$735$18376) (list x$735$18376)) (syntax-car$735$14339 x$735$18368)))) (quote #f))) (syntax-cdr$735$14343 x$735$18362)))) (quote #f))) ((lambda (x$735$18378) (if (id?$735$14345 x$735$18378) (if (free-id=?$735$14353 x$735$18378 (scheme-stx$735$14774 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$18362)))) (quote #f))) (syntax-cdr$735$14343 x$735$18356)))) (quote #f))) ((lambda (x$735$18380) (list x$735$18380)) (syntax-car$735$14339 x$735$18356)))) (quote #f))) t$735$18290))) t$735$18278))) ((lambda (x$735$18382) (if (syntax-pair?$735$14331 x$735$18382) (begin (quote #f) ((lambda (q$735$18384) (if q$735$18384 (begin (quote #f) ((lambda (r$735$18386) (if r$735$18386 (begin (quote #f) (append q$735$18384 r$735$18386)) (quote #f))) ((lambda (x$735$18388) (if (syntax-pair?$735$14331 x$735$18388) (begin (quote #f) ((lambda (q$735$18390) (if q$735$18390 (begin (quote #f) ((lambda (r$735$18392) (if r$735$18392 (begin (quote #f) (append q$735$18390 r$735$18392)) (quote #f))) ((letrec ((f$735$18394 (lambda (x$735$18396) (if (syntax-pair?$735$14331 x$735$18396) ((lambda (cars/f$735$18398) (if cars/f$735$18398 (begin (quote #f) ((lambda (cdrs/f$735$18400) (if cdrs/f$735$18400 (begin (quote #f) (map cons cars/f$735$18398 cdrs/f$735$18400)) (quote #f))) (f$735$18394 (syntax-cdr$735$14343 x$735$18396)))) (quote #f))) ((lambda (x$735$18402) (list x$735$18402)) (syntax-car$735$14339 x$735$18396))) (if (syntax-null?$735$14335 x$735$18396) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$735$18394) (syntax-cdr$735$14343 x$735$18388)))) (quote #f))) ((lambda (x$735$18404) (list x$735$18404)) (syntax-car$735$14339 x$735$18388)))) (quote #f))) (syntax-cdr$735$14343 x$735$18382)))) (quote #f))) ((lambda (x$735$18406) (if (id?$735$14345 x$735$18406) (if (free-id=?$735$14353 x$735$18406 (scheme-stx$735$14774 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$18382)))) (quote #f))) t$735$18278))) cls$735$18144))))) (f$735$18142 cls$735$18138 cls*$735$18139)))) ls/false$735$18132) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$18130 (quote ()))))) ((lambda (x$735$18408) (if (syntax-pair?$735$14331 x$735$18408) (begin (quote #f) ((lambda (q$735$18410) (if q$735$18410 (begin (quote #f) ((lambda (r$735$18412) (if r$735$18412 (begin (quote #f) (append q$735$18410 r$735$18412)) (quote #f))) ((lambda (x$735$18414) (if (syntax-pair?$735$14331 x$735$18414) (begin (quote #f) ((lambda (q$735$18416) (if q$735$18416 (begin (quote #f) ((lambda (r$735$18418) (if r$735$18418 (begin (quote #f) (append q$735$18416 r$735$18418)) (quote #f))) ((letrec ((f$735$18420 (lambda (x$735$18422) (if (syntax-pair?$735$14331 x$735$18422) ((lambda (cars/f$735$18424) (if cars/f$735$18424 (begin (quote #f) ((lambda (cdrs/f$735$18426) (if cdrs/f$735$18426 (begin (quote #f) (map cons cars/f$735$18424 cdrs/f$735$18426)) (quote #f))) (f$735$18420 (syntax-cdr$735$14343 x$735$18422)))) (quote #f))) ((lambda (x$735$18428) (list x$735$18428)) (syntax-car$735$14339 x$735$18422))) (if (syntax-null?$735$14335 x$735$18422) (list (begin (quote cls*) (quote ()))) (quote #f)))))) f$735$18420) (syntax-cdr$735$14343 x$735$18414)))) (quote #f))) ((lambda (x$735$18430) (list x$735$18430)) (syntax-car$735$14339 x$735$18414)))) (quote #f))) (syntax-cdr$735$14343 x$735$18408)))) (quote #f))) ((lambda (x$735$18432) (quote ())) (syntax-car$735$14339 x$735$18408)))) (quote #f))) t$735$18130))) stx$735$18128))) (set! include-macro$735$14842 (lambda (e$735$18434) ((lambda (t$735$18436) ((lambda (ls/false$735$18438) (if (if ls/false$735$18438 (begin (quote #f) (apply (lambda (id$735$18440 filename$735$18441) (quote #t)) ls/false$735$18438)) (quote #f)) (apply (lambda (id$735$18444 filename$735$18445) ((lambda (filename$735$18448) (begin (if (string? filename$735$18448) (void) (error (quote expander) (quote "invalid syntax") (stx->datum$735$14365 e$735$18434))) (with-input-from-file filename$735$18448 (lambda () (letrec ((f$735$18450 (lambda (ls$735$18452) ((lambda (x$735$18454) (if (eof-object? x$735$18454) (cons (bless$735$14808 (quote begin)) (datum->stx$735$14311 id$735$18444 (reverse ls$735$18452))) (f$735$18450 (cons x$735$18454 ls$735$18452)))) (read))))) (f$735$18450 (quote ()))))))) (stx->datum$735$14365 filename$735$18445))) ls/false$735$18438) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$18436 (quote ()))))) ((lambda (x$735$18456) (if (syntax-pair?$735$14331 x$735$18456) (begin (quote #f) ((lambda (q$735$18458) (if q$735$18458 (begin (quote #f) ((lambda (r$735$18460) (if r$735$18460 (begin (quote #f) (append q$735$18458 r$735$18460)) (quote #f))) ((lambda (x$735$18462) (if (syntax-pair?$735$14331 x$735$18462) (begin (quote #f) ((lambda (q$735$18464) (if q$735$18464 (begin (quote #f) ((lambda (r$735$18466) (if r$735$18466 (begin (quote #f) (append q$735$18464 r$735$18466)) (quote #f))) ((lambda (x$735$18468) (if (equal? (stx->datum$735$14365 x$735$18468) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$18462)))) (quote #f))) ((lambda (x$735$18470) (list x$735$18470)) (syntax-car$735$14339 x$735$18462)))) (quote #f))) (syntax-cdr$735$14343 x$735$18456)))) (quote #f))) ((lambda (x$735$18472) (list x$735$18472)) (syntax-car$735$14339 x$735$18456)))) (quote #f))) t$735$18436))) e$735$18434))) (set! syntax-rules-macro$735$14844 (lambda (e$735$18474) ((lambda (t$735$18476) ((lambda (ls/false$735$18478) (if (if ls/false$735$18478 (begin (quote #f) (apply (lambda (lits$735$18480 pat*$735$18481 tmp*$735$18482) (quote #t)) ls/false$735$18478)) (quote #f)) (apply (lambda (lits$735$18486 pat*$735$18487 tmp*$735$18488) (begin (if (for-all (lambda (x$735$18492) (if (id?$735$14345 x$735$18492) (if (not (free-id=?$735$14353 x$735$18492 (scheme-stx$735$14774 (quote ...)))) (begin (quote #f) (not (free-id=?$735$14353 x$735$18492 (scheme-stx$735$14774 (quote _))))) (quote #f)) (quote #f))) lits$735$18486) (void) (error (quote expander) (quote "invalid literals") (strip$735$14363 e$735$18474 (quote ())))) (bless$735$14808 (list (quote lambda) (quote (x)) (cons (quote syntax-case) (cons (quote x) (cons lits$735$18486 (map (lambda (pat$735$18494 tmp$735$18495) (list pat$735$18494 (list (quote syntax) tmp$735$18495))) pat*$735$18487 tmp*$735$18488)))))))) ls/false$735$18478) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$18476 (quote ()))))) ((lambda (x$735$18498) (if (syntax-pair?$735$14331 x$735$18498) (begin (quote #f) ((lambda (q$735$18500) (if q$735$18500 (begin (quote #f) ((lambda (r$735$18502) (if r$735$18502 (begin (quote #f) (append q$735$18500 r$735$18502)) (quote #f))) ((lambda (x$735$18504) (if (syntax-pair?$735$14331 x$735$18504) (begin (quote #f) ((lambda (q$735$18506) (if q$735$18506 (begin (quote #f) ((lambda (r$735$18508) (if r$735$18508 (begin (quote #f) (append q$735$18506 r$735$18508)) (quote #f))) ((letrec ((f$735$18510 (lambda (x$735$18512) (if (syntax-pair?$735$14331 x$735$18512) ((lambda (cars/f$735$18514) (if cars/f$735$18514 (begin (quote #f) ((lambda (cdrs/f$735$18516) (if cdrs/f$735$18516 (begin (quote #f) (map cons cars/f$735$18514 cdrs/f$735$18516)) (quote #f))) (f$735$18510 (syntax-cdr$735$14343 x$735$18512)))) (quote #f))) ((lambda (x$735$18518) (if (syntax-pair?$735$14331 x$735$18518) (begin (quote #f) ((lambda (q$735$18520) (if q$735$18520 (begin (quote #f) ((lambda (r$735$18522) (if r$735$18522 (begin (quote #f) (append q$735$18520 r$735$18522)) (quote #f))) ((lambda (x$735$18524) (if (syntax-pair?$735$14331 x$735$18524) (begin (quote #f) ((lambda (q$735$18526) (if q$735$18526 (begin (quote #f) ((lambda (r$735$18528) (if r$735$18528 (begin (quote #f) (append q$735$18526 r$735$18528)) (quote #f))) ((lambda (x$735$18530) (if (equal? (stx->datum$735$14365 x$735$18530) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$18524)))) (quote #f))) ((lambda (x$735$18532) (list x$735$18532)) (syntax-car$735$14339 x$735$18524)))) (quote #f))) (syntax-cdr$735$14343 x$735$18518)))) (quote #f))) ((lambda (x$735$18534) (list x$735$18534)) (syntax-car$735$14339 x$735$18518)))) (quote #f))) (syntax-car$735$14339 x$735$18512))) (if (syntax-null?$735$14335 x$735$18512) (list (begin (quote pat*) (quote ())) (begin (quote tmp*) (quote ()))) (quote #f)))))) f$735$18510) (syntax-cdr$735$14343 x$735$18504)))) (quote #f))) ((letrec ((f$735$18536 (lambda (x$735$18538) (if (syntax-pair?$735$14331 x$735$18538) ((lambda (cars/f$735$18540) (if cars/f$735$18540 (begin (quote #f) ((lambda (cdrs/f$735$18542) (if cdrs/f$735$18542 (begin (quote #f) (map cons cars/f$735$18540 cdrs/f$735$18542)) (quote #f))) (f$735$18536 (syntax-cdr$735$14343 x$735$18538)))) (quote #f))) ((lambda (x$735$18544) (list x$735$18544)) (syntax-car$735$14339 x$735$18538))) (if (syntax-null?$735$14335 x$735$18538) (list (begin (quote lits) (quote ()))) (quote #f)))))) f$735$18536) (syntax-car$735$14339 x$735$18504)))) (quote #f))) (syntax-cdr$735$14343 x$735$18498)))) (quote #f))) ((lambda (x$735$18546) (quote ())) (syntax-car$735$14339 x$735$18498)))) (quote #f))) t$735$18476))) e$735$18474))) (set! quasiquote-macro$735$14846 ((lambda () ((lambda (quasicons*$735$18583 quasicons$735$18585 quasiappend$735$18587 quasivector$735$18589 vquasi$735$18591 quasi$735$18593) (begin (set! quasicons*$735$18583 (lambda (x$735$19205 y$735$19206) (letrec ((f$735$19209 (lambda (x$735$19211) (if (null? x$735$19211) y$735$19206 (quasicons$735$18585 (car x$735$19211) (f$735$19209 (cdr x$735$19211))))))) (f$735$19209 x$735$19205)))) (set! quasicons$735$18585 (lambda (x$735$19099 y$735$19100) ((lambda (t$735$19103) ((lambda (ls/false$735$19105) (if (if ls/false$735$19105 (begin (quote #f) (apply (lambda (dy$735$19107) (quote #t)) ls/false$735$19105)) (quote #f)) (apply (lambda (dy$735$19109) ((lambda (t$735$19111) ((lambda (ls/false$735$19113) (if (if ls/false$735$19113 (begin (quote #f) (apply (lambda (dx$735$19115) (quote #t)) ls/false$735$19113)) (quote #f)) (apply (lambda (dx$735$19117) (list (scheme-stx$735$14774 (quote quote)) (cons dx$735$19117 dy$735$19109))) ls/false$735$19113) ((lambda (t$735$19119) ((lambda (ls/false$735$19121) (if (if ls/false$735$19121 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$19121)) (quote #f)) (apply (lambda () ((lambda (t$735$19123) ((lambda (ls/false$735$19125) (if (if ls/false$735$19125 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$19125)) (quote #f)) (apply (lambda () (list (scheme-stx$735$14774 (quote list)) x$735$19099)) ls/false$735$19125) ((lambda (t$735$19127) ((lambda (ls/false$735$19129) (if (if ls/false$735$19129 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$19129)) (quote #f)) (apply (lambda () (list (scheme-stx$735$14774 (quote cons)) x$735$19099 y$735$19100)) ls/false$735$19129) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$19127 (quote ()))))) ((lambda (x$735$19131) (quote ())) t$735$19127))) t$735$19123))) ((lambda (x$735$19133) (if (equal? (stx->datum$735$14365 x$735$19133) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$735$19123))) dy$735$19109)) ls/false$735$19121) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$19119 (quote ()))))) ((lambda (x$735$19135) (quote ())) t$735$19119))) t$735$19111))) ((lambda (x$735$19137) (if (syntax-pair?$735$14331 x$735$19137) (begin (quote #f) ((lambda (q$735$19139) (if q$735$19139 (begin (quote #f) ((lambda (r$735$19141) (if r$735$19141 (begin (quote #f) (append q$735$19139 r$735$19141)) (quote #f))) ((lambda (x$735$19143) (if (syntax-pair?$735$14331 x$735$19143) (begin (quote #f) ((lambda (q$735$19145) (if q$735$19145 (begin (quote #f) ((lambda (r$735$19147) (if r$735$19147 (begin (quote #f) (append q$735$19145 r$735$19147)) (quote #f))) ((lambda (x$735$19149) (if (equal? (stx->datum$735$14365 x$735$19149) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19143)))) (quote #f))) ((lambda (x$735$19151) (list x$735$19151)) (syntax-car$735$14339 x$735$19143)))) (quote #f))) (syntax-cdr$735$14343 x$735$19137)))) (quote #f))) ((lambda (x$735$19153) (if (id?$735$14345 x$735$19153) (if (free-id=?$735$14353 x$735$19153 (scheme-stx$735$14774 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19137)))) (quote #f))) t$735$19111))) x$735$19099)) ls/false$735$19105) ((lambda (t$735$19155) ((lambda (ls/false$735$19157) (if (if ls/false$735$19157 (begin (quote #f) (apply (lambda (stuff$735$19159) (quote #t)) ls/false$735$19157)) (quote #f)) (apply (lambda (stuff$735$19161) (cons* (scheme-stx$735$14774 (quote list)) x$735$19099 stuff$735$19161)) ls/false$735$19157) ((lambda (t$735$19163) ((lambda (ls/false$735$19165) (if (if ls/false$735$19165 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$19165)) (quote #f)) (apply (lambda () (list (scheme-stx$735$14774 (quote cons)) x$735$19099 y$735$19100)) ls/false$735$19165) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$19163 (quote ()))))) ((lambda (x$735$19167) (quote ())) t$735$19163))) t$735$19155))) ((lambda (x$735$19169) (if (syntax-pair?$735$14331 x$735$19169) (begin (quote #f) ((lambda (q$735$19171) (if q$735$19171 (begin (quote #f) ((lambda (r$735$19173) (if r$735$19173 (begin (quote #f) (append q$735$19171 r$735$19173)) (quote #f))) ((letrec ((f$735$19175 (lambda (x$735$19177) (if (syntax-pair?$735$14331 x$735$19177) ((lambda (cars/f$735$19179) (if cars/f$735$19179 (begin (quote #f) ((lambda (cdrs/f$735$19181) (if cdrs/f$735$19181 (begin (quote #f) (map cons cars/f$735$19179 cdrs/f$735$19181)) (quote #f))) (f$735$19175 (syntax-cdr$735$14343 x$735$19177)))) (quote #f))) ((lambda (x$735$19183) (list x$735$19183)) (syntax-car$735$14339 x$735$19177))) (if (syntax-null?$735$14335 x$735$19177) (list (begin (quote stuff) (quote ()))) (quote #f)))))) f$735$19175) (syntax-cdr$735$14343 x$735$19169)))) (quote #f))) ((lambda (x$735$19185) (if (id?$735$14345 x$735$19185) (if (free-id=?$735$14353 x$735$19185 (scheme-stx$735$14774 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19169)))) (quote #f))) t$735$19155))) t$735$19103))) ((lambda (x$735$19187) (if (syntax-pair?$735$14331 x$735$19187) (begin (quote #f) ((lambda (q$735$19189) (if q$735$19189 (begin (quote #f) ((lambda (r$735$19191) (if r$735$19191 (begin (quote #f) (append q$735$19189 r$735$19191)) (quote #f))) ((lambda (x$735$19193) (if (syntax-pair?$735$14331 x$735$19193) (begin (quote #f) ((lambda (q$735$19195) (if q$735$19195 (begin (quote #f) ((lambda (r$735$19197) (if r$735$19197 (begin (quote #f) (append q$735$19195 r$735$19197)) (quote #f))) ((lambda (x$735$19199) (if (equal? (stx->datum$735$14365 x$735$19199) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19193)))) (quote #f))) ((lambda (x$735$19201) (list x$735$19201)) (syntax-car$735$14339 x$735$19193)))) (quote #f))) (syntax-cdr$735$14343 x$735$19187)))) (quote #f))) ((lambda (x$735$19203) (if (id?$735$14345 x$735$19203) (if (free-id=?$735$14353 x$735$19203 (scheme-stx$735$14774 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19187)))) (quote #f))) t$735$19103))) y$735$19100))) (set! quasiappend$735$18587 (lambda (x$735$19033 y$735$19034) ((lambda (ls$735$19037) (if (null? ls$735$19037) (list (scheme-stx$735$14774 (quote quote)) (quote ())) (if (null? (cdr ls$735$19037)) (car ls$735$19037) (cons* (scheme-stx$735$14774 (quote append)) ls$735$19037)))) (letrec ((f$735$19039 (lambda (x$735$19041) (if (null? x$735$19041) ((lambda (t$735$19043) ((lambda (ls/false$735$19045) (if (if ls/false$735$19045 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$19045)) (quote #f)) (apply (lambda () (quote ())) ls/false$735$19045) ((lambda (t$735$19047) ((lambda (ls/false$735$19049) (if (if ls/false$735$19049 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$19049)) (quote #f)) (apply (lambda () (list y$735$19034)) ls/false$735$19049) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$19047 (quote ()))))) ((lambda (x$735$19051) (quote ())) t$735$19047))) t$735$19043))) ((lambda (x$735$19053) (if (syntax-pair?$735$14331 x$735$19053) (begin (quote #f) ((lambda (q$735$19055) (if q$735$19055 (begin (quote #f) ((lambda (r$735$19057) (if r$735$19057 (begin (quote #f) (append q$735$19055 r$735$19057)) (quote #f))) ((lambda (x$735$19059) (if (syntax-pair?$735$14331 x$735$19059) (begin (quote #f) ((lambda (q$735$19061) (if q$735$19061 (begin (quote #f) ((lambda (r$735$19063) (if r$735$19063 (begin (quote #f) (append q$735$19061 r$735$19063)) (quote #f))) ((lambda (x$735$19065) (if (equal? (stx->datum$735$14365 x$735$19065) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19059)))) (quote #f))) ((lambda (x$735$19067) (if (equal? (stx->datum$735$14365 x$735$19067) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-car$735$14339 x$735$19059)))) (quote #f))) (syntax-cdr$735$14343 x$735$19053)))) (quote #f))) ((lambda (x$735$19069) (if (id?$735$14345 x$735$19069) (if (free-id=?$735$14353 x$735$19069 (scheme-stx$735$14774 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19053)))) (quote #f))) t$735$19043))) y$735$19034) ((lambda (t$735$19071) ((lambda (ls/false$735$19073) (if (if ls/false$735$19073 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$19073)) (quote #f)) (apply (lambda () (f$735$19039 (cdr x$735$19041))) ls/false$735$19073) ((lambda (t$735$19075) ((lambda (ls/false$735$19077) (if (if ls/false$735$19077 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$19077)) (quote #f)) (apply (lambda () (cons (car x$735$19041) (f$735$19039 (cdr x$735$19041)))) ls/false$735$19077) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$19075 (quote ()))))) ((lambda (x$735$19079) (quote ())) t$735$19075))) t$735$19071))) ((lambda (x$735$19081) (if (syntax-pair?$735$14331 x$735$19081) (begin (quote #f) ((lambda (q$735$19083) (if q$735$19083 (begin (quote #f) ((lambda (r$735$19085) (if r$735$19085 (begin (quote #f) (append q$735$19083 r$735$19085)) (quote #f))) ((lambda (x$735$19087) (if (syntax-pair?$735$14331 x$735$19087) (begin (quote #f) ((lambda (q$735$19089) (if q$735$19089 (begin (quote #f) ((lambda (r$735$19091) (if r$735$19091 (begin (quote #f) (append q$735$19089 r$735$19091)) (quote #f))) ((lambda (x$735$19093) (if (equal? (stx->datum$735$14365 x$735$19093) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19087)))) (quote #f))) ((lambda (x$735$19095) (if (equal? (stx->datum$735$14365 x$735$19095) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-car$735$14339 x$735$19087)))) (quote #f))) (syntax-cdr$735$14343 x$735$19081)))) (quote #f))) ((lambda (x$735$19097) (if (id?$735$14345 x$735$19097) (if (free-id=?$735$14353 x$735$19097 (scheme-stx$735$14774 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19081)))) (quote #f))) t$735$19071))) (car x$735$19041)))))) (f$735$19039 x$735$19033))))) (set! quasivector$735$18589 (lambda (x$735$18873) ((lambda (pat-x$735$18875) ((lambda (t$735$18877) ((lambda (ls/false$735$18879) (if (if ls/false$735$18879 (begin (quote #f) (apply (lambda (x*$735$18881) (quote #t)) ls/false$735$18879)) (quote #f)) (apply (lambda (x*$735$18883) (list (scheme-stx$735$14774 (quote quote)) (list->vector x*$735$18883))) ls/false$735$18879) ((lambda (t$735$18885) ((lambda (ls/false$735$18887) (if (if ls/false$735$18887 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$18887)) (quote #f)) (apply (lambda () (letrec ((f$735$18889 (lambda (x$735$18893 k$735$18894) ((lambda (t$735$18897) ((lambda (ls/false$735$18899) (if (if ls/false$735$18899 (begin (quote #f) (apply (lambda (x*$735$18901) (quote #t)) ls/false$735$18899)) (quote #f)) (apply (lambda (x*$735$18903) (k$735$18894 (map (lambda (x$735$18905) (list (scheme-stx$735$14774 (quote quote)) x$735$18905)) x*$735$18903))) ls/false$735$18899) ((lambda (t$735$18907) ((lambda (ls/false$735$18909) (if (if ls/false$735$18909 (begin (quote #f) (apply (lambda (x*$735$18911) (quote #t)) ls/false$735$18909)) (quote #f)) (apply (lambda (x*$735$18913) (k$735$18894 x*$735$18913)) ls/false$735$18909) ((lambda (t$735$18915) ((lambda (ls/false$735$18917) (if (if ls/false$735$18917 (begin (quote #f) (apply (lambda (x$735$18919 y$735$18920) (quote #t)) ls/false$735$18917)) (quote #f)) (apply (lambda (x$735$18923 y$735$18924) (f$735$18889 y$735$18924 (lambda (ls$735$18927) (k$735$18894 (cons x$735$18923 ls$735$18927))))) ls/false$735$18917) ((lambda (t$735$18929) ((lambda (ls/false$735$18931) (if (if ls/false$735$18931 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$18931)) (quote #f)) (apply (lambda () (list (scheme-stx$735$14774 (quote list->vector)) pat-x$735$18875)) ls/false$735$18931) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$18929 (quote ()))))) ((lambda (x$735$18933) (quote ())) t$735$18929))) t$735$18915))) ((lambda (x$735$18935) (if (syntax-pair?$735$14331 x$735$18935) (begin (quote #f) ((lambda (q$735$18937) (if q$735$18937 (begin (quote #f) ((lambda (r$735$18939) (if r$735$18939 (begin (quote #f) (append q$735$18937 r$735$18939)) (quote #f))) ((lambda (x$735$18941) (if (syntax-pair?$735$14331 x$735$18941) (begin (quote #f) ((lambda (q$735$18943) (if q$735$18943 (begin (quote #f) ((lambda (r$735$18945) (if r$735$18945 (begin (quote #f) (append q$735$18943 r$735$18945)) (quote #f))) ((lambda (x$735$18947) (if (syntax-pair?$735$14331 x$735$18947) (begin (quote #f) ((lambda (q$735$18949) (if q$735$18949 (begin (quote #f) ((lambda (r$735$18951) (if r$735$18951 (begin (quote #f) (append q$735$18949 r$735$18951)) (quote #f))) ((lambda (x$735$18953) (if (equal? (stx->datum$735$14365 x$735$18953) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$18947)))) (quote #f))) ((lambda (x$735$18955) (list x$735$18955)) (syntax-car$735$14339 x$735$18947)))) (quote #f))) (syntax-cdr$735$14343 x$735$18941)))) (quote #f))) ((lambda (x$735$18957) (list x$735$18957)) (syntax-car$735$14339 x$735$18941)))) (quote #f))) (syntax-cdr$735$14343 x$735$18935)))) (quote #f))) ((lambda (x$735$18959) (if (id?$735$14345 x$735$18959) (if (free-id=?$735$14353 x$735$18959 (scheme-stx$735$14774 (quote cons))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$18935)))) (quote #f))) t$735$18915))) t$735$18907))) ((lambda (x$735$18961) (if (syntax-pair?$735$14331 x$735$18961) (begin (quote #f) ((lambda (q$735$18963) (if q$735$18963 (begin (quote #f) ((lambda (r$735$18965) (if r$735$18965 (begin (quote #f) (append q$735$18963 r$735$18965)) (quote #f))) ((letrec ((f$735$18967 (lambda (x$735$18969) (if (syntax-pair?$735$14331 x$735$18969) ((lambda (cars/f$735$18971) (if cars/f$735$18971 (begin (quote #f) ((lambda (cdrs/f$735$18973) (if cdrs/f$735$18973 (begin (quote #f) (map cons cars/f$735$18971 cdrs/f$735$18973)) (quote #f))) (f$735$18967 (syntax-cdr$735$14343 x$735$18969)))) (quote #f))) ((lambda (x$735$18975) (list x$735$18975)) (syntax-car$735$14339 x$735$18969))) (if (syntax-null?$735$14335 x$735$18969) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$735$18967) (syntax-cdr$735$14343 x$735$18961)))) (quote #f))) ((lambda (x$735$18977) (if (id?$735$14345 x$735$18977) (if (free-id=?$735$14353 x$735$18977 (scheme-stx$735$14774 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$18961)))) (quote #f))) t$735$18907))) t$735$18897))) ((lambda (x$735$18979) (if (syntax-pair?$735$14331 x$735$18979) (begin (quote #f) ((lambda (q$735$18981) (if q$735$18981 (begin (quote #f) ((lambda (r$735$18983) (if r$735$18983 (begin (quote #f) (append q$735$18981 r$735$18983)) (quote #f))) ((lambda (x$735$18985) (if (syntax-pair?$735$14331 x$735$18985) (begin (quote #f) ((lambda (q$735$18987) (if q$735$18987 (begin (quote #f) ((lambda (r$735$18989) (if r$735$18989 (begin (quote #f) (append q$735$18987 r$735$18989)) (quote #f))) ((lambda (x$735$18991) (if (equal? (stx->datum$735$14365 x$735$18991) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$18985)))) (quote #f))) ((letrec ((f$735$18993 (lambda (x$735$18995) (if (syntax-pair?$735$14331 x$735$18995) ((lambda (cars/f$735$18997) (if cars/f$735$18997 (begin (quote #f) ((lambda (cdrs/f$735$18999) (if cdrs/f$735$18999 (begin (quote #f) (map cons cars/f$735$18997 cdrs/f$735$18999)) (quote #f))) (f$735$18993 (syntax-cdr$735$14343 x$735$18995)))) (quote #f))) ((lambda (x$735$19001) (list x$735$19001)) (syntax-car$735$14339 x$735$18995))) (if (syntax-null?$735$14335 x$735$18995) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$735$18993) (syntax-car$735$14339 x$735$18985)))) (quote #f))) (syntax-cdr$735$14343 x$735$18979)))) (quote #f))) ((lambda (x$735$19003) (if (id?$735$14345 x$735$19003) (if (free-id=?$735$14353 x$735$19003 (scheme-stx$735$14774 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$18979)))) (quote #f))) t$735$18897))) x$735$18893)))) (f$735$18889 x$735$18873 (lambda (ls$735$18891) (cons* (scheme-stx$735$14774 (quote vector)) ls$735$18891))))) ls/false$735$18887) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$18885 (quote ()))))) ((lambda (x$735$19005) (quote ())) t$735$18885))) t$735$18877))) ((lambda (x$735$19007) (if (syntax-pair?$735$14331 x$735$19007) (begin (quote #f) ((lambda (q$735$19009) (if q$735$19009 (begin (quote #f) ((lambda (r$735$19011) (if r$735$19011 (begin (quote #f) (append q$735$19009 r$735$19011)) (quote #f))) ((lambda (x$735$19013) (if (syntax-pair?$735$14331 x$735$19013) (begin (quote #f) ((lambda (q$735$19015) (if q$735$19015 (begin (quote #f) ((lambda (r$735$19017) (if r$735$19017 (begin (quote #f) (append q$735$19015 r$735$19017)) (quote #f))) ((lambda (x$735$19019) (if (equal? (stx->datum$735$14365 x$735$19019) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19013)))) (quote #f))) ((letrec ((f$735$19021 (lambda (x$735$19023) (if (syntax-pair?$735$14331 x$735$19023) ((lambda (cars/f$735$19025) (if cars/f$735$19025 (begin (quote #f) ((lambda (cdrs/f$735$19027) (if cdrs/f$735$19027 (begin (quote #f) (map cons cars/f$735$19025 cdrs/f$735$19027)) (quote #f))) (f$735$19021 (syntax-cdr$735$14343 x$735$19023)))) (quote #f))) ((lambda (x$735$19029) (list x$735$19029)) (syntax-car$735$14339 x$735$19023))) (if (syntax-null?$735$14335 x$735$19023) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$735$19021) (syntax-car$735$14339 x$735$19013)))) (quote #f))) (syntax-cdr$735$14343 x$735$19007)))) (quote #f))) ((lambda (x$735$19031) (if (id?$735$14345 x$735$19031) (if (free-id=?$735$14353 x$735$19031 (scheme-stx$735$14774 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19007)))) (quote #f))) t$735$18877))) pat-x$735$18875)) x$735$18873))) (set! vquasi$735$18591 (lambda (p$735$18779 lev$735$18780) ((lambda (t$735$18783) ((lambda (ls/false$735$18785) (if (if ls/false$735$18785 (begin (quote #f) (apply (lambda (p$735$18787 q$735$18788) (quote #t)) ls/false$735$18785)) (quote #f)) (apply (lambda (p$735$18791 q$735$18792) ((lambda (t$735$18795) ((lambda (ls/false$735$18797) (if (if ls/false$735$18797 (begin (quote #f) (apply (lambda (p$735$18799) (quote #t)) ls/false$735$18797)) (quote #f)) (apply (lambda (p$735$18801) (if (= lev$735$18780 (quote 0)) (quasicons*$735$18583 p$735$18801 (vquasi$735$18591 q$735$18792 lev$735$18780)) (quasicons$735$18585 (quasicons$735$18585 (list (scheme-stx$735$14774 (quote quote)) (quote unquote)) (quasi$735$18593 p$735$18801 (- lev$735$18780 (quote 1)))) (vquasi$735$18591 q$735$18792 lev$735$18780)))) ls/false$735$18797) ((lambda (t$735$18803) ((lambda (ls/false$735$18805) (if (if ls/false$735$18805 (begin (quote #f) (apply (lambda (p$735$18807) (quote #t)) ls/false$735$18805)) (quote #f)) (apply (lambda (p$735$18809) (if (= lev$735$18780 (quote 0)) (quasiappend$735$18587 p$735$18809 (vquasi$735$18591 q$735$18792 lev$735$18780)) (quasicons$735$18585 (quasicons$735$18585 (list (scheme-stx$735$14774 (quote quote)) (quote unquote-splicing)) (quasi$735$18593 p$735$18809 (- lev$735$18780 (quote 1)))) (vquasi$735$18591 q$735$18792 lev$735$18780)))) ls/false$735$18805) ((lambda (t$735$18811) ((lambda (ls/false$735$18813) (if (if ls/false$735$18813 (begin (quote #f) (apply (lambda (p$735$18815) (quote #t)) ls/false$735$18813)) (quote #f)) (apply (lambda (p$735$18817) (quasicons$735$18585 (quasi$735$18593 p$735$18817 lev$735$18780) (vquasi$735$18591 q$735$18792 lev$735$18780))) ls/false$735$18813) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$18811 (quote ()))))) ((lambda (x$735$18819) (list x$735$18819)) t$735$18811))) t$735$18803))) ((lambda (x$735$18821) (if (syntax-pair?$735$14331 x$735$18821) (begin (quote #f) ((lambda (q$735$18823) (if q$735$18823 (begin (quote #f) ((lambda (r$735$18825) (if r$735$18825 (begin (quote #f) (append q$735$18823 r$735$18825)) (quote #f))) ((letrec ((f$735$18827 (lambda (x$735$18829) (if (syntax-pair?$735$14331 x$735$18829) ((lambda (cars/f$735$18831) (if cars/f$735$18831 (begin (quote #f) ((lambda (cdrs/f$735$18833) (if cdrs/f$735$18833 (begin (quote #f) (map cons cars/f$735$18831 cdrs/f$735$18833)) (quote #f))) (f$735$18827 (syntax-cdr$735$14343 x$735$18829)))) (quote #f))) ((lambda (x$735$18835) (list x$735$18835)) (syntax-car$735$14339 x$735$18829))) (if (syntax-null?$735$14335 x$735$18829) (list (begin (quote p) (quote ()))) (quote #f)))))) f$735$18827) (syntax-cdr$735$14343 x$735$18821)))) (quote #f))) ((lambda (x$735$18837) (if (id?$735$14345 x$735$18837) (if (free-id=?$735$14353 x$735$18837 (scheme-stx$735$14774 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$18821)))) (quote #f))) t$735$18803))) t$735$18795))) ((lambda (x$735$18839) (if (syntax-pair?$735$14331 x$735$18839) (begin (quote #f) ((lambda (q$735$18841) (if q$735$18841 (begin (quote #f) ((lambda (r$735$18843) (if r$735$18843 (begin (quote #f) (append q$735$18841 r$735$18843)) (quote #f))) ((letrec ((f$735$18845 (lambda (x$735$18847) (if (syntax-pair?$735$14331 x$735$18847) ((lambda (cars/f$735$18849) (if cars/f$735$18849 (begin (quote #f) ((lambda (cdrs/f$735$18851) (if cdrs/f$735$18851 (begin (quote #f) (map cons cars/f$735$18849 cdrs/f$735$18851)) (quote #f))) (f$735$18845 (syntax-cdr$735$14343 x$735$18847)))) (quote #f))) ((lambda (x$735$18853) (list x$735$18853)) (syntax-car$735$14339 x$735$18847))) (if (syntax-null?$735$14335 x$735$18847) (list (begin (quote p) (quote ()))) (quote #f)))))) f$735$18845) (syntax-cdr$735$14343 x$735$18839)))) (quote #f))) ((lambda (x$735$18855) (if (id?$735$14345 x$735$18855) (if (free-id=?$735$14353 x$735$18855 (scheme-stx$735$14774 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$18839)))) (quote #f))) t$735$18795))) p$735$18791)) ls/false$735$18785) ((lambda (t$735$18857) ((lambda (ls/false$735$18859) (if (if ls/false$735$18859 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$18859)) (quote #f)) (apply (lambda () (list (scheme-stx$735$14774 (quote quote)) (quote ()))) ls/false$735$18859) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$18857 (quote ()))))) ((lambda (x$735$18861) (if (equal? (stx->datum$735$14365 x$735$18861) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$735$18857))) t$735$18783))) ((lambda (x$735$18863) (if (syntax-pair?$735$14331 x$735$18863) (begin (quote #f) ((lambda (q$735$18865) (if q$735$18865 (begin (quote #f) ((lambda (r$735$18867) (if r$735$18867 (begin (quote #f) (append q$735$18865 r$735$18867)) (quote #f))) ((lambda (x$735$18869) (list x$735$18869)) (syntax-cdr$735$14343 x$735$18863)))) (quote #f))) ((lambda (x$735$18871) (list x$735$18871)) (syntax-car$735$14339 x$735$18863)))) (quote #f))) t$735$18783))) p$735$18779))) (set! quasi$735$18593 (lambda (p$735$18595 lev$735$18596) ((lambda (t$735$18599) ((lambda (ls/false$735$18601) (if (if ls/false$735$18601 (begin (quote #f) (apply (lambda (p$735$18603) (quote #t)) ls/false$735$18601)) (quote #f)) (apply (lambda (p$735$18605) (if (= lev$735$18596 (quote 0)) p$735$18605 (quasicons$735$18585 (list (scheme-stx$735$14774 (quote quote)) (quote unquote)) (quasi$735$18593 (list p$735$18605) (- lev$735$18596 (quote 1)))))) ls/false$735$18601) ((lambda (t$735$18607) ((lambda (ls/false$735$18609) (if (if ls/false$735$18609 (begin (quote #f) (apply (lambda (p$735$18611 q$735$18612) (quote #t)) ls/false$735$18609)) (quote #f)) (apply (lambda (p$735$18615 q$735$18616) (if (= lev$735$18596 (quote 0)) (quasicons*$735$18583 p$735$18615 (quasi$735$18593 q$735$18616 lev$735$18596)) (quasicons$735$18585 (quasicons$735$18585 (list (scheme-stx$735$14774 (quote quote)) (quote unquote)) (quasi$735$18593 p$735$18615 (- lev$735$18596 (quote 1)))) (quasi$735$18593 q$735$18616 lev$735$18596)))) ls/false$735$18609) ((lambda (t$735$18619) ((lambda (ls/false$735$18621) (if (if ls/false$735$18621 (begin (quote #f) (apply (lambda (p$735$18623 q$735$18624) (quote #t)) ls/false$735$18621)) (quote #f)) (apply (lambda (p$735$18627 q$735$18628) (if (= lev$735$18596 (quote 0)) (quasiappend$735$18587 p$735$18627 (quasi$735$18593 q$735$18628 lev$735$18596)) (quasicons$735$18585 (quasicons$735$18585 (list (scheme-stx$735$14774 (quote quote)) (quote unquote-splicing)) (quasi$735$18593 p$735$18627 (- lev$735$18596 (quote 1)))) (quasi$735$18593 q$735$18628 lev$735$18596)))) ls/false$735$18621) ((lambda (t$735$18631) ((lambda (ls/false$735$18633) (if (if ls/false$735$18633 (begin (quote #f) (apply (lambda (p$735$18635) (quote #t)) ls/false$735$18633)) (quote #f)) (apply (lambda (p$735$18637) (quasicons$735$18585 (list (scheme-stx$735$14774 (quote quote)) (quote quasiquote)) (quasi$735$18593 (list p$735$18637) (+ lev$735$18596 (quote 1))))) ls/false$735$18633) ((lambda (t$735$18639) ((lambda (ls/false$735$18641) (if (if ls/false$735$18641 (begin (quote #f) (apply (lambda (p$735$18643 q$735$18644) (quote #t)) ls/false$735$18641)) (quote #f)) (apply (lambda (p$735$18647 q$735$18648) (quasicons$735$18585 (quasi$735$18593 p$735$18647 lev$735$18596) (quasi$735$18593 q$735$18648 lev$735$18596))) ls/false$735$18641) ((lambda (t$735$18651) ((lambda (ls/false$735$18653) (if (if ls/false$735$18653 (begin (quote #f) (apply (lambda (x$735$18655) (not (stx?$735$14297 x$735$18655))) ls/false$735$18653)) (quote #f)) (apply (lambda (x$735$18657) (quasivector$735$18589 (vquasi$735$18591 x$735$18657 lev$735$18596))) ls/false$735$18653) ((lambda (t$735$18659) ((lambda (ls/false$735$18661) (if (if ls/false$735$18661 (begin (quote #f) (apply (lambda (p$735$18663) (quote #t)) ls/false$735$18661)) (quote #f)) (apply (lambda (p$735$18665) (list (scheme-stx$735$14774 (quote quote)) p$735$18665)) ls/false$735$18661) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$18659 (quote ()))))) ((lambda (x$735$18667) (list x$735$18667)) t$735$18659))) t$735$18651))) ((lambda (x$735$18669) (if (syntax-vector?$735$14333 x$735$18669) (begin (quote #f) ((letrec ((f$735$18671 (lambda (x$735$18673) (if (syntax-pair?$735$14331 x$735$18673) ((lambda (cars/f$735$18675) (if cars/f$735$18675 (begin (quote #f) ((lambda (cdrs/f$735$18677) (if cdrs/f$735$18677 (begin (quote #f) (map cons cars/f$735$18675 cdrs/f$735$18677)) (quote #f))) (f$735$18671 (syntax-cdr$735$14343 x$735$18673)))) (quote #f))) ((lambda (x$735$18679) (list x$735$18679)) (syntax-car$735$14339 x$735$18673))) (if (syntax-null?$735$14335 x$735$18673) (list (begin (quote x) (quote ()))) (quote #f)))))) f$735$18671) (syntax-vector->list$735$14329 x$735$18669))) (quote #f))) t$735$18651))) t$735$18639))) ((lambda (x$735$18681) (if (syntax-pair?$735$14331 x$735$18681) (begin (quote #f) ((lambda (q$735$18683) (if q$735$18683 (begin (quote #f) ((lambda (r$735$18685) (if r$735$18685 (begin (quote #f) (append q$735$18683 r$735$18685)) (quote #f))) ((lambda (x$735$18687) (list x$735$18687)) (syntax-cdr$735$14343 x$735$18681)))) (quote #f))) ((lambda (x$735$18689) (list x$735$18689)) (syntax-car$735$14339 x$735$18681)))) (quote #f))) t$735$18639))) t$735$18631))) ((lambda (x$735$18691) (if (syntax-pair?$735$14331 x$735$18691) (begin (quote #f) ((lambda (q$735$18693) (if q$735$18693 (begin (quote #f) ((lambda (r$735$18695) (if r$735$18695 (begin (quote #f) (append q$735$18693 r$735$18695)) (quote #f))) ((lambda (x$735$18697) (if (syntax-pair?$735$14331 x$735$18697) (begin (quote #f) ((lambda (q$735$18699) (if q$735$18699 (begin (quote #f) ((lambda (r$735$18701) (if r$735$18701 (begin (quote #f) (append q$735$18699 r$735$18701)) (quote #f))) ((lambda (x$735$18703) (if (equal? (stx->datum$735$14365 x$735$18703) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$18697)))) (quote #f))) ((lambda (x$735$18705) (list x$735$18705)) (syntax-car$735$14339 x$735$18697)))) (quote #f))) (syntax-cdr$735$14343 x$735$18691)))) (quote #f))) ((lambda (x$735$18707) (if (id?$735$14345 x$735$18707) (if (free-id=?$735$14353 x$735$18707 (scheme-stx$735$14774 (quote quasiquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$18691)))) (quote #f))) t$735$18631))) t$735$18619))) ((lambda (x$735$18709) (if (syntax-pair?$735$14331 x$735$18709) (begin (quote #f) ((lambda (q$735$18711) (if q$735$18711 (begin (quote #f) ((lambda (r$735$18713) (if r$735$18713 (begin (quote #f) (append q$735$18711 r$735$18713)) (quote #f))) ((lambda (x$735$18715) (list x$735$18715)) (syntax-cdr$735$14343 x$735$18709)))) (quote #f))) ((lambda (x$735$18717) (if (syntax-pair?$735$14331 x$735$18717) (begin (quote #f) ((lambda (q$735$18719) (if q$735$18719 (begin (quote #f) ((lambda (r$735$18721) (if r$735$18721 (begin (quote #f) (append q$735$18719 r$735$18721)) (quote #f))) ((letrec ((f$735$18723 (lambda (x$735$18725) (if (syntax-pair?$735$14331 x$735$18725) ((lambda (cars/f$735$18727) (if cars/f$735$18727 (begin (quote #f) ((lambda (cdrs/f$735$18729) (if cdrs/f$735$18729 (begin (quote #f) (map cons cars/f$735$18727 cdrs/f$735$18729)) (quote #f))) (f$735$18723 (syntax-cdr$735$14343 x$735$18725)))) (quote #f))) ((lambda (x$735$18731) (list x$735$18731)) (syntax-car$735$14339 x$735$18725))) (if (syntax-null?$735$14335 x$735$18725) (list (begin (quote p) (quote ()))) (quote #f)))))) f$735$18723) (syntax-cdr$735$14343 x$735$18717)))) (quote #f))) ((lambda (x$735$18733) (if (id?$735$14345 x$735$18733) (if (free-id=?$735$14353 x$735$18733 (scheme-stx$735$14774 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$18717)))) (quote #f))) (syntax-car$735$14339 x$735$18709)))) (quote #f))) t$735$18619))) t$735$18607))) ((lambda (x$735$18735) (if (syntax-pair?$735$14331 x$735$18735) (begin (quote #f) ((lambda (q$735$18737) (if q$735$18737 (begin (quote #f) ((lambda (r$735$18739) (if r$735$18739 (begin (quote #f) (append q$735$18737 r$735$18739)) (quote #f))) ((lambda (x$735$18741) (list x$735$18741)) (syntax-cdr$735$14343 x$735$18735)))) (quote #f))) ((lambda (x$735$18743) (if (syntax-pair?$735$14331 x$735$18743) (begin (quote #f) ((lambda (q$735$18745) (if q$735$18745 (begin (quote #f) ((lambda (r$735$18747) (if r$735$18747 (begin (quote #f) (append q$735$18745 r$735$18747)) (quote #f))) ((letrec ((f$735$18749 (lambda (x$735$18751) (if (syntax-pair?$735$14331 x$735$18751) ((lambda (cars/f$735$18753) (if cars/f$735$18753 (begin (quote #f) ((lambda (cdrs/f$735$18755) (if cdrs/f$735$18755 (begin (quote #f) (map cons cars/f$735$18753 cdrs/f$735$18755)) (quote #f))) (f$735$18749 (syntax-cdr$735$14343 x$735$18751)))) (quote #f))) ((lambda (x$735$18757) (list x$735$18757)) (syntax-car$735$14339 x$735$18751))) (if (syntax-null?$735$14335 x$735$18751) (list (begin (quote p) (quote ()))) (quote #f)))))) f$735$18749) (syntax-cdr$735$14343 x$735$18743)))) (quote #f))) ((lambda (x$735$18759) (if (id?$735$14345 x$735$18759) (if (free-id=?$735$14353 x$735$18759 (scheme-stx$735$14774 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$18743)))) (quote #f))) (syntax-car$735$14339 x$735$18735)))) (quote #f))) t$735$18607))) t$735$18599))) ((lambda (x$735$18761) (if (syntax-pair?$735$14331 x$735$18761) (begin (quote #f) ((lambda (q$735$18763) (if q$735$18763 (begin (quote #f) ((lambda (r$735$18765) (if r$735$18765 (begin (quote #f) (append q$735$18763 r$735$18765)) (quote #f))) ((lambda (x$735$18767) (if (syntax-pair?$735$14331 x$735$18767) (begin (quote #f) ((lambda (q$735$18769) (if q$735$18769 (begin (quote #f) ((lambda (r$735$18771) (if r$735$18771 (begin (quote #f) (append q$735$18769 r$735$18771)) (quote #f))) ((lambda (x$735$18773) (if (equal? (stx->datum$735$14365 x$735$18773) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$18767)))) (quote #f))) ((lambda (x$735$18775) (list x$735$18775)) (syntax-car$735$14339 x$735$18767)))) (quote #f))) (syntax-cdr$735$14343 x$735$18761)))) (quote #f))) ((lambda (x$735$18777) (if (id?$735$14345 x$735$18777) (if (free-id=?$735$14353 x$735$18777 (scheme-stx$735$14774 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$18761)))) (quote #f))) t$735$18599))) p$735$18595))) (lambda (x$735$19213) ((lambda (t$735$19215) ((lambda (ls/false$735$19217) (if (if ls/false$735$19217 (begin (quote #f) (apply (lambda (e$735$19219) (quote #t)) ls/false$735$19217)) (quote #f)) (apply (lambda (e$735$19221) (quasi$735$18593 e$735$19221 (quote 0))) ls/false$735$19217) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$19215 (quote ()))))) ((lambda (x$735$19223) (if (syntax-pair?$735$14331 x$735$19223) (begin (quote #f) ((lambda (q$735$19225) (if q$735$19225 (begin (quote #f) ((lambda (r$735$19227) (if r$735$19227 (begin (quote #f) (append q$735$19225 r$735$19227)) (quote #f))) ((lambda (x$735$19229) (if (syntax-pair?$735$14331 x$735$19229) (begin (quote #f) ((lambda (q$735$19231) (if q$735$19231 (begin (quote #f) ((lambda (r$735$19233) (if r$735$19233 (begin (quote #f) (append q$735$19231 r$735$19233)) (quote #f))) ((lambda (x$735$19235) (if (equal? (stx->datum$735$14365 x$735$19235) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19229)))) (quote #f))) ((lambda (x$735$19237) (list x$735$19237)) (syntax-car$735$14339 x$735$19229)))) (quote #f))) (syntax-cdr$735$14343 x$735$19223)))) (quote #f))) ((lambda (x$735$19239) (quote ())) (syntax-car$735$14339 x$735$19223)))) (quote #f))) t$735$19215))) x$735$19213)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! quasisyntax-macro$735$14848 ((lambda () ((lambda (quasi$735$19241) (begin (set! quasi$735$19241 (lambda (p$735$19243 lev$735$19244) ((lambda (t$735$19247) ((lambda (ls/false$735$19249) (if (if ls/false$735$19249 (begin (quote #f) (apply (lambda (p$735$19251) (quote #t)) ls/false$735$19249)) (quote #f)) (apply (lambda (p$735$19253) (if (= lev$735$19244 (quote 0)) ((lambda (g$735$19255) (values (list g$735$19255) (list p$735$19253) g$735$19255)) (gensym)) (call-with-values (lambda () (quasi$735$19241 p$735$19253 (- lev$735$19244 (quote 1)))) (lambda (lhs*$735$19257 rhs*$735$19258 p$735$19259) (values lhs*$735$19257 rhs*$735$19258 (list (quote unsyntax) p$735$19259)))))) ls/false$735$19249) ((lambda (t$735$19263) ((lambda (ls/false$735$19265) (if (if ls/false$735$19265 (begin (quote #f) (apply (lambda () (= lev$735$19244 (quote 0))) ls/false$735$19265)) (quote #f)) (apply (lambda () (error (quote expander) (quote "incorrect use of unsyntax") (strip$735$14363 p$735$19243 (quote ())))) ls/false$735$19265) ((lambda (t$735$19267) ((lambda (ls/false$735$19269) (if (if ls/false$735$19269 (begin (quote #f) (apply (lambda (p$735$19271 q$735$19272) (quote #t)) ls/false$735$19269)) (quote #f)) (apply (lambda (p$735$19275 q$735$19276) (call-with-values (lambda () (quasi$735$19241 q$735$19276 lev$735$19244)) (lambda (lhs*$735$19279 rhs*$735$19280 q$735$19281) (if (= lev$735$19244 (quote 0)) ((lambda (g$735$19285) (values (cons (cons g$735$19285 (quote (...))) lhs*$735$19279) (cons p$735$19275 rhs*$735$19280) (cons g$735$19285 (cons (quote ...) q$735$19281)))) (gensym)) (call-with-values (lambda () (quasi$735$19241 p$735$19275 (- lev$735$19244 (quote 1)))) (lambda (lhs2*$735$19287 rhs2*$735$19288 p$735$19289) (values (append lhs2*$735$19287 lhs*$735$19279) (append rhs2*$735$19288 rhs*$735$19280) (cons (list (quote unsyntax-splicing) p$735$19289) q$735$19281)))))))) ls/false$735$19269) ((lambda (t$735$19293) ((lambda (ls/false$735$19295) (if (if ls/false$735$19295 (begin (quote #f) (apply (lambda () (= lev$735$19244 (quote 0))) ls/false$735$19295)) (quote #f)) (apply (lambda () (error (quote expander) (quote "incorrect use of unsyntax-splicing") (strip$735$14363 p$735$19243 (quote ())))) ls/false$735$19295) ((lambda (t$735$19297) ((lambda (ls/false$735$19299) (if (if ls/false$735$19299 (begin (quote #f) (apply (lambda (p$735$19301) (quote #t)) ls/false$735$19299)) (quote #f)) (apply (lambda (p$735$19303) (call-with-values (lambda () (quasi$735$19241 p$735$19303 (+ lev$735$19244 (quote 1)))) (lambda (lhs*$735$19305 rhs*$735$19306 p$735$19307) (values lhs*$735$19305 rhs*$735$19306 (list (quote quasisyntax) p$735$19307))))) ls/false$735$19299) ((lambda (t$735$19311) ((lambda (ls/false$735$19313) (if (if ls/false$735$19313 (begin (quote #f) (apply (lambda (p$735$19315 q$735$19316) (quote #t)) ls/false$735$19313)) (quote #f)) (apply (lambda (p$735$19319 q$735$19320) (call-with-values (lambda () (quasi$735$19241 p$735$19319 lev$735$19244)) (lambda (lhs*$735$19323 rhs*$735$19324 p$735$19325) (call-with-values (lambda () (quasi$735$19241 q$735$19320 lev$735$19244)) (lambda (lhs2*$735$19326 rhs2*$735$19327 q$735$19328) (values (append lhs2*$735$19326 lhs*$735$19323) (append rhs2*$735$19327 rhs*$735$19324) (cons p$735$19325 q$735$19328))))))) ls/false$735$19313) ((lambda (t$735$19335) ((lambda (ls/false$735$19337) (if (if ls/false$735$19337 (begin (quote #f) (apply (lambda (x$735$19339) (not (stx?$735$14297 p$735$19243))) ls/false$735$19337)) (quote #f)) (apply (lambda (x$735$19341) (call-with-values (lambda () (letrec ((f$735$19343 (lambda (x$735$19345) (if (null? x$735$19345) (values (quote ()) (quote ()) (quote ())) (call-with-values (lambda () (quasi$735$19241 (car x$735$19345) lev$735$19244)) (lambda (lhs*$735$19347 rhs*$735$19348 a$735$19349) (call-with-values (lambda () (f$735$19343 (cdr x$735$19345))) (lambda (lhs2*$735$19353 rhs2*$735$19354 d$735$19355) (values (append lhs*$735$19347 lhs2*$735$19353) (append rhs*$735$19348 rhs2*$735$19354) (cons a$735$19349 d$735$19355)))))))))) (f$735$19343 x$735$19341))) (lambda (lhs*$735$19359 rhs*$735$19360 x*$735$19361) (values lhs*$735$19359 rhs*$735$19360 (list->vector x*$735$19361))))) ls/false$735$19337) ((lambda (t$735$19365) ((lambda (ls/false$735$19367) (if (if ls/false$735$19367 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$19367)) (quote #f)) (apply (lambda () (values (quote ()) (quote ()) p$735$19243)) ls/false$735$19367) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$19365 (quote ()))))) ((lambda (x$735$19369) (quote ())) t$735$19365))) t$735$19335))) ((lambda (x$735$19371) (if (syntax-vector?$735$14333 x$735$19371) (begin (quote #f) ((letrec ((f$735$19373 (lambda (x$735$19375) (if (syntax-pair?$735$14331 x$735$19375) ((lambda (cars/f$735$19377) (if cars/f$735$19377 (begin (quote #f) ((lambda (cdrs/f$735$19379) (if cdrs/f$735$19379 (begin (quote #f) (map cons cars/f$735$19377 cdrs/f$735$19379)) (quote #f))) (f$735$19373 (syntax-cdr$735$14343 x$735$19375)))) (quote #f))) ((lambda (x$735$19381) (list x$735$19381)) (syntax-car$735$14339 x$735$19375))) (if (syntax-null?$735$14335 x$735$19375) (list (begin (quote x) (quote ()))) (quote #f)))))) f$735$19373) (syntax-vector->list$735$14329 x$735$19371))) (quote #f))) t$735$19335))) t$735$19311))) ((lambda (x$735$19383) (if (syntax-pair?$735$14331 x$735$19383) (begin (quote #f) ((lambda (q$735$19385) (if q$735$19385 (begin (quote #f) ((lambda (r$735$19387) (if r$735$19387 (begin (quote #f) (append q$735$19385 r$735$19387)) (quote #f))) ((lambda (x$735$19389) (list x$735$19389)) (syntax-cdr$735$14343 x$735$19383)))) (quote #f))) ((lambda (x$735$19391) (list x$735$19391)) (syntax-car$735$14339 x$735$19383)))) (quote #f))) t$735$19311))) t$735$19297))) ((lambda (x$735$19393) (if (syntax-pair?$735$14331 x$735$19393) (begin (quote #f) ((lambda (q$735$19395) (if q$735$19395 (begin (quote #f) ((lambda (r$735$19397) (if r$735$19397 (begin (quote #f) (append q$735$19395 r$735$19397)) (quote #f))) ((lambda (x$735$19399) (if (syntax-pair?$735$14331 x$735$19399) (begin (quote #f) ((lambda (q$735$19401) (if q$735$19401 (begin (quote #f) ((lambda (r$735$19403) (if r$735$19403 (begin (quote #f) (append q$735$19401 r$735$19403)) (quote #f))) ((lambda (x$735$19405) (if (equal? (stx->datum$735$14365 x$735$19405) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19399)))) (quote #f))) ((lambda (x$735$19407) (list x$735$19407)) (syntax-car$735$14339 x$735$19399)))) (quote #f))) (syntax-cdr$735$14343 x$735$19393)))) (quote #f))) ((lambda (x$735$19409) (if (id?$735$14345 x$735$19409) (if (free-id=?$735$14353 x$735$19409 (scheme-stx$735$14774 (quote quasisyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19393)))) (quote #f))) t$735$19297))) t$735$19293))) ((lambda (x$735$19411) (if (id?$735$14345 x$735$19411) (if (free-id=?$735$14353 x$735$19411 (scheme-stx$735$14774 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) t$735$19293))) t$735$19267))) ((lambda (x$735$19413) (if (syntax-pair?$735$14331 x$735$19413) (begin (quote #f) ((lambda (q$735$19415) (if q$735$19415 (begin (quote #f) ((lambda (r$735$19417) (if r$735$19417 (begin (quote #f) (append q$735$19415 r$735$19417)) (quote #f))) ((lambda (x$735$19419) (list x$735$19419)) (syntax-cdr$735$14343 x$735$19413)))) (quote #f))) ((lambda (x$735$19421) (if (syntax-pair?$735$14331 x$735$19421) (begin (quote #f) ((lambda (q$735$19423) (if q$735$19423 (begin (quote #f) ((lambda (r$735$19425) (if r$735$19425 (begin (quote #f) (append q$735$19423 r$735$19425)) (quote #f))) ((lambda (x$735$19427) (if (syntax-pair?$735$14331 x$735$19427) (begin (quote #f) ((lambda (q$735$19429) (if q$735$19429 (begin (quote #f) ((lambda (r$735$19431) (if r$735$19431 (begin (quote #f) (append q$735$19429 r$735$19431)) (quote #f))) ((lambda (x$735$19433) (if (equal? (stx->datum$735$14365 x$735$19433) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19427)))) (quote #f))) ((lambda (x$735$19435) (list x$735$19435)) (syntax-car$735$14339 x$735$19427)))) (quote #f))) (syntax-cdr$735$14343 x$735$19421)))) (quote #f))) ((lambda (x$735$19437) (if (id?$735$14345 x$735$19437) (if (free-id=?$735$14353 x$735$19437 (scheme-stx$735$14774 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19421)))) (quote #f))) (syntax-car$735$14339 x$735$19413)))) (quote #f))) t$735$19267))) t$735$19263))) ((lambda (x$735$19439) (if (id?$735$14345 x$735$19439) (if (free-id=?$735$14353 x$735$19439 (scheme-stx$735$14774 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) t$735$19263))) t$735$19247))) ((lambda (x$735$19441) (if (syntax-pair?$735$14331 x$735$19441) (begin (quote #f) ((lambda (q$735$19443) (if q$735$19443 (begin (quote #f) ((lambda (r$735$19445) (if r$735$19445 (begin (quote #f) (append q$735$19443 r$735$19445)) (quote #f))) ((lambda (x$735$19447) (if (syntax-pair?$735$14331 x$735$19447) (begin (quote #f) ((lambda (q$735$19449) (if q$735$19449 (begin (quote #f) ((lambda (r$735$19451) (if r$735$19451 (begin (quote #f) (append q$735$19449 r$735$19451)) (quote #f))) ((lambda (x$735$19453) (if (equal? (stx->datum$735$14365 x$735$19453) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19447)))) (quote #f))) ((lambda (x$735$19455) (list x$735$19455)) (syntax-car$735$14339 x$735$19447)))) (quote #f))) (syntax-cdr$735$14343 x$735$19441)))) (quote #f))) ((lambda (x$735$19457) (if (id?$735$14345 x$735$19457) (if (free-id=?$735$14353 x$735$19457 (scheme-stx$735$14774 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19441)))) (quote #f))) t$735$19247))) p$735$19243))) (lambda (x$735$19459) ((lambda (t$735$19461) ((lambda (ls/false$735$19463) (if (if ls/false$735$19463 (begin (quote #f) (apply (lambda (e$735$19465) (quote #t)) ls/false$735$19463)) (quote #f)) (apply (lambda (e$735$19467) (call-with-values (lambda () (quasi$735$19241 e$735$19467 (quote 0))) (lambda (lhs*$735$19469 rhs*$735$19470 v$735$19471) (bless$735$14808 (list (quote syntax-case) (cons (quote list) rhs*$735$19470) (quote ()) (list lhs*$735$19469 (list (quote syntax) v$735$19471))))))) ls/false$735$19463) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$19461 (quote ()))))) ((lambda (x$735$19475) (if (syntax-pair?$735$14331 x$735$19475) (begin (quote #f) ((lambda (q$735$19477) (if q$735$19477 (begin (quote #f) ((lambda (r$735$19479) (if r$735$19479 (begin (quote #f) (append q$735$19477 r$735$19479)) (quote #f))) ((lambda (x$735$19481) (if (syntax-pair?$735$14331 x$735$19481) (begin (quote #f) ((lambda (q$735$19483) (if q$735$19483 (begin (quote #f) ((lambda (r$735$19485) (if r$735$19485 (begin (quote #f) (append q$735$19483 r$735$19485)) (quote #f))) ((lambda (x$735$19487) (if (equal? (stx->datum$735$14365 x$735$19487) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19481)))) (quote #f))) ((lambda (x$735$19489) (list x$735$19489)) (syntax-car$735$14339 x$735$19481)))) (quote #f))) (syntax-cdr$735$14343 x$735$19475)))) (quote #f))) ((lambda (x$735$19491) (quote ())) (syntax-car$735$14339 x$735$19475)))) (quote #f))) t$735$19461))) x$735$19459)))) (quote #f))))) (set! define-struct-macro$735$14850 (lambda (stx$735$19493) (error (quote expander) (quote "define-struct not supported") (strip$735$14363 stx$735$19493 (quote ()))))) (set! define-record-type-macro$735$14852 (lambda (x$735$19495) ((lambda (id$735$19497 get-record-name$735$19499 get-record-constructor-name$735$19501 get-record-predicate-name$735$19503 get-clause$735$19505 foo-rtd-code$735$19507 foo-rcd-code$735$19509 get-protocol-code$735$19511 get-fields$735$19513 get-mutator-indices$735$19515 get-mutators$735$19517 get-accessors$735$19519 enumerate$735$19521 do-define-record$735$19523) (begin (set! id$735$19497 (lambda (ctxt$735$20545 . str*$735$20547) (datum->syntax$735$15001 ctxt$735$20545 (string->symbol (apply string-append (map (lambda (x$735$20549) (if (symbol? x$735$20549) (symbol->string x$735$20549) (if (string? x$735$20549) x$735$20549 (error (quote define-record-type) (quote "BUG"))))) str*$735$20547)))))) (set! get-record-name$735$19499 (lambda (spec$735$20491) ((lambda (t$735$20493) ((lambda (ls/false$735$20495) (if (if ls/false$735$20495 (begin (quote #f) (apply (lambda (foo$735$20497 make-foo$735$20498 foo?$735$20499) (quote #t)) ls/false$735$20495)) (quote #f)) (apply (lambda (foo$735$20503 make-foo$735$20504 foo?$735$20505) foo$735$20503) ls/false$735$20495) ((lambda (t$735$20509) ((lambda (ls/false$735$20511) (if (if ls/false$735$20511 (begin (quote #f) (apply (lambda (foo$735$20513) (quote #t)) ls/false$735$20511)) (quote #f)) (apply (lambda (foo$735$20515) foo$735$20515) ls/false$735$20511) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20509 (quote ()))))) ((lambda (x$735$20517) (list x$735$20517)) t$735$20509))) t$735$20493))) ((lambda (x$735$20519) (if (syntax-pair?$735$14331 x$735$20519) (begin (quote #f) ((lambda (q$735$20521) (if q$735$20521 (begin (quote #f) ((lambda (r$735$20523) (if r$735$20523 (begin (quote #f) (append q$735$20521 r$735$20523)) (quote #f))) ((lambda (x$735$20525) (if (syntax-pair?$735$14331 x$735$20525) (begin (quote #f) ((lambda (q$735$20527) (if q$735$20527 (begin (quote #f) ((lambda (r$735$20529) (if r$735$20529 (begin (quote #f) (append q$735$20527 r$735$20529)) (quote #f))) ((lambda (x$735$20531) (if (syntax-pair?$735$14331 x$735$20531) (begin (quote #f) ((lambda (q$735$20533) (if q$735$20533 (begin (quote #f) ((lambda (r$735$20535) (if r$735$20535 (begin (quote #f) (append q$735$20533 r$735$20535)) (quote #f))) ((lambda (x$735$20537) (if (equal? (stx->datum$735$14365 x$735$20537) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$20531)))) (quote #f))) ((lambda (x$735$20539) (list x$735$20539)) (syntax-car$735$14339 x$735$20531)))) (quote #f))) (syntax-cdr$735$14343 x$735$20525)))) (quote #f))) ((lambda (x$735$20541) (list x$735$20541)) (syntax-car$735$14339 x$735$20525)))) (quote #f))) (syntax-cdr$735$14343 x$735$20519)))) (quote #f))) ((lambda (x$735$20543) (list x$735$20543)) (syntax-car$735$14339 x$735$20519)))) (quote #f))) t$735$20493))) spec$735$20491))) (set! get-record-constructor-name$735$19501 (lambda (spec$735$20435 ctxt$735$20436) ((lambda (t$735$20439) ((lambda (ls/false$735$20441) (if (if ls/false$735$20441 (begin (quote #f) (apply (lambda (foo$735$20443 make-foo$735$20444 foo?$735$20445) (quote #t)) ls/false$735$20441)) (quote #f)) (apply (lambda (foo$735$20449 make-foo$735$20450 foo?$735$20451) make-foo$735$20450) ls/false$735$20441) ((lambda (t$735$20455) ((lambda (ls/false$735$20457) (if (if ls/false$735$20457 (begin (quote #f) (apply (lambda (foo$735$20459) (quote #t)) ls/false$735$20457)) (quote #f)) (apply (lambda (foo$735$20461) (id$735$19497 ctxt$735$20436 (quote "make-") (stx->datum$735$14365 foo$735$20461))) ls/false$735$20457) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20455 (quote ()))))) ((lambda (x$735$20463) (list x$735$20463)) t$735$20455))) t$735$20439))) ((lambda (x$735$20465) (if (syntax-pair?$735$14331 x$735$20465) (begin (quote #f) ((lambda (q$735$20467) (if q$735$20467 (begin (quote #f) ((lambda (r$735$20469) (if r$735$20469 (begin (quote #f) (append q$735$20467 r$735$20469)) (quote #f))) ((lambda (x$735$20471) (if (syntax-pair?$735$14331 x$735$20471) (begin (quote #f) ((lambda (q$735$20473) (if q$735$20473 (begin (quote #f) ((lambda (r$735$20475) (if r$735$20475 (begin (quote #f) (append q$735$20473 r$735$20475)) (quote #f))) ((lambda (x$735$20477) (if (syntax-pair?$735$14331 x$735$20477) (begin (quote #f) ((lambda (q$735$20479) (if q$735$20479 (begin (quote #f) ((lambda (r$735$20481) (if r$735$20481 (begin (quote #f) (append q$735$20479 r$735$20481)) (quote #f))) ((lambda (x$735$20483) (if (equal? (stx->datum$735$14365 x$735$20483) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$20477)))) (quote #f))) ((lambda (x$735$20485) (list x$735$20485)) (syntax-car$735$14339 x$735$20477)))) (quote #f))) (syntax-cdr$735$14343 x$735$20471)))) (quote #f))) ((lambda (x$735$20487) (list x$735$20487)) (syntax-car$735$14339 x$735$20471)))) (quote #f))) (syntax-cdr$735$14343 x$735$20465)))) (quote #f))) ((lambda (x$735$20489) (list x$735$20489)) (syntax-car$735$14339 x$735$20465)))) (quote #f))) t$735$20439))) spec$735$20435))) (set! get-record-predicate-name$735$19503 (lambda (spec$735$20379 ctxt$735$20380) ((lambda (t$735$20383) ((lambda (ls/false$735$20385) (if (if ls/false$735$20385 (begin (quote #f) (apply (lambda (foo$735$20387 make-foo$735$20388 foo?$735$20389) (quote #t)) ls/false$735$20385)) (quote #f)) (apply (lambda (foo$735$20393 make-foo$735$20394 foo?$735$20395) foo?$735$20395) ls/false$735$20385) ((lambda (t$735$20399) ((lambda (ls/false$735$20401) (if (if ls/false$735$20401 (begin (quote #f) (apply (lambda (foo$735$20403) (quote #t)) ls/false$735$20401)) (quote #f)) (apply (lambda (foo$735$20405) (id$735$19497 ctxt$735$20380 (stx->datum$735$14365 foo$735$20405) (quote "?"))) ls/false$735$20401) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20399 (quote ()))))) ((lambda (x$735$20407) (list x$735$20407)) t$735$20399))) t$735$20383))) ((lambda (x$735$20409) (if (syntax-pair?$735$14331 x$735$20409) (begin (quote #f) ((lambda (q$735$20411) (if q$735$20411 (begin (quote #f) ((lambda (r$735$20413) (if r$735$20413 (begin (quote #f) (append q$735$20411 r$735$20413)) (quote #f))) ((lambda (x$735$20415) (if (syntax-pair?$735$14331 x$735$20415) (begin (quote #f) ((lambda (q$735$20417) (if q$735$20417 (begin (quote #f) ((lambda (r$735$20419) (if r$735$20419 (begin (quote #f) (append q$735$20417 r$735$20419)) (quote #f))) ((lambda (x$735$20421) (if (syntax-pair?$735$14331 x$735$20421) (begin (quote #f) ((lambda (q$735$20423) (if q$735$20423 (begin (quote #f) ((lambda (r$735$20425) (if r$735$20425 (begin (quote #f) (append q$735$20423 r$735$20425)) (quote #f))) ((lambda (x$735$20427) (if (equal? (stx->datum$735$14365 x$735$20427) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$20421)))) (quote #f))) ((lambda (x$735$20429) (list x$735$20429)) (syntax-car$735$14339 x$735$20421)))) (quote #f))) (syntax-cdr$735$14343 x$735$20415)))) (quote #f))) ((lambda (x$735$20431) (list x$735$20431)) (syntax-car$735$14339 x$735$20415)))) (quote #f))) (syntax-cdr$735$14343 x$735$20409)))) (quote #f))) ((lambda (x$735$20433) (list x$735$20433)) (syntax-car$735$14339 x$735$20409)))) (quote #f))) t$735$20383))) spec$735$20379))) (set! get-clause$735$19505 (lambda (id$735$20335 ls$735$20336) ((lambda (t$735$20339) ((lambda (ls/false$735$20341) (if (if ls/false$735$20341 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$20341)) (quote #f)) (apply (lambda () (quote #f)) ls/false$735$20341) ((lambda (t$735$20343) ((lambda (ls/false$735$20345) (if (if ls/false$735$20345 (begin (quote #f) (apply (lambda (x$735$20347 rest$735$20348 ls$735$20349) (quote #t)) ls/false$735$20345)) (quote #f)) (apply (lambda (x$735$20353 rest$735$20354 ls$735$20355) (if (free-id=?$735$14353 (bless$735$14808 id$735$20335) x$735$20353) (cons x$735$20353 rest$735$20354) (get-clause$735$19505 id$735$20335 ls$735$20355))) ls/false$735$20345) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20343 (quote ()))))) ((lambda (x$735$20359) (if (syntax-pair?$735$14331 x$735$20359) (begin (quote #f) ((lambda (q$735$20361) (if q$735$20361 (begin (quote #f) ((lambda (r$735$20363) (if r$735$20363 (begin (quote #f) (append q$735$20361 r$735$20363)) (quote #f))) ((lambda (x$735$20365) (list x$735$20365)) (syntax-cdr$735$14343 x$735$20359)))) (quote #f))) ((lambda (x$735$20367) (if (syntax-pair?$735$14331 x$735$20367) (begin (quote #f) ((lambda (q$735$20369) (if q$735$20369 (begin (quote #f) ((lambda (r$735$20371) (if r$735$20371 (begin (quote #f) (append q$735$20369 r$735$20371)) (quote #f))) ((lambda (x$735$20373) (list x$735$20373)) (syntax-cdr$735$14343 x$735$20367)))) (quote #f))) ((lambda (x$735$20375) (list x$735$20375)) (syntax-car$735$14339 x$735$20367)))) (quote #f))) (syntax-car$735$14339 x$735$20359)))) (quote #f))) t$735$20343))) t$735$20339))) ((lambda (x$735$20377) (if (equal? (stx->datum$735$14365 x$735$20377) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$735$20339))) ls$735$20336))) (set! foo-rtd-code$735$19507 (lambda (ctxt$735$20077 name$735$20078 clause*$735$20079) ((lambda (convert-field-spec*$735$20083) (begin (set! convert-field-spec*$735$20083 (lambda (ls$735$20085) (list->vector (map (lambda (x$735$20087) ((lambda (t$735$20089) ((lambda (ls/false$735$20091) (if (if ls/false$735$20091 (begin (quote #f) (apply (lambda (name$735$20093 rest$735$20094) (quote #t)) ls/false$735$20091)) (quote #f)) (apply (lambda (name$735$20097 rest$735$20098) (list (quote mutable) name$735$20097)) ls/false$735$20091) ((lambda (t$735$20101) ((lambda (ls/false$735$20103) (if (if ls/false$735$20103 (begin (quote #f) (apply (lambda (name$735$20105 rest$735$20106) (quote #t)) ls/false$735$20103)) (quote #f)) (apply (lambda (name$735$20109 rest$735$20110) (list (quote immutable) name$735$20109)) ls/false$735$20103) ((lambda (t$735$20113) ((lambda (ls/false$735$20115) (if (if ls/false$735$20115 (begin (quote #f) (apply (lambda (name$735$20117) (quote #t)) ls/false$735$20115)) (quote #f)) (apply (lambda (name$735$20119) (list (quote immutable) name$735$20119)) ls/false$735$20115) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20113 (quote ()))))) ((lambda (x$735$20121) (list x$735$20121)) t$735$20113))) t$735$20101))) ((lambda (x$735$20123) (if (syntax-pair?$735$14331 x$735$20123) (begin (quote #f) ((lambda (q$735$20125) (if q$735$20125 (begin (quote #f) ((lambda (r$735$20127) (if r$735$20127 (begin (quote #f) (append q$735$20125 r$735$20127)) (quote #f))) ((lambda (x$735$20129) (if (syntax-pair?$735$14331 x$735$20129) (begin (quote #f) ((lambda (q$735$20131) (if q$735$20131 (begin (quote #f) ((lambda (r$735$20133) (if r$735$20133 (begin (quote #f) (append q$735$20131 r$735$20133)) (quote #f))) ((lambda (x$735$20135) (list x$735$20135)) (syntax-cdr$735$14343 x$735$20129)))) (quote #f))) ((lambda (x$735$20137) (list x$735$20137)) (syntax-car$735$14339 x$735$20129)))) (quote #f))) (syntax-cdr$735$14343 x$735$20123)))) (quote #f))) ((lambda (x$735$20139) (if (id?$735$14345 x$735$20139) (if (free-id=?$735$14353 x$735$20139 (scheme-stx$735$14774 (quote immutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$20123)))) (quote #f))) t$735$20101))) t$735$20089))) ((lambda (x$735$20141) (if (syntax-pair?$735$14331 x$735$20141) (begin (quote #f) ((lambda (q$735$20143) (if q$735$20143 (begin (quote #f) ((lambda (r$735$20145) (if r$735$20145 (begin (quote #f) (append q$735$20143 r$735$20145)) (quote #f))) ((lambda (x$735$20147) (if (syntax-pair?$735$14331 x$735$20147) (begin (quote #f) ((lambda (q$735$20149) (if q$735$20149 (begin (quote #f) ((lambda (r$735$20151) (if r$735$20151 (begin (quote #f) (append q$735$20149 r$735$20151)) (quote #f))) ((lambda (x$735$20153) (list x$735$20153)) (syntax-cdr$735$14343 x$735$20147)))) (quote #f))) ((lambda (x$735$20155) (list x$735$20155)) (syntax-car$735$14339 x$735$20147)))) (quote #f))) (syntax-cdr$735$14343 x$735$20141)))) (quote #f))) ((lambda (x$735$20157) (if (id?$735$14345 x$735$20157) (if (free-id=?$735$14353 x$735$20157 (scheme-stx$735$14774 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$20141)))) (quote #f))) t$735$20089))) x$735$20087)) ls$735$20085)))) ((lambda (parent-rtd-code$735$20159 uid-code$735$20160 sealed?$735$20161 opaque?$735$20162 fields$735$20163) (bless$735$14808 (list (quote make-record-type-descriptor) (list (quote quote) name$735$20078) parent-rtd-code$735$20159 uid-code$735$20160 sealed?$735$20161 opaque?$735$20162 fields$735$20163))) ((lambda (t$735$20169) ((lambda (ls/false$735$20171) (if (if ls/false$735$20171 (begin (quote #f) (apply (lambda (name$735$20173) (quote #t)) ls/false$735$20171)) (quote #f)) (apply (lambda (name$735$20175) (list (quote record-type-descriptor) name$735$20175)) ls/false$735$20171) ((lambda (t$735$20177) ((lambda (ls/false$735$20179) (if (if ls/false$735$20179 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$20179)) (quote #f)) (apply (lambda () (quote #f)) ls/false$735$20179) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20177 (quote ()))))) ((lambda (x$735$20181) (quote ())) t$735$20177))) t$735$20169))) ((lambda (x$735$20183) (if (syntax-pair?$735$14331 x$735$20183) (begin (quote #f) ((lambda (q$735$20185) (if q$735$20185 (begin (quote #f) ((lambda (r$735$20187) (if r$735$20187 (begin (quote #f) (append q$735$20185 r$735$20187)) (quote #f))) ((lambda (x$735$20189) (if (syntax-pair?$735$14331 x$735$20189) (begin (quote #f) ((lambda (q$735$20191) (if q$735$20191 (begin (quote #f) ((lambda (r$735$20193) (if r$735$20193 (begin (quote #f) (append q$735$20191 r$735$20193)) (quote #f))) ((lambda (x$735$20195) (if (equal? (stx->datum$735$14365 x$735$20195) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$20189)))) (quote #f))) ((lambda (x$735$20197) (list x$735$20197)) (syntax-car$735$14339 x$735$20189)))) (quote #f))) (syntax-cdr$735$14343 x$735$20183)))) (quote #f))) ((lambda (x$735$20199) (quote ())) (syntax-car$735$14339 x$735$20183)))) (quote #f))) t$735$20169))) (get-clause$735$19505 (quote parent) clause*$735$20079)) ((lambda (t$735$20201) ((lambda (ls/false$735$20203) (if (if ls/false$735$20203 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$20203)) (quote #f)) (apply (lambda () (list (quote quote) (gensym))) ls/false$735$20203) ((lambda (t$735$20205) ((lambda (ls/false$735$20207) (if (if ls/false$735$20207 (begin (quote #f) (apply (lambda (uid$735$20209) (quote #t)) ls/false$735$20207)) (quote #f)) (apply (lambda (uid$735$20211) (list (quote quote) uid$735$20211)) ls/false$735$20207) ((lambda (t$735$20213) ((lambda (ls/false$735$20215) (if (if ls/false$735$20215 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$20215)) (quote #f)) (apply (lambda () (quote #f)) ls/false$735$20215) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20213 (quote ()))))) ((lambda (x$735$20217) (quote ())) t$735$20213))) t$735$20205))) ((lambda (x$735$20219) (if (syntax-pair?$735$14331 x$735$20219) (begin (quote #f) ((lambda (q$735$20221) (if q$735$20221 (begin (quote #f) ((lambda (r$735$20223) (if r$735$20223 (begin (quote #f) (append q$735$20221 r$735$20223)) (quote #f))) ((lambda (x$735$20225) (if (syntax-pair?$735$14331 x$735$20225) (begin (quote #f) ((lambda (q$735$20227) (if q$735$20227 (begin (quote #f) ((lambda (r$735$20229) (if r$735$20229 (begin (quote #f) (append q$735$20227 r$735$20229)) (quote #f))) ((lambda (x$735$20231) (if (equal? (stx->datum$735$14365 x$735$20231) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$20225)))) (quote #f))) ((lambda (x$735$20233) (list x$735$20233)) (syntax-car$735$14339 x$735$20225)))) (quote #f))) (syntax-cdr$735$14343 x$735$20219)))) (quote #f))) ((lambda (x$735$20235) (quote ())) (syntax-car$735$14339 x$735$20219)))) (quote #f))) t$735$20205))) t$735$20201))) ((lambda (x$735$20237) (if (syntax-pair?$735$14331 x$735$20237) (begin (quote #f) ((lambda (q$735$20239) (if q$735$20239 (begin (quote #f) ((lambda (r$735$20241) (if r$735$20241 (begin (quote #f) (append q$735$20239 r$735$20241)) (quote #f))) ((lambda (x$735$20243) (if (equal? (stx->datum$735$14365 x$735$20243) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$20237)))) (quote #f))) ((lambda (x$735$20245) (quote ())) (syntax-car$735$14339 x$735$20237)))) (quote #f))) t$735$20201))) (get-clause$735$19505 (quote nongenerative) clause*$735$20079)) ((lambda (t$735$20247) ((lambda (ls/false$735$20249) (if (if ls/false$735$20249 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$20249)) (quote #f)) (apply (lambda () (quote #t)) ls/false$735$20249) ((lambda (t$735$20251) ((lambda (ls/false$735$20253) (if (if ls/false$735$20253 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$20253)) (quote #f)) (apply (lambda () (quote #f)) ls/false$735$20253) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20251 (quote ()))))) ((lambda (x$735$20255) (quote ())) t$735$20251))) t$735$20247))) ((lambda (x$735$20257) (if (syntax-pair?$735$14331 x$735$20257) (begin (quote #f) ((lambda (q$735$20259) (if q$735$20259 (begin (quote #f) ((lambda (r$735$20261) (if r$735$20261 (begin (quote #f) (append q$735$20259 r$735$20261)) (quote #f))) ((lambda (x$735$20263) (if (syntax-pair?$735$14331 x$735$20263) (begin (quote #f) ((lambda (q$735$20265) (if q$735$20265 (begin (quote #f) ((lambda (r$735$20267) (if r$735$20267 (begin (quote #f) (append q$735$20265 r$735$20267)) (quote #f))) ((lambda (x$735$20269) (if (equal? (stx->datum$735$14365 x$735$20269) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$20263)))) (quote #f))) ((lambda (x$735$20271) (if (equal? (stx->datum$735$14365 x$735$20271) (quote #t)) (begin (quote #f) (quote ())) (quote #f))) (syntax-car$735$14339 x$735$20263)))) (quote #f))) (syntax-cdr$735$14343 x$735$20257)))) (quote #f))) ((lambda (x$735$20273) (quote ())) (syntax-car$735$14339 x$735$20257)))) (quote #f))) t$735$20247))) (get-clause$735$19505 (quote sealed?) clause*$735$20079)) ((lambda (t$735$20275) ((lambda (ls/false$735$20277) (if (if ls/false$735$20277 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$20277)) (quote #f)) (apply (lambda () (quote #t)) ls/false$735$20277) ((lambda (t$735$20279) ((lambda (ls/false$735$20281) (if (if ls/false$735$20281 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$20281)) (quote #f)) (apply (lambda () (quote #f)) ls/false$735$20281) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20279 (quote ()))))) ((lambda (x$735$20283) (quote ())) t$735$20279))) t$735$20275))) ((lambda (x$735$20285) (if (syntax-pair?$735$14331 x$735$20285) (begin (quote #f) ((lambda (q$735$20287) (if q$735$20287 (begin (quote #f) ((lambda (r$735$20289) (if r$735$20289 (begin (quote #f) (append q$735$20287 r$735$20289)) (quote #f))) ((lambda (x$735$20291) (if (syntax-pair?$735$14331 x$735$20291) (begin (quote #f) ((lambda (q$735$20293) (if q$735$20293 (begin (quote #f) ((lambda (r$735$20295) (if r$735$20295 (begin (quote #f) (append q$735$20293 r$735$20295)) (quote #f))) ((lambda (x$735$20297) (if (equal? (stx->datum$735$14365 x$735$20297) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$20291)))) (quote #f))) ((lambda (x$735$20299) (if (equal? (stx->datum$735$14365 x$735$20299) (quote #t)) (begin (quote #f) (quote ())) (quote #f))) (syntax-car$735$14339 x$735$20291)))) (quote #f))) (syntax-cdr$735$14343 x$735$20285)))) (quote #f))) ((lambda (x$735$20301) (quote ())) (syntax-car$735$14339 x$735$20285)))) (quote #f))) t$735$20275))) (get-clause$735$19505 (quote opaque?) clause*$735$20079)) ((lambda (t$735$20303) ((lambda (ls/false$735$20305) (if (if ls/false$735$20305 (begin (quote #f) (apply (lambda (field-spec*$735$20307) (quote #t)) ls/false$735$20305)) (quote #f)) (apply (lambda (field-spec*$735$20309) (list (quote quote) (convert-field-spec*$735$20083 field-spec*$735$20309))) ls/false$735$20305) ((lambda (t$735$20311) ((lambda (ls/false$735$20313) (if (if ls/false$735$20313 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$20313)) (quote #f)) (apply (lambda () (quote (quote #0()))) ls/false$735$20313) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20311 (quote ()))))) ((lambda (x$735$20315) (quote ())) t$735$20311))) t$735$20303))) ((lambda (x$735$20317) (if (syntax-pair?$735$14331 x$735$20317) (begin (quote #f) ((lambda (q$735$20319) (if q$735$20319 (begin (quote #f) ((lambda (r$735$20321) (if r$735$20321 (begin (quote #f) (append q$735$20319 r$735$20321)) (quote #f))) ((letrec ((f$735$20323 (lambda (x$735$20325) (if (syntax-pair?$735$14331 x$735$20325) ((lambda (cars/f$735$20327) (if cars/f$735$20327 (begin (quote #f) ((lambda (cdrs/f$735$20329) (if cdrs/f$735$20329 (begin (quote #f) (map cons cars/f$735$20327 cdrs/f$735$20329)) (quote #f))) (f$735$20323 (syntax-cdr$735$14343 x$735$20325)))) (quote #f))) ((lambda (x$735$20331) (list x$735$20331)) (syntax-car$735$14339 x$735$20325))) (if (syntax-null?$735$14335 x$735$20325) (list (begin (quote field-spec*) (quote ()))) (quote #f)))))) f$735$20323) (syntax-cdr$735$14343 x$735$20317)))) (quote #f))) ((lambda (x$735$20333) (quote ())) (syntax-car$735$14339 x$735$20317)))) (quote #f))) t$735$20303))) (get-clause$735$19505 (quote fields) clause*$735$20079))))) (quote #f)))) (set! foo-rcd-code$735$19509 (lambda (clause*$735$20037 foo-rtd$735$20038 protocol$735$20039) ((lambda (parent-rcd-code$735$20043) (list (quote make-record-constructor-descriptor) foo-rtd$735$20038 parent-rcd-code$735$20043 protocol$735$20039)) ((lambda (t$735$20045) ((lambda (ls/false$735$20047) (if (if ls/false$735$20047 (begin (quote #f) (apply (lambda (name$735$20049) (quote #t)) ls/false$735$20047)) (quote #f)) (apply (lambda (name$735$20051) (list (quote record-constructor-descriptor) name$735$20051)) ls/false$735$20047) ((lambda (t$735$20053) ((lambda (ls/false$735$20055) (if (if ls/false$735$20055 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$20055)) (quote #f)) (apply (lambda () (quote #f)) ls/false$735$20055) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20053 (quote ()))))) ((lambda (x$735$20057) (quote ())) t$735$20053))) t$735$20045))) ((lambda (x$735$20059) (if (syntax-pair?$735$14331 x$735$20059) (begin (quote #f) ((lambda (q$735$20061) (if q$735$20061 (begin (quote #f) ((lambda (r$735$20063) (if r$735$20063 (begin (quote #f) (append q$735$20061 r$735$20063)) (quote #f))) ((lambda (x$735$20065) (if (syntax-pair?$735$14331 x$735$20065) (begin (quote #f) ((lambda (q$735$20067) (if q$735$20067 (begin (quote #f) ((lambda (r$735$20069) (if r$735$20069 (begin (quote #f) (append q$735$20067 r$735$20069)) (quote #f))) ((lambda (x$735$20071) (if (equal? (stx->datum$735$14365 x$735$20071) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$20065)))) (quote #f))) ((lambda (x$735$20073) (list x$735$20073)) (syntax-car$735$14339 x$735$20065)))) (quote #f))) (syntax-cdr$735$14343 x$735$20059)))) (quote #f))) ((lambda (x$735$20075) (quote ())) (syntax-car$735$14339 x$735$20059)))) (quote #f))) t$735$20045))) (get-clause$735$19505 (quote parent) clause*$735$20037))))) (set! get-protocol-code$735$19511 (lambda (clause*$735$20003) ((lambda (t$735$20005) ((lambda (ls/false$735$20007) (if (if ls/false$735$20007 (begin (quote #f) (apply (lambda (expr$735$20009) (quote #t)) ls/false$735$20007)) (quote #f)) (apply (lambda (expr$735$20011) expr$735$20011) ls/false$735$20007) ((lambda (t$735$20013) ((lambda (ls/false$735$20015) (if (if ls/false$735$20015 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$20015)) (quote #f)) (apply (lambda () (quote #f)) ls/false$735$20015) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20013 (quote ()))))) ((lambda (x$735$20017) (quote ())) t$735$20013))) t$735$20005))) ((lambda (x$735$20019) (if (syntax-pair?$735$14331 x$735$20019) (begin (quote #f) ((lambda (q$735$20021) (if q$735$20021 (begin (quote #f) ((lambda (r$735$20023) (if r$735$20023 (begin (quote #f) (append q$735$20021 r$735$20023)) (quote #f))) ((lambda (x$735$20025) (if (syntax-pair?$735$14331 x$735$20025) (begin (quote #f) ((lambda (q$735$20027) (if q$735$20027 (begin (quote #f) ((lambda (r$735$20029) (if r$735$20029 (begin (quote #f) (append q$735$20027 r$735$20029)) (quote #f))) ((lambda (x$735$20031) (if (equal? (stx->datum$735$14365 x$735$20031) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$20025)))) (quote #f))) ((lambda (x$735$20033) (list x$735$20033)) (syntax-car$735$14339 x$735$20025)))) (quote #f))) (syntax-cdr$735$14343 x$735$20019)))) (quote #f))) ((lambda (x$735$20035) (quote ())) (syntax-car$735$14339 x$735$20019)))) (quote #f))) t$735$20005))) (get-clause$735$19505 (quote protocol) clause*$735$20003)))) (set! get-fields$735$19513 (lambda (clause*$735$19943) ((lambda (t$735$19945) ((lambda (ls/false$735$19947) (if (if ls/false$735$19947 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$19947)) (quote #f)) (apply (lambda () (quote ())) ls/false$735$19947) ((lambda (t$735$19949) ((lambda (ls/false$735$19951) (if (if ls/false$735$19951 (begin (quote #f) (apply (lambda (f*$735$19953) (quote #t)) ls/false$735$19951)) (quote #f)) (apply (lambda (f*$735$19955) f*$735$19955) ls/false$735$19951) ((lambda (t$735$19957) ((lambda (ls/false$735$19959) (if (if ls/false$735$19959 (begin (quote #f) (apply (lambda (rest$735$19961) (quote #t)) ls/false$735$19959)) (quote #f)) (apply (lambda (rest$735$19963) (get-fields$735$19513 rest$735$19963)) ls/false$735$19959) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$19957 (quote ()))))) ((lambda (x$735$19965) (if (syntax-pair?$735$14331 x$735$19965) (begin (quote #f) ((lambda (q$735$19967) (if q$735$19967 (begin (quote #f) ((lambda (r$735$19969) (if r$735$19969 (begin (quote #f) (append q$735$19967 r$735$19969)) (quote #f))) ((lambda (x$735$19971) (list x$735$19971)) (syntax-cdr$735$14343 x$735$19965)))) (quote #f))) ((lambda (x$735$19973) (quote ())) (syntax-car$735$14339 x$735$19965)))) (quote #f))) t$735$19957))) t$735$19949))) ((lambda (x$735$19975) (if (syntax-pair?$735$14331 x$735$19975) (begin (quote #f) ((lambda (q$735$19977) (if q$735$19977 (begin (quote #f) ((lambda (r$735$19979) (if r$735$19979 (begin (quote #f) (append q$735$19977 r$735$19979)) (quote #f))) ((lambda (x$735$19981) (quote ())) (syntax-cdr$735$14343 x$735$19975)))) (quote #f))) ((lambda (x$735$19983) (if (syntax-pair?$735$14331 x$735$19983) (begin (quote #f) ((lambda (q$735$19985) (if q$735$19985 (begin (quote #f) ((lambda (r$735$19987) (if r$735$19987 (begin (quote #f) (append q$735$19985 r$735$19987)) (quote #f))) ((letrec ((f$735$19989 (lambda (x$735$19991) (if (syntax-pair?$735$14331 x$735$19991) ((lambda (cars/f$735$19993) (if cars/f$735$19993 (begin (quote #f) ((lambda (cdrs/f$735$19995) (if cdrs/f$735$19995 (begin (quote #f) (map cons cars/f$735$19993 cdrs/f$735$19995)) (quote #f))) (f$735$19989 (syntax-cdr$735$14343 x$735$19991)))) (quote #f))) ((lambda (x$735$19997) (list x$735$19997)) (syntax-car$735$14339 x$735$19991))) (if (syntax-null?$735$14335 x$735$19991) (list (begin (quote f*) (quote ()))) (quote #f)))))) f$735$19989) (syntax-cdr$735$14343 x$735$19983)))) (quote #f))) ((lambda (x$735$19999) (if (id?$735$14345 x$735$19999) (if (free-id=?$735$14353 x$735$19999 (scheme-stx$735$14774 (quote fields))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19983)))) (quote #f))) (syntax-car$735$14339 x$735$19975)))) (quote #f))) t$735$19949))) t$735$19945))) ((lambda (x$735$20001) (if (equal? (stx->datum$735$14365 x$735$20001) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$735$19945))) clause*$735$19943))) (set! get-mutator-indices$735$19515 (lambda (fields$735$19885) (letrec ((f$735$19887 (lambda (fields$735$19889 i$735$19890) ((lambda (t$735$19893) ((lambda (ls/false$735$19895) (if (if ls/false$735$19895 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$19895)) (quote #f)) (apply (lambda () (quote ())) ls/false$735$19895) ((lambda (t$735$19897) ((lambda (ls/false$735$19899) (if (if ls/false$735$19899 (begin (quote #f) (apply (lambda (rest$735$19901) (quote #t)) ls/false$735$19899)) (quote #f)) (apply (lambda (rest$735$19903) (cons i$735$19890 (f$735$19887 rest$735$19903 (+ i$735$19890 (quote 1))))) ls/false$735$19899) ((lambda (t$735$19905) ((lambda (ls/false$735$19907) (if (if ls/false$735$19907 (begin (quote #f) (apply (lambda (rest$735$19909) (quote #t)) ls/false$735$19907)) (quote #f)) (apply (lambda (rest$735$19911) (f$735$19887 rest$735$19911 (+ i$735$19890 (quote 1)))) ls/false$735$19907) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$19905 (quote ()))))) ((lambda (x$735$19913) (if (syntax-pair?$735$14331 x$735$19913) (begin (quote #f) ((lambda (q$735$19915) (if q$735$19915 (begin (quote #f) ((lambda (r$735$19917) (if r$735$19917 (begin (quote #f) (append q$735$19915 r$735$19917)) (quote #f))) ((lambda (x$735$19919) (list x$735$19919)) (syntax-cdr$735$14343 x$735$19913)))) (quote #f))) ((lambda (x$735$19921) (quote ())) (syntax-car$735$14339 x$735$19913)))) (quote #f))) t$735$19905))) t$735$19897))) ((lambda (x$735$19923) (if (syntax-pair?$735$14331 x$735$19923) (begin (quote #f) ((lambda (q$735$19925) (if q$735$19925 (begin (quote #f) ((lambda (r$735$19927) (if r$735$19927 (begin (quote #f) (append q$735$19925 r$735$19927)) (quote #f))) ((lambda (x$735$19929) (list x$735$19929)) (syntax-cdr$735$14343 x$735$19923)))) (quote #f))) ((lambda (x$735$19931) (if (syntax-pair?$735$14331 x$735$19931) (begin (quote #f) ((lambda (q$735$19933) (if q$735$19933 (begin (quote #f) ((lambda (r$735$19935) (if r$735$19935 (begin (quote #f) (append q$735$19933 r$735$19935)) (quote #f))) ((lambda (x$735$19937) (quote ())) (syntax-cdr$735$14343 x$735$19931)))) (quote #f))) ((lambda (x$735$19939) (if (id?$735$14345 x$735$19939) (if (free-id=?$735$14353 x$735$19939 (scheme-stx$735$14774 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19931)))) (quote #f))) (syntax-car$735$14339 x$735$19923)))) (quote #f))) t$735$19897))) t$735$19893))) ((lambda (x$735$19941) (if (equal? (stx->datum$735$14365 x$735$19941) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$735$19893))) fields$735$19889)))) (f$735$19887 fields$735$19885 (quote 0))))) (set! get-mutators$735$19517 (lambda (foo$735$19747 fields$735$19748 ctxt$735$19749) ((lambda (gen-name$735$19753) (begin (set! gen-name$735$19753 (lambda (x$735$19755) (datum->syntax$735$15001 ctxt$735$19749 (string->symbol (string-append (quote "set-") (symbol->string (syntax->datum$735$15003 foo$735$19747)) (quote "-") (symbol->string (syntax->datum$735$15003 x$735$19755)) (quote "!")))))) (letrec ((f$735$19757 (lambda (fields$735$19759) ((lambda (t$735$19761) ((lambda (ls/false$735$19763) (if (if ls/false$735$19763 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$19763)) (quote #f)) (apply (lambda () (quote ())) ls/false$735$19763) ((lambda (t$735$19765) ((lambda (ls/false$735$19767) (if (if ls/false$735$19767 (begin (quote #f) (apply (lambda (name$735$19769 accessor$735$19770 mutator$735$19771 rest$735$19772) (quote #t)) ls/false$735$19767)) (quote #f)) (apply (lambda (name$735$19777 accessor$735$19778 mutator$735$19779 rest$735$19780) (cons mutator$735$19779 (f$735$19757 rest$735$19780))) ls/false$735$19767) ((lambda (t$735$19785) ((lambda (ls/false$735$19787) (if (if ls/false$735$19787 (begin (quote #f) (apply (lambda (name$735$19789 rest$735$19790) (quote #t)) ls/false$735$19787)) (quote #f)) (apply (lambda (name$735$19793 rest$735$19794) (cons (gen-name$735$19753 name$735$19793) (f$735$19757 rest$735$19794))) ls/false$735$19787) ((lambda (t$735$19797) ((lambda (ls/false$735$19799) (if (if ls/false$735$19799 (begin (quote #f) (apply (lambda (rest$735$19801) (quote #t)) ls/false$735$19799)) (quote #f)) (apply (lambda (rest$735$19803) (f$735$19757 rest$735$19803)) ls/false$735$19799) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$19797 (quote ()))))) ((lambda (x$735$19805) (if (syntax-pair?$735$14331 x$735$19805) (begin (quote #f) ((lambda (q$735$19807) (if q$735$19807 (begin (quote #f) ((lambda (r$735$19809) (if r$735$19809 (begin (quote #f) (append q$735$19807 r$735$19809)) (quote #f))) ((lambda (x$735$19811) (list x$735$19811)) (syntax-cdr$735$14343 x$735$19805)))) (quote #f))) ((lambda (x$735$19813) (quote ())) (syntax-car$735$14339 x$735$19805)))) (quote #f))) t$735$19797))) t$735$19785))) ((lambda (x$735$19815) (if (syntax-pair?$735$14331 x$735$19815) (begin (quote #f) ((lambda (q$735$19817) (if q$735$19817 (begin (quote #f) ((lambda (r$735$19819) (if r$735$19819 (begin (quote #f) (append q$735$19817 r$735$19819)) (quote #f))) ((lambda (x$735$19821) (list x$735$19821)) (syntax-cdr$735$14343 x$735$19815)))) (quote #f))) ((lambda (x$735$19823) (if (syntax-pair?$735$14331 x$735$19823) (begin (quote #f) ((lambda (q$735$19825) (if q$735$19825 (begin (quote #f) ((lambda (r$735$19827) (if r$735$19827 (begin (quote #f) (append q$735$19825 r$735$19827)) (quote #f))) ((lambda (x$735$19829) (if (syntax-pair?$735$14331 x$735$19829) (begin (quote #f) ((lambda (q$735$19831) (if q$735$19831 (begin (quote #f) ((lambda (r$735$19833) (if r$735$19833 (begin (quote #f) (append q$735$19831 r$735$19833)) (quote #f))) ((lambda (x$735$19835) (if (equal? (stx->datum$735$14365 x$735$19835) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19829)))) (quote #f))) ((lambda (x$735$19837) (list x$735$19837)) (syntax-car$735$14339 x$735$19829)))) (quote #f))) (syntax-cdr$735$14343 x$735$19823)))) (quote #f))) ((lambda (x$735$19839) (if (id?$735$14345 x$735$19839) (if (free-id=?$735$14353 x$735$19839 (scheme-stx$735$14774 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19823)))) (quote #f))) (syntax-car$735$14339 x$735$19815)))) (quote #f))) t$735$19785))) t$735$19765))) ((lambda (x$735$19841) (if (syntax-pair?$735$14331 x$735$19841) (begin (quote #f) ((lambda (q$735$19843) (if q$735$19843 (begin (quote #f) ((lambda (r$735$19845) (if r$735$19845 (begin (quote #f) (append q$735$19843 r$735$19845)) (quote #f))) ((lambda (x$735$19847) (list x$735$19847)) (syntax-cdr$735$14343 x$735$19841)))) (quote #f))) ((lambda (x$735$19849) (if (syntax-pair?$735$14331 x$735$19849) (begin (quote #f) ((lambda (q$735$19851) (if q$735$19851 (begin (quote #f) ((lambda (r$735$19853) (if r$735$19853 (begin (quote #f) (append q$735$19851 r$735$19853)) (quote #f))) ((lambda (x$735$19855) (if (syntax-pair?$735$14331 x$735$19855) (begin (quote #f) ((lambda (q$735$19857) (if q$735$19857 (begin (quote #f) ((lambda (r$735$19859) (if r$735$19859 (begin (quote #f) (append q$735$19857 r$735$19859)) (quote #f))) ((lambda (x$735$19861) (if (syntax-pair?$735$14331 x$735$19861) (begin (quote #f) ((lambda (q$735$19863) (if q$735$19863 (begin (quote #f) ((lambda (r$735$19865) (if r$735$19865 (begin (quote #f) (append q$735$19863 r$735$19865)) (quote #f))) ((lambda (x$735$19867) (if (syntax-pair?$735$14331 x$735$19867) (begin (quote #f) ((lambda (q$735$19869) (if q$735$19869 (begin (quote #f) ((lambda (r$735$19871) (if r$735$19871 (begin (quote #f) (append q$735$19869 r$735$19871)) (quote #f))) ((lambda (x$735$19873) (if (equal? (stx->datum$735$14365 x$735$19873) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19867)))) (quote #f))) ((lambda (x$735$19875) (list x$735$19875)) (syntax-car$735$14339 x$735$19867)))) (quote #f))) (syntax-cdr$735$14343 x$735$19861)))) (quote #f))) ((lambda (x$735$19877) (list x$735$19877)) (syntax-car$735$14339 x$735$19861)))) (quote #f))) (syntax-cdr$735$14343 x$735$19855)))) (quote #f))) ((lambda (x$735$19879) (list x$735$19879)) (syntax-car$735$14339 x$735$19855)))) (quote #f))) (syntax-cdr$735$14343 x$735$19849)))) (quote #f))) ((lambda (x$735$19881) (if (id?$735$14345 x$735$19881) (if (free-id=?$735$14353 x$735$19881 (scheme-stx$735$14774 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19849)))) (quote #f))) (syntax-car$735$14339 x$735$19841)))) (quote #f))) t$735$19765))) t$735$19761))) ((lambda (x$735$19883) (if (equal? (stx->datum$735$14365 x$735$19883) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$735$19761))) fields$735$19759)))) (f$735$19757 fields$735$19748)))) (quote #f)))) (set! get-accessors$735$19519 (lambda (foo$735$19575 fields$735$19576 ctxt$735$19577) ((lambda (gen-name$735$19581) (begin (set! gen-name$735$19581 (lambda (x$735$19583) (datum->syntax$735$15001 ctxt$735$19577 (string->symbol (string-append (symbol->string (syntax->datum$735$15003 foo$735$19575)) (quote "-") (symbol->string (syntax->datum$735$15003 x$735$19583))))))) (map (lambda (field$735$19585) ((lambda (t$735$19587) ((lambda (ls/false$735$19589) (if (if ls/false$735$19589 (begin (quote #f) (apply (lambda (name$735$19591 accessor$735$19592 mutator$735$19593) (id?$735$14345 accessor$735$19592)) ls/false$735$19589)) (quote #f)) (apply (lambda (name$735$19597 accessor$735$19598 mutator$735$19599) accessor$735$19598) ls/false$735$19589) ((lambda (t$735$19603) ((lambda (ls/false$735$19605) (if (if ls/false$735$19605 (begin (quote #f) (apply (lambda (name$735$19607 accessor$735$19608) (id?$735$14345 accessor$735$19608)) ls/false$735$19605)) (quote #f)) (apply (lambda (name$735$19611 accessor$735$19612) accessor$735$19612) ls/false$735$19605) ((lambda (t$735$19615) ((lambda (ls/false$735$19617) (if (if ls/false$735$19617 (begin (quote #f) (apply (lambda (name$735$19619) (id?$735$14345 name$735$19619)) ls/false$735$19617)) (quote #f)) (apply (lambda (name$735$19621) (gen-name$735$19581 name$735$19621)) ls/false$735$19617) ((lambda (t$735$19623) ((lambda (ls/false$735$19625) (if (if ls/false$735$19625 (begin (quote #f) (apply (lambda (name$735$19627) (id?$735$14345 name$735$19627)) ls/false$735$19625)) (quote #f)) (apply (lambda (name$735$19629) (gen-name$735$19581 name$735$19629)) ls/false$735$19625) ((lambda (t$735$19631) ((lambda (ls/false$735$19633) (if (if ls/false$735$19633 (begin (quote #f) (apply (lambda (name$735$19635) (id?$735$14345 name$735$19635)) ls/false$735$19633)) (quote #f)) (apply (lambda (name$735$19637) (gen-name$735$19581 name$735$19637)) ls/false$735$19633) ((lambda (t$735$19639) ((lambda (ls/false$735$19641) (if (if ls/false$735$19641 (begin (quote #f) (apply (lambda (others$735$19643) (quote #t)) ls/false$735$19641)) (quote #f)) (apply (lambda (others$735$19645) (error (quote expander) (quote "invalid field spec") (strip$735$14363 field$735$19585 (quote ())))) ls/false$735$19641) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$19639 (quote ()))))) ((lambda (x$735$19647) (list x$735$19647)) t$735$19639))) t$735$19631))) ((lambda (x$735$19649) (list x$735$19649)) t$735$19631))) t$735$19623))) ((lambda (x$735$19651) (if (syntax-pair?$735$14331 x$735$19651) (begin (quote #f) ((lambda (q$735$19653) (if q$735$19653 (begin (quote #f) ((lambda (r$735$19655) (if r$735$19655 (begin (quote #f) (append q$735$19653 r$735$19655)) (quote #f))) ((lambda (x$735$19657) (if (syntax-pair?$735$14331 x$735$19657) (begin (quote #f) ((lambda (q$735$19659) (if q$735$19659 (begin (quote #f) ((lambda (r$735$19661) (if r$735$19661 (begin (quote #f) (append q$735$19659 r$735$19661)) (quote #f))) ((lambda (x$735$19663) (if (equal? (stx->datum$735$14365 x$735$19663) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19657)))) (quote #f))) ((lambda (x$735$19665) (list x$735$19665)) (syntax-car$735$14339 x$735$19657)))) (quote #f))) (syntax-cdr$735$14343 x$735$19651)))) (quote #f))) ((lambda (x$735$19667) (if (id?$735$14345 x$735$19667) (if (free-id=?$735$14353 x$735$19667 (scheme-stx$735$14774 (quote immutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19651)))) (quote #f))) t$735$19623))) t$735$19615))) ((lambda (x$735$19669) (if (syntax-pair?$735$14331 x$735$19669) (begin (quote #f) ((lambda (q$735$19671) (if q$735$19671 (begin (quote #f) ((lambda (r$735$19673) (if r$735$19673 (begin (quote #f) (append q$735$19671 r$735$19673)) (quote #f))) ((lambda (x$735$19675) (if (syntax-pair?$735$14331 x$735$19675) (begin (quote #f) ((lambda (q$735$19677) (if q$735$19677 (begin (quote #f) ((lambda (r$735$19679) (if r$735$19679 (begin (quote #f) (append q$735$19677 r$735$19679)) (quote #f))) ((lambda (x$735$19681) (if (equal? (stx->datum$735$14365 x$735$19681) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19675)))) (quote #f))) ((lambda (x$735$19683) (list x$735$19683)) (syntax-car$735$14339 x$735$19675)))) (quote #f))) (syntax-cdr$735$14343 x$735$19669)))) (quote #f))) ((lambda (x$735$19685) (if (id?$735$14345 x$735$19685) (if (free-id=?$735$14353 x$735$19685 (scheme-stx$735$14774 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19669)))) (quote #f))) t$735$19615))) t$735$19603))) ((lambda (x$735$19687) (if (syntax-pair?$735$14331 x$735$19687) (begin (quote #f) ((lambda (q$735$19689) (if q$735$19689 (begin (quote #f) ((lambda (r$735$19691) (if r$735$19691 (begin (quote #f) (append q$735$19689 r$735$19691)) (quote #f))) ((lambda (x$735$19693) (if (syntax-pair?$735$14331 x$735$19693) (begin (quote #f) ((lambda (q$735$19695) (if q$735$19695 (begin (quote #f) ((lambda (r$735$19697) (if r$735$19697 (begin (quote #f) (append q$735$19695 r$735$19697)) (quote #f))) ((lambda (x$735$19699) (if (syntax-pair?$735$14331 x$735$19699) (begin (quote #f) ((lambda (q$735$19701) (if q$735$19701 (begin (quote #f) ((lambda (r$735$19703) (if r$735$19703 (begin (quote #f) (append q$735$19701 r$735$19703)) (quote #f))) ((lambda (x$735$19705) (if (equal? (stx->datum$735$14365 x$735$19705) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19699)))) (quote #f))) ((lambda (x$735$19707) (list x$735$19707)) (syntax-car$735$14339 x$735$19699)))) (quote #f))) (syntax-cdr$735$14343 x$735$19693)))) (quote #f))) ((lambda (x$735$19709) (list x$735$19709)) (syntax-car$735$14339 x$735$19693)))) (quote #f))) (syntax-cdr$735$14343 x$735$19687)))) (quote #f))) ((lambda (x$735$19711) (if (id?$735$14345 x$735$19711) (if (free-id=?$735$14353 x$735$19711 (scheme-stx$735$14774 (quote immutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19687)))) (quote #f))) t$735$19603))) t$735$19587))) ((lambda (x$735$19713) (if (syntax-pair?$735$14331 x$735$19713) (begin (quote #f) ((lambda (q$735$19715) (if q$735$19715 (begin (quote #f) ((lambda (r$735$19717) (if r$735$19717 (begin (quote #f) (append q$735$19715 r$735$19717)) (quote #f))) ((lambda (x$735$19719) (if (syntax-pair?$735$14331 x$735$19719) (begin (quote #f) ((lambda (q$735$19721) (if q$735$19721 (begin (quote #f) ((lambda (r$735$19723) (if r$735$19723 (begin (quote #f) (append q$735$19721 r$735$19723)) (quote #f))) ((lambda (x$735$19725) (if (syntax-pair?$735$14331 x$735$19725) (begin (quote #f) ((lambda (q$735$19727) (if q$735$19727 (begin (quote #f) ((lambda (r$735$19729) (if r$735$19729 (begin (quote #f) (append q$735$19727 r$735$19729)) (quote #f))) ((lambda (x$735$19731) (if (syntax-pair?$735$14331 x$735$19731) (begin (quote #f) ((lambda (q$735$19733) (if q$735$19733 (begin (quote #f) ((lambda (r$735$19735) (if r$735$19735 (begin (quote #f) (append q$735$19733 r$735$19735)) (quote #f))) ((lambda (x$735$19737) (if (equal? (stx->datum$735$14365 x$735$19737) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$19731)))) (quote #f))) ((lambda (x$735$19739) (list x$735$19739)) (syntax-car$735$14339 x$735$19731)))) (quote #f))) (syntax-cdr$735$14343 x$735$19725)))) (quote #f))) ((lambda (x$735$19741) (list x$735$19741)) (syntax-car$735$14339 x$735$19725)))) (quote #f))) (syntax-cdr$735$14343 x$735$19719)))) (quote #f))) ((lambda (x$735$19743) (list x$735$19743)) (syntax-car$735$14339 x$735$19719)))) (quote #f))) (syntax-cdr$735$14343 x$735$19713)))) (quote #f))) ((lambda (x$735$19745) (if (id?$735$14345 x$735$19745) (if (free-id=?$735$14353 x$735$19745 (scheme-stx$735$14774 (quote mutable))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$735$14339 x$735$19713)))) (quote #f))) t$735$19587))) field$735$19585)) fields$735$19576))) (quote #f)))) (set! enumerate$735$19521 (lambda (ls$735$19567) (letrec ((f$735$19569 (lambda (ls$735$19571 i$735$19572) (if (null? ls$735$19571) (quote ()) (cons i$735$19572 (f$735$19569 (cdr ls$735$19571) (+ i$735$19572 (quote 1)))))))) (f$735$19569 ls$735$19567 (quote 0))))) (set! do-define-record$735$19523 (lambda (ctxt$735$19525 namespec$735$19526 clause*$735$19527) ((lambda (foo$735$19531) ((lambda (foo-rtd$735$19533) ((lambda (foo-rcd$735$19535) ((lambda (protocol$735$19537) ((lambda (make-foo$735$19539) ((lambda (fields$735$19541) ((lambda (idx*$735$19543) ((lambda (foo-x*$735$19545) ((lambda (set-foo-x!*$735$19547) ((lambda (set-foo-idx*$735$19549) ((lambda (foo?$735$19551) ((lambda (foo-rtd-code$735$19553) ((lambda (foo-rcd-code$735$19555) ((lambda (protocol-code$735$19557) ((lambda () (bless$735$14808 (cons (quote begin) (cons (list (quote define) foo-rtd$735$19533 foo-rtd-code$735$19553) (cons (list (quote define) protocol$735$19537 protocol-code$735$19557) (cons (list (quote define) foo-rcd$735$19535 foo-rcd-code$735$19555) (cons (list (quote define-syntax) foo$735$19531 (list (quote list) (quote (quote $rtd)) (list (quote syntax) foo-rtd$735$19533) (list (quote syntax) foo-rcd$735$19535))) (cons (list (quote define) foo?$735$19551 (list (quote record-predicate) foo-rtd$735$19533)) (cons (list (quote define) make-foo$735$19539 (list (quote record-constructor) foo-rcd$735$19535)) (append (map (lambda (foo-x$735$19559 idx$735$19560) (list (quote define) foo-x$735$19559 (list (quote record-accessor) foo-rtd$735$19533 idx$735$19560))) foo-x*$735$19545 idx*$735$19543) (map (lambda (set-foo-x!$735$19563 idx$735$19564) (list (quote define) set-foo-x!$735$19563 (list (quote record-mutator) foo-rtd$735$19533 idx$735$19564))) set-foo-x!*$735$19547 set-foo-idx*$735$19549))))))))))))) (get-protocol-code$735$19511 clause*$735$19527))) (foo-rcd-code$735$19509 clause*$735$19527 foo-rtd$735$19533 protocol$735$19537))) (foo-rtd-code$735$19507 ctxt$735$19525 foo$735$19531 clause*$735$19527))) (get-record-predicate-name$735$19503 namespec$735$19526 ctxt$735$19525))) (get-mutator-indices$735$19515 fields$735$19541))) (get-mutators$735$19517 foo$735$19531 fields$735$19541 ctxt$735$19525))) (get-accessors$735$19519 foo$735$19531 fields$735$19541 ctxt$735$19525))) (enumerate$735$19521 fields$735$19541))) (get-fields$735$19513 clause*$735$19527))) (get-record-constructor-name$735$19501 namespec$735$19526 ctxt$735$19525))) (gensym))) (gensym))) (gensym))) (get-record-name$735$19499 namespec$735$19526)))) ((lambda (t$735$20551) ((lambda (ls/false$735$20553) (if (if ls/false$735$20553 (begin (quote #f) (apply (lambda (ctxt$735$20555 namespec$735$20556 clause*$735$20557) (quote #t)) ls/false$735$20553)) (quote #f)) (apply (lambda (ctxt$735$20561 namespec$735$20562 clause*$735$20563) (do-define-record$735$19523 ctxt$735$20561 namespec$735$20562 clause*$735$20563)) ls/false$735$20553) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20551 (quote ()))))) ((lambda (x$735$20567) (if (syntax-pair?$735$14331 x$735$20567) (begin (quote #f) ((lambda (q$735$20569) (if q$735$20569 (begin (quote #f) ((lambda (r$735$20571) (if r$735$20571 (begin (quote #f) (append q$735$20569 r$735$20571)) (quote #f))) ((lambda (x$735$20573) (if (syntax-pair?$735$14331 x$735$20573) (begin (quote #f) ((lambda (q$735$20575) (if q$735$20575 (begin (quote #f) ((lambda (r$735$20577) (if r$735$20577 (begin (quote #f) (append q$735$20575 r$735$20577)) (quote #f))) ((letrec ((f$735$20579 (lambda (x$735$20581) (if (syntax-pair?$735$14331 x$735$20581) ((lambda (cars/f$735$20583) (if cars/f$735$20583 (begin (quote #f) ((lambda (cdrs/f$735$20585) (if cdrs/f$735$20585 (begin (quote #f) (map cons cars/f$735$20583 cdrs/f$735$20585)) (quote #f))) (f$735$20579 (syntax-cdr$735$14343 x$735$20581)))) (quote #f))) ((lambda (x$735$20587) (list x$735$20587)) (syntax-car$735$14339 x$735$20581))) (if (syntax-null?$735$14335 x$735$20581) (list (begin (quote clause*) (quote ()))) (quote #f)))))) f$735$20579) (syntax-cdr$735$14343 x$735$20573)))) (quote #f))) ((lambda (x$735$20589) (list x$735$20589)) (syntax-car$735$14339 x$735$20573)))) (quote #f))) (syntax-cdr$735$14343 x$735$20567)))) (quote #f))) ((lambda (x$735$20591) (list x$735$20591)) (syntax-car$735$14339 x$735$20567)))) (quote #f))) t$735$20551))) x$735$19495))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! define-condition-type-macro$735$14854 (lambda (x$735$20593) ((lambda (mkname$735$20595) (begin (set! mkname$735$20595 (lambda (name$735$20597 suffix$735$20598) (datum->syntax$735$15001 name$735$20597 (string->symbol (string-append (symbol->string (syntax->datum$735$15003 name$735$20597)) suffix$735$20598))))) ((lambda (t$735$20601) ((lambda (ls/false$735$20603) (if (if ls/false$735$20603 (begin (quote #f) (apply (lambda (ctxt$735$20605 name$735$20606 super$735$20607 constructor$735$20608 predicate$735$20609 field*$735$20610 accessor*$735$20611) (if (id?$735$14345 name$735$20606) (if (id?$735$14345 super$735$20607) (if (id?$735$14345 constructor$735$20608) (if (id?$735$14345 predicate$735$20609) (if (for-all id?$735$14345 field*$735$20610) (begin (quote #f) (for-all id?$735$14345 accessor*$735$20611)) (quote #f)) (quote #f)) (quote #f)) (quote #f)) (quote #f))) ls/false$735$20603)) (quote #f)) (apply (lambda (ctxt$735$20619 name$735$20620 super$735$20621 constructor$735$20622 predicate$735$20623 field*$735$20624 accessor*$735$20625) ((lambda (aux-accessor*$735$20633) (bless$735$14808 (cons (quote begin) (cons (cons (quote define-record-type) (cons (list name$735$20620 constructor$735$20622 (gensym)) (cons (list (quote parent) super$735$20621) (cons (cons (quote fields) (map (lambda (field$735$20635 aux$735$20636) (list (quote immutable) field$735$20635 aux$735$20636)) field*$735$20624 aux-accessor*$735$20633)) (quote ((nongenerative) (sealed #f) (opaque #f))))))) (cons (list (quote define) predicate$735$20623 (list (quote condition-predicate) (list (quote record-type-descriptor) name$735$20620))) (map (lambda (accessor$735$20639 aux$735$20640) (list (quote define) accessor$735$20639 (list (quote condition-accessor) (list (quote record-type-descriptor) name$735$20620) aux$735$20640))) accessor*$735$20625 aux-accessor*$735$20633)))))) (map (lambda (x$735$20643) (gensym)) accessor*$735$20625))) ls/false$735$20603) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20601 (quote ()))))) ((lambda (x$735$20645) (if (syntax-pair?$735$14331 x$735$20645) (begin (quote #f) ((lambda (q$735$20647) (if q$735$20647 (begin (quote #f) ((lambda (r$735$20649) (if r$735$20649 (begin (quote #f) (append q$735$20647 r$735$20649)) (quote #f))) ((lambda (x$735$20651) (if (syntax-pair?$735$14331 x$735$20651) (begin (quote #f) ((lambda (q$735$20653) (if q$735$20653 (begin (quote #f) ((lambda (r$735$20655) (if r$735$20655 (begin (quote #f) (append q$735$20653 r$735$20655)) (quote #f))) ((lambda (x$735$20657) (if (syntax-pair?$735$14331 x$735$20657) (begin (quote #f) ((lambda (q$735$20659) (if q$735$20659 (begin (quote #f) ((lambda (r$735$20661) (if r$735$20661 (begin (quote #f) (append q$735$20659 r$735$20661)) (quote #f))) ((lambda (x$735$20663) (if (syntax-pair?$735$14331 x$735$20663) (begin (quote #f) ((lambda (q$735$20665) (if q$735$20665 (begin (quote #f) ((lambda (r$735$20667) (if r$735$20667 (begin (quote #f) (append q$735$20665 r$735$20667)) (quote #f))) ((lambda (x$735$20669) (if (syntax-pair?$735$14331 x$735$20669) (begin (quote #f) ((lambda (q$735$20671) (if q$735$20671 (begin (quote #f) ((lambda (r$735$20673) (if r$735$20673 (begin (quote #f) (append q$735$20671 r$735$20673)) (quote #f))) ((letrec ((f$735$20675 (lambda (x$735$20677) (if (syntax-pair?$735$14331 x$735$20677) ((lambda (cars/f$735$20679) (if cars/f$735$20679 (begin (quote #f) ((lambda (cdrs/f$735$20681) (if cdrs/f$735$20681 (begin (quote #f) (map cons cars/f$735$20679 cdrs/f$735$20681)) (quote #f))) (f$735$20675 (syntax-cdr$735$14343 x$735$20677)))) (quote #f))) ((lambda (x$735$20683) (if (syntax-pair?$735$14331 x$735$20683) (begin (quote #f) ((lambda (q$735$20685) (if q$735$20685 (begin (quote #f) ((lambda (r$735$20687) (if r$735$20687 (begin (quote #f) (append q$735$20685 r$735$20687)) (quote #f))) ((lambda (x$735$20689) (if (syntax-pair?$735$14331 x$735$20689) (begin (quote #f) ((lambda (q$735$20691) (if q$735$20691 (begin (quote #f) ((lambda (r$735$20693) (if r$735$20693 (begin (quote #f) (append q$735$20691 r$735$20693)) (quote #f))) ((lambda (x$735$20695) (if (equal? (stx->datum$735$14365 x$735$20695) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$20689)))) (quote #f))) ((lambda (x$735$20697) (list x$735$20697)) (syntax-car$735$14339 x$735$20689)))) (quote #f))) (syntax-cdr$735$14343 x$735$20683)))) (quote #f))) ((lambda (x$735$20699) (list x$735$20699)) (syntax-car$735$14339 x$735$20683)))) (quote #f))) (syntax-car$735$14339 x$735$20677))) (if (syntax-null?$735$14335 x$735$20677) (list (begin (quote field*) (quote ())) (begin (quote accessor*) (quote ()))) (quote #f)))))) f$735$20675) (syntax-cdr$735$14343 x$735$20669)))) (quote #f))) ((lambda (x$735$20701) (list x$735$20701)) (syntax-car$735$14339 x$735$20669)))) (quote #f))) (syntax-cdr$735$14343 x$735$20663)))) (quote #f))) ((lambda (x$735$20703) (list x$735$20703)) (syntax-car$735$14339 x$735$20663)))) (quote #f))) (syntax-cdr$735$14343 x$735$20657)))) (quote #f))) ((lambda (x$735$20705) (list x$735$20705)) (syntax-car$735$14339 x$735$20657)))) (quote #f))) (syntax-cdr$735$14343 x$735$20651)))) (quote #f))) ((lambda (x$735$20707) (list x$735$20707)) (syntax-car$735$14339 x$735$20651)))) (quote #f))) (syntax-cdr$735$14343 x$735$20645)))) (quote #f))) ((lambda (x$735$20709) (list x$735$20709)) (syntax-car$735$14339 x$735$20645)))) (quote #f))) t$735$20601))) x$735$20593))) (quote #f)))) (set! incorrect-usage-macro$735$14856 (lambda (e$735$20711) (error (quote expander) (quote "incorrect usage of auxilary keyword") (strip$735$14363 e$735$20711 (quote ()))))) (set! parameterize-transformer$735$14858 (lambda (e$735$20713 r$735$20714 mr$735$20715) ((lambda (t$735$20719) ((lambda (ls/false$735$20721) (if (if ls/false$735$20721 (begin (quote #f) (apply (lambda (b$735$20723 b*$735$20724) (quote #t)) ls/false$735$20721)) (quote #f)) (apply (lambda (b$735$20727 b*$735$20728) (chi-internal$735$14908 (cons b$735$20727 b*$735$20728) r$735$20714 mr$735$20715)) ls/false$735$20721) ((lambda (t$735$20731) ((lambda (ls/false$735$20733) (if (if ls/false$735$20733 (begin (quote #f) (apply (lambda (olhs*$735$20735 orhs*$735$20736 b$735$20737 b*$735$20738) (quote #t)) ls/false$735$20733)) (quote #f)) (apply (lambda (olhs*$735$20743 orhs*$735$20744 b$735$20745 b*$735$20746) ((lambda (lhs*$735$20751 rhs*$735$20752 t*$735$20753 swap$735$20754) (build-let$735$14232 (quote #f) (append lhs*$735$20751 rhs*$735$20752) (append (chi-expr*$735$14888 olhs*$735$20743 r$735$20714 mr$735$20715) (chi-expr*$735$14888 orhs*$735$20744 r$735$20714 mr$735$20715)) (build-let$735$14232 (quote #f) (list swap$735$20754) (list (build-lambda$735$14234 (quote #f) (quote ()) (build-sequence$735$14228 (quote #f) (map (lambda (t$735$20759 lhs$735$20760 rhs$735$20761) (build-let$735$14232 (quote #f) (list t$735$20759) (list (list lhs$735$20760)) (build-sequence$735$14228 (quote #f) (list (list lhs$735$20760 rhs$735$20761) (list (quote set!) rhs$735$20761 t$735$20759))))) t*$735$20753 lhs*$735$20751 rhs*$735$20752)))) (list (quote (primitive dynamic-wind)) swap$735$20754 (build-lambda$735$14234 (quote #f) (quote ()) (chi-internal$735$14908 (cons b$735$20745 b*$735$20746) r$735$20714 mr$735$20715)) swap$735$20754)))) (map (lambda (x$735$20765) (gen-lexical$735$14255 (quote lhs))) olhs*$735$20743) (map (lambda (x$735$20767) (gen-lexical$735$14255 (quote rhs))) olhs*$735$20743) (map (lambda (x$735$20769) (gen-lexical$735$14255 (quote t))) olhs*$735$20743) (gen-lexical$735$14255 (quote swap)))) ls/false$735$20733) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20731 (quote ()))))) ((lambda (x$735$20771) (if (syntax-pair?$735$14331 x$735$20771) (begin (quote #f) ((lambda (q$735$20773) (if q$735$20773 (begin (quote #f) ((lambda (r$735$20775) (if r$735$20775 (begin (quote #f) (append q$735$20773 r$735$20775)) (quote #f))) ((lambda (x$735$20777) (if (syntax-pair?$735$14331 x$735$20777) (begin (quote #f) ((lambda (q$735$20779) (if q$735$20779 (begin (quote #f) ((lambda (r$735$20781) (if r$735$20781 (begin (quote #f) (append q$735$20779 r$735$20781)) (quote #f))) ((lambda (x$735$20783) (if (syntax-pair?$735$14331 x$735$20783) (begin (quote #f) ((lambda (q$735$20785) (if q$735$20785 (begin (quote #f) ((lambda (r$735$20787) (if r$735$20787 (begin (quote #f) (append q$735$20785 r$735$20787)) (quote #f))) ((letrec ((f$735$20789 (lambda (x$735$20791) (if (syntax-pair?$735$14331 x$735$20791) ((lambda (cars/f$735$20793) (if cars/f$735$20793 (begin (quote #f) ((lambda (cdrs/f$735$20795) (if cdrs/f$735$20795 (begin (quote #f) (map cons cars/f$735$20793 cdrs/f$735$20795)) (quote #f))) (f$735$20789 (syntax-cdr$735$14343 x$735$20791)))) (quote #f))) ((lambda (x$735$20797) (list x$735$20797)) (syntax-car$735$14339 x$735$20791))) (if (syntax-null?$735$14335 x$735$20791) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$20789) (syntax-cdr$735$14343 x$735$20783)))) (quote #f))) ((lambda (x$735$20799) (list x$735$20799)) (syntax-car$735$14339 x$735$20783)))) (quote #f))) (syntax-cdr$735$14343 x$735$20777)))) (quote #f))) ((letrec ((f$735$20801 (lambda (x$735$20803) (if (syntax-pair?$735$14331 x$735$20803) ((lambda (cars/f$735$20805) (if cars/f$735$20805 (begin (quote #f) ((lambda (cdrs/f$735$20807) (if cdrs/f$735$20807 (begin (quote #f) (map cons cars/f$735$20805 cdrs/f$735$20807)) (quote #f))) (f$735$20801 (syntax-cdr$735$14343 x$735$20803)))) (quote #f))) ((lambda (x$735$20809) (if (syntax-pair?$735$14331 x$735$20809) (begin (quote #f) ((lambda (q$735$20811) (if q$735$20811 (begin (quote #f) ((lambda (r$735$20813) (if r$735$20813 (begin (quote #f) (append q$735$20811 r$735$20813)) (quote #f))) ((lambda (x$735$20815) (if (syntax-pair?$735$14331 x$735$20815) (begin (quote #f) ((lambda (q$735$20817) (if q$735$20817 (begin (quote #f) ((lambda (r$735$20819) (if r$735$20819 (begin (quote #f) (append q$735$20817 r$735$20819)) (quote #f))) ((lambda (x$735$20821) (if (equal? (stx->datum$735$14365 x$735$20821) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$20815)))) (quote #f))) ((lambda (x$735$20823) (list x$735$20823)) (syntax-car$735$14339 x$735$20815)))) (quote #f))) (syntax-cdr$735$14343 x$735$20809)))) (quote #f))) ((lambda (x$735$20825) (list x$735$20825)) (syntax-car$735$14339 x$735$20809)))) (quote #f))) (syntax-car$735$14339 x$735$20803))) (if (syntax-null?$735$14335 x$735$20803) (list (begin (quote olhs*) (quote ())) (begin (quote orhs*) (quote ()))) (quote #f)))))) f$735$20801) (syntax-car$735$14339 x$735$20777)))) (quote #f))) (syntax-cdr$735$14343 x$735$20771)))) (quote #f))) ((lambda (x$735$20827) (quote ())) (syntax-car$735$14339 x$735$20771)))) (quote #f))) t$735$20731))) t$735$20719))) ((lambda (x$735$20829) (if (syntax-pair?$735$14331 x$735$20829) (begin (quote #f) ((lambda (q$735$20831) (if q$735$20831 (begin (quote #f) ((lambda (r$735$20833) (if r$735$20833 (begin (quote #f) (append q$735$20831 r$735$20833)) (quote #f))) ((lambda (x$735$20835) (if (syntax-pair?$735$14331 x$735$20835) (begin (quote #f) ((lambda (q$735$20837) (if q$735$20837 (begin (quote #f) ((lambda (r$735$20839) (if r$735$20839 (begin (quote #f) (append q$735$20837 r$735$20839)) (quote #f))) ((lambda (x$735$20841) (if (syntax-pair?$735$14331 x$735$20841) (begin (quote #f) ((lambda (q$735$20843) (if q$735$20843 (begin (quote #f) ((lambda (r$735$20845) (if r$735$20845 (begin (quote #f) (append q$735$20843 r$735$20845)) (quote #f))) ((letrec ((f$735$20847 (lambda (x$735$20849) (if (syntax-pair?$735$14331 x$735$20849) ((lambda (cars/f$735$20851) (if cars/f$735$20851 (begin (quote #f) ((lambda (cdrs/f$735$20853) (if cdrs/f$735$20853 (begin (quote #f) (map cons cars/f$735$20851 cdrs/f$735$20853)) (quote #f))) (f$735$20847 (syntax-cdr$735$14343 x$735$20849)))) (quote #f))) ((lambda (x$735$20855) (list x$735$20855)) (syntax-car$735$14339 x$735$20849))) (if (syntax-null?$735$14335 x$735$20849) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$20847) (syntax-cdr$735$14343 x$735$20841)))) (quote #f))) ((lambda (x$735$20857) (list x$735$20857)) (syntax-car$735$14339 x$735$20841)))) (quote #f))) (syntax-cdr$735$14343 x$735$20835)))) (quote #f))) ((lambda (x$735$20859) (if (equal? (stx->datum$735$14365 x$735$20859) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-car$735$14339 x$735$20835)))) (quote #f))) (syntax-cdr$735$14343 x$735$20829)))) (quote #f))) ((lambda (x$735$20861) (quote ())) (syntax-car$735$14339 x$735$20829)))) (quote #f))) t$735$20719))) e$735$20713))) (set! foreign-call-transformer$735$14860 (lambda (e$735$20863 r$735$20864 mr$735$20865) ((lambda (t$735$20869) ((lambda (ls/false$735$20871) (if (if ls/false$735$20871 (begin (quote #f) (apply (lambda (name$735$20873 arg*$735$20874) (quote #t)) ls/false$735$20871)) (quote #f)) (apply (lambda (name$735$20877 arg*$735$20878) (cons (quote foreign-call) (cons (chi-expr$735$14892 name$735$20877 r$735$20864 mr$735$20865) (chi-expr*$735$14888 arg*$735$20878 r$735$20864 mr$735$20865)))) ls/false$735$20871) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$20869 (quote ()))))) ((lambda (x$735$20881) (if (syntax-pair?$735$14331 x$735$20881) (begin (quote #f) ((lambda (q$735$20883) (if q$735$20883 (begin (quote #f) ((lambda (r$735$20885) (if r$735$20885 (begin (quote #f) (append q$735$20883 r$735$20885)) (quote #f))) ((lambda (x$735$20887) (if (syntax-pair?$735$14331 x$735$20887) (begin (quote #f) ((lambda (q$735$20889) (if q$735$20889 (begin (quote #f) ((lambda (r$735$20891) (if r$735$20891 (begin (quote #f) (append q$735$20889 r$735$20891)) (quote #f))) ((letrec ((f$735$20893 (lambda (x$735$20895) (if (syntax-pair?$735$14331 x$735$20895) ((lambda (cars/f$735$20897) (if cars/f$735$20897 (begin (quote #f) ((lambda (cdrs/f$735$20899) (if cdrs/f$735$20899 (begin (quote #f) (map cons cars/f$735$20897 cdrs/f$735$20899)) (quote #f))) (f$735$20893 (syntax-cdr$735$14343 x$735$20895)))) (quote #f))) ((lambda (x$735$20901) (list x$735$20901)) (syntax-car$735$14339 x$735$20895))) (if (syntax-null?$735$14335 x$735$20895) (list (begin (quote arg*) (quote ()))) (quote #f)))))) f$735$20893) (syntax-cdr$735$14343 x$735$20887)))) (quote #f))) ((lambda (x$735$20903) (list x$735$20903)) (syntax-car$735$14339 x$735$20887)))) (quote #f))) (syntax-cdr$735$14343 x$735$20881)))) (quote #f))) ((lambda (x$735$20905) (quote ())) (syntax-car$735$14339 x$735$20881)))) (quote #f))) t$735$20869))) e$735$20863))) (set! convert-pattern$735$14862 (lambda (pattern$735$20907 keys$735$20908) ((lambda (cvt*$735$20911 cvt$735$20913) (begin (set! cvt*$735$20911 (lambda (p*$735$21101 n$735$21102 ids$735$21103) (if (null? p*$735$21101) (values (quote ()) ids$735$21103) (call-with-values (lambda () (cvt*$735$20911 (cdr p*$735$21101) n$735$21102 ids$735$21103)) (lambda (y$735$21107 ids$735$21108) (call-with-values (lambda () (cvt$735$20913 (car p*$735$21101) n$735$21102 ids$735$21108)) (lambda (x$735$21111 ids$735$21112) (values (cons x$735$21111 y$735$21107) ids$735$21112)))))))) (set! cvt$735$20913 (lambda (p$735$20915 n$735$20916 ids$735$20917) ((lambda (t$735$20921) ((lambda (ls/false$735$20923) (if (if ls/false$735$20923 (begin (quote #f) (apply (lambda (id$735$20925) (id?$735$14345 id$735$20925)) ls/false$735$20923)) (quote #f)) (apply (lambda (id$735$20927) (if (bound-id-member?$735$14359 p$735$20915 keys$735$20908) (values (vector (quote free-id) p$735$20915) ids$735$20917) (if (free-id=?$735$14353 p$735$20915 (scheme-stx$735$14774 (quote _))) (values (quote _) ids$735$20917) (values (quote any) (cons (cons p$735$20915 n$735$20916) ids$735$20917))))) ls/false$735$20923) ((lambda (t$735$20929) ((lambda (ls/false$735$20931) (if (if ls/false$735$20931 (begin (quote #f) (apply (lambda (p$735$20933 dots$735$20934) (ellipsis?$735$14866 dots$735$20934)) ls/false$735$20931)) (quote #f)) (apply (lambda (p$735$20937 dots$735$20938) (call-with-values (lambda () (cvt$735$20913 p$735$20937 (+ n$735$20916 (quote 1)) ids$735$20917)) (lambda (p$735$20941 ids$735$20942) (values (if (eq? p$735$20941 (quote any)) (quote each-any) (vector (quote each) p$735$20941)) ids$735$20942)))) ls/false$735$20931) ((lambda (t$735$20945) ((lambda (ls/false$735$20947) (if (if ls/false$735$20947 (begin (quote #f) (apply (lambda (x$735$20949 dots$735$20950 ys$735$20951 z$735$20952) (ellipsis?$735$14866 dots$735$20950)) ls/false$735$20947)) (quote #f)) (apply (lambda (x$735$20957 dots$735$20958 ys$735$20959 z$735$20960) (call-with-values (lambda () (cvt$735$20913 z$735$20960 n$735$20916 ids$735$20917)) (lambda (z$735$20965 ids$735$20966) (call-with-values (lambda () (cvt*$735$20911 ys$735$20959 n$735$20916 ids$735$20966)) (lambda (ys$735$20969 ids$735$20970) (call-with-values (lambda () (cvt$735$20913 x$735$20957 (+ n$735$20916 (quote 1)) ids$735$20970)) (lambda (x$735$20973 ids$735$20974) (values (vector (quote each+) x$735$20973 (reverse ys$735$20969) z$735$20965) ids$735$20974)))))))) ls/false$735$20947) ((lambda (t$735$20977) ((lambda (ls/false$735$20979) (if (if ls/false$735$20979 (begin (quote #f) (apply (lambda (x$735$20981 y$735$20982) (quote #t)) ls/false$735$20979)) (quote #f)) (apply (lambda (x$735$20985 y$735$20986) (call-with-values (lambda () (cvt$735$20913 y$735$20986 n$735$20916 ids$735$20917)) (lambda (y$735$20989 ids$735$20990) (call-with-values (lambda () (cvt$735$20913 x$735$20985 n$735$20916 ids$735$20990)) (lambda (x$735$20993 ids$735$20994) (values (cons x$735$20993 y$735$20989) ids$735$20994)))))) ls/false$735$20979) ((lambda (t$735$20997) ((lambda (ls/false$735$20999) (if (if ls/false$735$20999 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$20999)) (quote #f)) (apply (lambda () (values (quote ()) ids$735$20917)) ls/false$735$20999) ((lambda (t$735$21001) ((lambda (ls/false$735$21003) (if (if ls/false$735$21003 (begin (quote #f) (apply (lambda (p$735$21005) (not (stx?$735$14297 p$735$21005))) ls/false$735$21003)) (quote #f)) (apply (lambda (p$735$21007) (call-with-values (lambda () (cvt$735$20913 p$735$21007 n$735$20916 ids$735$20917)) (lambda (p$735$21009 ids$735$21010) (values (vector (quote vector) p$735$21009) ids$735$21010)))) ls/false$735$21003) ((lambda (t$735$21013) ((lambda (ls/false$735$21015) (if (if ls/false$735$21015 (begin (quote #f) (apply (lambda (datum$735$21017) (quote #t)) ls/false$735$21015)) (quote #f)) (apply (lambda (datum$735$21019) (values (vector (quote atom) (stx->datum$735$14365 datum$735$21019)) ids$735$20917)) ls/false$735$21015) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$21013 (quote ()))))) ((lambda (x$735$21021) (list x$735$21021)) t$735$21013))) t$735$21001))) ((lambda (x$735$21023) (if (syntax-vector?$735$14333 x$735$21023) (begin (quote #f) ((letrec ((f$735$21025 (lambda (x$735$21027) (if (syntax-pair?$735$14331 x$735$21027) ((lambda (cars/f$735$21029) (if cars/f$735$21029 (begin (quote #f) ((lambda (cdrs/f$735$21031) (if cdrs/f$735$21031 (begin (quote #f) (map cons cars/f$735$21029 cdrs/f$735$21031)) (quote #f))) (f$735$21025 (syntax-cdr$735$14343 x$735$21027)))) (quote #f))) ((lambda (x$735$21033) (list x$735$21033)) (syntax-car$735$14339 x$735$21027))) (if (syntax-null?$735$14335 x$735$21027) (list (begin (quote p) (quote ()))) (quote #f)))))) f$735$21025) (syntax-vector->list$735$14329 x$735$21023))) (quote #f))) t$735$21001))) t$735$20997))) ((lambda (x$735$21035) (if (equal? (stx->datum$735$14365 x$735$21035) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$735$20997))) t$735$20977))) ((lambda (x$735$21037) (if (syntax-pair?$735$14331 x$735$21037) (begin (quote #f) ((lambda (q$735$21039) (if q$735$21039 (begin (quote #f) ((lambda (r$735$21041) (if r$735$21041 (begin (quote #f) (append q$735$21039 r$735$21041)) (quote #f))) ((lambda (x$735$21043) (list x$735$21043)) (syntax-cdr$735$14343 x$735$21037)))) (quote #f))) ((lambda (x$735$21045) (list x$735$21045)) (syntax-car$735$14339 x$735$21037)))) (quote #f))) t$735$20977))) t$735$20945))) ((lambda (x$735$21047) (if (syntax-pair?$735$14331 x$735$21047) (begin (quote #f) ((lambda (q$735$21049) (if q$735$21049 (begin (quote #f) ((lambda (r$735$21051) (if r$735$21051 (begin (quote #f) (append q$735$21049 r$735$21051)) (quote #f))) ((lambda (x$735$21053) (if (syntax-pair?$735$14331 x$735$21053) (begin (quote #f) ((lambda (q$735$21055) (if q$735$21055 (begin (quote #f) ((lambda (r$735$21057) (if r$735$21057 (begin (quote #f) (append q$735$21055 r$735$21057)) (quote #f))) ((letrec ((f$735$21059 (lambda (x$735$21065) (if (syntax-pair?$735$14331 x$735$21065) ((lambda (cars/f$735$21067) (if cars/f$735$21067 (begin (quote #f) ((lambda (d/f$735$21069) (if d/f$735$21069 (begin (quote #f) (cons (map cons cars/f$735$21067 (car d/f$735$21069)) (cdr d/f$735$21069))) (quote #f))) (f$735$21059 (syntax-cdr$735$14343 x$735$21065)))) (quote #f))) ((lambda (x$735$21071) (list x$735$21071)) (syntax-car$735$14339 x$735$21065))) ((lambda (d$735$21073) (if d$735$21073 (begin (quote #f) (cons (list (begin (quote ys) (quote ()))) d$735$21073)) (quote #f))) ((lambda (x$735$21075) (list x$735$21075)) x$735$21065)))))) (lambda (x$735$21061) ((lambda (x$735$21063) (if x$735$21063 (begin (quote #f) (append (car x$735$21063) (cdr x$735$21063))) (quote #f))) (f$735$21059 x$735$21061)))) (syntax-cdr$735$14343 x$735$21053)))) (quote #f))) ((lambda (x$735$21077) (list x$735$21077)) (syntax-car$735$14339 x$735$21053)))) (quote #f))) (syntax-cdr$735$14343 x$735$21047)))) (quote #f))) ((lambda (x$735$21079) (list x$735$21079)) (syntax-car$735$14339 x$735$21047)))) (quote #f))) t$735$20945))) t$735$20929))) ((lambda (x$735$21081) (if (syntax-pair?$735$14331 x$735$21081) (begin (quote #f) ((lambda (q$735$21083) (if q$735$21083 (begin (quote #f) ((lambda (r$735$21085) (if r$735$21085 (begin (quote #f) (append q$735$21083 r$735$21085)) (quote #f))) ((lambda (x$735$21087) (if (syntax-pair?$735$14331 x$735$21087) (begin (quote #f) ((lambda (q$735$21089) (if q$735$21089 (begin (quote #f) ((lambda (r$735$21091) (if r$735$21091 (begin (quote #f) (append q$735$21089 r$735$21091)) (quote #f))) ((lambda (x$735$21093) (if (equal? (stx->datum$735$14365 x$735$21093) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$21087)))) (quote #f))) ((lambda (x$735$21095) (list x$735$21095)) (syntax-car$735$14339 x$735$21087)))) (quote #f))) (syntax-cdr$735$14343 x$735$21081)))) (quote #f))) ((lambda (x$735$21097) (list x$735$21097)) (syntax-car$735$14339 x$735$21081)))) (quote #f))) t$735$20929))) t$735$20921))) ((lambda (x$735$21099) (list x$735$21099)) t$735$20921))) p$735$20915))) (cvt$735$20913 pattern$735$20907 (quote 0) (quote ())))) (quote #f) (quote #f)))) (set! syntax-dispatch$735$14864 (lambda (e$735$21115 p$735$21116) ((lambda (stx^$735$21119 match-each$735$21121 match-each+$735$21123 match-each-any$735$21125 match-empty$735$21127 combine$735$21129 match*$735$21131 match$735$21133) (begin (set! stx^$735$21119 (lambda (e$735$21241 m*$735$21242 s*$735$21243) (if (if (null? m*$735$21242) (begin (quote #f) (null? s*$735$21243)) (quote #f)) e$735$21241 (mkstx$735$14321 e$735$21241 m*$735$21242 s*$735$21243)))) (set! match-each$735$21121 (lambda (e$735$21225 p$735$21226 m*$735$21227 s*$735$21228) (if (pair? e$735$21225) ((lambda (first$735$21233) (if first$735$21233 (begin (quote #f) ((lambda (rest$735$21235) (if rest$735$21235 (begin (quote #f) (cons first$735$21233 rest$735$21235)) (quote #f))) (match-each$735$21121 (cdr e$735$21225) p$735$21226 m*$735$21227 s*$735$21228))) (quote #f))) (match$735$21133 (car e$735$21225) p$735$21226 m*$735$21227 s*$735$21228 (quote ()))) (if (null? e$735$21225) (quote ()) (if (stx?$735$14297 e$735$21225) (call-with-values (lambda () (join-wraps$735$14319 m*$735$21227 s*$735$21228 e$735$21225)) (lambda (m*$735$21237 s*$735$21238) (match-each$735$21121 (stx-expr$735$14299 e$735$21225) p$735$21226 m*$735$21237 s*$735$21238))) (quote #f)))))) (set! match-each+$735$21123 (lambda (e$735$21191 x-pat$735$21192 y-pat$735$21193 z-pat$735$21194 m*$735$21195 s*$735$21196 r$735$21197) (letrec ((f$735$21205 (lambda (e$735$21207 m*$735$21208 s*$735$21209) (if (pair? e$735$21207) (call-with-values (lambda () (f$735$21205 (cdr e$735$21207) m*$735$21208 s*$735$21209)) (lambda (xr*$735$21213 y-pat$735$21214 r$735$21215) (if r$735$21215 (if (null? y-pat$735$21214) ((lambda (xr$735$21219) (if xr$735$21219 (values (cons xr$735$21219 xr*$735$21213) y-pat$735$21214 r$735$21215) (values (quote #f) (quote #f) (quote #f)))) (match$735$21133 (car e$735$21207) x-pat$735$21192 m*$735$21208 s*$735$21209 (quote ()))) (values (quote ()) (cdr y-pat$735$21214) (match$735$21133 (car e$735$21207) (car y-pat$735$21214) m*$735$21208 s*$735$21209 r$735$21215))) (values (quote #f) (quote #f) (quote #f))))) (if (stx?$735$14297 e$735$21207) (call-with-values (lambda () (join-wraps$735$14319 m*$735$21208 s*$735$21209 e$735$21207)) (lambda (m*$735$21221 s*$735$21222) (f$735$21205 (stx-expr$735$14299 e$735$21207) m*$735$21221 s*$735$21222))) (values (quote ()) y-pat$735$21193 (match$735$21133 e$735$21207 z-pat$735$21194 m*$735$21208 s*$735$21209 r$735$21197))))))) (f$735$21205 e$735$21191 m*$735$21195 s*$735$21196)))) (set! match-each-any$735$21125 (lambda (e$735$21179 m*$735$21180 s*$735$21181) (if (pair? e$735$21179) ((lambda (l$735$21185) (if l$735$21185 (begin (quote #f) (cons (stx^$735$21119 (car e$735$21179) m*$735$21180 s*$735$21181) l$735$21185)) (quote #f))) (match-each-any$735$21125 (cdr e$735$21179) m*$735$21180 s*$735$21181)) (if (null? e$735$21179) (quote ()) (if (stx?$735$14297 e$735$21179) (call-with-values (lambda () (join-wraps$735$14319 m*$735$21180 s*$735$21181 e$735$21179)) (lambda (m*$735$21187 s*$735$21188) (match-each-any$735$21125 (stx-expr$735$14299 e$735$21179) m*$735$21187 s*$735$21188))) (quote #f)))))) (set! match-empty$735$21127 (lambda (p$735$21174 r$735$21175) (if (null? p$735$21174) r$735$21175 (if (eq? p$735$21174 (quote _)) r$735$21175 (if (eq? p$735$21174 (quote any)) (cons (quote ()) r$735$21175) (if (pair? p$735$21174) (match-empty$735$21127 (car p$735$21174) (match-empty$735$21127 (cdr p$735$21174) r$735$21175)) (if (eq? p$735$21174 (quote each-any)) (cons (quote ()) r$735$21175) ((lambda (t$735$21178) (if (memv t$735$21178 (quote (each))) (match-empty$735$21127 (vector-ref p$735$21174 (quote 1)) r$735$21175) (if (memv t$735$21178 (quote (each+))) (match-empty$735$21127 (vector-ref p$735$21174 (quote 1)) (match-empty$735$21127 (reverse (vector-ref p$735$21174 (quote 2))) (match-empty$735$21127 (vector-ref p$735$21174 (quote 3)) r$735$21175))) (if (memv t$735$21178 (quote (free-id atom))) r$735$21175 (if (memv t$735$21178 (quote (vector))) (match-empty$735$21127 (vector-ref p$735$21174 (quote 1)) r$735$21175) (error (quote syntax-dispatch) (quote "invalid pattern") p$735$21174)))))) (vector-ref p$735$21174 (quote 0)))))))))) (set! combine$735$21129 (lambda (r*$735$21170 r$735$21171) (if (null? (car r*$735$21170)) r$735$21171 (cons (map car r*$735$21170) (combine$735$21129 (map cdr r*$735$21170) r$735$21171))))) (set! match*$735$21131 (lambda (e$735$21149 p$735$21150 m*$735$21151 s*$735$21152 r$735$21153) (if (null? p$735$21150) (if (null? e$735$21149) (begin (quote #f) r$735$21153) (quote #f)) (if (pair? p$735$21150) (if (pair? e$735$21149) (begin (quote #f) (match$735$21133 (car e$735$21149) (car p$735$21150) m*$735$21151 s*$735$21152 (match$735$21133 (cdr e$735$21149) (cdr p$735$21150) m*$735$21151 s*$735$21152 r$735$21153))) (quote #f)) (if (eq? p$735$21150 (quote each-any)) ((lambda (l$735$21159) (if l$735$21159 (begin (quote #f) (cons l$735$21159 r$735$21153)) (quote #f))) (match-each-any$735$21125 e$735$21149 m*$735$21151 s*$735$21152)) ((lambda (t$735$21161) (if (memv t$735$21161 (quote (each))) (if (null? e$735$21149) (match-empty$735$21127 (vector-ref p$735$21150 (quote 1)) r$735$21153) ((lambda (r*$735$21168) (if r*$735$21168 (begin (quote #f) (combine$735$21129 r*$735$21168 r$735$21153)) (quote #f))) (match-each$735$21121 e$735$21149 (vector-ref p$735$21150 (quote 1)) m*$735$21151 s*$735$21152))) (if (memv t$735$21161 (quote (free-id))) (if (symbol? e$735$21149) (if (free-id=?$735$14353 (stx^$735$21119 e$735$21149 m*$735$21151 s*$735$21152) (vector-ref p$735$21150 (quote 1))) (begin (quote #f) r$735$21153) (quote #f)) (quote #f)) (if (memv t$735$21161 (quote (each+))) (call-with-values (lambda () (match-each+$735$21123 e$735$21149 (vector-ref p$735$21150 (quote 1)) (vector-ref p$735$21150 (quote 2)) (vector-ref p$735$21150 (quote 3)) m*$735$21151 s*$735$21152 r$735$21153)) (lambda (xr*$735$21162 y-pat$735$21163 r$735$21164) (if r$735$21164 (if (null? y-pat$735$21163) (begin (quote #f) (if (null? xr*$735$21162) (match-empty$735$21127 (vector-ref p$735$21150 (quote 1)) r$735$21164) (combine$735$21129 xr*$735$21162 r$735$21164))) (quote #f)) (quote #f)))) (if (memv t$735$21161 (quote (atom))) (if (equal? (vector-ref p$735$21150 (quote 1)) (strip$735$14363 e$735$21149 m*$735$21151)) (begin (quote #f) r$735$21153) (quote #f)) (if (memv t$735$21161 (quote (vector))) (if (vector? e$735$21149) (begin (quote #f) (match$735$21133 (vector->list e$735$21149) (vector-ref p$735$21150 (quote 1)) m*$735$21151 s*$735$21152 r$735$21153)) (quote #f)) (error (quote syntax-dispatch) (quote "invalid pattern") p$735$21150))))))) (vector-ref p$735$21150 (quote 0)))))))) (set! match$735$21133 (lambda (e$735$21135 p$735$21136 m*$735$21137 s*$735$21138 r$735$21139) (if (not r$735$21139) (quote #f) (if (eq? p$735$21136 (quote _)) r$735$21139 (if (eq? p$735$21136 (quote any)) (cons (stx^$735$21119 e$735$21135 m*$735$21137 s*$735$21138) r$735$21139) (if (stx?$735$14297 e$735$21135) (call-with-values (lambda () (join-wraps$735$14319 m*$735$21137 s*$735$21138 e$735$21135)) (lambda (m*$735$21145 s*$735$21146) (match$735$21133 (stx-expr$735$14299 e$735$21135) p$735$21136 m*$735$21145 s*$735$21146 r$735$21139))) (match*$735$21131 e$735$21135 p$735$21136 m*$735$21137 s*$735$21138 r$735$21139))))))) (match$735$21133 e$735$21115 p$735$21116 (quote ()) (quote ()) (quote ())))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! ellipsis?$735$14866 (lambda (x$735$21247) (if (id?$735$14345 x$735$21247) (begin (quote #f) (free-id=?$735$14353 x$735$21247 (scheme-stx$735$14774 (quote ...)))) (quote #f)))) (set! syntax-case-transformer$735$14868 ((lambda () ((lambda (build-dispatch-call$735$21249 invalid-ids-error$735$21251 gen-clause$735$21253 gen-syntax-case$735$21255) (begin (set! build-dispatch-call$735$21249 (lambda (pvars$735$21389 expr$735$21390 y$735$21391 r$735$21392 mr$735$21393) ((lambda (ids$735$21399 levels$735$21400) ((lambda (labels$735$21403 new-vars$735$21404) ((lambda (body$735$21407) (list (quote (primitive apply)) (build-lambda$735$14234 (quote #f) new-vars$735$21404 body$735$21407) y$735$21391)) (chi-expr$735$14892 (add-subst$735$14325 (make-full-rib$735$14292 ids$735$21399 labels$735$21403) expr$735$21390) (append (map (lambda (label$735$21409 var$735$21410 level$735$21411) (cons label$735$21409 (make-binding$735$14371 (quote syntax) (cons var$735$21410 level$735$21411)))) labels$735$21403 new-vars$735$21404 (map cdr pvars$735$21389)) r$735$21392) mr$735$21393))) (map gen-label$735$14259 ids$735$21399) (map gen-lexical$735$14255 ids$735$21399))) (map car pvars$735$21389) (map cdr pvars$735$21389)))) (set! invalid-ids-error$735$21251 (lambda (id*$735$21377 e$735$21378 class$735$21379) (letrec ((find$735$21383 (lambda (id*$735$21385 ok*$735$21386) (if (null? id*$735$21385) (error (quote expander) (quote "invalid syntax") (stx->datum$735$14365 e$735$21378)) (if (id?$735$14345 (car id*$735$21385)) (if (bound-id-member?$735$14359 (car id*$735$21385) ok*$735$21386) (syntax-error$735$14997 (car id*$735$21385) (quote "duplicate ") class$735$21379) (find$735$21383 (cdr id*$735$21385) (cons (car id*$735$21385) ok*$735$21386))) (syntax-error$735$14997 (car id*$735$21385) (quote "invalid ") class$735$21379)))))) (find$735$21383 id*$735$21377 (quote ()))))) (set! gen-clause$735$21253 (lambda (x$735$21345 keys$735$21346 clauses$735$21347 r$735$21348 mr$735$21349 pat$735$21350 fender$735$21351 expr$735$21352) (call-with-values (lambda () (convert-pattern$735$14862 pat$735$21350 keys$735$21346)) (lambda (p$735$21361 pvars$735$21362) (if (not (distinct-bound-ids?$735$14357 (map car pvars$735$21362))) (invalid-ids-error$735$21251 (map car pvars$735$21362) pat$735$21350 (quote "pattern variable")) (if (not (for-all (lambda (x$735$21365) (not (ellipsis?$735$14866 (car x$735$21365)))) pvars$735$21362)) (error (quote expander) (quote "misplaced ellipsis in syntax-case pattern") (strip$735$14363 pat$735$21350 (quote ()))) ((lambda (y$735$21367) ((lambda (test$735$21369) ((lambda (conseq$735$21371) ((lambda (altern$735$21373) (list (build-lambda$735$14234 (quote #f) (list y$735$21367) (list (quote if) test$735$21369 conseq$735$21371 altern$735$21373)) (list (quote (primitive syntax-dispatch)) x$735$21345 (list (quote quote) p$735$21361)))) (gen-syntax-case$735$21255 x$735$21345 keys$735$21346 clauses$735$21347 r$735$21348 mr$735$21349))) (build-dispatch-call$735$21249 pvars$735$21362 expr$735$21352 y$735$21367 r$735$21348 mr$735$21349))) (if (eq? fender$735$21351 (quote #t)) y$735$21367 ((lambda (call$735$21375) (list (quote if) y$735$21367 call$735$21375 (list (quote quote) (quote #f)))) (build-dispatch-call$735$21249 pvars$735$21362 fender$735$21351 y$735$21367 r$735$21348 mr$735$21349))))) (gen-lexical$735$14255 (quote tmp))))))))) (set! gen-syntax-case$735$21255 (lambda (x$735$21257 keys$735$21258 clauses$735$21259 r$735$21260 mr$735$21261) (if (null? clauses$735$21259) (list (quote (primitive syntax-error)) x$735$21257) ((lambda (t$735$21267) ((lambda (ls/false$735$21269) (if (if ls/false$735$21269 (begin (quote #f) (apply (lambda (pat$735$21271 expr$735$21272) (quote #t)) ls/false$735$21269)) (quote #f)) (apply (lambda (pat$735$21275 expr$735$21276) (if (if (id?$735$14345 pat$735$21275) (if (not (bound-id-member?$735$14359 pat$735$21275 keys$735$21258)) (begin (quote #f) (not (ellipsis?$735$14866 pat$735$21275))) (quote #f)) (quote #f)) (if (free-id=?$735$14353 pat$735$21275 (scheme-stx$735$14774 (quote _))) (chi-expr$735$14892 expr$735$21276 r$735$21260 mr$735$21261) ((lambda (lab$735$21279 lex$735$21280) ((lambda (body$735$21283) (list (build-lambda$735$14234 (quote #f) (list lex$735$21280) body$735$21283) x$735$21257)) (chi-expr$735$14892 (add-subst$735$14325 (make-full-rib$735$14292 (list pat$735$21275) (list lab$735$21279)) expr$735$21276) (cons (cons lab$735$21279 (make-binding$735$14371 (quote syntax) (cons lex$735$21280 (quote 0)))) r$735$21260) mr$735$21261))) (gen-label$735$14259 pat$735$21275) (gen-lexical$735$14255 pat$735$21275))) (gen-clause$735$21253 x$735$21257 keys$735$21258 (cdr clauses$735$21259) r$735$21260 mr$735$21261 pat$735$21275 (quote #t) expr$735$21276))) ls/false$735$21269) ((lambda (t$735$21285) ((lambda (ls/false$735$21287) (if (if ls/false$735$21287 (begin (quote #f) (apply (lambda (pat$735$21289 fender$735$21290 expr$735$21291) (quote #t)) ls/false$735$21287)) (quote #f)) (apply (lambda (pat$735$21295 fender$735$21296 expr$735$21297) (gen-clause$735$21253 x$735$21257 keys$735$21258 (cdr clauses$735$21259) r$735$21260 mr$735$21261 pat$735$21295 fender$735$21296 expr$735$21297)) ls/false$735$21287) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$21285 (quote ()))))) ((lambda (x$735$21301) (if (syntax-pair?$735$14331 x$735$21301) (begin (quote #f) ((lambda (q$735$21303) (if q$735$21303 (begin (quote #f) ((lambda (r$735$21305) (if r$735$21305 (begin (quote #f) (append q$735$21303 r$735$21305)) (quote #f))) ((lambda (x$735$21307) (if (syntax-pair?$735$14331 x$735$21307) (begin (quote #f) ((lambda (q$735$21309) (if q$735$21309 (begin (quote #f) ((lambda (r$735$21311) (if r$735$21311 (begin (quote #f) (append q$735$21309 r$735$21311)) (quote #f))) ((lambda (x$735$21313) (if (syntax-pair?$735$14331 x$735$21313) (begin (quote #f) ((lambda (q$735$21315) (if q$735$21315 (begin (quote #f) ((lambda (r$735$21317) (if r$735$21317 (begin (quote #f) (append q$735$21315 r$735$21317)) (quote #f))) ((lambda (x$735$21319) (if (equal? (stx->datum$735$14365 x$735$21319) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$21313)))) (quote #f))) ((lambda (x$735$21321) (list x$735$21321)) (syntax-car$735$14339 x$735$21313)))) (quote #f))) (syntax-cdr$735$14343 x$735$21307)))) (quote #f))) ((lambda (x$735$21323) (list x$735$21323)) (syntax-car$735$14339 x$735$21307)))) (quote #f))) (syntax-cdr$735$14343 x$735$21301)))) (quote #f))) ((lambda (x$735$21325) (list x$735$21325)) (syntax-car$735$14339 x$735$21301)))) (quote #f))) t$735$21285))) t$735$21267))) ((lambda (x$735$21327) (if (syntax-pair?$735$14331 x$735$21327) (begin (quote #f) ((lambda (q$735$21329) (if q$735$21329 (begin (quote #f) ((lambda (r$735$21331) (if r$735$21331 (begin (quote #f) (append q$735$21329 r$735$21331)) (quote #f))) ((lambda (x$735$21333) (if (syntax-pair?$735$14331 x$735$21333) (begin (quote #f) ((lambda (q$735$21335) (if q$735$21335 (begin (quote #f) ((lambda (r$735$21337) (if r$735$21337 (begin (quote #f) (append q$735$21335 r$735$21337)) (quote #f))) ((lambda (x$735$21339) (if (equal? (stx->datum$735$14365 x$735$21339) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$21333)))) (quote #f))) ((lambda (x$735$21341) (list x$735$21341)) (syntax-car$735$14339 x$735$21333)))) (quote #f))) (syntax-cdr$735$14343 x$735$21327)))) (quote #f))) ((lambda (x$735$21343) (list x$735$21343)) (syntax-car$735$14339 x$735$21327)))) (quote #f))) t$735$21267))) (car clauses$735$21259))))) (lambda (e$735$21415 r$735$21416 mr$735$21417) ((lambda (t$735$21421) ((lambda (ls/false$735$21423) (if (if ls/false$735$21423 (begin (quote #f) (apply (lambda (expr$735$21425 keys$735$21426 clauses$735$21427) (quote #t)) ls/false$735$21423)) (quote #f)) (apply (lambda (expr$735$21431 keys$735$21432 clauses$735$21433) (begin (if (for-all (lambda (x$735$21437) (if (id?$735$14345 x$735$21437) (begin (quote #f) (not (ellipsis?$735$14866 x$735$21437))) (quote #f))) keys$735$21432) (void) (error (quote expander) (quote "invalid literals") (strip$735$14363 e$735$21415 (quote ())))) ((lambda (x$735$21439) ((lambda (body$735$21441) (list (build-lambda$735$14234 (quote #f) (list x$735$21439) body$735$21441) (chi-expr$735$14892 expr$735$21431 r$735$21416 mr$735$21417))) (gen-syntax-case$735$21255 x$735$21439 keys$735$21432 clauses$735$21433 r$735$21416 mr$735$21417))) (gen-lexical$735$14255 (quote tmp))))) ls/false$735$21423) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$21421 (quote ()))))) ((lambda (x$735$21443) (if (syntax-pair?$735$14331 x$735$21443) (begin (quote #f) ((lambda (q$735$21445) (if q$735$21445 (begin (quote #f) ((lambda (r$735$21447) (if r$735$21447 (begin (quote #f) (append q$735$21445 r$735$21447)) (quote #f))) ((lambda (x$735$21449) (if (syntax-pair?$735$14331 x$735$21449) (begin (quote #f) ((lambda (q$735$21451) (if q$735$21451 (begin (quote #f) ((lambda (r$735$21453) (if r$735$21453 (begin (quote #f) (append q$735$21451 r$735$21453)) (quote #f))) ((lambda (x$735$21455) (if (syntax-pair?$735$14331 x$735$21455) (begin (quote #f) ((lambda (q$735$21457) (if q$735$21457 (begin (quote #f) ((lambda (r$735$21459) (if r$735$21459 (begin (quote #f) (append q$735$21457 r$735$21459)) (quote #f))) ((letrec ((f$735$21461 (lambda (x$735$21463) (if (syntax-pair?$735$14331 x$735$21463) ((lambda (cars/f$735$21465) (if cars/f$735$21465 (begin (quote #f) ((lambda (cdrs/f$735$21467) (if cdrs/f$735$21467 (begin (quote #f) (map cons cars/f$735$21465 cdrs/f$735$21467)) (quote #f))) (f$735$21461 (syntax-cdr$735$14343 x$735$21463)))) (quote #f))) ((lambda (x$735$21469) (list x$735$21469)) (syntax-car$735$14339 x$735$21463))) (if (syntax-null?$735$14335 x$735$21463) (list (begin (quote clauses) (quote ()))) (quote #f)))))) f$735$21461) (syntax-cdr$735$14343 x$735$21455)))) (quote #f))) ((letrec ((f$735$21471 (lambda (x$735$21473) (if (syntax-pair?$735$14331 x$735$21473) ((lambda (cars/f$735$21475) (if cars/f$735$21475 (begin (quote #f) ((lambda (cdrs/f$735$21477) (if cdrs/f$735$21477 (begin (quote #f) (map cons cars/f$735$21475 cdrs/f$735$21477)) (quote #f))) (f$735$21471 (syntax-cdr$735$14343 x$735$21473)))) (quote #f))) ((lambda (x$735$21479) (list x$735$21479)) (syntax-car$735$14339 x$735$21473))) (if (syntax-null?$735$14335 x$735$21473) (list (begin (quote keys) (quote ()))) (quote #f)))))) f$735$21471) (syntax-car$735$14339 x$735$21455)))) (quote #f))) (syntax-cdr$735$14343 x$735$21449)))) (quote #f))) ((lambda (x$735$21481) (list x$735$21481)) (syntax-car$735$14339 x$735$21449)))) (quote #f))) (syntax-cdr$735$14343 x$735$21443)))) (quote #f))) ((lambda (x$735$21483) (quote ())) (syntax-car$735$14339 x$735$21443)))) (quote #f))) t$735$21421))) e$735$21415)))) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! syntax-transformer$735$14870 ((lambda () ((lambda (gen-syntax$735$21485 gen-ref$735$21487 gen-append$735$21489 gen-mappend$735$21491 gen-map$735$21493 gen-cons$735$21495 gen-vector$735$21497 regen$735$21499) (begin (set! gen-syntax$735$21485 (lambda (src$735$21571 e$735$21572 r$735$21573 maps$735$21574 ellipsis?$735$21575 vec?$735$21576) ((lambda (t$735$21583) ((lambda (ls/false$735$21585) (if (if ls/false$735$21585 (begin (quote #f) (apply (lambda (dots$735$21587) (ellipsis?$735$21575 dots$735$21587)) ls/false$735$21585)) (quote #f)) (apply (lambda (dots$735$21589) (error (quote expander) (quote "misplaced ellipsis in syntax form") (strip$735$14363 src$735$21571 (quote ())))) ls/false$735$21585) ((lambda (t$735$21591) ((lambda (ls/false$735$21593) (if (if ls/false$735$21593 (begin (quote #f) (apply (lambda (id$735$21595) (id?$735$14345 id$735$21595)) ls/false$735$21593)) (quote #f)) (apply (lambda (id$735$21597) ((lambda (label$735$21599) ((lambda (b$735$21601) ((lambda () (if (eq? (binding-type$735$14373 b$735$21601) (quote syntax)) (call-with-values (lambda () ((lambda (var.lev$735$21603) (gen-ref$735$21487 src$735$21571 (car var.lev$735$21603) (cdr var.lev$735$21603) maps$735$21574)) (binding-value$735$14375 b$735$21601))) (lambda (var$735$21605 maps$735$21606) (values (list (quote ref) var$735$21605) maps$735$21606))) (values (list (quote quote) e$735$21572) maps$735$21574))))) (label->binding$735$14369 label$735$21599 r$735$21573))) (id->label$735$14367 e$735$21572))) ls/false$735$21593) ((lambda (t$735$21609) ((lambda (ls/false$735$21611) (if (if ls/false$735$21611 (begin (quote #f) (apply (lambda (dots$735$21613 e$735$21614) (ellipsis?$735$21575 dots$735$21613)) ls/false$735$21611)) (quote #f)) (apply (lambda (dots$735$21617 e$735$21618) (if vec?$735$21576 (error (quote expander) (quote "misplaced ellipsis in syntax form") (strip$735$14363 src$735$21571 (quote ()))) (gen-syntax$735$21485 src$735$21571 e$735$21618 r$735$21573 maps$735$21574 (lambda (x$735$21621) (quote #f)) (quote #f)))) ls/false$735$21611) ((lambda (t$735$21623) ((lambda (ls/false$735$21625) (if (if ls/false$735$21625 (begin (quote #f) (apply (lambda (x$735$21627 dots$735$21628 y$735$21629) (ellipsis?$735$21575 dots$735$21628)) ls/false$735$21625)) (quote #f)) (apply (lambda (x$735$21633 dots$735$21634 y$735$21635) (letrec ((f$735$21639 (lambda (y$735$21647 k$735$21648) ((lambda (t$735$21651) ((lambda (ls/false$735$21653) (if (if ls/false$735$21653 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$21653)) (quote #f)) (apply (lambda () (k$735$21648 maps$735$21574)) ls/false$735$21653) ((lambda (t$735$21655) ((lambda (ls/false$735$21657) (if (if ls/false$735$21657 (begin (quote #f) (apply (lambda (dots$735$21659 y$735$21660) (ellipsis?$735$21575 dots$735$21659)) ls/false$735$21657)) (quote #f)) (apply (lambda (dots$735$21663 y$735$21664) (f$735$21639 y$735$21664 (lambda (maps$735$21667) (call-with-values (lambda () (k$735$21648 (cons (quote ()) maps$735$21667))) (lambda (x$735$21669 maps$735$21670) (if (null? (car maps$735$21670)) (error (quote expander) (quote "extra ellipsis in syntax form") (strip$735$14363 src$735$21571 (quote ()))) (values (gen-mappend$735$21491 x$735$21669 (car maps$735$21670)) (cdr maps$735$21670)))))))) ls/false$735$21657) ((lambda (t$735$21673) ((lambda (ls/false$735$21675) (if (if ls/false$735$21675 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$21675)) (quote #f)) (apply (lambda () (call-with-values (lambda () (gen-syntax$735$21485 src$735$21571 y$735$21647 r$735$21573 maps$735$21574 ellipsis?$735$21575 vec?$735$21576)) (lambda (y$735$21677 maps$735$21678) (call-with-values (lambda () (k$735$21648 maps$735$21678)) (lambda (x$735$21681 maps$735$21682) (values (gen-append$735$21489 x$735$21681 y$735$21677) maps$735$21682)))))) ls/false$735$21675) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$21673 (quote ()))))) ((lambda (x$735$21685) (quote ())) t$735$21673))) t$735$21655))) ((lambda (x$735$21687) (if (syntax-pair?$735$14331 x$735$21687) (begin (quote #f) ((lambda (q$735$21689) (if q$735$21689 (begin (quote #f) ((lambda (r$735$21691) (if r$735$21691 (begin (quote #f) (append q$735$21689 r$735$21691)) (quote #f))) ((lambda (x$735$21693) (list x$735$21693)) (syntax-cdr$735$14343 x$735$21687)))) (quote #f))) ((lambda (x$735$21695) (list x$735$21695)) (syntax-car$735$14339 x$735$21687)))) (quote #f))) t$735$21655))) t$735$21651))) ((lambda (x$735$21697) (if (equal? (stx->datum$735$14365 x$735$21697) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$735$21651))) y$735$21647)))) (f$735$21639 y$735$21635 (lambda (maps$735$21641) (call-with-values (lambda () (gen-syntax$735$21485 src$735$21571 x$735$21633 r$735$21573 (cons (quote ()) maps$735$21641) ellipsis?$735$21575 (quote #f))) (lambda (x$735$21643 maps$735$21644) (if (null? (car maps$735$21644)) (error (quote expander) (quote "extra ellipsis in syntax form") (strip$735$14363 src$735$21571 (quote ()))) (values (gen-map$735$21493 x$735$21643 (car maps$735$21644)) (cdr maps$735$21644))))))))) ls/false$735$21625) ((lambda (t$735$21699) ((lambda (ls/false$735$21701) (if (if ls/false$735$21701 (begin (quote #f) (apply (lambda (x$735$21703 y$735$21704) (quote #t)) ls/false$735$21701)) (quote #f)) (apply (lambda (x$735$21707 y$735$21708) (call-with-values (lambda () (gen-syntax$735$21485 src$735$21571 x$735$21707 r$735$21573 maps$735$21574 ellipsis?$735$21575 (quote #f))) (lambda (xnew$735$21711 maps$735$21712) (call-with-values (lambda () (gen-syntax$735$21485 src$735$21571 y$735$21708 r$735$21573 maps$735$21712 ellipsis?$735$21575 vec?$735$21576)) (lambda (ynew$735$21715 maps$735$21716) (values (gen-cons$735$21495 e$735$21572 x$735$21707 y$735$21708 xnew$735$21711 ynew$735$21715) maps$735$21716)))))) ls/false$735$21701) ((lambda (t$735$21719) ((lambda (ls/false$735$21721) (if (if ls/false$735$21721 (begin (quote #f) (apply (lambda (ls$735$21723) (not (stx?$735$14297 e$735$21572))) ls/false$735$21721)) (quote #f)) (apply (lambda (ls$735$21725) (call-with-values (lambda () (gen-syntax$735$21485 src$735$21571 ls$735$21725 r$735$21573 maps$735$21574 ellipsis?$735$21575 (quote #t))) (lambda (lsnew$735$21727 maps$735$21728) (values (gen-vector$735$21497 e$735$21572 ls$735$21725 lsnew$735$21727) maps$735$21728)))) ls/false$735$21721) ((lambda (t$735$21731) ((lambda (ls/false$735$21733) (if (if ls/false$735$21733 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$21733)) (quote #f)) (apply (lambda () (values (list (quote quote) e$735$21572) maps$735$21574)) ls/false$735$21733) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$21731 (quote ()))))) ((lambda (x$735$21735) (quote ())) t$735$21731))) t$735$21719))) ((lambda (x$735$21737) (if (syntax-vector?$735$14333 x$735$21737) (begin (quote #f) ((letrec ((f$735$21739 (lambda (x$735$21741) (if (syntax-pair?$735$14331 x$735$21741) ((lambda (cars/f$735$21743) (if cars/f$735$21743 (begin (quote #f) ((lambda (cdrs/f$735$21745) (if cdrs/f$735$21745 (begin (quote #f) (map cons cars/f$735$21743 cdrs/f$735$21745)) (quote #f))) (f$735$21739 (syntax-cdr$735$14343 x$735$21741)))) (quote #f))) ((lambda (x$735$21747) (list x$735$21747)) (syntax-car$735$14339 x$735$21741))) (if (syntax-null?$735$14335 x$735$21741) (list (begin (quote ls) (quote ()))) (quote #f)))))) f$735$21739) (syntax-vector->list$735$14329 x$735$21737))) (quote #f))) t$735$21719))) t$735$21699))) ((lambda (x$735$21749) (if (syntax-pair?$735$14331 x$735$21749) (begin (quote #f) ((lambda (q$735$21751) (if q$735$21751 (begin (quote #f) ((lambda (r$735$21753) (if r$735$21753 (begin (quote #f) (append q$735$21751 r$735$21753)) (quote #f))) ((lambda (x$735$21755) (list x$735$21755)) (syntax-cdr$735$14343 x$735$21749)))) (quote #f))) ((lambda (x$735$21757) (list x$735$21757)) (syntax-car$735$14339 x$735$21749)))) (quote #f))) t$735$21699))) t$735$21623))) ((lambda (x$735$21759) (if (syntax-pair?$735$14331 x$735$21759) (begin (quote #f) ((lambda (q$735$21761) (if q$735$21761 (begin (quote #f) ((lambda (r$735$21763) (if r$735$21763 (begin (quote #f) (append q$735$21761 r$735$21763)) (quote #f))) ((lambda (x$735$21765) (if (syntax-pair?$735$14331 x$735$21765) (begin (quote #f) ((lambda (q$735$21767) (if q$735$21767 (begin (quote #f) ((lambda (r$735$21769) (if r$735$21769 (begin (quote #f) (append q$735$21767 r$735$21769)) (quote #f))) ((lambda (x$735$21771) (list x$735$21771)) (syntax-cdr$735$14343 x$735$21765)))) (quote #f))) ((lambda (x$735$21773) (list x$735$21773)) (syntax-car$735$14339 x$735$21765)))) (quote #f))) (syntax-cdr$735$14343 x$735$21759)))) (quote #f))) ((lambda (x$735$21775) (list x$735$21775)) (syntax-car$735$14339 x$735$21759)))) (quote #f))) t$735$21623))) t$735$21609))) ((lambda (x$735$21777) (if (syntax-pair?$735$14331 x$735$21777) (begin (quote #f) ((lambda (q$735$21779) (if q$735$21779 (begin (quote #f) ((lambda (r$735$21781) (if r$735$21781 (begin (quote #f) (append q$735$21779 r$735$21781)) (quote #f))) ((lambda (x$735$21783) (if (syntax-pair?$735$14331 x$735$21783) (begin (quote #f) ((lambda (q$735$21785) (if q$735$21785 (begin (quote #f) ((lambda (r$735$21787) (if r$735$21787 (begin (quote #f) (append q$735$21785 r$735$21787)) (quote #f))) ((lambda (x$735$21789) (if (equal? (stx->datum$735$14365 x$735$21789) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$21783)))) (quote #f))) ((lambda (x$735$21791) (list x$735$21791)) (syntax-car$735$14339 x$735$21783)))) (quote #f))) (syntax-cdr$735$14343 x$735$21777)))) (quote #f))) ((lambda (x$735$21793) (list x$735$21793)) (syntax-car$735$14339 x$735$21777)))) (quote #f))) t$735$21609))) t$735$21591))) ((lambda (x$735$21795) (list x$735$21795)) t$735$21591))) t$735$21583))) ((lambda (x$735$21797) (list x$735$21797)) t$735$21583))) e$735$21572))) (set! gen-ref$735$21487 (lambda (src$735$21553 var$735$21554 level$735$21555 maps$735$21556) (if (= level$735$21555 (quote 0)) (values var$735$21554 maps$735$21556) (if (null? maps$735$21556) (error (quote expander) (quote "missing ellipsis in syntax form") (strip$735$14363 src$735$21553 (quote ()))) (call-with-values (lambda () (gen-ref$735$21487 src$735$21553 var$735$21554 (- level$735$21555 (quote 1)) (cdr maps$735$21556))) (lambda (outer-var$735$21561 outer-maps$735$21562) ((lambda (t$735$21565) (if t$735$21565 ((lambda (b$735$21567) (values (cdr b$735$21567) maps$735$21556)) t$735$21565) ((lambda (inner-var$735$21569) (values inner-var$735$21569 (cons (cons (cons outer-var$735$21561 inner-var$735$21569) (car maps$735$21556)) outer-maps$735$21562))) (gen-lexical$735$14255 (quote tmp))))) (assq outer-var$735$21561 (car maps$735$21556))))))))) (set! gen-append$735$21489 (lambda (x$735$21549 y$735$21550) (if (equal? y$735$21550 (quote (quote ()))) x$735$21549 (list (quote append) x$735$21549 y$735$21550)))) (set! gen-mappend$735$21491 (lambda (e$735$21545 map-env$735$21546) (list (quote apply) (quote (primitive append)) (gen-map$735$21493 e$735$21545 map-env$735$21546)))) (set! gen-map$735$21493 (lambda (e$735$21527 map-env$735$21528) ((lambda (formals$735$21531 actuals$735$21532) (if (eq? (car e$735$21527) (quote ref)) (car actuals$735$21532) (if (for-all (lambda (x$735$21535) (if (eq? (car x$735$21535) (quote ref)) (begin (quote #f) (memq (cadr x$735$21535) formals$735$21531)) (quote #f))) (cdr e$735$21527)) ((lambda (args$735$21537) (cons (quote map) (cons (list (quote primitive) (car e$735$21527)) args$735$21537))) (map ((lambda (r$735$21539) (lambda (x$735$21541) (cdr (assq (cadr x$735$21541) r$735$21539)))) (map cons formals$735$21531 actuals$735$21532)) (cdr e$735$21527))) (cons* (quote map) (list (quote lambda) formals$735$21531 e$735$21527) actuals$735$21532)))) (map cdr map-env$735$21528) (map (lambda (x$735$21543) (list (quote ref) (car x$735$21543))) map-env$735$21528)))) (set! gen-cons$735$21495 (lambda (e$735$21512 x$735$21513 y$735$21514 xnew$735$21515 ynew$735$21516) ((lambda (t$735$21522) (if (memv t$735$21522 (quote (quote))) (if (eq? (car xnew$735$21515) (quote quote)) ((lambda (xnew$735$21523 ynew$735$21524) (if (if (eq? xnew$735$21523 x$735$21513) (begin (quote #f) (eq? ynew$735$21524 y$735$21514)) (quote #f)) (list (quote quote) e$735$21512) (list (quote quote) (cons xnew$735$21523 ynew$735$21524)))) (cadr xnew$735$21515) (cadr ynew$735$21516)) (if (null? (cadr ynew$735$21516)) (list (quote list) xnew$735$21515) (list (quote cons) xnew$735$21515 ynew$735$21516))) (if (memv t$735$21522 (quote (list))) (cons (quote list) (cons xnew$735$21515 (cdr ynew$735$21516))) (list (quote cons) xnew$735$21515 ynew$735$21516)))) (car ynew$735$21516)))) (set! gen-vector$735$21497 (lambda (e$735$21506 ls$735$21507 lsnew$735$21508) (if (eq? (car lsnew$735$21508) (quote quote)) (if (eq? (cadr lsnew$735$21508) ls$735$21507) (list (quote quote) e$735$21506) (list (quote quote) (list->vector (cadr lsnew$735$21508)))) (if (eq? (car lsnew$735$21508) (quote list)) (cons (quote vector) (cdr lsnew$735$21508)) (list (quote list->vector) lsnew$735$21508))))) (set! regen$735$21499 (lambda (x$735$21501) ((lambda (t$735$21503) (if (memv t$735$21503 (quote (ref))) (cadr x$735$21501) (if (memv t$735$21503 (quote (primitive))) (list (quote primitive) (cadr x$735$21501)) (if (memv t$735$21503 (quote (quote))) (list (quote quote) (cadr x$735$21501)) (if (memv t$735$21503 (quote (lambda))) (build-lambda$735$14234 (quote #f) (cadr x$735$21501) (regen$735$21499 (caddr x$735$21501))) (if (memv t$735$21503 (quote (map))) ((lambda (ls$735$21504) (cons (quote (primitive map)) ls$735$21504)) (map regen$735$21499 (cdr x$735$21501))) (cons (list (quote primitive) (car x$735$21501)) (map regen$735$21499 (cdr x$735$21501))))))))) (car x$735$21501)))) (lambda (e$735$21799 r$735$21800 mr$735$21801) ((lambda (t$735$21805) ((lambda (ls/false$735$21807) (if (if ls/false$735$21807 (begin (quote #f) (apply (lambda (x$735$21809) (quote #t)) ls/false$735$21807)) (quote #f)) (apply (lambda (x$735$21811) (call-with-values (lambda () (gen-syntax$735$21485 e$735$21799 x$735$21811 r$735$21800 (quote ()) ellipsis?$735$14866 (quote #f))) (lambda (e$735$21813 maps$735$21814) (regen$735$21499 e$735$21813)))) ls/false$735$21807) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$21805 (quote ()))))) ((lambda (x$735$21817) (if (syntax-pair?$735$14331 x$735$21817) (begin (quote #f) ((lambda (q$735$21819) (if q$735$21819 (begin (quote #f) ((lambda (r$735$21821) (if r$735$21821 (begin (quote #f) (append q$735$21819 r$735$21821)) (quote #f))) ((lambda (x$735$21823) (if (syntax-pair?$735$14331 x$735$21823) (begin (quote #f) ((lambda (q$735$21825) (if q$735$21825 (begin (quote #f) ((lambda (r$735$21827) (if r$735$21827 (begin (quote #f) (append q$735$21825 r$735$21827)) (quote #f))) ((lambda (x$735$21829) (if (equal? (stx->datum$735$14365 x$735$21829) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$21823)))) (quote #f))) ((lambda (x$735$21831) (list x$735$21831)) (syntax-car$735$14339 x$735$21823)))) (quote #f))) (syntax-cdr$735$14343 x$735$21817)))) (quote #f))) ((lambda (x$735$21833) (quote ())) (syntax-car$735$14339 x$735$21817)))) (quote #f))) t$735$21805))) e$735$21799)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! core-macro-transformer$735$14872 (lambda (name$735$21835) ((lambda (t$735$21837) (if (memv t$735$21837 (quote (quote))) quote-transformer$735$14802 (if (memv t$735$21837 (quote (lambda))) lambda-transformer$735$14806 (if (memv t$735$21837 (quote (case-lambda))) case-lambda-transformer$735$14804 (if (memv t$735$21837 (quote (let-values))) let-values-transformer$735$14780 (if (memv t$735$21837 (quote (letrec))) letrec-transformer$735$14784 (if (memv t$735$21837 (quote (letrec*))) letrec*-transformer$735$14786 (if (memv t$735$21837 (quote (case))) case-transformer$735$14800 (if (memv t$735$21837 (quote (if))) if-transformer$735$14798 (if (memv t$735$21837 (quote (when))) when-transformer$735$14794 (if (memv t$735$21837 (quote (unless))) unless-transformer$735$14796 (if (memv t$735$21837 (quote (parameterize))) parameterize-transformer$735$14858 (if (memv t$735$21837 (quote (foreign-call))) foreign-call-transformer$735$14860 (if (memv t$735$21837 (quote (syntax-case))) syntax-case-transformer$735$14868 (if (memv t$735$21837 (quote (syntax))) syntax-transformer$735$14870 (if (memv t$735$21837 (quote (type-descriptor))) type-descriptor-transformer$735$14788 (if (memv t$735$21837 (quote (record-type-descriptor))) record-type-descriptor-transformer$735$14790 (if (memv t$735$21837 (quote (record-constructor-descriptor))) record-constructor-descriptor-transformer$735$14792 (error (quote macro-transformer) (quote "cannot find transformer") name$735$21835))))))))))))))))))) name$735$21835))) (set! file-options-macro$735$14874 (lambda (x$735$21838) ((lambda (t$735$21840) ((lambda (ls/false$735$21842) (if (if ls/false$735$21842 (begin (quote #f) (apply (lambda (opt*$735$21844) (if (for-all id?$735$14345 opt*$735$21844) (begin (quote #f) (file-options-spec$735$13358 (map id->sym$735$14347 opt*$735$21844))) (quote #f))) ls/false$735$21842)) (quote #f)) (apply (lambda (opt*$735$21846) (bless$735$14808 (list (quote quote) (file-options-spec$735$13358 (map id->sym$735$14347 opt*$735$21846))))) ls/false$735$21842) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$21840 (quote ()))))) ((lambda (x$735$21848) (if (syntax-pair?$735$14331 x$735$21848) (begin (quote #f) ((lambda (q$735$21850) (if q$735$21850 (begin (quote #f) ((lambda (r$735$21852) (if r$735$21852 (begin (quote #f) (append q$735$21850 r$735$21852)) (quote #f))) ((letrec ((f$735$21854 (lambda (x$735$21856) (if (syntax-pair?$735$14331 x$735$21856) ((lambda (cars/f$735$21858) (if cars/f$735$21858 (begin (quote #f) ((lambda (cdrs/f$735$21860) (if cdrs/f$735$21860 (begin (quote #f) (map cons cars/f$735$21858 cdrs/f$735$21860)) (quote #f))) (f$735$21854 (syntax-cdr$735$14343 x$735$21856)))) (quote #f))) ((lambda (x$735$21862) (list x$735$21862)) (syntax-car$735$14339 x$735$21856))) (if (syntax-null?$735$14335 x$735$21856) (list (begin (quote opt*) (quote ()))) (quote #f)))))) f$735$21854) (syntax-cdr$735$14343 x$735$21848)))) (quote #f))) ((lambda (x$735$21864) (quote ())) (syntax-car$735$14339 x$735$21848)))) (quote #f))) t$735$21840))) x$735$21838))) (set! symbol-macro$735$14876 (lambda (x$735$21866 set$735$21867) ((lambda (t$735$21870) ((lambda (ls/false$735$21872) (if (if ls/false$735$21872 (begin (quote #f) (apply (lambda (name$735$21874) (if (id?$735$14345 name$735$21874) (begin (quote #f) (memq (id->sym$735$14347 name$735$21874) set$735$21867)) (quote #f))) ls/false$735$21872)) (quote #f)) (apply (lambda (name$735$21876) (bless$735$14808 (list (quote quote) name$735$21876))) ls/false$735$21872) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$21870 (quote ()))))) ((lambda (x$735$21878) (if (syntax-pair?$735$14331 x$735$21878) (begin (quote #f) ((lambda (q$735$21880) (if q$735$21880 (begin (quote #f) ((lambda (r$735$21882) (if r$735$21882 (begin (quote #f) (append q$735$21880 r$735$21882)) (quote #f))) ((lambda (x$735$21884) (if (syntax-pair?$735$14331 x$735$21884) (begin (quote #f) ((lambda (q$735$21886) (if q$735$21886 (begin (quote #f) ((lambda (r$735$21888) (if r$735$21888 (begin (quote #f) (append q$735$21886 r$735$21888)) (quote #f))) ((lambda (x$735$21890) (if (equal? (stx->datum$735$14365 x$735$21890) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$21884)))) (quote #f))) ((lambda (x$735$21892) (list x$735$21892)) (syntax-car$735$14339 x$735$21884)))) (quote #f))) (syntax-cdr$735$14343 x$735$21878)))) (quote #f))) ((lambda (x$735$21894) (quote ())) (syntax-car$735$14339 x$735$21878)))) (quote #f))) t$735$21870))) x$735$21866))) (set! macro-transformer$735$14878 (lambda (x$735$21896) (if (procedure? x$735$21896) x$735$21896 (if (symbol? x$735$21896) ((lambda (t$735$21898) (if (memv t$735$21898 (quote (define-record-type))) define-record-type-macro$735$14852 (if (memv t$735$21898 (quote (define-struct))) define-struct-macro$735$14850 (if (memv t$735$21898 (quote (include))) include-macro$735$14842 (if (memv t$735$21898 (quote (cond))) cond-macro$735$14840 (if (memv t$735$21898 (quote (let))) let-macro$735$14812 (if (memv t$735$21898 (quote (do))) do-macro$735$14832 (if (memv t$735$21898 (quote (or))) or-macro$735$14836 (if (memv t$735$21898 (quote (and))) and-macro$735$14838 (if (memv t$735$21898 (quote (let*))) let*-macro$735$14834 (if (memv t$735$21898 (quote (syntax-rules))) syntax-rules-macro$735$14844 (if (memv t$735$21898 (quote (quasiquote))) quasiquote-macro$735$14846 (if (memv t$735$21898 (quote (quasisyntax))) quasisyntax-macro$735$14848 (if (memv t$735$21898 (quote (with-syntax))) with-syntax-macro$735$14810 (if (memv t$735$21898 (quote (identifier-syntax))) identifier-syntax-macro$735$14830 (if (memv t$735$21898 (quote (time))) time-macro$735$14822 (if (memv t$735$21898 (quote (delay))) delay-macro$735$14824 (if (memv t$735$21898 (quote (assert))) assert-macro$735$14826 (if (memv t$735$21898 (quote (endianness))) endianness-macro$735$14828 (if (memv t$735$21898 (quote (guard))) guard-macro$735$14818 (if (memv t$735$21898 (quote (define-enumeration))) define-enumeration-macro$735$14820 (if (memv t$735$21898 (quote (trace-lambda))) trace-lambda-macro$735$14814 (if (memv t$735$21898 (quote (trace-define))) trace-define-macro$735$14816 (if (memv t$735$21898 (quote (define-condition-type))) define-condition-type-macro$735$14854 (if (memv t$735$21898 (quote (eol-style))) (lambda (x$735$21903) (symbol-macro$735$14876 x$735$21903 (quote (none lf cr crlf nel crnel ls)))) (if (memv t$735$21898 (quote (error-handling-mode))) (lambda (x$735$21901) (symbol-macro$735$14876 x$735$21901 (quote (ignore raise replace)))) (if (memv t$735$21898 (quote (buffer-mode))) (lambda (x$735$21899) (symbol-macro$735$14876 x$735$21899 (quote (none line block)))) (if (memv t$735$21898 (quote (file-options))) file-options-macro$735$14874 (if (memv t$735$21898 (quote (... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd))) incorrect-usage-macro$735$14856 (error (quote macro-transformer) (quote "invalid macro") x$735$21896)))))))))))))))))))))))))))))) x$735$21896) (error (quote core-macro-transformer) (quote "invalid macro") x$735$21896))))) (set! local-macro-transformer$735$14880 (lambda (x$735$21905) (car x$735$21905))) (set! chi-macro$735$14882 (lambda (p$735$21907 e$735$21908) ((lambda (s$735$21911) (add-mark$735$14323 (gen-mark$735$14313) s$735$21911)) ((macro-transformer$735$14878 p$735$21907) (add-mark$735$14323 anti-mark$735$14315 e$735$21908))))) (set! chi-local-macro$735$14884 (lambda (p$735$21913 e$735$21914) ((lambda (s$735$21917) (add-mark$735$14323 (gen-mark$735$14313) s$735$21917)) ((local-macro-transformer$735$14880 p$735$21913) (add-mark$735$14323 anti-mark$735$14315 e$735$21914))))) (set! chi-global-macro$735$14886 (lambda (p$735$21919 e$735$21920) ((lambda (lib$735$21923 loc$735$21924) (begin (visit-library$735$13882 lib$735$21923) ((lambda (x$735$21927) ((lambda (transformer$735$21929) ((lambda (s$735$21931) (add-mark$735$14323 (gen-mark$735$14313) s$735$21931)) (transformer$735$21929 (add-mark$735$14323 anti-mark$735$14315 e$735$21920)))) (if (procedure? x$735$21927) x$735$21927 (error (quote chi-global-macro) (quote "not a procedure"))))) (symbol-value loc$735$21924)))) (car p$735$21919) (cdr p$735$21919)))) (set! chi-expr*$735$14888 (lambda (e*$735$21933 r$735$21934 mr$735$21935) (if (null? e*$735$21933) (quote ()) ((lambda (e$735$21939) (cons e$735$21939 (chi-expr*$735$14888 (cdr e*$735$21933) r$735$21934 mr$735$21935))) (chi-expr$735$14892 (car e*$735$21933) r$735$21934 mr$735$21935))))) (set! chi-application$735$14890 (lambda (e$735$21941 r$735$21942 mr$735$21943) ((lambda (t$735$21947) ((lambda (ls/false$735$21949) (if (if ls/false$735$21949 (begin (quote #f) (apply (lambda (rator$735$21951 rands$735$21952) (quote #t)) ls/false$735$21949)) (quote #f)) (apply (lambda (rator$735$21955 rands$735$21956) ((lambda (rator$735$21959) (cons rator$735$21959 (chi-expr*$735$14888 rands$735$21956 r$735$21942 mr$735$21943))) (chi-expr$735$14892 rator$735$21955 r$735$21942 mr$735$21943))) ls/false$735$21949) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$21947 (quote ()))))) ((lambda (x$735$21961) (if (syntax-pair?$735$14331 x$735$21961) (begin (quote #f) ((lambda (q$735$21963) (if q$735$21963 (begin (quote #f) ((lambda (r$735$21965) (if r$735$21965 (begin (quote #f) (append q$735$21963 r$735$21965)) (quote #f))) ((letrec ((f$735$21967 (lambda (x$735$21969) (if (syntax-pair?$735$14331 x$735$21969) ((lambda (cars/f$735$21971) (if cars/f$735$21971 (begin (quote #f) ((lambda (cdrs/f$735$21973) (if cdrs/f$735$21973 (begin (quote #f) (map cons cars/f$735$21971 cdrs/f$735$21973)) (quote #f))) (f$735$21967 (syntax-cdr$735$14343 x$735$21969)))) (quote #f))) ((lambda (x$735$21975) (list x$735$21975)) (syntax-car$735$14339 x$735$21969))) (if (syntax-null?$735$14335 x$735$21969) (list (begin (quote rands) (quote ()))) (quote #f)))))) f$735$21967) (syntax-cdr$735$14343 x$735$21961)))) (quote #f))) ((lambda (x$735$21977) (list x$735$21977)) (syntax-car$735$14339 x$735$21961)))) (quote #f))) t$735$21947))) e$735$21941))) (set! chi-expr$735$14892 (lambda (e$735$21979 r$735$21980 mr$735$21981) (call-with-values (lambda () (syntax-type$735$14377 e$735$21979 r$735$21980)) (lambda (type$735$21985 value$735$21986 kwd$735$21987) ((lambda (t$735$21991) (if (memv t$735$21991 (quote (core-macro))) ((lambda (transformer$735$22128) (transformer$735$22128 e$735$21979 r$735$21980 mr$735$21981)) (core-macro-transformer$735$14872 value$735$21986)) (if (memv t$735$21991 (quote (global))) ((lambda (lib$735$22124) ((lambda (loc$735$22126) ((lambda () (begin ((inv-collector$735$14940) lib$735$22124) loc$735$22126)))) (cdr value$735$21986))) (car value$735$21986)) (if (memv t$735$21991 (quote (core-prim))) ((lambda (name$735$22122) (list (quote primitive) name$735$22122)) value$735$21986) (if (memv t$735$21991 (quote (call))) (chi-application$735$14890 e$735$21979 r$735$21980 mr$735$21981) (if (memv t$735$21991 (quote (lexical))) ((lambda (lex$735$22120) lex$735$22120) value$735$21986) (if (memv t$735$21991 (quote (global-macro global-macro!))) (chi-expr$735$14892 (chi-global-macro$735$14886 value$735$21986 e$735$21979) r$735$21980 mr$735$21981) (if (memv t$735$21991 (quote (local-macro local-macro!))) (chi-expr$735$14892 (chi-local-macro$735$14884 value$735$21986 e$735$21979) r$735$21980 mr$735$21981) (if (memv t$735$21991 (quote (macro macro!))) (chi-expr$735$14892 (chi-macro$735$14882 value$735$21986 e$735$21979) r$735$21980 mr$735$21981) (if (memv t$735$21991 (quote (constant))) ((lambda (datum$735$22118) (list (quote quote) datum$735$22118)) value$735$21986) (if (memv t$735$21991 (quote (set!))) (chi-set!$735$14894 e$735$21979 r$735$21980 mr$735$21981) (if (memv t$735$21991 (quote (begin))) ((lambda (t$735$22080) ((lambda (ls/false$735$22082) (if (if ls/false$735$22082 (begin (quote #f) (apply (lambda (x$735$22084 x*$735$22085) (quote #t)) ls/false$735$22082)) (quote #f)) (apply (lambda (x$735$22088 x*$735$22089) (build-sequence$735$14228 (quote #f) (chi-expr*$735$14888 (cons x$735$22088 x*$735$22089) r$735$21980 mr$735$21981))) ls/false$735$22082) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$22080 (quote ()))))) ((lambda (x$735$22092) (if (syntax-pair?$735$14331 x$735$22092) (begin (quote #f) ((lambda (q$735$22094) (if q$735$22094 (begin (quote #f) ((lambda (r$735$22096) (if r$735$22096 (begin (quote #f) (append q$735$22094 r$735$22096)) (quote #f))) ((lambda (x$735$22098) (if (syntax-pair?$735$14331 x$735$22098) (begin (quote #f) ((lambda (q$735$22100) (if q$735$22100 (begin (quote #f) ((lambda (r$735$22102) (if r$735$22102 (begin (quote #f) (append q$735$22100 r$735$22102)) (quote #f))) ((letrec ((f$735$22104 (lambda (x$735$22106) (if (syntax-pair?$735$14331 x$735$22106) ((lambda (cars/f$735$22108) (if cars/f$735$22108 (begin (quote #f) ((lambda (cdrs/f$735$22110) (if cdrs/f$735$22110 (begin (quote #f) (map cons cars/f$735$22108 cdrs/f$735$22110)) (quote #f))) (f$735$22104 (syntax-cdr$735$14343 x$735$22106)))) (quote #f))) ((lambda (x$735$22112) (list x$735$22112)) (syntax-car$735$14339 x$735$22106))) (if (syntax-null?$735$14335 x$735$22106) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$735$22104) (syntax-cdr$735$14343 x$735$22098)))) (quote #f))) ((lambda (x$735$22114) (list x$735$22114)) (syntax-car$735$14339 x$735$22098)))) (quote #f))) (syntax-cdr$735$14343 x$735$22092)))) (quote #f))) ((lambda (x$735$22116) (quote ())) (syntax-car$735$14339 x$735$22092)))) (quote #f))) t$735$22080))) e$735$21979) (if (memv t$735$21991 (quote (let-syntax letrec-syntax))) ((lambda (t$735$21992) ((lambda (ls/false$735$21994) (if (if ls/false$735$21994 (begin (quote #f) (apply (lambda (xlhs*$735$21996 xrhs*$735$21997 xbody$735$21998 xbody*$735$21999) (if (valid-bound-ids?$735$14355 xlhs*$735$21996) (void) (error (quote expander) (quote "invalid identifiers") (strip$735$14363 e$735$21979 (quote ()))))) ls/false$735$21994)) (quote #f)) (apply (lambda (xlhs*$735$22004 xrhs*$735$22005 xbody$735$22006 xbody*$735$22007) ((lambda (xlab*$735$22012) ((lambda (xrib$735$22014) ((lambda (xb*$735$22016) ((lambda () (build-sequence$735$14228 (quote #f) (chi-expr*$735$14888 (map (lambda (x$735$22018) (add-subst$735$14325 xrib$735$22014 x$735$22018)) (cons xbody$735$22006 xbody*$735$22007)) (append (map cons xlab*$735$22012 xb*$735$22016) r$735$21980) (append (map cons xlab*$735$22012 xb*$735$22016) mr$735$21981)))))) (map (lambda (x$735$22020) (make-eval-transformer$735$14408 (expand-transformer$735$14926 (if (eq? type$735$21985 (quote let-syntax)) x$735$22020 (add-subst$735$14325 xrib$735$22014 x$735$22020)) mr$735$21981))) xrhs*$735$22005))) (make-full-rib$735$14292 xlhs*$735$22004 xlab*$735$22012))) (map gen-label$735$14259 xlhs*$735$22004))) ls/false$735$21994) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$21992 (quote ()))))) ((lambda (x$735$22022) (if (syntax-pair?$735$14331 x$735$22022) (begin (quote #f) ((lambda (q$735$22024) (if q$735$22024 (begin (quote #f) ((lambda (r$735$22026) (if r$735$22026 (begin (quote #f) (append q$735$22024 r$735$22026)) (quote #f))) ((lambda (x$735$22028) (if (syntax-pair?$735$14331 x$735$22028) (begin (quote #f) ((lambda (q$735$22030) (if q$735$22030 (begin (quote #f) ((lambda (r$735$22032) (if r$735$22032 (begin (quote #f) (append q$735$22030 r$735$22032)) (quote #f))) ((lambda (x$735$22034) (if (syntax-pair?$735$14331 x$735$22034) (begin (quote #f) ((lambda (q$735$22036) (if q$735$22036 (begin (quote #f) ((lambda (r$735$22038) (if r$735$22038 (begin (quote #f) (append q$735$22036 r$735$22038)) (quote #f))) ((letrec ((f$735$22040 (lambda (x$735$22042) (if (syntax-pair?$735$14331 x$735$22042) ((lambda (cars/f$735$22044) (if cars/f$735$22044 (begin (quote #f) ((lambda (cdrs/f$735$22046) (if cdrs/f$735$22046 (begin (quote #f) (map cons cars/f$735$22044 cdrs/f$735$22046)) (quote #f))) (f$735$22040 (syntax-cdr$735$14343 x$735$22042)))) (quote #f))) ((lambda (x$735$22048) (list x$735$22048)) (syntax-car$735$14339 x$735$22042))) (if (syntax-null?$735$14335 x$735$22042) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) f$735$22040) (syntax-cdr$735$14343 x$735$22034)))) (quote #f))) ((lambda (x$735$22050) (list x$735$22050)) (syntax-car$735$14339 x$735$22034)))) (quote #f))) (syntax-cdr$735$14343 x$735$22028)))) (quote #f))) ((letrec ((f$735$22052 (lambda (x$735$22054) (if (syntax-pair?$735$14331 x$735$22054) ((lambda (cars/f$735$22056) (if cars/f$735$22056 (begin (quote #f) ((lambda (cdrs/f$735$22058) (if cdrs/f$735$22058 (begin (quote #f) (map cons cars/f$735$22056 cdrs/f$735$22058)) (quote #f))) (f$735$22052 (syntax-cdr$735$14343 x$735$22054)))) (quote #f))) ((lambda (x$735$22060) (if (syntax-pair?$735$14331 x$735$22060) (begin (quote #f) ((lambda (q$735$22062) (if q$735$22062 (begin (quote #f) ((lambda (r$735$22064) (if r$735$22064 (begin (quote #f) (append q$735$22062 r$735$22064)) (quote #f))) ((lambda (x$735$22066) (if (syntax-pair?$735$14331 x$735$22066) (begin (quote #f) ((lambda (q$735$22068) (if q$735$22068 (begin (quote #f) ((lambda (r$735$22070) (if r$735$22070 (begin (quote #f) (append q$735$22068 r$735$22070)) (quote #f))) ((lambda (x$735$22072) (if (equal? (stx->datum$735$14365 x$735$22072) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$22066)))) (quote #f))) ((lambda (x$735$22074) (list x$735$22074)) (syntax-car$735$14339 x$735$22066)))) (quote #f))) (syntax-cdr$735$14343 x$735$22060)))) (quote #f))) ((lambda (x$735$22076) (list x$735$22076)) (syntax-car$735$14339 x$735$22060)))) (quote #f))) (syntax-car$735$14339 x$735$22054))) (if (syntax-null?$735$14335 x$735$22054) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) f$735$22052) (syntax-car$735$14339 x$735$22028)))) (quote #f))) (syntax-cdr$735$14343 x$735$22022)))) (quote #f))) ((lambda (x$735$22078) (quote ())) (syntax-car$735$14339 x$735$22022)))) (quote #f))) t$735$21992))) e$735$21979) (if (memv t$735$21991 (quote (displaced-lexical))) (error (quote expander) (quote "identifier out of context") (strip$735$14363 e$735$21979 (quote ()))) (if (memv t$735$21991 (quote (syntax))) (error (quote expander) (quote "reference to pattern variable outside a syntax form") (strip$735$14363 e$735$21979 (quote ()))) (if (memv t$735$21991 (quote (define define-syntax module import))) (error (quote expander) (quote "invalid expression") (strip$735$14363 e$735$21979 (quote ()))) (error (quote expander) (quote "invalid expression") (strip$735$14363 e$735$21979 (quote ()))))))))))))))))))) type$735$21985))))) (set! chi-set!$735$14894 (lambda (e$735$22130 r$735$22131 mr$735$22132) ((lambda (t$735$22136) ((lambda (ls/false$735$22138) (if (if ls/false$735$22138 (begin (quote #f) (apply (lambda (x$735$22140 v$735$22141) (id?$735$14345 x$735$22140)) ls/false$735$22138)) (quote #f)) (apply (lambda (x$735$22144 v$735$22145) (call-with-values (lambda () (syntax-type$735$14377 x$735$22144 r$735$22131)) (lambda (type$735$22148 value$735$22149 kwd$735$22150) ((lambda (t$735$22154) (if (memv t$735$22154 (quote (lexical))) (list (quote set!) value$735$22149 (chi-expr$735$14892 v$735$22145 r$735$22131 mr$735$22132)) (if (memv t$735$22154 (quote (global core-prim))) (error (quote expander) (quote "cannot modify imported identifier in") (strip$735$14363 e$735$22130 (quote ()))) (if (memv t$735$22154 (quote (global-macro!))) (chi-expr$735$14892 (chi-global-macro$735$14886 value$735$22149 e$735$22130) r$735$22131 mr$735$22132) (if (memv t$735$22154 (quote (local-macro!))) (chi-expr$735$14892 (chi-local-macro$735$14884 value$735$22149 e$735$22130) r$735$22131 mr$735$22132) (error (quote expander) (quote "invalid syntax") (stx->datum$735$14365 e$735$22130))))))) type$735$22148)))) ls/false$735$22138) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$22136 (quote ()))))) ((lambda (x$735$22155) (if (syntax-pair?$735$14331 x$735$22155) (begin (quote #f) ((lambda (q$735$22157) (if q$735$22157 (begin (quote #f) ((lambda (r$735$22159) (if r$735$22159 (begin (quote #f) (append q$735$22157 r$735$22159)) (quote #f))) ((lambda (x$735$22161) (if (syntax-pair?$735$14331 x$735$22161) (begin (quote #f) ((lambda (q$735$22163) (if q$735$22163 (begin (quote #f) ((lambda (r$735$22165) (if r$735$22165 (begin (quote #f) (append q$735$22163 r$735$22165)) (quote #f))) ((lambda (x$735$22167) (if (syntax-pair?$735$14331 x$735$22167) (begin (quote #f) ((lambda (q$735$22169) (if q$735$22169 (begin (quote #f) ((lambda (r$735$22171) (if r$735$22171 (begin (quote #f) (append q$735$22169 r$735$22171)) (quote #f))) ((lambda (x$735$22173) (if (equal? (stx->datum$735$14365 x$735$22173) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$22167)))) (quote #f))) ((lambda (x$735$22175) (list x$735$22175)) (syntax-car$735$14339 x$735$22167)))) (quote #f))) (syntax-cdr$735$14343 x$735$22161)))) (quote #f))) ((lambda (x$735$22177) (list x$735$22177)) (syntax-car$735$14339 x$735$22161)))) (quote #f))) (syntax-cdr$735$14343 x$735$22155)))) (quote #f))) ((lambda (x$735$22179) (quote ())) (syntax-car$735$14339 x$735$22155)))) (quote #f))) t$735$22136))) e$735$22130))) (set! chi-lambda-clause$735$14896 (lambda (fmls$735$22181 body*$735$22182 r$735$22183 mr$735$22184) ((lambda (t$735$22189) ((lambda (ls/false$735$22191) (if (if ls/false$735$22191 (begin (quote #f) (apply (lambda (x*$735$22193) (quote #t)) ls/false$735$22191)) (quote #f)) (apply (lambda (x*$735$22195) (if (valid-bound-ids?$735$14355 x*$735$22195) ((lambda (lex*$735$22197 lab*$735$22198) (values lex*$735$22197 (chi-internal$735$14908 (add-subst$735$14325 (make-full-rib$735$14292 x*$735$22195 lab*$735$22198) body*$735$22182) (add-lexicals$735$14778 lab*$735$22198 lex*$735$22197 r$735$22183) mr$735$22184))) (map gen-lexical$735$14255 x*$735$22195) (map gen-label$735$14259 x*$735$22195)) (error (quote expander) (quote "invalid fmls") (strip$735$14363 fmls$735$22181 (quote ()))))) ls/false$735$22191) ((lambda (t$735$22201) ((lambda (ls/false$735$22203) (if (if ls/false$735$22203 (begin (quote #f) (apply (lambda (x*$735$22205 x$735$22206) (quote #t)) ls/false$735$22203)) (quote #f)) (apply (lambda (x*$735$22209 x$735$22210) (if (valid-bound-ids?$735$14355 (cons x$735$22210 x*$735$22209)) ((lambda (lex*$735$22213 lab*$735$22214 lex$735$22215 lab$735$22216) (values (append lex*$735$22213 lex$735$22215) (chi-internal$735$14908 (add-subst$735$14325 (make-full-rib$735$14292 (cons x$735$22210 x*$735$22209) (cons lab$735$22216 lab*$735$22214)) body*$735$22182) (add-lexicals$735$14778 (cons lab$735$22216 lab*$735$22214) (cons lex$735$22215 lex*$735$22213) r$735$22183) mr$735$22184))) (map gen-lexical$735$14255 x*$735$22209) (map gen-label$735$14259 x*$735$22209) (gen-lexical$735$14255 x$735$22210) (gen-label$735$14259 x$735$22210)) (error (quote expander) (quote "invalid fmls") (strip$735$14363 fmls$735$22181 (quote ()))))) ls/false$735$22203) ((lambda (t$735$22221) ((lambda (ls/false$735$22223) (if (if ls/false$735$22223 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$22223)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid fmls") (strip$735$14363 fmls$735$22181 (quote ())))) ls/false$735$22223) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$22221 (quote ()))))) ((lambda (x$735$22225) (quote ())) t$735$22221))) t$735$22201))) ((letrec ((f$735$22227 (lambda (x$735$22233) (if (syntax-pair?$735$14331 x$735$22233) ((lambda (cars/f$735$22235) (if cars/f$735$22235 (begin (quote #f) ((lambda (d/f$735$22237) (if d/f$735$22237 (begin (quote #f) (cons (map cons cars/f$735$22235 (car d/f$735$22237)) (cdr d/f$735$22237))) (quote #f))) (f$735$22227 (syntax-cdr$735$14343 x$735$22233)))) (quote #f))) ((lambda (x$735$22239) (list x$735$22239)) (syntax-car$735$14339 x$735$22233))) ((lambda (d$735$22241) (if d$735$22241 (begin (quote #f) (cons (list (begin (quote x*) (quote ()))) d$735$22241)) (quote #f))) ((lambda (x$735$22243) (list x$735$22243)) x$735$22233)))))) (lambda (x$735$22229) ((lambda (x$735$22231) (if x$735$22231 (begin (quote #f) (append (car x$735$22231) (cdr x$735$22231))) (quote #f))) (f$735$22227 x$735$22229)))) t$735$22201))) t$735$22189))) ((letrec ((f$735$22245 (lambda (x$735$22247) (if (syntax-pair?$735$14331 x$735$22247) ((lambda (cars/f$735$22249) (if cars/f$735$22249 (begin (quote #f) ((lambda (cdrs/f$735$22251) (if cdrs/f$735$22251 (begin (quote #f) (map cons cars/f$735$22249 cdrs/f$735$22251)) (quote #f))) (f$735$22245 (syntax-cdr$735$14343 x$735$22247)))) (quote #f))) ((lambda (x$735$22253) (list x$735$22253)) (syntax-car$735$14339 x$735$22247))) (if (syntax-null?$735$14335 x$735$22247) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$735$22245) t$735$22189))) fmls$735$22181))) (set! chi-lambda-clause*$735$14898 (lambda (fmls*$735$22255 body**$735$22256 r$735$22257 mr$735$22258) (if (null? fmls*$735$22255) (values (quote ()) (quote ())) (call-with-values (lambda () (chi-lambda-clause$735$14896 (car fmls*$735$22255) (car body**$735$22256) r$735$22257 mr$735$22258)) (lambda (a$735$22263 b$735$22264) (call-with-values (lambda () (chi-lambda-clause*$735$14898 (cdr fmls*$735$22255) (cdr body**$735$22256) r$735$22257 mr$735$22258)) (lambda (a*$735$22267 b*$735$22268) (values (cons a$735$22263 a*$735$22267) (cons b$735$22264 b*$735$22268))))))))) (set! chi-rhs$735$14900 (lambda (rhs$735$22271 r$735$22272 mr$735$22273) ((lambda (t$735$22277) (if (memv t$735$22277 (quote (defun))) ((lambda (x$735$22282) ((lambda (fmls$735$22284 body*$735$22285) (call-with-values (lambda () (chi-lambda-clause$735$14896 fmls$735$22284 body*$735$22285 r$735$22272 mr$735$22273)) (lambda (fmls$735$22288 body$735$22289) (build-lambda$735$14234 (quote #f) fmls$735$22288 body$735$22289)))) (car x$735$22282) (cdr x$735$22282))) (cdr rhs$735$22271)) (if (memv t$735$22277 (quote (expr))) ((lambda (expr$735$22280) (chi-expr$735$14892 expr$735$22280 r$735$22272 mr$735$22273)) (cdr rhs$735$22271)) (if (memv t$735$22277 (quote (top-expr))) ((lambda (expr$735$22278) (build-sequence$735$14228 (quote #f) (list (chi-expr$735$14892 expr$735$22278 r$735$22272 mr$735$22273) (build-void$735$14227)))) (cdr rhs$735$22271)) (error (quote chi-rhs) (quote "invalid rhs") rhs$735$22271))))) (car rhs$735$22271)))) (set! chi-rhs*$735$14902 (lambda (rhs*$735$22292 r$735$22293 mr$735$22294) (letrec ((f$735$22298 (lambda (ls$735$22300) (if (null? ls$735$22300) (quote ()) ((lambda (a$735$22302) (cons a$735$22302 (f$735$22298 (cdr ls$735$22300)))) (chi-rhs$735$14900 (car ls$735$22300) r$735$22293 mr$735$22294)))))) (f$735$22298 rhs*$735$22292)))) (set! find-bound=?$735$14904 (lambda (x$735$22304 lhs*$735$22305 rhs*$735$22306) (if (null? lhs*$735$22305) (quote #f) (if (bound-id=?$735$14351 x$735$22304 (car lhs*$735$22305)) (car rhs*$735$22306) (find-bound=?$735$14904 x$735$22304 (cdr lhs*$735$22305) (cdr rhs*$735$22306)))))) (set! find-dups$735$14906 (lambda (ls$735$22310) (letrec ((f$735$22312 (lambda (ls$735$22314 dups$735$22315) (if (null? ls$735$22314) dups$735$22315 ((lambda (t$735$22318) (if t$735$22318 ((lambda (x$735$22320) (f$735$22312 (cdr ls$735$22314) (cons (list (car ls$735$22314) x$735$22320) dups$735$22315))) t$735$22318) (f$735$22312 (cdr ls$735$22314) dups$735$22315))) (find-bound=?$735$14904 (car ls$735$22314) (cdr ls$735$22314) (cdr ls$735$22314))))))) (f$735$22312 ls$735$22310 (quote ()))))) (set! chi-internal$735$14908 (lambda (e*$735$22322 r$735$22323 mr$735$22324) ((lambda (rib$735$22328) (call-with-values (lambda () (chi-body*$735$14914 (map (lambda (x$735$22330) (add-subst$735$14325 rib$735$22328 x$735$22330)) (syntax->list$735$14341 e*$735$22322)) r$735$22323 mr$735$22324 (quote ()) (quote ()) (quote ()) (quote ()) rib$735$22328 (quote #f))) (lambda (e*$735$22332 r$735$22333 mr$735$22334 lex*$735$22335 rhs*$735$22336 mod**$735$22337 kwd*$735$22338) (begin (if (null? e*$735$22332) (error (quote expander) (quote "no expression in body") (strip$735$14363 e*$735$22332 (quote ()))) (void)) ((lambda (rhs*$735$22346 init*$735$22347) (build-letrec*$735$14225 (quote #f) (reverse lex*$735$22335) (reverse rhs*$735$22346) (build-sequence$735$14228 (quote #f) init*$735$22347))) (chi-rhs*$735$14902 rhs*$735$22336 r$735$22333 mr$735$22334) (chi-expr*$735$14888 (append (apply append (reverse mod**$735$22337)) e*$735$22332) r$735$22333 mr$735$22334)))))) (make-empty-rib$735$14282)))) (set! parse-module$735$14910 (lambda (e$735$22350) ((lambda (t$735$22352) ((lambda (ls/false$735$22354) (if (if ls/false$735$22354 (begin (quote #f) (apply (lambda (export*$735$22356 b*$735$22357) (quote #t)) ls/false$735$22354)) (quote #f)) (apply (lambda (export*$735$22360 b*$735$22361) (begin (if (for-all id?$735$14345 export*$735$22360) (void) (error (quote expander) (quote "module exports must be identifiers") (strip$735$14363 e$735$22350 (quote ())))) (values (quote #f) export*$735$22360 b*$735$22361))) ls/false$735$22354) ((lambda (t$735$22364) ((lambda (ls/false$735$22366) (if (if ls/false$735$22366 (begin (quote #f) (apply (lambda (name$735$22368 export*$735$22369 b*$735$22370) (quote #t)) ls/false$735$22366)) (quote #f)) (apply (lambda (name$735$22374 export*$735$22375 b*$735$22376) (begin (if (id?$735$14345 name$735$22374) (void) (error (quote expander) (quote "module name must be an identifier") (strip$735$14363 e$735$22350 (quote ())))) (if (for-all id?$735$14345 export*$735$22375) (void) (error (quote expander) (quote "module exports must be identifiers") (strip$735$14363 e$735$22350 (quote ())))) (values name$735$22374 export*$735$22375 b*$735$22376))) ls/false$735$22366) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$22364 (quote ()))))) ((lambda (x$735$22380) (if (syntax-pair?$735$14331 x$735$22380) (begin (quote #f) ((lambda (q$735$22382) (if q$735$22382 (begin (quote #f) ((lambda (r$735$22384) (if r$735$22384 (begin (quote #f) (append q$735$22382 r$735$22384)) (quote #f))) ((lambda (x$735$22386) (if (syntax-pair?$735$14331 x$735$22386) (begin (quote #f) ((lambda (q$735$22388) (if q$735$22388 (begin (quote #f) ((lambda (r$735$22390) (if r$735$22390 (begin (quote #f) (append q$735$22388 r$735$22390)) (quote #f))) ((lambda (x$735$22392) (if (syntax-pair?$735$14331 x$735$22392) (begin (quote #f) ((lambda (q$735$22394) (if q$735$22394 (begin (quote #f) ((lambda (r$735$22396) (if r$735$22396 (begin (quote #f) (append q$735$22394 r$735$22396)) (quote #f))) ((letrec ((f$735$22398 (lambda (x$735$22400) (if (syntax-pair?$735$14331 x$735$22400) ((lambda (cars/f$735$22402) (if cars/f$735$22402 (begin (quote #f) ((lambda (cdrs/f$735$22404) (if cdrs/f$735$22404 (begin (quote #f) (map cons cars/f$735$22402 cdrs/f$735$22404)) (quote #f))) (f$735$22398 (syntax-cdr$735$14343 x$735$22400)))) (quote #f))) ((lambda (x$735$22406) (list x$735$22406)) (syntax-car$735$14339 x$735$22400))) (if (syntax-null?$735$14335 x$735$22400) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$22398) (syntax-cdr$735$14343 x$735$22392)))) (quote #f))) ((letrec ((f$735$22408 (lambda (x$735$22410) (if (syntax-pair?$735$14331 x$735$22410) ((lambda (cars/f$735$22412) (if cars/f$735$22412 (begin (quote #f) ((lambda (cdrs/f$735$22414) (if cdrs/f$735$22414 (begin (quote #f) (map cons cars/f$735$22412 cdrs/f$735$22414)) (quote #f))) (f$735$22408 (syntax-cdr$735$14343 x$735$22410)))) (quote #f))) ((lambda (x$735$22416) (list x$735$22416)) (syntax-car$735$14339 x$735$22410))) (if (syntax-null?$735$14335 x$735$22410) (list (begin (quote export*) (quote ()))) (quote #f)))))) f$735$22408) (syntax-car$735$14339 x$735$22392)))) (quote #f))) (syntax-cdr$735$14343 x$735$22386)))) (quote #f))) ((lambda (x$735$22418) (list x$735$22418)) (syntax-car$735$14339 x$735$22386)))) (quote #f))) (syntax-cdr$735$14343 x$735$22380)))) (quote #f))) ((lambda (x$735$22420) (quote ())) (syntax-car$735$14339 x$735$22380)))) (quote #f))) t$735$22364))) t$735$22352))) ((lambda (x$735$22422) (if (syntax-pair?$735$14331 x$735$22422) (begin (quote #f) ((lambda (q$735$22424) (if q$735$22424 (begin (quote #f) ((lambda (r$735$22426) (if r$735$22426 (begin (quote #f) (append q$735$22424 r$735$22426)) (quote #f))) ((lambda (x$735$22428) (if (syntax-pair?$735$14331 x$735$22428) (begin (quote #f) ((lambda (q$735$22430) (if q$735$22430 (begin (quote #f) ((lambda (r$735$22432) (if r$735$22432 (begin (quote #f) (append q$735$22430 r$735$22432)) (quote #f))) ((letrec ((f$735$22434 (lambda (x$735$22436) (if (syntax-pair?$735$14331 x$735$22436) ((lambda (cars/f$735$22438) (if cars/f$735$22438 (begin (quote #f) ((lambda (cdrs/f$735$22440) (if cdrs/f$735$22440 (begin (quote #f) (map cons cars/f$735$22438 cdrs/f$735$22440)) (quote #f))) (f$735$22434 (syntax-cdr$735$14343 x$735$22436)))) (quote #f))) ((lambda (x$735$22442) (list x$735$22442)) (syntax-car$735$14339 x$735$22436))) (if (syntax-null?$735$14335 x$735$22436) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$22434) (syntax-cdr$735$14343 x$735$22428)))) (quote #f))) ((letrec ((f$735$22444 (lambda (x$735$22446) (if (syntax-pair?$735$14331 x$735$22446) ((lambda (cars/f$735$22448) (if cars/f$735$22448 (begin (quote #f) ((lambda (cdrs/f$735$22450) (if cdrs/f$735$22450 (begin (quote #f) (map cons cars/f$735$22448 cdrs/f$735$22450)) (quote #f))) (f$735$22444 (syntax-cdr$735$14343 x$735$22446)))) (quote #f))) ((lambda (x$735$22452) (list x$735$22452)) (syntax-car$735$14339 x$735$22446))) (if (syntax-null?$735$14335 x$735$22446) (list (begin (quote export*) (quote ()))) (quote #f)))))) f$735$22444) (syntax-car$735$14339 x$735$22428)))) (quote #f))) (syntax-cdr$735$14343 x$735$22422)))) (quote #f))) ((lambda (x$735$22454) (quote ())) (syntax-car$735$14339 x$735$22422)))) (quote #f))) t$735$22352))) e$735$22350))) (set! chi-internal-module$735$14912 (lambda (e$735$22456 r$735$22457 mr$735$22458 lex*$735$22459 rhs*$735$22460 mod**$735$22461 kwd*$735$22462) (call-with-values (lambda () (parse-module$735$14910 e$735$22456)) (lambda (name$735$22470 exp-id*$735$22471 e*$735$22472) ((lambda (rib$735$22476) ((lambda (e*$735$22478) ((lambda () (call-with-values (lambda () (chi-body*$735$14914 e*$735$22478 r$735$22457 mr$735$22458 lex*$735$22459 rhs*$735$22460 mod**$735$22461 kwd*$735$22462 rib$735$22476 (quote #f))) (lambda (e*$735$22480 r$735$22481 mr$735$22482 lex*$735$22483 rhs*$735$22484 mod**$735$22485 kwd*$735$22486) ((lambda (exp-lab*$735$22494 mod**$735$22495) (if (not name$735$22470) (values lex*$735$22483 rhs*$735$22484 exp-id*$735$22471 exp-lab*$735$22494 r$735$22481 mr$735$22482 mod**$735$22495 kwd*$735$22486) ((lambda (lab$735$22498 iface$735$22499) (values lex*$735$22483 rhs*$735$22484 (list name$735$22470) (list lab$735$22498) (cons (cons lab$735$22498 (cons (quote $module) iface$735$22499)) r$735$22481) (cons (cons lab$735$22498 (cons (quote $module) iface$735$22499)) mr$735$22482) mod**$735$22495 kwd*$735$22486)) (gen-label$735$14259 (quote module)) (cons exp-id*$735$22471 exp-lab*$735$22494)))) (map (lambda (x$735$22502) ((lambda (t$735$22504) (if t$735$22504 t$735$22504 (begin (quote #f) (error (quote expander) (quote "cannot find module export") (strip$735$14363 x$735$22502 (quote ())))))) (id->label$735$14367 (mkstx$735$14321 (id->sym$735$14347 x$735$22502) (stx-mark*$735$14301 x$735$22502) (list rib$735$22476))))) exp-id*$735$22471) (cons e*$735$22480 mod**$735$22485))))))) (map (lambda (x$735$22506) (add-subst$735$14325 rib$735$22476 x$735$22506)) (syntax->list$735$14341 e*$735$22472)))) (make-empty-rib$735$14282)))))) (set! chi-body*$735$14914 (lambda (e*$735$22508 r$735$22509 mr$735$22510 lex*$735$22511 rhs*$735$22512 mod**$735$22513 kwd*$735$22514 rib$735$22515 top?$735$22516) (if (null? e*$735$22508) (values e*$735$22508 r$735$22509 mr$735$22510 lex*$735$22511 rhs*$735$22512 mod**$735$22513 kwd*$735$22514) ((lambda (e$735$22526) (call-with-values (lambda () (syntax-type$735$14377 e$735$22526 r$735$22509)) (lambda (type$735$22528 value$735$22529 kwd$735$22530) ((lambda (kwd*$735$22534) ((lambda (t$735$22536) (if (memv t$735$22536 (quote (define))) (call-with-values (lambda () (parse-define$735$14770 e$735$22526)) (lambda (id$735$22722 rhs$735$22723) (begin (if (bound-id-member?$735$14359 id$735$22722 kwd*$735$22534) (error (quote expander) (quote "cannot redefine keyword") (strip$735$14363 e$735$22526 (quote ()))) (void)) ((lambda (lex$735$22726 lab$735$22727) (begin (extend-rib!$735$14284 rib$735$22515 id$735$22722 lab$735$22727) (chi-body*$735$14914 (cdr e*$735$22508) (add-lexical$735$14776 lab$735$22727 lex$735$22726 r$735$22509) mr$735$22510 (cons lex$735$22726 lex*$735$22511) (cons rhs$735$22723 rhs*$735$22512) mod**$735$22513 kwd*$735$22534 rib$735$22515 top?$735$22516))) (gen-lexical$735$14255 id$735$22722) (gen-label$735$14259 id$735$22722))))) (if (memv t$735$22536 (quote (define-syntax))) (call-with-values (lambda () (parse-define-syntax$735$14772 e$735$22526)) (lambda (id$735$22712 rhs$735$22713) (begin (if (bound-id-member?$735$14359 id$735$22712 kwd*$735$22534) (error (quote expander) (quote "cannot redefine keyword") (strip$735$14363 e$735$22526 (quote ()))) (void)) ((lambda (lab$735$22716 expanded-rhs$735$22717) (begin (extend-rib!$735$14284 rib$735$22515 id$735$22712 lab$735$22716) ((lambda (b$735$22720) (chi-body*$735$14914 (cdr e*$735$22508) (cons (cons lab$735$22716 b$735$22720) r$735$22509) (cons (cons lab$735$22716 b$735$22720) mr$735$22510) lex*$735$22511 rhs*$735$22512 mod**$735$22513 kwd*$735$22534 rib$735$22515 top?$735$22516)) (make-eval-transformer$735$14408 expanded-rhs$735$22717)))) (gen-label$735$14259 id$735$22712) (expand-transformer$735$14926 rhs$735$22713 mr$735$22510))))) (if (memv t$735$22536 (quote (let-syntax letrec-syntax))) ((lambda (t$735$22636) ((lambda (ls/false$735$22638) (if (if ls/false$735$22638 (begin (quote #f) (apply (lambda (xlhs*$735$22640 xrhs*$735$22641 xbody*$735$22642) (if (valid-bound-ids?$735$14355 xlhs*$735$22640) (void) (error (quote expander) (quote "invalid identifiers") (strip$735$14363 e$735$22526 (quote ()))))) ls/false$735$22638)) (quote #f)) (apply (lambda (xlhs*$735$22646 xrhs*$735$22647 xbody*$735$22648) ((lambda (xlab*$735$22652) ((lambda (xrib$735$22654) ((lambda (xb*$735$22656) ((lambda () (chi-body*$735$14914 (append (map (lambda (x$735$22658) (add-subst$735$14325 xrib$735$22654 x$735$22658)) xbody*$735$22648) (cdr e*$735$22508)) (append (map cons xlab*$735$22652 xb*$735$22656) r$735$22509) (append (map cons xlab*$735$22652 xb*$735$22656) mr$735$22510) lex*$735$22511 rhs*$735$22512 mod**$735$22513 kwd*$735$22534 rib$735$22515 top?$735$22516)))) (map (lambda (x$735$22660) (make-eval-transformer$735$14408 (expand-transformer$735$14926 (if (eq? type$735$22528 (quote let-syntax)) x$735$22660 (add-subst$735$14325 xrib$735$22654 x$735$22660)) mr$735$22510))) xrhs*$735$22647))) (make-full-rib$735$14292 xlhs*$735$22646 xlab*$735$22652))) (map gen-label$735$14259 xlhs*$735$22646))) ls/false$735$22638) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$22636 (quote ()))))) ((lambda (x$735$22662) (if (syntax-pair?$735$14331 x$735$22662) (begin (quote #f) ((lambda (q$735$22664) (if q$735$22664 (begin (quote #f) ((lambda (r$735$22666) (if r$735$22666 (begin (quote #f) (append q$735$22664 r$735$22666)) (quote #f))) ((lambda (x$735$22668) (if (syntax-pair?$735$14331 x$735$22668) (begin (quote #f) ((lambda (q$735$22670) (if q$735$22670 (begin (quote #f) ((lambda (r$735$22672) (if r$735$22672 (begin (quote #f) (append q$735$22670 r$735$22672)) (quote #f))) ((letrec ((f$735$22674 (lambda (x$735$22676) (if (syntax-pair?$735$14331 x$735$22676) ((lambda (cars/f$735$22678) (if cars/f$735$22678 (begin (quote #f) ((lambda (cdrs/f$735$22680) (if cdrs/f$735$22680 (begin (quote #f) (map cons cars/f$735$22678 cdrs/f$735$22680)) (quote #f))) (f$735$22674 (syntax-cdr$735$14343 x$735$22676)))) (quote #f))) ((lambda (x$735$22682) (list x$735$22682)) (syntax-car$735$14339 x$735$22676))) (if (syntax-null?$735$14335 x$735$22676) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) f$735$22674) (syntax-cdr$735$14343 x$735$22668)))) (quote #f))) ((letrec ((f$735$22684 (lambda (x$735$22686) (if (syntax-pair?$735$14331 x$735$22686) ((lambda (cars/f$735$22688) (if cars/f$735$22688 (begin (quote #f) ((lambda (cdrs/f$735$22690) (if cdrs/f$735$22690 (begin (quote #f) (map cons cars/f$735$22688 cdrs/f$735$22690)) (quote #f))) (f$735$22684 (syntax-cdr$735$14343 x$735$22686)))) (quote #f))) ((lambda (x$735$22692) (if (syntax-pair?$735$14331 x$735$22692) (begin (quote #f) ((lambda (q$735$22694) (if q$735$22694 (begin (quote #f) ((lambda (r$735$22696) (if r$735$22696 (begin (quote #f) (append q$735$22694 r$735$22696)) (quote #f))) ((lambda (x$735$22698) (if (syntax-pair?$735$14331 x$735$22698) (begin (quote #f) ((lambda (q$735$22700) (if q$735$22700 (begin (quote #f) ((lambda (r$735$22702) (if r$735$22702 (begin (quote #f) (append q$735$22700 r$735$22702)) (quote #f))) ((lambda (x$735$22704) (if (equal? (stx->datum$735$14365 x$735$22704) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$22698)))) (quote #f))) ((lambda (x$735$22706) (list x$735$22706)) (syntax-car$735$14339 x$735$22698)))) (quote #f))) (syntax-cdr$735$14343 x$735$22692)))) (quote #f))) ((lambda (x$735$22708) (list x$735$22708)) (syntax-car$735$14339 x$735$22692)))) (quote #f))) (syntax-car$735$14339 x$735$22686))) (if (syntax-null?$735$14335 x$735$22686) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) f$735$22684) (syntax-car$735$14339 x$735$22668)))) (quote #f))) (syntax-cdr$735$14343 x$735$22662)))) (quote #f))) ((lambda (x$735$22710) (quote ())) (syntax-car$735$14339 x$735$22662)))) (quote #f))) t$735$22636))) e$735$22526) (if (memv t$735$22536 (quote (begin))) ((lambda (t$735$22610) ((lambda (ls/false$735$22612) (if (if ls/false$735$22612 (begin (quote #f) (apply (lambda (x*$735$22614) (quote #t)) ls/false$735$22612)) (quote #f)) (apply (lambda (x*$735$22616) (chi-body*$735$14914 (append x*$735$22616 (cdr e*$735$22508)) r$735$22509 mr$735$22510 lex*$735$22511 rhs*$735$22512 mod**$735$22513 kwd*$735$22534 rib$735$22515 top?$735$22516)) ls/false$735$22612) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$22610 (quote ()))))) ((lambda (x$735$22618) (if (syntax-pair?$735$14331 x$735$22618) (begin (quote #f) ((lambda (q$735$22620) (if q$735$22620 (begin (quote #f) ((lambda (r$735$22622) (if r$735$22622 (begin (quote #f) (append q$735$22620 r$735$22622)) (quote #f))) ((letrec ((f$735$22624 (lambda (x$735$22626) (if (syntax-pair?$735$14331 x$735$22626) ((lambda (cars/f$735$22628) (if cars/f$735$22628 (begin (quote #f) ((lambda (cdrs/f$735$22630) (if cdrs/f$735$22630 (begin (quote #f) (map cons cars/f$735$22628 cdrs/f$735$22630)) (quote #f))) (f$735$22624 (syntax-cdr$735$14343 x$735$22626)))) (quote #f))) ((lambda (x$735$22632) (list x$735$22632)) (syntax-car$735$14339 x$735$22626))) (if (syntax-null?$735$14335 x$735$22626) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$735$22624) (syntax-cdr$735$14343 x$735$22618)))) (quote #f))) ((lambda (x$735$22634) (quote ())) (syntax-car$735$14339 x$735$22618)))) (quote #f))) t$735$22610))) e$735$22526) (if (memv t$735$22536 (quote (global-macro global-macro!))) (chi-body*$735$14914 (cons (add-subst$735$14325 rib$735$22515 (chi-global-macro$735$14886 value$735$22529 e$735$22526)) (cdr e*$735$22508)) r$735$22509 mr$735$22510 lex*$735$22511 rhs*$735$22512 mod**$735$22513 kwd*$735$22534 rib$735$22515 top?$735$22516) (if (memv t$735$22536 (quote (local-macro local-macro!))) (chi-body*$735$14914 (cons (add-subst$735$14325 rib$735$22515 (chi-local-macro$735$14884 value$735$22529 e$735$22526)) (cdr e*$735$22508)) r$735$22509 mr$735$22510 lex*$735$22511 rhs*$735$22512 mod**$735$22513 kwd*$735$22534 rib$735$22515 top?$735$22516) (if (memv t$735$22536 (quote (macro macro!))) (chi-body*$735$14914 (cons (add-subst$735$14325 rib$735$22515 (chi-macro$735$14882 value$735$22529 e$735$22526)) (cdr e*$735$22508)) r$735$22509 mr$735$22510 lex*$735$22511 rhs*$735$22512 mod**$735$22513 kwd*$735$22534 rib$735$22515 top?$735$22516) (if (memv t$735$22536 (quote (module))) (call-with-values (lambda () (chi-internal-module$735$14912 e$735$22526 r$735$22509 mr$735$22510 lex*$735$22511 rhs*$735$22512 mod**$735$22513 kwd*$735$22534)) (lambda (lex*$735$22590 rhs*$735$22591 m-exp-id*$735$22592 m-exp-lab*$735$22593 r$735$22594 mr$735$22595 mod**$735$22596 kwd*$735$22597) (begin (for-each (lambda (id$735$22606 lab$735$22607) (extend-rib!$735$14284 rib$735$22515 id$735$22606 lab$735$22607)) m-exp-id*$735$22592 m-exp-lab*$735$22593) (chi-body*$735$14914 (cdr e*$735$22508) r$735$22594 mr$735$22595 lex*$735$22590 rhs*$735$22591 mod**$735$22596 kwd*$735$22597 rib$735$22515 top?$735$22516)))) (if (memv t$735$22536 (quote (import))) (begin ((lambda () ((lambda (module-import$735$22537) (begin (set! module-import$735$22537 (lambda (e$735$22539 r$735$22540) ((lambda (t$735$22543) ((lambda (ls/false$735$22545) (if (if ls/false$735$22545 (begin (quote #f) (apply (lambda (id$735$22547) (id?$735$14345 id$735$22547)) ls/false$735$22545)) (quote #f)) (apply (lambda (id$735$22549) (call-with-values (lambda () (syntax-type$735$14377 id$735$22549 r$735$22540)) (lambda (type$735$22551 value$735$22552 kwd$735$22553) ((lambda (t$735$22557) (if (memv t$735$22557 (quote ($module))) ((lambda (iface$735$22558) ((lambda (id*$735$22560 lab*$735$22561) (values id*$735$22560 lab*$735$22561)) (car iface$735$22558) (cdr iface$735$22558))) value$735$22552) (error (quote expander) (quote "invalid import") (strip$735$14363 e$735$22539 (quote ()))))) type$735$22551)))) ls/false$735$22545) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$22543 (quote ()))))) ((lambda (x$735$22564) (if (syntax-pair?$735$14331 x$735$22564) (begin (quote #f) ((lambda (q$735$22566) (if q$735$22566 (begin (quote #f) ((lambda (r$735$22568) (if r$735$22568 (begin (quote #f) (append q$735$22566 r$735$22568)) (quote #f))) ((lambda (x$735$22570) (if (syntax-pair?$735$14331 x$735$22570) (begin (quote #f) ((lambda (q$735$22572) (if q$735$22572 (begin (quote #f) ((lambda (r$735$22574) (if r$735$22574 (begin (quote #f) (append q$735$22572 r$735$22574)) (quote #f))) ((lambda (x$735$22576) (if (equal? (stx->datum$735$14365 x$735$22576) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$22570)))) (quote #f))) ((lambda (x$735$22578) (list x$735$22578)) (syntax-car$735$14339 x$735$22570)))) (quote #f))) (syntax-cdr$735$14343 x$735$22564)))) (quote #f))) ((lambda (x$735$22580) (quote ())) (syntax-car$735$14339 x$735$22564)))) (quote #f))) t$735$22543))) e$735$22539))) (call-with-values (lambda () (module-import$735$22537 e$735$22526 r$735$22509)) (lambda (id*$735$22582 lab*$735$22583) (for-each (lambda (id$735$22586 lab$735$22587) (extend-rib!$735$14284 rib$735$22515 id$735$22586 lab$735$22587)) id*$735$22582 lab*$735$22583))))) (quote #f)))) (chi-body*$735$14914 (cdr e*$735$22508) r$735$22509 mr$735$22510 lex*$735$22511 rhs*$735$22512 mod**$735$22513 kwd*$735$22534 rib$735$22515 top?$735$22516)) (if top?$735$22516 (chi-body*$735$14914 (cdr e*$735$22508) r$735$22509 mr$735$22510 (cons (gen-lexical$735$14255 (quote dummy)) lex*$735$22511) (cons (cons (quote top-expr) e$735$22526) rhs*$735$22512) mod**$735$22513 kwd*$735$22534 rib$735$22515 top?$735$22516) (values e*$735$22508 r$735$22509 mr$735$22510 lex*$735$22511 rhs*$735$22512 mod**$735$22513 kwd*$735$22534)))))))))))) type$735$22528)) (if (id?$735$14345 kwd$735$22530) (cons kwd$735$22530 kwd*$735$22514) kwd*$735$22514))))) (car e*$735$22508))))) (set! set-global-macro-binding!$735$14916 (lambda (sym$735$22730 loc$735$22731 b$735$22732) (begin (extend-library-subst!$735$13886 (interaction-library$735$15007) sym$735$22730 loc$735$22731) (extend-library-env!$735$13885 (interaction-library$735$15007) loc$735$22731 b$735$22732)))) (set! gen-global-macro-binding$735$14918 (lambda (id$735$22736 ctxt$735$22737) (gen-global-var-binding$735$14920 id$735$22736 ctxt$735$22737))) (set! gen-global-var-binding$735$14920 (lambda (id$735$22740 ctxt$735$22741) ((lambda (label$735$22744) ((lambda (b$735$22746) ((lambda (t$735$22748) (if (memv t$735$22748 (quote (global))) ((lambda (x$735$22749) ((lambda (lib$735$22751 loc$735$22752) (if (eq? lib$735$22751 (interaction-library$735$15007)) loc$735$22752 (error (quote expander) (quote "cannot modify imported binding") (strip$735$14363 ctxt$735$22741 (quote ()))))) (car x$735$22749) (cdr x$735$22749))) (binding-value$735$14375 b$735$22746)) (error (quote expander) (quote "cannot modify binding in") (strip$735$14363 ctxt$735$22741 (quote ()))))) (binding-type$735$14373 b$735$22746))) (imported-label->binding$735$13884 label$735$22744))) (id->label$735$14367 id$735$22740)))) (set! chi-top-set!$735$14922 (lambda (e$735$22755) ((lambda (t$735$22757) ((lambda (ls/false$735$22759) (if (if ls/false$735$22759 (begin (quote #f) (apply (lambda (id$735$22761 rhs$735$22762) (id?$735$14345 id$735$22761)) ls/false$735$22759)) (quote #f)) (apply (lambda (id$735$22765 rhs$735$22766) ((lambda (loc$735$22769) ((lambda (rhs$735$22771) (values loc$735$22769 rhs$735$22771)) (chi-expr$735$14892 rhs$735$22766 (quote ()) (quote ())))) (gen-global-var-binding$735$14920 id$735$22765 e$735$22755))) ls/false$735$22759) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$22757 (quote ()))))) ((lambda (x$735$22773) (if (syntax-pair?$735$14331 x$735$22773) (begin (quote #f) ((lambda (q$735$22775) (if q$735$22775 (begin (quote #f) ((lambda (r$735$22777) (if r$735$22777 (begin (quote #f) (append q$735$22775 r$735$22777)) (quote #f))) ((lambda (x$735$22779) (if (syntax-pair?$735$14331 x$735$22779) (begin (quote #f) ((lambda (q$735$22781) (if q$735$22781 (begin (quote #f) ((lambda (r$735$22783) (if r$735$22783 (begin (quote #f) (append q$735$22781 r$735$22783)) (quote #f))) ((lambda (x$735$22785) (if (syntax-pair?$735$14331 x$735$22785) (begin (quote #f) ((lambda (q$735$22787) (if q$735$22787 (begin (quote #f) ((lambda (r$735$22789) (if r$735$22789 (begin (quote #f) (append q$735$22787 r$735$22789)) (quote #f))) ((lambda (x$735$22791) (if (equal? (stx->datum$735$14365 x$735$22791) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$22785)))) (quote #f))) ((lambda (x$735$22793) (list x$735$22793)) (syntax-car$735$14339 x$735$22785)))) (quote #f))) (syntax-cdr$735$14343 x$735$22779)))) (quote #f))) ((lambda (x$735$22795) (list x$735$22795)) (syntax-car$735$14339 x$735$22779)))) (quote #f))) (syntax-cdr$735$14343 x$735$22773)))) (quote #f))) ((lambda (x$735$22797) (quote ())) (syntax-car$735$14339 x$735$22773)))) (quote #f))) t$735$22757))) e$735$22755))) (set! chi-top*$735$14924 (lambda (e*$735$22799 init*$735$22800) (if (null? e*$735$22799) init*$735$22800 ((lambda (e$735$22803) (call-with-values (lambda () (syntax-type$735$14377 e$735$22803 (quote ()))) (lambda (type$735$22805 value$735$22806 kwd$735$22807) ((lambda (t$735$22811) (if (memv t$735$22811 (quote (define))) (call-with-values (lambda () (parse-define$735$14770 e$735$22803)) (lambda (id$735$22852 rhs$735$22853) ((lambda (loc$735$22856) ((lambda (rhs$735$22858) (chi-top*$735$14924 (cdr e*$735$22799) (cons (cons loc$735$22856 rhs$735$22858) init*$735$22800))) (chi-rhs$735$14900 rhs$735$22853 (quote ()) (quote ())))) (gen-global-var-binding$735$14920 id$735$22852 e$735$22803)))) (if (memv t$735$22811 (quote (set!))) (call-with-values (lambda () (chi-top-set!$735$14922 e$735$22803)) (lambda (loc$735$22848 rhs$735$22849) (chi-top*$735$14924 (cdr e*$735$22799) (cons (cons loc$735$22848 rhs$735$22849) init*$735$22800)))) (if (memv t$735$22811 (quote (define-syntax))) (call-with-values (lambda () (parse-define-syntax$735$14772 e$735$22803)) (lambda (id$735$22838 rhs$735$22839) ((lambda (loc$735$22842) ((lambda (expanded-rhs$735$22844) ((lambda (b$735$22846) (begin (set-global-macro-binding!$735$14916 (id->sym$735$14347 id$735$22838) loc$735$22842 b$735$22846) (chi-top*$735$14924 (cdr e*$735$22799) init*$735$22800))) (make-eval-transformer$735$14408 expanded-rhs$735$22844))) (expand-transformer$735$14926 rhs$735$22839 (quote ())))) (gen-global-macro-binding$735$14918 id$735$22838 e$735$22803)))) (if (memv t$735$22811 (quote (let-syntax letrec-syntax))) (error (quote chi-top*) (quote "not supported yet at top level") type$735$22805) (if (memv t$735$22811 (quote (begin))) ((lambda (t$735$22812) ((lambda (ls/false$735$22814) (if (if ls/false$735$22814 (begin (quote #f) (apply (lambda (x*$735$22816) (quote #t)) ls/false$735$22814)) (quote #f)) (apply (lambda (x*$735$22818) (chi-top*$735$14924 (append x*$735$22818 (cdr e*$735$22799)) init*$735$22800)) ls/false$735$22814) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$22812 (quote ()))))) ((lambda (x$735$22820) (if (syntax-pair?$735$14331 x$735$22820) (begin (quote #f) ((lambda (q$735$22822) (if q$735$22822 (begin (quote #f) ((lambda (r$735$22824) (if r$735$22824 (begin (quote #f) (append q$735$22822 r$735$22824)) (quote #f))) ((letrec ((f$735$22826 (lambda (x$735$22828) (if (syntax-pair?$735$14331 x$735$22828) ((lambda (cars/f$735$22830) (if cars/f$735$22830 (begin (quote #f) ((lambda (cdrs/f$735$22832) (if cdrs/f$735$22832 (begin (quote #f) (map cons cars/f$735$22830 cdrs/f$735$22832)) (quote #f))) (f$735$22826 (syntax-cdr$735$14343 x$735$22828)))) (quote #f))) ((lambda (x$735$22834) (list x$735$22834)) (syntax-car$735$14339 x$735$22828))) (if (syntax-null?$735$14335 x$735$22828) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$735$22826) (syntax-cdr$735$14343 x$735$22820)))) (quote #f))) ((lambda (x$735$22836) (quote ())) (syntax-car$735$14339 x$735$22820)))) (quote #f))) t$735$22812))) e$735$22803) (if (memv t$735$22811 (quote (global-macro global-macro!))) (chi-top*$735$14924 (cons (chi-global-macro$735$14886 value$735$22806 e$735$22803) (cdr e*$735$22799)) init*$735$22800) (if (memv t$735$22811 (quote (local-macro local-macro!))) (chi-top*$735$14924 (cons (chi-local-macro$735$14884 value$735$22806 e$735$22803) (cdr e*$735$22799)) init*$735$22800) (if (memv t$735$22811 (quote (macro macro!))) (chi-top*$735$14924 (cons (chi-macro$735$14882 value$735$22806 e$735$22803) (cdr e*$735$22799)) init*$735$22800) (chi-top*$735$14924 (cdr e*$735$22799) (cons (cons (quote #f) (chi-expr$735$14892 e$735$22803 (quote ()) (quote ()))) init*$735$22800))))))))))) type$735$22805)))) (car e*$735$22799))))) (set! expand-transformer$735$14926 (lambda (expr$735$22860 r$735$22861) ((lambda (rtc$735$22864) ((lambda (expanded-rhs$735$22866) (begin (for-each ((lambda (mark-visit$735$22868) (lambda (x$735$22870) (begin (invoke-library$735$13883 x$735$22870) (mark-visit$735$22868 x$735$22870)))) (vis-collector$735$14942)) (rtc$735$22864)) expanded-rhs$735$22866)) ((lambda (t$735$22876 t$735$22877 t$735$22878 t$735$22879) ((lambda (swap$735$22884) (dynamic-wind swap$735$22884 (lambda () (chi-expr$735$14892 expr$735$22860 r$735$22861 r$735$22861)) swap$735$22884)) (lambda () (begin ((lambda (t$735$22886) (begin (t$735$22876 t$735$22878) (set! t$735$22878 t$735$22886))) (t$735$22876)) ((lambda (t$735$22888) (begin (t$735$22877 t$735$22879) (set! t$735$22879 t$735$22888))) (t$735$22877)))))) inv-collector$735$14940 vis-collector$735$14942 rtc$735$22864 (lambda (x$735$22890) (values))))) (make-collector$735$14938)))) (set! parse-exports$735$14928 (lambda (exp*$735$22892) (letrec ((f$735$22894 (lambda (exp*$735$22896 int*$735$22897 ext*$735$22898) (if (null? exp*$735$22896) (begin ((lambda (id*$735$22902) (if (valid-bound-ids?$735$14355 id*$735$22902) (void) (error (quote expander) (quote "invalid exports") (find-dups$735$14906 id*$735$22902)))) (map (lambda (x$735$22904) (mkstx$735$14321 x$735$22904 top-mark*$735$14251 (quote ()))) ext*$735$22898)) (values int*$735$22897 ext*$735$22898)) ((lambda (t$735$22906) ((lambda (ls/false$735$22908) (if (if ls/false$735$22908 (begin (quote #f) (apply (lambda (rename$735$22910 i*$735$22911 e*$735$22912) (quote #t)) ls/false$735$22908)) (quote #f)) (apply (lambda (rename$735$22916 i*$735$22917 e*$735$22918) (begin (if (if (eq? rename$735$22916 (quote rename)) (if (for-all symbol? i*$735$22917) (begin (quote #f) (for-all symbol? e*$735$22918)) (quote #f)) (quote #f)) (void) (error (quote expander) (quote "invalid export specifier") (car exp*$735$22896))) (f$735$22894 (cdr exp*$735$22896) (append i*$735$22917 int*$735$22897) (append e*$735$22918 ext*$735$22898)))) ls/false$735$22908) ((lambda (t$735$22922) ((lambda (ls/false$735$22924) (if (if ls/false$735$22924 (begin (quote #f) (apply (lambda (ie$735$22926) (quote #t)) ls/false$735$22924)) (quote #f)) (apply (lambda (ie$735$22928) (begin (if (symbol? ie$735$22928) (void) (error (quote expander) (quote "invalid export") ie$735$22928)) (f$735$22894 (cdr exp*$735$22896) (cons ie$735$22928 int*$735$22897) (cons ie$735$22928 ext*$735$22898)))) ls/false$735$22924) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$22922 (quote ()))))) ((lambda (x$735$22930) (list x$735$22930)) t$735$22922))) t$735$22906))) ((lambda (x$735$22932) (if (syntax-pair?$735$14331 x$735$22932) (begin (quote #f) ((lambda (q$735$22934) (if q$735$22934 (begin (quote #f) ((lambda (r$735$22936) (if r$735$22936 (begin (quote #f) (append q$735$22934 r$735$22936)) (quote #f))) ((letrec ((f$735$22938 (lambda (x$735$22940) (if (syntax-pair?$735$14331 x$735$22940) ((lambda (cars/f$735$22942) (if cars/f$735$22942 (begin (quote #f) ((lambda (cdrs/f$735$22944) (if cdrs/f$735$22944 (begin (quote #f) (map cons cars/f$735$22942 cdrs/f$735$22944)) (quote #f))) (f$735$22938 (syntax-cdr$735$14343 x$735$22940)))) (quote #f))) ((lambda (x$735$22946) (if (syntax-pair?$735$14331 x$735$22946) (begin (quote #f) ((lambda (q$735$22948) (if q$735$22948 (begin (quote #f) ((lambda (r$735$22950) (if r$735$22950 (begin (quote #f) (append q$735$22948 r$735$22950)) (quote #f))) ((lambda (x$735$22952) (if (syntax-pair?$735$14331 x$735$22952) (begin (quote #f) ((lambda (q$735$22954) (if q$735$22954 (begin (quote #f) ((lambda (r$735$22956) (if r$735$22956 (begin (quote #f) (append q$735$22954 r$735$22956)) (quote #f))) ((lambda (x$735$22958) (if (equal? (stx->datum$735$14365 x$735$22958) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$22952)))) (quote #f))) ((lambda (x$735$22960) (list x$735$22960)) (syntax-car$735$14339 x$735$22952)))) (quote #f))) (syntax-cdr$735$14343 x$735$22946)))) (quote #f))) ((lambda (x$735$22962) (list x$735$22962)) (syntax-car$735$14339 x$735$22946)))) (quote #f))) (syntax-car$735$14339 x$735$22940))) (if (syntax-null?$735$14335 x$735$22940) (list (begin (quote i*) (quote ())) (begin (quote e*) (quote ()))) (quote #f)))))) f$735$22938) (syntax-cdr$735$14343 x$735$22932)))) (quote #f))) ((lambda (x$735$22964) (list x$735$22964)) (syntax-car$735$14339 x$735$22932)))) (quote #f))) t$735$22906))) (car exp*$735$22896)))))) (f$735$22894 exp*$735$22892 (quote ()) (quote ()))))) (set! parse-library-name$735$14930 (lambda (spec$735$22966) ((lambda (parse$735$22968) (begin (set! parse$735$22968 (lambda (x$735$22970) ((lambda (t$735$22972) ((lambda (ls/false$735$22974) (if (if ls/false$735$22974 (begin (quote #f) (apply (lambda (v*$735$22976) (for-all (lambda (x$735$22978) (if (integer? x$735$22978) (begin (quote #f) (exact? x$735$22978)) (quote #f))) v*$735$22976)) ls/false$735$22974)) (quote #f)) (apply (lambda (v*$735$22980) (values (quote ()) v*$735$22980)) ls/false$735$22974) ((lambda (t$735$22982) ((lambda (ls/false$735$22984) (if (if ls/false$735$22984 (begin (quote #f) (apply (lambda (x$735$22986 rest$735$22987) (symbol? x$735$22986)) ls/false$735$22984)) (quote #f)) (apply (lambda (x$735$22990 rest$735$22991) (call-with-values (lambda () (parse$735$22968 rest$735$22991)) (lambda (x*$735$22994 v*$735$22995) (values (cons x$735$22990 x*$735$22994) v*$735$22995)))) ls/false$735$22984) ((lambda (t$735$22998) ((lambda (ls/false$735$23000) (if (if ls/false$735$23000 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$23000)) (quote #f)) (apply (lambda () (values (quote ()) (quote ()))) ls/false$735$23000) ((lambda (t$735$23002) ((lambda (ls/false$735$23004) (if (if ls/false$735$23004 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$23004)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid library name") (strip$735$14363 spec$735$22966 (quote ())))) ls/false$735$23004) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$23002 (quote ()))))) ((lambda (x$735$23006) (quote ())) t$735$23002))) t$735$22998))) ((lambda (x$735$23008) (if (equal? (stx->datum$735$14365 x$735$23008) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$735$22998))) t$735$22982))) ((lambda (x$735$23010) (if (syntax-pair?$735$14331 x$735$23010) (begin (quote #f) ((lambda (q$735$23012) (if q$735$23012 (begin (quote #f) ((lambda (r$735$23014) (if r$735$23014 (begin (quote #f) (append q$735$23012 r$735$23014)) (quote #f))) ((lambda (x$735$23016) (list x$735$23016)) (syntax-cdr$735$14343 x$735$23010)))) (quote #f))) ((lambda (x$735$23018) (list x$735$23018)) (syntax-car$735$14339 x$735$23010)))) (quote #f))) t$735$22982))) t$735$22972))) ((lambda (x$735$23020) (if (syntax-pair?$735$14331 x$735$23020) (begin (quote #f) ((lambda (q$735$23022) (if q$735$23022 (begin (quote #f) ((lambda (r$735$23024) (if r$735$23024 (begin (quote #f) (append q$735$23022 r$735$23024)) (quote #f))) ((lambda (x$735$23026) (if (equal? (stx->datum$735$14365 x$735$23026) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$23020)))) (quote #f))) ((letrec ((f$735$23028 (lambda (x$735$23030) (if (syntax-pair?$735$14331 x$735$23030) ((lambda (cars/f$735$23032) (if cars/f$735$23032 (begin (quote #f) ((lambda (cdrs/f$735$23034) (if cdrs/f$735$23034 (begin (quote #f) (map cons cars/f$735$23032 cdrs/f$735$23034)) (quote #f))) (f$735$23028 (syntax-cdr$735$14343 x$735$23030)))) (quote #f))) ((lambda (x$735$23036) (list x$735$23036)) (syntax-car$735$14339 x$735$23030))) (if (syntax-null?$735$14335 x$735$23030) (list (begin (quote v*) (quote ()))) (quote #f)))))) f$735$23028) (syntax-car$735$14339 x$735$23020)))) (quote #f))) t$735$22972))) x$735$22970))) (call-with-values (lambda () (parse$735$22968 spec$735$22966)) (lambda (name*$735$23038 ver*$735$23039) (begin (if (null? name*$735$23038) (error (quote expander) (quote "empty library name") (strip$735$14363 spec$735$22966 (quote ()))) (void)) (values name*$735$23038 ver*$735$23039)))))) (quote #f)))) (set! parse-library$735$14932 (lambda (e$735$23042) ((lambda (t$735$23044) ((lambda (ls/false$735$23046) (if (if ls/false$735$23046 (begin (quote #f) (apply (lambda (library$735$23048 name*$735$23049 export$735$23050 exp*$735$23051 import$735$23052 imp*$735$23053 b*$735$23054) (if (eq? export$735$23050 (quote export)) (if (eq? import$735$23052 (quote import)) (begin (quote #f) (eq? library$735$23048 (quote library))) (quote #f)) (quote #f))) ls/false$735$23046)) (quote #f)) (apply (lambda (library$735$23062 name*$735$23063 export$735$23064 exp*$735$23065 import$735$23066 imp*$735$23067 b*$735$23068) (values name*$735$23063 exp*$735$23065 imp*$735$23067 b*$735$23068)) ls/false$735$23046) ((lambda (t$735$23076) ((lambda (ls/false$735$23078) (if (if ls/false$735$23078 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$23078)) (quote #f)) (apply (lambda () (error (quote expander) (quote "malformed library") (strip$735$14363 e$735$23042 (quote ())))) ls/false$735$23078) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$23076 (quote ()))))) ((lambda (x$735$23080) (quote ())) t$735$23076))) t$735$23044))) ((lambda (x$735$23082) (if (syntax-pair?$735$14331 x$735$23082) (begin (quote #f) ((lambda (q$735$23084) (if q$735$23084 (begin (quote #f) ((lambda (r$735$23086) (if r$735$23086 (begin (quote #f) (append q$735$23084 r$735$23086)) (quote #f))) ((lambda (x$735$23088) (if (syntax-pair?$735$14331 x$735$23088) (begin (quote #f) ((lambda (q$735$23090) (if q$735$23090 (begin (quote #f) ((lambda (r$735$23092) (if r$735$23092 (begin (quote #f) (append q$735$23090 r$735$23092)) (quote #f))) ((lambda (x$735$23094) (if (syntax-pair?$735$14331 x$735$23094) (begin (quote #f) ((lambda (q$735$23096) (if q$735$23096 (begin (quote #f) ((lambda (r$735$23098) (if r$735$23098 (begin (quote #f) (append q$735$23096 r$735$23098)) (quote #f))) ((lambda (x$735$23100) (if (syntax-pair?$735$14331 x$735$23100) (begin (quote #f) ((lambda (q$735$23102) (if q$735$23102 (begin (quote #f) ((lambda (r$735$23104) (if r$735$23104 (begin (quote #f) (append q$735$23102 r$735$23104)) (quote #f))) ((letrec ((f$735$23106 (lambda (x$735$23108) (if (syntax-pair?$735$14331 x$735$23108) ((lambda (cars/f$735$23110) (if cars/f$735$23110 (begin (quote #f) ((lambda (cdrs/f$735$23112) (if cdrs/f$735$23112 (begin (quote #f) (map cons cars/f$735$23110 cdrs/f$735$23112)) (quote #f))) (f$735$23106 (syntax-cdr$735$14343 x$735$23108)))) (quote #f))) ((lambda (x$735$23114) (list x$735$23114)) (syntax-car$735$14339 x$735$23108))) (if (syntax-null?$735$14335 x$735$23108) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$23106) (syntax-cdr$735$14343 x$735$23100)))) (quote #f))) ((lambda (x$735$23116) (if (syntax-pair?$735$14331 x$735$23116) (begin (quote #f) ((lambda (q$735$23118) (if q$735$23118 (begin (quote #f) ((lambda (r$735$23120) (if r$735$23120 (begin (quote #f) (append q$735$23118 r$735$23120)) (quote #f))) ((letrec ((f$735$23122 (lambda (x$735$23124) (if (syntax-pair?$735$14331 x$735$23124) ((lambda (cars/f$735$23126) (if cars/f$735$23126 (begin (quote #f) ((lambda (cdrs/f$735$23128) (if cdrs/f$735$23128 (begin (quote #f) (map cons cars/f$735$23126 cdrs/f$735$23128)) (quote #f))) (f$735$23122 (syntax-cdr$735$14343 x$735$23124)))) (quote #f))) ((lambda (x$735$23130) (list x$735$23130)) (syntax-car$735$14339 x$735$23124))) (if (syntax-null?$735$14335 x$735$23124) (list (begin (quote imp*) (quote ()))) (quote #f)))))) f$735$23122) (syntax-cdr$735$14343 x$735$23116)))) (quote #f))) ((lambda (x$735$23132) (list x$735$23132)) (syntax-car$735$14339 x$735$23116)))) (quote #f))) (syntax-car$735$14339 x$735$23100)))) (quote #f))) (syntax-cdr$735$14343 x$735$23094)))) (quote #f))) ((lambda (x$735$23134) (if (syntax-pair?$735$14331 x$735$23134) (begin (quote #f) ((lambda (q$735$23136) (if q$735$23136 (begin (quote #f) ((lambda (r$735$23138) (if r$735$23138 (begin (quote #f) (append q$735$23136 r$735$23138)) (quote #f))) ((letrec ((f$735$23140 (lambda (x$735$23142) (if (syntax-pair?$735$14331 x$735$23142) ((lambda (cars/f$735$23144) (if cars/f$735$23144 (begin (quote #f) ((lambda (cdrs/f$735$23146) (if cdrs/f$735$23146 (begin (quote #f) (map cons cars/f$735$23144 cdrs/f$735$23146)) (quote #f))) (f$735$23140 (syntax-cdr$735$14343 x$735$23142)))) (quote #f))) ((lambda (x$735$23148) (list x$735$23148)) (syntax-car$735$14339 x$735$23142))) (if (syntax-null?$735$14335 x$735$23142) (list (begin (quote exp*) (quote ()))) (quote #f)))))) f$735$23140) (syntax-cdr$735$14343 x$735$23134)))) (quote #f))) ((lambda (x$735$23150) (list x$735$23150)) (syntax-car$735$14339 x$735$23134)))) (quote #f))) (syntax-car$735$14339 x$735$23094)))) (quote #f))) (syntax-cdr$735$14343 x$735$23088)))) (quote #f))) ((letrec ((f$735$23152 (lambda (x$735$23154) (if (syntax-pair?$735$14331 x$735$23154) ((lambda (cars/f$735$23156) (if cars/f$735$23156 (begin (quote #f) ((lambda (cdrs/f$735$23158) (if cdrs/f$735$23158 (begin (quote #f) (map cons cars/f$735$23156 cdrs/f$735$23158)) (quote #f))) (f$735$23152 (syntax-cdr$735$14343 x$735$23154)))) (quote #f))) ((lambda (x$735$23160) (list x$735$23160)) (syntax-car$735$14339 x$735$23154))) (if (syntax-null?$735$14335 x$735$23154) (list (begin (quote name*) (quote ()))) (quote #f)))))) f$735$23152) (syntax-car$735$14339 x$735$23088)))) (quote #f))) (syntax-cdr$735$14343 x$735$23082)))) (quote #f))) ((lambda (x$735$23162) (list x$735$23162)) (syntax-car$735$14339 x$735$23082)))) (quote #f))) t$735$23044))) e$735$23042))) (set! parse-import-spec*$735$14934 (lambda (imp*$735$23164) ((lambda (imp-collector$735$23166 merge-substs$735$23168 exclude*$735$23170 find*$735$23172 rem*$735$23174 remove-dups$735$23176 parse-library-name$735$23178 get-import$735$23180) (begin (set! imp-collector$735$23166 (make-collector$735$14938)) (set! merge-substs$735$23168 (lambda (s$735$23936 subst$735$23937) ((lambda (insert-to-subst$735$23940) (begin (set! insert-to-subst$735$23940 (lambda (a$735$23942 subst$735$23943) ((lambda (name$735$23946 label$735$23947) ((lambda (t$735$23950) (if t$735$23950 ((lambda (x$735$23952) (if (eq? (cdr x$735$23952) label$735$23947) subst$735$23943 (error (quote import) (quote "two imports with different bindings") name$735$23946))) t$735$23950) (cons a$735$23942 subst$735$23943))) (assq name$735$23946 subst$735$23943))) (car a$735$23942) (cdr a$735$23942)))) (if (null? s$735$23936) subst$735$23937 (insert-to-subst$735$23940 (car s$735$23936) (merge-substs$735$23168 (cdr s$735$23936) subst$735$23937))))) (quote #f)))) (set! exclude*$735$23170 (lambda (sym*$735$23912 subst$735$23913) ((lambda (exclude$735$23916) (begin (set! exclude$735$23916 (lambda (sym$735$23918 subst$735$23919) (if (null? subst$735$23919) (error (quote import) (quote "cannot rename unbound identifier") sym$735$23918) (if (eq? sym$735$23918 (caar subst$735$23919)) (values (cdar subst$735$23919) (cdr subst$735$23919)) ((lambda (a$735$23922) (call-with-values (lambda () (exclude$735$23916 sym$735$23918 (cdr subst$735$23919))) (lambda (old$735$23924 subst$735$23925) (values old$735$23924 (cons a$735$23922 subst$735$23925))))) (car subst$735$23919)))))) (if (null? sym*$735$23912) (values (quote ()) subst$735$23913) (call-with-values (lambda () (exclude$735$23916 (car sym*$735$23912) subst$735$23913)) (lambda (old$735$23928 subst$735$23929) (call-with-values (lambda () (exclude*$735$23170 (cdr sym*$735$23912) subst$735$23929)) (lambda (old*$735$23932 subst$735$23933) (values (cons old$735$23928 old*$735$23932) subst$735$23933)))))))) (quote #f)))) (set! find*$735$23172 (lambda (sym*$735$23904 subst$735$23905) (map (lambda (x$735$23908) ((lambda (t$735$23910) (if t$735$23910 (cdr t$735$23910) (error (quote import) (quote "cannot find identifier") x$735$23908))) (assq x$735$23908 subst$735$23905))) sym*$735$23904))) (set! rem*$735$23174 (lambda (sym*$735$23896 subst$735$23897) (letrec ((f$735$23900 (lambda (subst$735$23902) (if (null? subst$735$23902) (quote ()) (if (memq (caar subst$735$23902) sym*$735$23896) (f$735$23900 (cdr subst$735$23902)) (cons (car subst$735$23902) (f$735$23900 (cdr subst$735$23902)))))))) (f$735$23900 subst$735$23897)))) (set! remove-dups$735$23176 (lambda (ls$735$23894) (if (null? ls$735$23894) (quote ()) (if (memq (car ls$735$23894) (cdr ls$735$23894)) (remove-dups$735$23176 (cdr ls$735$23894)) (cons (car ls$735$23894) (remove-dups$735$23176 (cdr ls$735$23894))))))) (set! parse-library-name$735$23178 (lambda (spec$735$23474) ((lambda (subversion?$735$23476 subversion-pred$735$23478 version-pred$735$23480) (begin (set! subversion?$735$23476 (lambda (x$735$23822) (if (integer? x$735$23822) (if (exact? x$735$23822) (begin (quote #f) (>= x$735$23822 (quote 0))) (quote #f)) (quote #f)))) (set! subversion-pred$735$23478 (lambda (x*$735$23632) ((lambda (t$735$23634) ((lambda (ls/false$735$23636) (if (if ls/false$735$23636 (begin (quote #f) (apply (lambda (n$735$23638) (subversion?$735$23476 n$735$23638)) ls/false$735$23636)) (quote #f)) (apply (lambda (n$735$23640) (lambda (x$735$23642) (= x$735$23642 n$735$23640))) ls/false$735$23636) ((lambda (t$735$23644) ((lambda (ls/false$735$23646) (if (if ls/false$735$23646 (begin (quote #f) (apply (lambda (p?$735$23648 sub*$735$23649) (eq? p?$735$23648 (quote and))) ls/false$735$23646)) (quote #f)) (apply (lambda (p?$735$23652 sub*$735$23653) ((lambda (p*$735$23656) (lambda (x$735$23658) (for-all (lambda (p$735$23660) (p$735$23660 x$735$23658)) p*$735$23656))) (map subversion-pred$735$23478 sub*$735$23653))) ls/false$735$23646) ((lambda (t$735$23662) ((lambda (ls/false$735$23664) (if (if ls/false$735$23664 (begin (quote #f) (apply (lambda (p?$735$23666 sub*$735$23667) (eq? p?$735$23666 (quote or))) ls/false$735$23664)) (quote #f)) (apply (lambda (p?$735$23670 sub*$735$23671) ((lambda (p*$735$23674) (lambda (x$735$23676) (exists (lambda (p$735$23678) (p$735$23678 x$735$23676)) p*$735$23674))) (map subversion-pred$735$23478 sub*$735$23671))) ls/false$735$23664) ((lambda (t$735$23680) ((lambda (ls/false$735$23682) (if (if ls/false$735$23682 (begin (quote #f) (apply (lambda (p?$735$23684 sub$735$23685) (eq? p?$735$23684 (quote not))) ls/false$735$23682)) (quote #f)) (apply (lambda (p?$735$23688 sub$735$23689) ((lambda (p$735$23692) (lambda (x$735$23694) (not (p$735$23692 x$735$23694)))) (subversion-pred$735$23478 sub$735$23689))) ls/false$735$23682) ((lambda (t$735$23696) ((lambda (ls/false$735$23698) (if (if ls/false$735$23698 (begin (quote #f) (apply (lambda (p?$735$23700 n$735$23701) (if (eq? p?$735$23700 (quote <=)) (begin (quote #f) (subversion?$735$23476 n$735$23701)) (quote #f))) ls/false$735$23698)) (quote #f)) (apply (lambda (p?$735$23704 n$735$23705) (lambda (x$735$23708) (<= x$735$23708 n$735$23705))) ls/false$735$23698) ((lambda (t$735$23710) ((lambda (ls/false$735$23712) (if (if ls/false$735$23712 (begin (quote #f) (apply (lambda (p?$735$23714 n$735$23715) (if (eq? p?$735$23714 (quote >=)) (begin (quote #f) (subversion?$735$23476 n$735$23715)) (quote #f))) ls/false$735$23712)) (quote #f)) (apply (lambda (p?$735$23718 n$735$23719) (lambda (x$735$23722) (>= x$735$23722 n$735$23719))) ls/false$735$23712) ((lambda (t$735$23724) ((lambda (ls/false$735$23726) (if (if ls/false$735$23726 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$23726)) (quote #f)) (apply (lambda () (error (quote import) (quote "invalid sub-version spec") x*$735$23632 spec$735$23474)) ls/false$735$23726) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$23724 (quote ()))))) ((lambda (x$735$23728) (quote ())) t$735$23724))) t$735$23710))) ((lambda (x$735$23730) (if (syntax-pair?$735$14331 x$735$23730) (begin (quote #f) ((lambda (q$735$23732) (if q$735$23732 (begin (quote #f) ((lambda (r$735$23734) (if r$735$23734 (begin (quote #f) (append q$735$23732 r$735$23734)) (quote #f))) ((lambda (x$735$23736) (if (syntax-pair?$735$14331 x$735$23736) (begin (quote #f) ((lambda (q$735$23738) (if q$735$23738 (begin (quote #f) ((lambda (r$735$23740) (if r$735$23740 (begin (quote #f) (append q$735$23738 r$735$23740)) (quote #f))) ((lambda (x$735$23742) (if (equal? (stx->datum$735$14365 x$735$23742) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$23736)))) (quote #f))) ((lambda (x$735$23744) (list x$735$23744)) (syntax-car$735$14339 x$735$23736)))) (quote #f))) (syntax-cdr$735$14343 x$735$23730)))) (quote #f))) ((lambda (x$735$23746) (list x$735$23746)) (syntax-car$735$14339 x$735$23730)))) (quote #f))) t$735$23710))) t$735$23696))) ((lambda (x$735$23748) (if (syntax-pair?$735$14331 x$735$23748) (begin (quote #f) ((lambda (q$735$23750) (if q$735$23750 (begin (quote #f) ((lambda (r$735$23752) (if r$735$23752 (begin (quote #f) (append q$735$23750 r$735$23752)) (quote #f))) ((lambda (x$735$23754) (if (syntax-pair?$735$14331 x$735$23754) (begin (quote #f) ((lambda (q$735$23756) (if q$735$23756 (begin (quote #f) ((lambda (r$735$23758) (if r$735$23758 (begin (quote #f) (append q$735$23756 r$735$23758)) (quote #f))) ((lambda (x$735$23760) (if (equal? (stx->datum$735$14365 x$735$23760) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$23754)))) (quote #f))) ((lambda (x$735$23762) (list x$735$23762)) (syntax-car$735$14339 x$735$23754)))) (quote #f))) (syntax-cdr$735$14343 x$735$23748)))) (quote #f))) ((lambda (x$735$23764) (list x$735$23764)) (syntax-car$735$14339 x$735$23748)))) (quote #f))) t$735$23696))) t$735$23680))) ((lambda (x$735$23766) (if (syntax-pair?$735$14331 x$735$23766) (begin (quote #f) ((lambda (q$735$23768) (if q$735$23768 (begin (quote #f) ((lambda (r$735$23770) (if r$735$23770 (begin (quote #f) (append q$735$23768 r$735$23770)) (quote #f))) ((lambda (x$735$23772) (if (syntax-pair?$735$14331 x$735$23772) (begin (quote #f) ((lambda (q$735$23774) (if q$735$23774 (begin (quote #f) ((lambda (r$735$23776) (if r$735$23776 (begin (quote #f) (append q$735$23774 r$735$23776)) (quote #f))) ((lambda (x$735$23778) (if (equal? (stx->datum$735$14365 x$735$23778) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$23772)))) (quote #f))) ((lambda (x$735$23780) (list x$735$23780)) (syntax-car$735$14339 x$735$23772)))) (quote #f))) (syntax-cdr$735$14343 x$735$23766)))) (quote #f))) ((lambda (x$735$23782) (list x$735$23782)) (syntax-car$735$14339 x$735$23766)))) (quote #f))) t$735$23680))) t$735$23662))) ((lambda (x$735$23784) (if (syntax-pair?$735$14331 x$735$23784) (begin (quote #f) ((lambda (q$735$23786) (if q$735$23786 (begin (quote #f) ((lambda (r$735$23788) (if r$735$23788 (begin (quote #f) (append q$735$23786 r$735$23788)) (quote #f))) ((letrec ((f$735$23790 (lambda (x$735$23792) (if (syntax-pair?$735$14331 x$735$23792) ((lambda (cars/f$735$23794) (if cars/f$735$23794 (begin (quote #f) ((lambda (cdrs/f$735$23796) (if cdrs/f$735$23796 (begin (quote #f) (map cons cars/f$735$23794 cdrs/f$735$23796)) (quote #f))) (f$735$23790 (syntax-cdr$735$14343 x$735$23792)))) (quote #f))) ((lambda (x$735$23798) (list x$735$23798)) (syntax-car$735$14339 x$735$23792))) (if (syntax-null?$735$14335 x$735$23792) (list (begin (quote sub*) (quote ()))) (quote #f)))))) f$735$23790) (syntax-cdr$735$14343 x$735$23784)))) (quote #f))) ((lambda (x$735$23800) (list x$735$23800)) (syntax-car$735$14339 x$735$23784)))) (quote #f))) t$735$23662))) t$735$23644))) ((lambda (x$735$23802) (if (syntax-pair?$735$14331 x$735$23802) (begin (quote #f) ((lambda (q$735$23804) (if q$735$23804 (begin (quote #f) ((lambda (r$735$23806) (if r$735$23806 (begin (quote #f) (append q$735$23804 r$735$23806)) (quote #f))) ((letrec ((f$735$23808 (lambda (x$735$23810) (if (syntax-pair?$735$14331 x$735$23810) ((lambda (cars/f$735$23812) (if cars/f$735$23812 (begin (quote #f) ((lambda (cdrs/f$735$23814) (if cdrs/f$735$23814 (begin (quote #f) (map cons cars/f$735$23812 cdrs/f$735$23814)) (quote #f))) (f$735$23808 (syntax-cdr$735$14343 x$735$23810)))) (quote #f))) ((lambda (x$735$23816) (list x$735$23816)) (syntax-car$735$14339 x$735$23810))) (if (syntax-null?$735$14335 x$735$23810) (list (begin (quote sub*) (quote ()))) (quote #f)))))) f$735$23808) (syntax-cdr$735$14343 x$735$23802)))) (quote #f))) ((lambda (x$735$23818) (list x$735$23818)) (syntax-car$735$14339 x$735$23802)))) (quote #f))) t$735$23644))) t$735$23634))) ((lambda (x$735$23820) (list x$735$23820)) t$735$23634))) x*$735$23632))) (set! version-pred$735$23480 (lambda (x*$735$23482) ((lambda (t$735$23484) ((lambda (ls/false$735$23486) (if (if ls/false$735$23486 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$23486)) (quote #f)) (apply (lambda () (lambda (x$735$23488) (quote #t))) ls/false$735$23486) ((lambda (t$735$23490) ((lambda (ls/false$735$23492) (if (if ls/false$735$23492 (begin (quote #f) (apply (lambda (c$735$23494 ver*$735$23495) (eq? c$735$23494 (quote and))) ls/false$735$23492)) (quote #f)) (apply (lambda (c$735$23498 ver*$735$23499) ((lambda (p*$735$23502) (lambda (x$735$23504) (for-all (lambda (p$735$23506) (p$735$23506 x$735$23504)) p*$735$23502))) (map version-pred$735$23480 ver*$735$23499))) ls/false$735$23492) ((lambda (t$735$23508) ((lambda (ls/false$735$23510) (if (if ls/false$735$23510 (begin (quote #f) (apply (lambda (c$735$23512 ver*$735$23513) (eq? c$735$23512 (quote or))) ls/false$735$23510)) (quote #f)) (apply (lambda (c$735$23516 ver*$735$23517) ((lambda (p*$735$23520) (lambda (x$735$23522) (exists (lambda (p$735$23524) (p$735$23524 x$735$23522)) p*$735$23520))) (map version-pred$735$23480 ver*$735$23517))) ls/false$735$23510) ((lambda (t$735$23526) ((lambda (ls/false$735$23528) (if (if ls/false$735$23528 (begin (quote #f) (apply (lambda (c$735$23530 ver$735$23531) (eq? c$735$23530 (quote not))) ls/false$735$23528)) (quote #f)) (apply (lambda (c$735$23534 ver$735$23535) ((lambda (p$735$23538) (lambda (x$735$23540) (not (p$735$23538 x$735$23540)))) (version-pred$735$23480 ver$735$23535))) ls/false$735$23528) ((lambda (t$735$23542) ((lambda (ls/false$735$23544) (if (if ls/false$735$23544 (begin (quote #f) (apply (lambda (sub*$735$23546) (quote #t)) ls/false$735$23544)) (quote #f)) (apply (lambda (sub*$735$23548) ((lambda (p*$735$23550) (lambda (x$735$23552) (letrec ((f$735$23554 (lambda (p*$735$23556 x$735$23557) (if (null? p*$735$23556) (quote #t) (if (null? x$735$23557) (quote #f) (if ((car p*$735$23556) (car x$735$23557)) (begin (quote #f) (f$735$23554 (cdr p*$735$23556) (cdr x*$735$23482))) (quote #f))))))) (f$735$23554 p*$735$23550 x$735$23552)))) (map subversion-pred$735$23478 sub*$735$23548))) ls/false$735$23544) ((lambda (t$735$23560) ((lambda (ls/false$735$23562) (if (if ls/false$735$23562 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$23562)) (quote #f)) (apply (lambda () (error (quote import) (quote "invalid version spec") x*$735$23482 spec$735$23474)) ls/false$735$23562) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$23560 (quote ()))))) ((lambda (x$735$23564) (quote ())) t$735$23560))) t$735$23542))) ((letrec ((f$735$23566 (lambda (x$735$23568) (if (syntax-pair?$735$14331 x$735$23568) ((lambda (cars/f$735$23570) (if cars/f$735$23570 (begin (quote #f) ((lambda (cdrs/f$735$23572) (if cdrs/f$735$23572 (begin (quote #f) (map cons cars/f$735$23570 cdrs/f$735$23572)) (quote #f))) (f$735$23566 (syntax-cdr$735$14343 x$735$23568)))) (quote #f))) ((lambda (x$735$23574) (list x$735$23574)) (syntax-car$735$14339 x$735$23568))) (if (syntax-null?$735$14335 x$735$23568) (list (begin (quote sub*) (quote ()))) (quote #f)))))) f$735$23566) t$735$23542))) t$735$23526))) ((lambda (x$735$23576) (if (syntax-pair?$735$14331 x$735$23576) (begin (quote #f) ((lambda (q$735$23578) (if q$735$23578 (begin (quote #f) ((lambda (r$735$23580) (if r$735$23580 (begin (quote #f) (append q$735$23578 r$735$23580)) (quote #f))) ((lambda (x$735$23582) (if (syntax-pair?$735$14331 x$735$23582) (begin (quote #f) ((lambda (q$735$23584) (if q$735$23584 (begin (quote #f) ((lambda (r$735$23586) (if r$735$23586 (begin (quote #f) (append q$735$23584 r$735$23586)) (quote #f))) ((lambda (x$735$23588) (if (equal? (stx->datum$735$14365 x$735$23588) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$23582)))) (quote #f))) ((lambda (x$735$23590) (list x$735$23590)) (syntax-car$735$14339 x$735$23582)))) (quote #f))) (syntax-cdr$735$14343 x$735$23576)))) (quote #f))) ((lambda (x$735$23592) (list x$735$23592)) (syntax-car$735$14339 x$735$23576)))) (quote #f))) t$735$23526))) t$735$23508))) ((lambda (x$735$23594) (if (syntax-pair?$735$14331 x$735$23594) (begin (quote #f) ((lambda (q$735$23596) (if q$735$23596 (begin (quote #f) ((lambda (r$735$23598) (if r$735$23598 (begin (quote #f) (append q$735$23596 r$735$23598)) (quote #f))) ((letrec ((f$735$23600 (lambda (x$735$23602) (if (syntax-pair?$735$14331 x$735$23602) ((lambda (cars/f$735$23604) (if cars/f$735$23604 (begin (quote #f) ((lambda (cdrs/f$735$23606) (if cdrs/f$735$23606 (begin (quote #f) (map cons cars/f$735$23604 cdrs/f$735$23606)) (quote #f))) (f$735$23600 (syntax-cdr$735$14343 x$735$23602)))) (quote #f))) ((lambda (x$735$23608) (list x$735$23608)) (syntax-car$735$14339 x$735$23602))) (if (syntax-null?$735$14335 x$735$23602) (list (begin (quote ver*) (quote ()))) (quote #f)))))) f$735$23600) (syntax-cdr$735$14343 x$735$23594)))) (quote #f))) ((lambda (x$735$23610) (list x$735$23610)) (syntax-car$735$14339 x$735$23594)))) (quote #f))) t$735$23508))) t$735$23490))) ((lambda (x$735$23612) (if (syntax-pair?$735$14331 x$735$23612) (begin (quote #f) ((lambda (q$735$23614) (if q$735$23614 (begin (quote #f) ((lambda (r$735$23616) (if r$735$23616 (begin (quote #f) (append q$735$23614 r$735$23616)) (quote #f))) ((letrec ((f$735$23618 (lambda (x$735$23620) (if (syntax-pair?$735$14331 x$735$23620) ((lambda (cars/f$735$23622) (if cars/f$735$23622 (begin (quote #f) ((lambda (cdrs/f$735$23624) (if cdrs/f$735$23624 (begin (quote #f) (map cons cars/f$735$23622 cdrs/f$735$23624)) (quote #f))) (f$735$23618 (syntax-cdr$735$14343 x$735$23620)))) (quote #f))) ((lambda (x$735$23626) (list x$735$23626)) (syntax-car$735$14339 x$735$23620))) (if (syntax-null?$735$14335 x$735$23620) (list (begin (quote ver*) (quote ()))) (quote #f)))))) f$735$23618) (syntax-cdr$735$14343 x$735$23612)))) (quote #f))) ((lambda (x$735$23628) (list x$735$23628)) (syntax-car$735$14339 x$735$23612)))) (quote #f))) t$735$23490))) t$735$23484))) ((lambda (x$735$23630) (if (equal? (stx->datum$735$14365 x$735$23630) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$735$23484))) x*$735$23482))) (letrec ((f$735$23824 (lambda (x$735$23826) ((lambda (t$735$23828) ((lambda (ls/false$735$23830) (if (if ls/false$735$23830 (begin (quote #f) (apply (lambda (version-spec*$735$23832) (quote #t)) ls/false$735$23830)) (quote #f)) (apply (lambda (version-spec*$735$23834) (values (quote ()) (version-pred$735$23480 version-spec*$735$23834))) ls/false$735$23830) ((lambda (t$735$23836) ((lambda (ls/false$735$23838) (if (if ls/false$735$23838 (begin (quote #f) (apply (lambda (x$735$23840 x*$735$23841) (symbol? x$735$23840)) ls/false$735$23838)) (quote #f)) (apply (lambda (x$735$23844 x*$735$23845) (call-with-values (lambda () (f$735$23824 x*$735$23845)) (lambda (name$735$23848 pred$735$23849) (values (cons x$735$23844 name$735$23848) pred$735$23849)))) ls/false$735$23838) ((lambda (t$735$23852) ((lambda (ls/false$735$23854) (if (if ls/false$735$23854 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$23854)) (quote #f)) (apply (lambda () (values (quote ()) (lambda (x$735$23856) (quote #t)))) ls/false$735$23854) ((lambda (t$735$23858) ((lambda (ls/false$735$23860) (if (if ls/false$735$23860 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$23860)) (quote #f)) (apply (lambda () (error (quote expander) (quote "invalid import spec") (strip$735$14363 spec$735$23474 (quote ())))) ls/false$735$23860) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$23858 (quote ()))))) ((lambda (x$735$23862) (quote ())) t$735$23858))) t$735$23852))) ((lambda (x$735$23864) (if (equal? (stx->datum$735$14365 x$735$23864) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$735$23852))) t$735$23836))) ((lambda (x$735$23866) (if (syntax-pair?$735$14331 x$735$23866) (begin (quote #f) ((lambda (q$735$23868) (if q$735$23868 (begin (quote #f) ((lambda (r$735$23870) (if r$735$23870 (begin (quote #f) (append q$735$23868 r$735$23870)) (quote #f))) ((lambda (x$735$23872) (list x$735$23872)) (syntax-cdr$735$14343 x$735$23866)))) (quote #f))) ((lambda (x$735$23874) (list x$735$23874)) (syntax-car$735$14339 x$735$23866)))) (quote #f))) t$735$23836))) t$735$23828))) ((lambda (x$735$23876) (if (syntax-pair?$735$14331 x$735$23876) (begin (quote #f) ((lambda (q$735$23878) (if q$735$23878 (begin (quote #f) ((lambda (r$735$23880) (if r$735$23880 (begin (quote #f) (append q$735$23878 r$735$23880)) (quote #f))) ((lambda (x$735$23882) (if (equal? (stx->datum$735$14365 x$735$23882) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$23876)))) (quote #f))) ((letrec ((f$735$23884 (lambda (x$735$23886) (if (syntax-pair?$735$14331 x$735$23886) ((lambda (cars/f$735$23888) (if cars/f$735$23888 (begin (quote #f) ((lambda (cdrs/f$735$23890) (if cdrs/f$735$23890 (begin (quote #f) (map cons cars/f$735$23888 cdrs/f$735$23890)) (quote #f))) (f$735$23884 (syntax-cdr$735$14343 x$735$23886)))) (quote #f))) ((lambda (x$735$23892) (list x$735$23892)) (syntax-car$735$14339 x$735$23886))) (if (syntax-null?$735$14335 x$735$23886) (list (begin (quote version-spec*) (quote ()))) (quote #f)))))) f$735$23884) (syntax-car$735$14339 x$735$23876)))) (quote #f))) t$735$23828))) x$735$23826)))) (f$735$23824 spec$735$23474)))) (quote #f) (quote #f) (quote #f)))) (set! get-import$735$23180 (lambda (spec$735$23182) ((lambda (t$735$23184) ((lambda (ls/false$735$23186) (if (if ls/false$735$23186 (begin (quote #f) (apply (lambda (rename$735$23188 isp$735$23189 old*$735$23190 new*$735$23191) (if (eq? rename$735$23188 (quote rename)) (if (for-all symbol? old*$735$23190) (begin (quote #f) (for-all symbol? new*$735$23191)) (quote #f)) (quote #f))) ls/false$735$23186)) (quote #f)) (apply (lambda (rename$735$23196 isp$735$23197 old*$735$23198 new*$735$23199) ((lambda (subst$735$23204) ((lambda (old-label*$735$23206) ((lambda (subst$735$23208) (merge-substs$735$23168 (map cons new*$735$23199 old-label*$735$23206) subst$735$23208)) (rem*$735$23174 old*$735$23198 subst$735$23204))) (find*$735$23172 old*$735$23198 subst$735$23204))) (get-import$735$23180 isp$735$23197))) ls/false$735$23186) ((lambda (t$735$23210) ((lambda (ls/false$735$23212) (if (if ls/false$735$23212 (begin (quote #f) (apply (lambda (except$735$23214 isp$735$23215 sym*$735$23216) (if (eq? except$735$23214 (quote except)) (begin (quote #f) (for-all symbol? sym*$735$23216)) (quote #f))) ls/false$735$23212)) (quote #f)) (apply (lambda (except$735$23220 isp$735$23221 sym*$735$23222) ((lambda (subst$735$23226) (rem*$735$23174 sym*$735$23222 subst$735$23226)) (get-import$735$23180 isp$735$23221))) ls/false$735$23212) ((lambda (t$735$23228) ((lambda (ls/false$735$23230) (if (if ls/false$735$23230 (begin (quote #f) (apply (lambda (only$735$23232 isp$735$23233 sym*$735$23234) (if (eq? only$735$23232 (quote only)) (begin (quote #f) (for-all symbol? sym*$735$23234)) (quote #f))) ls/false$735$23230)) (quote #f)) (apply (lambda (only$735$23238 isp$735$23239 sym*$735$23240) ((lambda (subst$735$23244) ((lambda (sym*$735$23246) ((lambda (lab*$735$23248) (map cons sym*$735$23246 lab*$735$23248)) (find*$735$23172 sym*$735$23246 subst$735$23244))) (remove-dups$735$23176 sym*$735$23240))) (get-import$735$23180 isp$735$23239))) ls/false$735$23230) ((lambda (t$735$23250) ((lambda (ls/false$735$23252) (if (if ls/false$735$23252 (begin (quote #f) (apply (lambda (prefix$735$23254 isp$735$23255 p$735$23256) (if (eq? prefix$735$23254 (quote prefix)) (begin (quote #f) (symbol? p$735$23256)) (quote #f))) ls/false$735$23252)) (quote #f)) (apply (lambda (prefix$735$23260 isp$735$23261 p$735$23262) ((lambda (subst$735$23266) (map (lambda (x$735$23268) (cons (string->symbol (string-append (symbol->string p$735$23262) (symbol->string (car x$735$23268)))) (cdr x$735$23268))) subst$735$23266)) (get-import$735$23180 isp$735$23261))) ls/false$735$23252) ((lambda (t$735$23270) ((lambda (ls/false$735$23272) (if (if ls/false$735$23272 (begin (quote #f) (apply (lambda (library$735$23274 spec*$735$23275) (eq? library$735$23274 (quote library))) ls/false$735$23272)) (quote #f)) (apply (lambda (library$735$23278 spec*$735$23279) (call-with-values (lambda () (parse-library-name$735$23178 spec*$735$23279)) (lambda (name$735$23282 pred$735$23283) (begin (if (null? name$735$23282) (error (quote import) (quote "empty library name") spec*$735$23279) (void)) ((lambda (lib$735$23286) (begin (if lib$735$23286 (void) (error (quote import) (quote "cannot find library with required name") name$735$23282)) (if (pred$735$23283 (library-version$735$13921 lib$735$23286)) (void) (error (quote import) (quote "library does not satisfy version specification") lib$735$23286 spec*$735$23279)) (imp-collector$735$23166 lib$735$23286) (library-subst$735$13917 lib$735$23286))) (find-library-by-name$735$13892 name$735$23282)))))) ls/false$735$23272) ((lambda (t$735$23288) ((lambda (ls/false$735$23290) (if (if ls/false$735$23290 (begin (quote #f) (apply (lambda (x$735$23292 x*$735$23293) (not (memq x$735$23292 (quote (rename except only prefix library))))) ls/false$735$23290)) (quote #f)) (apply (lambda (x$735$23296 x*$735$23297) (get-import$735$23180 (list (quote library) (cons x$735$23296 x*$735$23297)))) ls/false$735$23290) ((lambda (t$735$23300) ((lambda (ls/false$735$23302) (if (if ls/false$735$23302 (begin (quote #f) (apply (lambda (spec$735$23304) (quote #t)) ls/false$735$23302)) (quote #f)) (apply (lambda (spec$735$23306) (error (quote import) (quote "invalid import spec") spec$735$23306)) ls/false$735$23302) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$23300 (quote ()))))) ((lambda (x$735$23308) (list x$735$23308)) t$735$23300))) t$735$23288))) ((lambda (x$735$23310) (if (syntax-pair?$735$14331 x$735$23310) (begin (quote #f) ((lambda (q$735$23312) (if q$735$23312 (begin (quote #f) ((lambda (r$735$23314) (if r$735$23314 (begin (quote #f) (append q$735$23312 r$735$23314)) (quote #f))) ((letrec ((f$735$23316 (lambda (x$735$23318) (if (syntax-pair?$735$14331 x$735$23318) ((lambda (cars/f$735$23320) (if cars/f$735$23320 (begin (quote #f) ((lambda (cdrs/f$735$23322) (if cdrs/f$735$23322 (begin (quote #f) (map cons cars/f$735$23320 cdrs/f$735$23322)) (quote #f))) (f$735$23316 (syntax-cdr$735$14343 x$735$23318)))) (quote #f))) ((lambda (x$735$23324) (list x$735$23324)) (syntax-car$735$14339 x$735$23318))) (if (syntax-null?$735$14335 x$735$23318) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$735$23316) (syntax-cdr$735$14343 x$735$23310)))) (quote #f))) ((lambda (x$735$23326) (list x$735$23326)) (syntax-car$735$14339 x$735$23310)))) (quote #f))) t$735$23288))) t$735$23270))) ((lambda (x$735$23328) (if (syntax-pair?$735$14331 x$735$23328) (begin (quote #f) ((lambda (q$735$23330) (if q$735$23330 (begin (quote #f) ((lambda (r$735$23332) (if r$735$23332 (begin (quote #f) (append q$735$23330 r$735$23332)) (quote #f))) ((lambda (x$735$23334) (if (syntax-pair?$735$14331 x$735$23334) (begin (quote #f) ((lambda (q$735$23336) (if q$735$23336 (begin (quote #f) ((lambda (r$735$23338) (if r$735$23338 (begin (quote #f) (append q$735$23336 r$735$23338)) (quote #f))) ((lambda (x$735$23340) (if (equal? (stx->datum$735$14365 x$735$23340) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$23334)))) (quote #f))) ((letrec ((f$735$23342 (lambda (x$735$23344) (if (syntax-pair?$735$14331 x$735$23344) ((lambda (cars/f$735$23346) (if cars/f$735$23346 (begin (quote #f) ((lambda (cdrs/f$735$23348) (if cdrs/f$735$23348 (begin (quote #f) (map cons cars/f$735$23346 cdrs/f$735$23348)) (quote #f))) (f$735$23342 (syntax-cdr$735$14343 x$735$23344)))) (quote #f))) ((lambda (x$735$23350) (list x$735$23350)) (syntax-car$735$14339 x$735$23344))) (if (syntax-null?$735$14335 x$735$23344) (list (begin (quote spec*) (quote ()))) (quote #f)))))) f$735$23342) (syntax-car$735$14339 x$735$23334)))) (quote #f))) (syntax-cdr$735$14343 x$735$23328)))) (quote #f))) ((lambda (x$735$23352) (list x$735$23352)) (syntax-car$735$14339 x$735$23328)))) (quote #f))) t$735$23270))) t$735$23250))) ((lambda (x$735$23354) (if (syntax-pair?$735$14331 x$735$23354) (begin (quote #f) ((lambda (q$735$23356) (if q$735$23356 (begin (quote #f) ((lambda (r$735$23358) (if r$735$23358 (begin (quote #f) (append q$735$23356 r$735$23358)) (quote #f))) ((lambda (x$735$23360) (if (syntax-pair?$735$14331 x$735$23360) (begin (quote #f) ((lambda (q$735$23362) (if q$735$23362 (begin (quote #f) ((lambda (r$735$23364) (if r$735$23364 (begin (quote #f) (append q$735$23362 r$735$23364)) (quote #f))) ((lambda (x$735$23366) (if (syntax-pair?$735$14331 x$735$23366) (begin (quote #f) ((lambda (q$735$23368) (if q$735$23368 (begin (quote #f) ((lambda (r$735$23370) (if r$735$23370 (begin (quote #f) (append q$735$23368 r$735$23370)) (quote #f))) ((lambda (x$735$23372) (if (equal? (stx->datum$735$14365 x$735$23372) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$23366)))) (quote #f))) ((lambda (x$735$23374) (list x$735$23374)) (syntax-car$735$14339 x$735$23366)))) (quote #f))) (syntax-cdr$735$14343 x$735$23360)))) (quote #f))) ((lambda (x$735$23376) (list x$735$23376)) (syntax-car$735$14339 x$735$23360)))) (quote #f))) (syntax-cdr$735$14343 x$735$23354)))) (quote #f))) ((lambda (x$735$23378) (list x$735$23378)) (syntax-car$735$14339 x$735$23354)))) (quote #f))) t$735$23250))) t$735$23228))) ((lambda (x$735$23380) (if (syntax-pair?$735$14331 x$735$23380) (begin (quote #f) ((lambda (q$735$23382) (if q$735$23382 (begin (quote #f) ((lambda (r$735$23384) (if r$735$23384 (begin (quote #f) (append q$735$23382 r$735$23384)) (quote #f))) ((lambda (x$735$23386) (if (syntax-pair?$735$14331 x$735$23386) (begin (quote #f) ((lambda (q$735$23388) (if q$735$23388 (begin (quote #f) ((lambda (r$735$23390) (if r$735$23390 (begin (quote #f) (append q$735$23388 r$735$23390)) (quote #f))) ((letrec ((f$735$23392 (lambda (x$735$23394) (if (syntax-pair?$735$14331 x$735$23394) ((lambda (cars/f$735$23396) (if cars/f$735$23396 (begin (quote #f) ((lambda (cdrs/f$735$23398) (if cdrs/f$735$23398 (begin (quote #f) (map cons cars/f$735$23396 cdrs/f$735$23398)) (quote #f))) (f$735$23392 (syntax-cdr$735$14343 x$735$23394)))) (quote #f))) ((lambda (x$735$23400) (list x$735$23400)) (syntax-car$735$14339 x$735$23394))) (if (syntax-null?$735$14335 x$735$23394) (list (begin (quote sym*) (quote ()))) (quote #f)))))) f$735$23392) (syntax-cdr$735$14343 x$735$23386)))) (quote #f))) ((lambda (x$735$23402) (list x$735$23402)) (syntax-car$735$14339 x$735$23386)))) (quote #f))) (syntax-cdr$735$14343 x$735$23380)))) (quote #f))) ((lambda (x$735$23404) (list x$735$23404)) (syntax-car$735$14339 x$735$23380)))) (quote #f))) t$735$23228))) t$735$23210))) ((lambda (x$735$23406) (if (syntax-pair?$735$14331 x$735$23406) (begin (quote #f) ((lambda (q$735$23408) (if q$735$23408 (begin (quote #f) ((lambda (r$735$23410) (if r$735$23410 (begin (quote #f) (append q$735$23408 r$735$23410)) (quote #f))) ((lambda (x$735$23412) (if (syntax-pair?$735$14331 x$735$23412) (begin (quote #f) ((lambda (q$735$23414) (if q$735$23414 (begin (quote #f) ((lambda (r$735$23416) (if r$735$23416 (begin (quote #f) (append q$735$23414 r$735$23416)) (quote #f))) ((letrec ((f$735$23418 (lambda (x$735$23420) (if (syntax-pair?$735$14331 x$735$23420) ((lambda (cars/f$735$23422) (if cars/f$735$23422 (begin (quote #f) ((lambda (cdrs/f$735$23424) (if cdrs/f$735$23424 (begin (quote #f) (map cons cars/f$735$23422 cdrs/f$735$23424)) (quote #f))) (f$735$23418 (syntax-cdr$735$14343 x$735$23420)))) (quote #f))) ((lambda (x$735$23426) (list x$735$23426)) (syntax-car$735$14339 x$735$23420))) (if (syntax-null?$735$14335 x$735$23420) (list (begin (quote sym*) (quote ()))) (quote #f)))))) f$735$23418) (syntax-cdr$735$14343 x$735$23412)))) (quote #f))) ((lambda (x$735$23428) (list x$735$23428)) (syntax-car$735$14339 x$735$23412)))) (quote #f))) (syntax-cdr$735$14343 x$735$23406)))) (quote #f))) ((lambda (x$735$23430) (list x$735$23430)) (syntax-car$735$14339 x$735$23406)))) (quote #f))) t$735$23210))) t$735$23184))) ((lambda (x$735$23432) (if (syntax-pair?$735$14331 x$735$23432) (begin (quote #f) ((lambda (q$735$23434) (if q$735$23434 (begin (quote #f) ((lambda (r$735$23436) (if r$735$23436 (begin (quote #f) (append q$735$23434 r$735$23436)) (quote #f))) ((lambda (x$735$23438) (if (syntax-pair?$735$14331 x$735$23438) (begin (quote #f) ((lambda (q$735$23440) (if q$735$23440 (begin (quote #f) ((lambda (r$735$23442) (if r$735$23442 (begin (quote #f) (append q$735$23440 r$735$23442)) (quote #f))) ((letrec ((f$735$23444 (lambda (x$735$23446) (if (syntax-pair?$735$14331 x$735$23446) ((lambda (cars/f$735$23448) (if cars/f$735$23448 (begin (quote #f) ((lambda (cdrs/f$735$23450) (if cdrs/f$735$23450 (begin (quote #f) (map cons cars/f$735$23448 cdrs/f$735$23450)) (quote #f))) (f$735$23444 (syntax-cdr$735$14343 x$735$23446)))) (quote #f))) ((lambda (x$735$23452) (if (syntax-pair?$735$14331 x$735$23452) (begin (quote #f) ((lambda (q$735$23454) (if q$735$23454 (begin (quote #f) ((lambda (r$735$23456) (if r$735$23456 (begin (quote #f) (append q$735$23454 r$735$23456)) (quote #f))) ((lambda (x$735$23458) (if (syntax-pair?$735$14331 x$735$23458) (begin (quote #f) ((lambda (q$735$23460) (if q$735$23460 (begin (quote #f) ((lambda (r$735$23462) (if r$735$23462 (begin (quote #f) (append q$735$23460 r$735$23462)) (quote #f))) ((lambda (x$735$23464) (if (equal? (stx->datum$735$14365 x$735$23464) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$735$14343 x$735$23458)))) (quote #f))) ((lambda (x$735$23466) (list x$735$23466)) (syntax-car$735$14339 x$735$23458)))) (quote #f))) (syntax-cdr$735$14343 x$735$23452)))) (quote #f))) ((lambda (x$735$23468) (list x$735$23468)) (syntax-car$735$14339 x$735$23452)))) (quote #f))) (syntax-car$735$14339 x$735$23446))) (if (syntax-null?$735$14335 x$735$23446) (list (begin (quote old*) (quote ())) (begin (quote new*) (quote ()))) (quote #f)))))) f$735$23444) (syntax-cdr$735$14343 x$735$23438)))) (quote #f))) ((lambda (x$735$23470) (list x$735$23470)) (syntax-car$735$14339 x$735$23438)))) (quote #f))) (syntax-cdr$735$14343 x$735$23432)))) (quote #f))) ((lambda (x$735$23472) (list x$735$23472)) (syntax-car$735$14339 x$735$23432)))) (quote #f))) t$735$23184))) spec$735$23182))) (letrec ((f$735$23954 (lambda (imp*$735$23956 subst$735$23957) (if (null? imp*$735$23956) (values subst$735$23957 (imp-collector$735$23166)) (f$735$23954 (cdr imp*$735$23956) (merge-substs$735$23168 (get-import$735$23180 (car imp*$735$23956)) subst$735$23957)))))) (f$735$23954 imp*$735$23164 (quote ()))))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! make-top-rib$735$14936 (lambda (subst$735$23960) ((lambda (rib$735$23962) (begin (for-each (lambda (x$735$23964) ((lambda (name$735$23966 label$735$23967) (extend-rib!$735$14284 rib$735$23962 (mkstx$735$14321 name$735$23966 top-mark*$735$14251 (quote ())) label$735$23967)) (car x$735$23964) (cdr x$735$23964))) subst$735$23960) rib$735$23962)) (make-empty-rib$735$14282)))) (set! make-collector$735$14938 (lambda () ((lambda (ls$735$23970) (lambda g$735$23974 ((lambda (g$735$23975) (if (= g$735$23975 (quote 0)) (apply (lambda () ls$735$23970) g$735$23974) (if (= g$735$23975 (quote 1)) (apply (lambda (x$735$23972) (set! ls$735$23970 (set-cons$735$14244 x$735$23972 ls$735$23970))) g$735$23974) (error (quote apply) (quote "invalid arg count"))))) (length g$735$23974)))) (quote ())))) (set! inv-collector$735$14940 (make-parameter$735$13361 (lambda args$735$23976 (error (quote inv-collector) (quote "not initialized"))) (lambda (x$735$23978) (begin (if (procedure? x$735$23978) (void) (error (quote inv-collector) (quote "not a procedure") x$735$23978)) x$735$23978)))) (set! vis-collector$735$14942 (make-parameter$735$13361 (lambda args$735$23980 (error (quote vis-collector) (quote "not initialized"))) (lambda (x$735$23982) (begin (if (procedure? x$735$23982) (void) (error (quote vis-collector) (quote "not a procedure") x$735$23982)) x$735$23982)))) (set! chi-library-internal$735$14944 (lambda (e*$735$23984 rib$735$23985 top?$735$23986) (call-with-values (lambda () (chi-body*$735$14914 e*$735$23984 (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) rib$735$23985 top?$735$23986)) (lambda (e*$735$23990 r$735$23991 mr$735$23992 lex*$735$23993 rhs*$735$23994 mod**$735$23995 _kwd*$735$23996) (values (append (apply append (reverse mod**$735$23995)) e*$735$23990) r$735$23991 mr$735$23992 (reverse lex*$735$23993) (reverse rhs*$735$23994)))))) (set! library-body-expander$735$14946 (lambda (exp*$735$24004 imp*$735$24005 b*$735$24006) (call-with-values (lambda () (parse-exports$735$14928 exp*$735$24004)) (lambda (exp-int*$735$24010 exp-ext*$735$24011) (call-with-values (lambda () (parse-import-spec*$735$14934 imp*$735$24005)) (lambda (subst$735$24012 imp*$735$24013) ((lambda (rib$735$24018) ((lambda (b*$735$24020 rtc$735$24021 vtc$735$24022) ((lambda (t$735$24030 t$735$24031 t$735$24032 t$735$24033) ((lambda (swap$735$24038) (dynamic-wind swap$735$24038 (lambda () (call-with-values (lambda () (chi-library-internal$735$14944 b*$735$24020 rib$735$24018 (quote #f))) (lambda (init*$735$24040 r$735$24041 mr$735$24042 lex*$735$24043 rhs*$735$24044) (begin (seal-rib!$735$14286 rib$735$24018) ((lambda (rhs*$735$24050 init*$735$24051) (begin (unseal-rib!$735$14288 rib$735$24018) ((lambda (export-subst$735$24054) (call-with-values (lambda () (make-export-env/macros$735$14989 r$735$24041)) (lambda (export-env$735$24056 global*$735$24057 macro*$735$24058) ((lambda (invoke-body$735$24062 invoke-definitions$735$24063) (values imp*$735$24013 (rtc$735$24021) (vtc$735$24022) (build-sequence$735$14228 (quote #f) (append invoke-definitions$735$24063 (list invoke-body$735$24062))) macro*$735$24058 export-subst$735$24054 export-env$735$24056)) (build-letrec*$735$14225 (quote #f) lex*$735$24043 rhs*$735$24050 (build-exports$735$14985 global*$735$24057 init*$735$24051)) (map build-global-define$735$14242 (map cdr global*$735$24057)))))) (make-export-subst$735$14987 exp-int*$735$24010 exp-ext*$735$24011 rib$735$24018)))) (chi-rhs*$735$14902 rhs*$735$24044 r$735$24041 mr$735$24042) (chi-expr*$735$14888 init*$735$24040 r$735$24041 mr$735$24042)))))) swap$735$24038)) (lambda () (begin ((lambda (t$735$24066) (begin (t$735$24030 t$735$24032) (set! t$735$24032 t$735$24066))) (t$735$24030)) ((lambda (t$735$24068) (begin (t$735$24031 t$735$24033) (set! t$735$24033 t$735$24068))) (t$735$24031)))))) inv-collector$735$14940 vis-collector$735$14942 rtc$735$24021 vtc$735$24022)) (map (lambda (x$735$24070) (mkstx$735$14321 x$735$24070 top-mark*$735$14251 (list rib$735$24018))) b*$735$24006) (make-collector$735$14938) (make-collector$735$14938))) (make-top-rib$735$14936 subst$735$24012)))))))) (set! core-library-expander$735$14948 (lambda (e$735$24072) (call-with-values (lambda () (parse-library$735$14932 e$735$24072)) (lambda (name*$735$24074 exp*$735$24075 imp*$735$24076 b*$735$24077) (call-with-values (lambda () (parse-library-name$735$14930 name*$735$24074)) (lambda (name$735$24082 ver$735$24083) (call-with-values (lambda () (library-body-expander$735$14946 exp*$735$24075 imp*$735$24076 b*$735$24077)) (lambda (imp*$735$24086 invoke-req*$735$24087 visit-req*$735$24088 invoke-code$735$24089 visit-code$735$24090 export-subst$735$24091 export-env$735$24092) (values name$735$24082 ver$735$24083 imp*$735$24086 invoke-req*$735$24087 visit-req*$735$24088 invoke-code$735$24089 visit-code$735$24090 export-subst$735$24091 export-env$735$24092))))))))) (set! parse-top-level-program$735$14950 (lambda (e*$735$24100) ((lambda (t$735$24102) ((lambda (ls/false$735$24104) (if (if ls/false$735$24104 (begin (quote #f) (apply (lambda (import$735$24106 imp*$735$24107 b*$735$24108) (eq? import$735$24106 (quote import))) ls/false$735$24104)) (quote #f)) (apply (lambda (import$735$24112 imp*$735$24113 b*$735$24114) (values imp*$735$24113 b*$735$24114)) ls/false$735$24104) ((lambda (t$735$24118) ((lambda (ls/false$735$24120) (if (if ls/false$735$24120 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$24120)) (quote #f)) (apply (lambda () (error (quote "invalid syntax of top-level program"))) ls/false$735$24120) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$24118 (quote ()))))) ((lambda (x$735$24122) (quote ())) t$735$24118))) t$735$24102))) ((lambda (x$735$24124) (if (syntax-pair?$735$14331 x$735$24124) (begin (quote #f) ((lambda (q$735$24126) (if q$735$24126 (begin (quote #f) ((lambda (r$735$24128) (if r$735$24128 (begin (quote #f) (append q$735$24126 r$735$24128)) (quote #f))) ((letrec ((f$735$24130 (lambda (x$735$24132) (if (syntax-pair?$735$14331 x$735$24132) ((lambda (cars/f$735$24134) (if cars/f$735$24134 (begin (quote #f) ((lambda (cdrs/f$735$24136) (if cdrs/f$735$24136 (begin (quote #f) (map cons cars/f$735$24134 cdrs/f$735$24136)) (quote #f))) (f$735$24130 (syntax-cdr$735$14343 x$735$24132)))) (quote #f))) ((lambda (x$735$24138) (list x$735$24138)) (syntax-car$735$14339 x$735$24132))) (if (syntax-null?$735$14335 x$735$24132) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$735$24130) (syntax-cdr$735$14343 x$735$24124)))) (quote #f))) ((lambda (x$735$24140) (if (syntax-pair?$735$14331 x$735$24140) (begin (quote #f) ((lambda (q$735$24142) (if q$735$24142 (begin (quote #f) ((lambda (r$735$24144) (if r$735$24144 (begin (quote #f) (append q$735$24142 r$735$24144)) (quote #f))) ((letrec ((f$735$24146 (lambda (x$735$24148) (if (syntax-pair?$735$14331 x$735$24148) ((lambda (cars/f$735$24150) (if cars/f$735$24150 (begin (quote #f) ((lambda (cdrs/f$735$24152) (if cdrs/f$735$24152 (begin (quote #f) (map cons cars/f$735$24150 cdrs/f$735$24152)) (quote #f))) (f$735$24146 (syntax-cdr$735$14343 x$735$24148)))) (quote #f))) ((lambda (x$735$24154) (list x$735$24154)) (syntax-car$735$14339 x$735$24148))) (if (syntax-null?$735$14335 x$735$24148) (list (begin (quote imp*) (quote ()))) (quote #f)))))) f$735$24146) (syntax-cdr$735$14343 x$735$24140)))) (quote #f))) ((lambda (x$735$24156) (list x$735$24156)) (syntax-car$735$14339 x$735$24140)))) (quote #f))) (syntax-car$735$14339 x$735$24124)))) (quote #f))) t$735$24102))) e*$735$24100))) (set! top-level-expander$735$14952 (lambda (e*$735$24158) (call-with-values (lambda () (parse-top-level-program$735$14950 e*$735$24158)) (lambda (imp*$735$24160 b*$735$24161) (call-with-values (lambda () (library-body-expander$735$14946 (quote ()) imp*$735$24160 b*$735$24161)) (lambda (imp*$735$24164 invoke-req*$735$24165 visit-req*$735$24166 invoke-code$735$24167 visit-code$735$24168 export-subst$735$24169 export-env$735$24170) (values invoke-req*$735$24165 invoke-code$735$24167))))))) (set! make-env$735$14955 (lambda (subst$735$24178 imp*$735$24179) (vector (quote g$735$14954) subst$735$24178 imp*$735$24179))) (set! env?$735$14957 (lambda (x$735$24182) (if (vector? x$735$24182) (if (= (vector-length x$735$24182) (+ (quote 1) (length (quote (subst imp*))))) (begin (quote #f) (eq? (vector-ref x$735$24182 (quote 0)) (quote g$735$14954))) (quote #f)) (quote #f)))) (set! env-subst$735$14959 (lambda (x$735$24184) (if (env?$735$14957 x$735$24184) (vector-ref x$735$24184 (quote 1)) (error (quote env-subst) (quote "~s is not of type ~s") x$735$24184 (quote env))))) (set! env-imp*$735$14961 (lambda (x$735$24186) (if (env?$735$14957 x$735$24186) (vector-ref x$735$24186 (quote 2)) (error (quote env-imp*) (quote "~s is not of type ~s") x$735$24186 (quote env))))) (set! set-env-subst!$735$14963 (lambda (x$735$24188 v$735$24189) (if (env?$735$14957 x$735$24188) (vector-set! x$735$24188 (quote 1) v$735$24189) (error (quote set-env-subst!) (quote "~s is not of type ~s") x$735$24188 (quote env))))) (set! set-env-imp*!$735$14965 (lambda (x$735$24192 v$735$24193) (if (env?$735$14957 x$735$24192) (vector-set! x$735$24192 (quote 2) v$735$24193) (error (quote set-env-imp*!) (quote "~s is not of type ~s") x$735$24192 (quote env))))) (set! environment?$735$14967 (lambda (x$735$24196) (env?$735$14957 x$735$24196))) (set! environment$735$14969 (lambda imp*$735$24198 (call-with-values (lambda () (parse-import-spec*$735$14934 imp*$735$24198)) (lambda (subst$735$24200 imp*$735$24201) (make-env$735$14955 subst$735$24200 imp*$735$24201))))) (set! null-environment$735$14971 (lambda (n$735$24204) (begin (if (eqv? n$735$24204 (quote 5)) (void) (error (quote null-environment) (quote "not 5") n$735$24204)) (environment$735$14969 (quote (psyntax null-environment-5)))))) (set! scheme-report-environment$735$14973 (lambda (n$735$24206) (begin (if (eqv? n$735$24206 (quote 5)) (void) (error (quote scheme-report-environment) (quote "not 5") n$735$24206)) (environment$735$14969 (quote (psyntax scheme-report-environment-5)))))) (set! expand$735$14975 (lambda (x$735$24208 env$735$24209) (begin (if (env?$735$14957 env$735$24209) (void) (error (quote expand) (quote "not an environment") env$735$24209)) ((lambda (subst$735$24212) ((lambda (rib$735$24214) ((lambda (x$735$24216 rtc$735$24217 vtc$735$24218) ((lambda (x$735$24222) (begin (seal-rib!$735$14286 rib$735$24214) (values x$735$24222 (rtc$735$24217)))) ((lambda (t$735$24228 t$735$24229 t$735$24230 t$735$24231) ((lambda (swap$735$24236) (dynamic-wind swap$735$24236 (lambda () (chi-expr$735$14892 x$735$24216 (quote ()) (quote ()))) swap$735$24236)) (lambda () (begin ((lambda (t$735$24238) (begin (t$735$24228 t$735$24230) (set! t$735$24230 t$735$24238))) (t$735$24228)) ((lambda (t$735$24240) (begin (t$735$24229 t$735$24231) (set! t$735$24231 t$735$24240))) (t$735$24229)))))) inv-collector$735$14940 vis-collector$735$14942 rtc$735$24217 vtc$735$24218))) (mkstx$735$14321 x$735$24208 top-mark*$735$14251 (list rib$735$24214)) (make-collector$735$14938) (make-collector$735$14938))) (make-top-rib$735$14936 subst$735$24212))) (env-subst$735$14959 env$735$24209))))) (set! eval$735$14977 (lambda (x$735$24242 env$735$24243) (begin (if (env?$735$14957 env$735$24243) (void) (error (quote eval) (quote "not an environment") env$735$24243)) (call-with-values (lambda () (expand$735$14975 x$735$24242 env$735$24243)) (lambda (x$735$24246 invoke-req*$735$24247) (begin (for-each invoke-library$735$13883 invoke-req*$735$24247) (eval-core (expanded->core$735$13435 x$735$24246)))))))) (set! library-expander$735$14979 (lambda (x$735$24250) ((lambda (build-visit-code$735$24252 visit!$735$24254) (begin (set! build-visit-code$735$24252 (lambda (macro*$735$24264) (if (null? macro*$735$24264) (build-void$735$14227) (build-sequence$735$14228 (quote #f) (map (lambda (x$735$24266) ((lambda (loc$735$24268 src$735$24269) (list (quote set!) loc$735$24268 src$735$24269)) (car x$735$24266) (cddr x$735$24266))) macro*$735$24264))))) (set! visit!$735$24254 (lambda (macro*$735$24256) (for-each (lambda (x$735$24258) ((lambda (loc$735$24260 proc$735$24261) (set-symbol-value! loc$735$24260 proc$735$24261)) (car x$735$24258) (cadr x$735$24258))) macro*$735$24256))) (call-with-values (lambda () (core-library-expander$735$14948 x$735$24250)) (lambda (name$735$24272 ver$735$24273 imp*$735$24274 inv*$735$24275 vis*$735$24276 invoke-code$735$24277 macro*$735$24278 export-subst$735$24279 export-env$735$24280) ((lambda (id$735$24290 name$735$24291 ver$735$24292 imp*$735$24293 vis*$735$24294 inv*$735$24295) (begin (install-library$735$13887 id$735$24290 name$735$24291 ver$735$24292 imp*$735$24293 vis*$735$24294 inv*$735$24295 export-subst$735$24279 export-env$735$24280 (lambda () (visit!$735$24254 macro*$735$24278)) (lambda () (eval-core (expanded->core$735$13435 invoke-code$735$24277))) (quote #t)) (values invoke-code$735$24277 (build-visit-code$735$24252 macro*$735$24278) export-subst$735$24279 export-env$735$24280))) (gensym) name$735$24272 ver$735$24273 (map library-spec$735$13879 imp*$735$24274) (map library-spec$735$13879 vis*$735$24276) (map library-spec$735$13879 inv*$735$24275)))))) (quote #f) (quote #f)))) (set! boot-library-expand$735$14981 (lambda (x$735$24302) (call-with-values (lambda () (library-expander$735$14979 x$735$24302)) (lambda (invoke-code$735$24304 visit-code$735$24305 export-subst$735$24306 export-env$735$24307) (values invoke-code$735$24304 export-subst$735$24306 export-env$735$24307))))) (set! rev-map-append$735$14983 (lambda (f$735$24312 ls$735$24313 ac$735$24314) (if (null? ls$735$24313) ac$735$24314 (rev-map-append$735$14983 f$735$24312 (cdr ls$735$24313) (cons (f$735$24312 (car ls$735$24313)) ac$735$24314))))) (set! build-exports$735$14985 (lambda (lex*+loc*$735$24318 init*$735$24319) (build-sequence$735$14228 (quote #f) (cons (build-void$735$14227) (rev-map-append$735$14983 (lambda (x$735$24322) (list (quote set!) (cdr x$735$24322) (car x$735$24322))) lex*+loc*$735$24318 init*$735$24319))))) (set! make-export-subst$735$14987 (lambda (int*$735$24324 ext*$735$24325 rib$735$24326) (map (lambda (int$735$24330 ext$735$24331) ((lambda (id$735$24334) ((lambda (label$735$24336) ((lambda () (begin (if label$735$24336 (void) (error (quote expander) (quote "cannot export unbound identifier") (strip$735$14363 id$735$24334 (quote ())))) (cons ext$735$24331 label$735$24336))))) (id->label$735$14367 id$735$24334))) (mkstx$735$14321 int$735$24330 top-mark*$735$14251 (list rib$735$24326)))) int*$735$24324 ext*$735$24325))) (set! make-export-env/macros$735$14989 (lambda (r$735$24338) (letrec ((f$735$24340 (lambda (r$735$24342 env$735$24343 global*$735$24344 macro*$735$24345) (if (null? r$735$24342) (values env$735$24343 global*$735$24344 macro*$735$24345) ((lambda (x$735$24350) ((lambda (label$735$24352 b$735$24353) ((lambda (t$735$24356) (if (memv t$735$24356 (quote (lexical))) ((lambda (loc$735$24361) (f$735$24340 (cdr r$735$24342) (cons (cons* label$735$24352 (quote global) loc$735$24361) env$735$24343) (cons (cons (binding-value$735$14375 b$735$24353) loc$735$24361) global*$735$24344) macro*$735$24345)) (gen-global$735$14257 (binding-value$735$14375 b$735$24353))) (if (memv t$735$24356 (quote (local-macro))) ((lambda (loc$735$24359) (f$735$24340 (cdr r$735$24342) (cons (cons* label$735$24352 (quote global-macro) loc$735$24359) env$735$24343) global*$735$24344 (cons (cons loc$735$24359 (binding-value$735$14375 b$735$24353)) macro*$735$24345))) (gensym)) (if (memv t$735$24356 (quote (local-macro!))) ((lambda (loc$735$24357) (f$735$24340 (cdr r$735$24342) (cons (cons* label$735$24352 (quote global-macro!) loc$735$24357) env$735$24343) global*$735$24344 (cons (cons loc$735$24357 (binding-value$735$14375 b$735$24353)) macro*$735$24345))) (gensym)) (if (memv t$735$24356 (quote ($rtd $module))) (f$735$24340 (cdr r$735$24342) (cons x$735$24350 env$735$24343) global*$735$24344 macro*$735$24345) (error (quote expander) (quote "BUG: do not know how to export") (binding-type$735$14373 b$735$24353) (binding-value$735$14375 b$735$24353))))))) (binding-type$735$14373 b$735$24353))) (car x$735$24350) (cdr x$735$24350))) (car r$735$24342)))))) (f$735$24340 r$735$24338 (quote ()) (quote ()) (quote ()))))) (set! generate-temporaries$735$14991 (lambda (ls$735$24363) ((lambda (t$735$24365) ((lambda (ls/false$735$24367) (if (if ls/false$735$24367 (begin (quote #f) (apply (lambda (ls$735$24369) (quote #t)) ls/false$735$24367)) (quote #f)) (apply (lambda (ls$735$24371) (map (lambda (x$735$24373) (make-stx$735$14295 (gensym (quote t)) top-mark*$735$14251 (quote ()))) ls$735$24371)) ls/false$735$24367) ((lambda (t$735$24375) ((lambda (ls/false$735$24377) (if (if ls/false$735$24377 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$735$24377)) (quote #f)) (apply (lambda () (error (quote generate-temporaries) (quote "not a list"))) ls/false$735$24377) (error (quote expander) (quote "invalid syntax") (strip$735$14363 t$735$24375 (quote ()))))) ((lambda (x$735$24379) (quote ())) t$735$24375))) t$735$24365))) ((letrec ((f$735$24381 (lambda (x$735$24383) (if (syntax-pair?$735$14331 x$735$24383) ((lambda (cars/f$735$24385) (if cars/f$735$24385 (begin (quote #f) ((lambda (cdrs/f$735$24387) (if cdrs/f$735$24387 (begin (quote #f) (map cons cars/f$735$24385 cdrs/f$735$24387)) (quote #f))) (f$735$24381 (syntax-cdr$735$14343 x$735$24383)))) (quote #f))) ((lambda (x$735$24389) (list x$735$24389)) (syntax-car$735$14339 x$735$24383))) (if (syntax-null?$735$14335 x$735$24383) (list (begin (quote ls) (quote ()))) (quote #f)))))) f$735$24381) t$735$24365))) ls$735$24363))) (set! free-identifier=?$735$14993 (lambda (x$735$24391 y$735$24392) (if (id?$735$14345 x$735$24391) (if (id?$735$14345 y$735$24392) (free-id=?$735$14353 x$735$24391 y$735$24392) (error (quote free-identifier=?) (quote "not an identifier") y$735$24392)) (error (quote free-identifier=?) (quote "not an identifier") x$735$24391)))) (set! bound-identifier=?$735$14995 (lambda (x$735$24395 y$735$24396) (if (id?$735$14345 x$735$24395) (if (id?$735$14345 y$735$24396) (bound-id=?$735$14351 x$735$24395 y$735$24396) (error (quote bound-identifier=?) (quote "not an identifier") y$735$24396)) (error (quote bound-identifier=?) (quote "not an identifier") x$735$24395)))) (set! syntax-error$735$14997 (lambda (x$735$24399 . args$735$24401) (begin (if (for-all string? args$735$24401) (void) (error (quote syntax-error) (quote "invalid argument") args$735$24401)) (error (quote expander) (quote "invalid syntax") (stx->datum$735$14365 x$735$24399) (apply string-append args$735$24401))))) (set! identifier?$735$14999 (lambda (x$735$24403) (id?$735$14345 x$735$24403))) (set! datum->syntax$735$15001 (lambda (id$735$24405 datum$735$24406) (if (id?$735$14345 id$735$24405) (datum->stx$735$14311 id$735$24405 datum$735$24406) (error (quote datum->syntax) (quote "not an identifier") id$735$24405)))) (set! syntax->datum$735$15003 (lambda (x$735$24409) (stx->datum$735$14365 x$735$24409))) (set! eval-r6rs-top-level$735$15005 (lambda (x*$735$24411) (call-with-values (lambda () (top-level-expander$735$14952 x*$735$24411)) (lambda (lib*$735$24413 invoke-code$735$24414) (begin (for-each invoke-library$735$13883 lib*$735$24413) (eval-core (expanded->core$735$13435 invoke-code$735$24414))))))) (set! interaction-library$735$15007 (make-parameter$735$13361 (quote #f))) (set! interaction-sym->label$735$15009 (lambda (sym$735$24417) ((lambda (t$735$24419) (if t$735$24419 ((lambda (lib$735$24421) ((lambda (t$735$24423) (if t$735$24423 (cdr t$735$24423) ((lambda (subst$735$24425) ((lambda (t$735$24427) (if t$735$24427 ((lambda (sym/lab$735$24429) ((lambda (label$735$24431) (begin (extend-library-subst!$735$13886 lib$735$24421 sym$735$24417 label$735$24431) label$735$24431)) (cdr sym/lab$735$24429))) t$735$24427) ((lambda (label$735$24433) (begin (extend-library-subst!$735$13886 lib$735$24421 sym$735$24417 label$735$24433) (extend-library-env!$735$13885 lib$735$24421 label$735$24433 (cons (quote global) (cons lib$735$24421 (gen-global$735$14257 sym$735$24417)))) label$735$24433)) (gen-label$735$14259 sym$735$24417)))) (assq sym$735$24417 subst$735$24425))) (if (library-exists?$735$13891 (quote (ikarus))) (library-subst$735$13917 (find-library-by-name$735$13892 (quote (ikarus)))) (quote ()))))) (assq sym$735$24417 (library-subst$735$13917 lib$735$24421)))) t$735$24419) (quote #f))) (interaction-library$735$15007)))) (set! eval-top-level$735$15011 (lambda (x$735$24435) ((lambda (eval-binding$735$24437) (begin (set! eval-binding$735$24437 (lambda (x$735$24439) ((lambda (loc$735$24441 expr$735$24442) (if loc$735$24441 (set-symbol-value! loc$735$24441 (eval-core (expanded->core$735$13435 expr$735$24442))) (eval-core (expanded->core$735$13435 expr$735$24442)))) (car x$735$24439) (cdr x$735$24439)))) ((lambda (rtc$735$24445 vtc$735$24446) ((lambda (init*$735$24449) (begin (for-each invoke-library$735$13883 (rtc$735$24445)) (if (null? init*$735$24449) (void) (begin (for-each eval-binding$735$24437 (reverse (cdr init*$735$24449))) (eval-binding$735$24437 (car init*$735$24449)))))) ((lambda (t$735$24457 t$735$24458 t$735$24459 t$735$24460 t$735$24461 t$735$24462) ((lambda (swap$735$24469) (dynamic-wind swap$735$24469 (lambda () (chi-top*$735$14924 (list (mkstx$735$14321 x$735$24435 top-mark*$735$14251 (quote ()))) (quote ()))) swap$735$24469)) (lambda () (begin ((lambda (t$735$24471) (begin (t$735$24457 t$735$24460) (set! t$735$24460 t$735$24471))) (t$735$24457)) ((lambda (t$735$24473) (begin (t$735$24458 t$735$24461) (set! t$735$24461 t$735$24473))) (t$735$24458)) ((lambda (t$735$24475) (begin (t$735$24459 t$735$24462) (set! t$735$24462 t$735$24475))) (t$735$24459)))))) inv-collector$735$14940 vis-collector$735$14942 interaction-library$735$15007 rtc$735$24445 vtc$735$24446 (find-library-by-name$735$13892 (quote (ikarus interaction)))))) (make-collector$735$14938) (make-collector$735$14938)))) (quote #f)))) (begin (set! eval-top-level$735$24477 eval-top-level$735$15011) (set! interaction-sym->label$735$24478 interaction-sym->label$735$15009) (set! interaction-library$735$24479 interaction-library$735$15007) (set! eval-r6rs-top-level$735$24480 eval-r6rs-top-level$735$15005) (set! syntax->datum$735$24481 syntax->datum$735$15003) (set! datum->syntax$735$24482 datum->syntax$735$15001) (set! identifier?$735$24483 identifier?$735$14999) (set! syntax-error$735$24484 syntax-error$735$14997) (set! bound-identifier=?$735$24485 bound-identifier=?$735$14995) (set! free-identifier=?$735$24486 free-identifier=?$735$14993) (set! generate-temporaries$735$24487 generate-temporaries$735$14991) (set! make-export-env/macros$735$24488 make-export-env/macros$735$14989) (set! make-export-subst$735$24489 make-export-subst$735$14987) (set! build-exports$735$24490 build-exports$735$14985) (set! rev-map-append$735$24491 rev-map-append$735$14983) (set! boot-library-expand$735$24492 boot-library-expand$735$14981) (set! library-expander$735$24493 library-expander$735$14979) (set! eval$735$24494 eval$735$14977) (set! expand$735$24495 expand$735$14975) (set! scheme-report-environment$735$24496 scheme-report-environment$735$14973) (set! null-environment$735$24497 null-environment$735$14971) (set! environment$735$24498 environment$735$14969) (set! environment?$735$24499 environment?$735$14967) (set! set-env-imp*!$735$24500 set-env-imp*!$735$14965) (set! set-env-subst!$735$24501 set-env-subst!$735$14963) (set! env-imp*$735$24502 env-imp*$735$14961) (set! env-subst$735$24503 env-subst$735$14959) (set! env?$735$24504 env?$735$14957) (set! make-env$735$24505 make-env$735$14955) (set! top-level-expander$735$24506 top-level-expander$735$14952) (set! parse-top-level-program$735$24507 parse-top-level-program$735$14950) (set! core-library-expander$735$24508 core-library-expander$735$14948) (set! library-body-expander$735$24509 library-body-expander$735$14946) (set! chi-library-internal$735$24510 chi-library-internal$735$14944) (set! vis-collector$735$24511 vis-collector$735$14942) (set! inv-collector$735$24512 inv-collector$735$14940) (set! make-collector$735$24513 make-collector$735$14938) (set! make-top-rib$735$24514 make-top-rib$735$14936) (set! parse-import-spec*$735$24515 parse-import-spec*$735$14934) (set! parse-library$735$24516 parse-library$735$14932) (set! parse-library-name$735$24517 parse-library-name$735$14930) (set! parse-exports$735$24518 parse-exports$735$14928) (set! expand-transformer$735$24519 expand-transformer$735$14926) (set! chi-top*$735$24520 chi-top*$735$14924) (set! chi-top-set!$735$24521 chi-top-set!$735$14922) (set! gen-global-var-binding$735$24522 gen-global-var-binding$735$14920) (set! gen-global-macro-binding$735$24523 gen-global-macro-binding$735$14918) (set! set-global-macro-binding!$735$24524 set-global-macro-binding!$735$14916) (set! chi-body*$735$24525 chi-body*$735$14914) (set! chi-internal-module$735$24526 chi-internal-module$735$14912) (set! parse-module$735$24527 parse-module$735$14910) (set! chi-internal$735$24528 chi-internal$735$14908) (set! find-dups$735$24529 find-dups$735$14906) (set! find-bound=?$735$24530 find-bound=?$735$14904) (set! chi-rhs*$735$24531 chi-rhs*$735$14902) (set! chi-rhs$735$24532 chi-rhs$735$14900) (set! chi-lambda-clause*$735$24533 chi-lambda-clause*$735$14898) (set! chi-lambda-clause$735$24534 chi-lambda-clause$735$14896) (set! chi-set!$735$24535 chi-set!$735$14894) (set! chi-expr$735$24536 chi-expr$735$14892) (set! chi-application$735$24537 chi-application$735$14890) (set! chi-expr*$735$24538 chi-expr*$735$14888) (set! chi-global-macro$735$24539 chi-global-macro$735$14886) (set! chi-local-macro$735$24540 chi-local-macro$735$14884) (set! chi-macro$735$24541 chi-macro$735$14882) (set! local-macro-transformer$735$24542 local-macro-transformer$735$14880) (set! macro-transformer$735$24543 macro-transformer$735$14878) (set! symbol-macro$735$24544 symbol-macro$735$14876) (set! file-options-macro$735$24545 file-options-macro$735$14874) (set! core-macro-transformer$735$24546 core-macro-transformer$735$14872) (set! syntax-transformer$735$24547 syntax-transformer$735$14870) (set! syntax-case-transformer$735$24548 syntax-case-transformer$735$14868) (set! ellipsis?$735$24549 ellipsis?$735$14866) (set! syntax-dispatch$735$24550 syntax-dispatch$735$14864) (set! convert-pattern$735$24551 convert-pattern$735$14862) (set! foreign-call-transformer$735$24552 foreign-call-transformer$735$14860) (set! parameterize-transformer$735$24553 parameterize-transformer$735$14858) (set! incorrect-usage-macro$735$24554 incorrect-usage-macro$735$14856) (set! define-condition-type-macro$735$24555 define-condition-type-macro$735$14854) (set! define-record-type-macro$735$24556 define-record-type-macro$735$14852) (set! define-struct-macro$735$24557 define-struct-macro$735$14850) (set! quasisyntax-macro$735$24558 quasisyntax-macro$735$14848) (set! quasiquote-macro$735$24559 quasiquote-macro$735$14846) (set! syntax-rules-macro$735$24560 syntax-rules-macro$735$14844) (set! include-macro$735$24561 include-macro$735$14842) (set! cond-macro$735$24562 cond-macro$735$14840) (set! and-macro$735$24563 and-macro$735$14838) (set! or-macro$735$24564 or-macro$735$14836) (set! let*-macro$735$24565 let*-macro$735$14834) (set! do-macro$735$24566 do-macro$735$14832) (set! identifier-syntax-macro$735$24567 identifier-syntax-macro$735$14830) (set! endianness-macro$735$24568 endianness-macro$735$14828) (set! assert-macro$735$24569 assert-macro$735$14826) (set! delay-macro$735$24570 delay-macro$735$14824) (set! time-macro$735$24571 time-macro$735$14822) (set! define-enumeration-macro$735$24572 define-enumeration-macro$735$14820) (set! guard-macro$735$24573 guard-macro$735$14818) (set! trace-define-macro$735$24574 trace-define-macro$735$14816) (set! trace-lambda-macro$735$24575 trace-lambda-macro$735$14814) (set! let-macro$735$24576 let-macro$735$14812) (set! with-syntax-macro$735$24577 with-syntax-macro$735$14810) (set! bless$735$24578 bless$735$14808) (set! lambda-transformer$735$24579 lambda-transformer$735$14806) (set! case-lambda-transformer$735$24580 case-lambda-transformer$735$14804) (set! quote-transformer$735$24581 quote-transformer$735$14802) (set! case-transformer$735$24582 case-transformer$735$14800) (set! if-transformer$735$24583 if-transformer$735$14798) (set! unless-transformer$735$24584 unless-transformer$735$14796) (set! when-transformer$735$24585 when-transformer$735$14794) (set! record-constructor-descriptor-transformer$735$24586 record-constructor-descriptor-transformer$735$14792) (set! record-type-descriptor-transformer$735$24587 record-type-descriptor-transformer$735$14790) (set! type-descriptor-transformer$735$24588 type-descriptor-transformer$735$14788) (set! letrec*-transformer$735$24589 letrec*-transformer$735$14786) (set! letrec-transformer$735$24590 letrec-transformer$735$14784) (set! letrec-helper$735$24591 letrec-helper$735$14782) (set! let-values-transformer$735$24592 let-values-transformer$735$14780) (set! add-lexicals$735$24593 add-lexicals$735$14778) (set! add-lexical$735$24594 add-lexical$735$14776) (set! scheme-stx$735$24595 scheme-stx$735$14774) (set! parse-define-syntax$735$24596 parse-define-syntax$735$14772) (set! parse-define$735$24597 parse-define$735$14770) (set! make-eval-transformer$735$24599 make-eval-transformer$735$14408) (set! make-variable-transformer$735$24600 make-variable-transformer$735$14406) (set! sanitize-binding$735$24601 sanitize-binding$735$14404) (set! syntax-type$735$24603 syntax-type$735$14377) (set! binding-value$735$24604 binding-value$735$14375) (set! binding-type$735$24605 binding-type$735$14373) (set! make-binding$735$24606 make-binding$735$14371) (set! label->binding$735$24607 label->binding$735$14369) (set! id->label$735$24608 id->label$735$14367) (set! stx->datum$735$24609 stx->datum$735$14365) (set! strip$735$24610 strip$735$14363) (set! self-evaluating?$735$24611 self-evaluating?$735$14361) (set! bound-id-member?$735$24612 bound-id-member?$735$14359) (set! distinct-bound-ids?$735$24613 distinct-bound-ids?$735$14357) (set! valid-bound-ids?$735$24614 valid-bound-ids?$735$14355) (set! free-id=?$735$24615 free-id=?$735$14353) (set! bound-id=?$735$24616 bound-id=?$735$14351) (set! same-marks?$735$24617 same-marks?$735$14349) (set! id->sym$735$24618 id->sym$735$14347) (set! id?$735$24619 id?$735$14345) (set! syntax-cdr$735$24620 syntax-cdr$735$14343) (set! syntax->list$735$24621 syntax->list$735$14341) (set! syntax-car$735$24622 syntax-car$735$14339) (set! syntax-list?$735$24623 syntax-list?$735$14337) (set! syntax-null?$735$24624 syntax-null?$735$14335) (set! syntax-vector?$735$24625 syntax-vector?$735$14333) (set! syntax-pair?$735$24626 syntax-pair?$735$14331) (set! syntax-vector->list$735$24627 syntax-vector->list$735$14329) (set! syntax-kind?$735$24628 syntax-kind?$735$14327) (set! add-subst$735$24629 add-subst$735$14325) (set! add-mark$735$24630 add-mark$735$14323) (set! mkstx$735$24631 mkstx$735$14321) (set! join-wraps$735$24632 join-wraps$735$14319) (set! anti-mark?$735$24633 anti-mark?$735$14317) (set! anti-mark$735$24634 anti-mark$735$14315) (set! gen-mark$735$24635 gen-mark$735$14313) (set! datum->stx$735$24636 datum->stx$735$14311) (set! set-stx-subst*!$735$24637 set-stx-subst*!$735$14309) (set! set-stx-mark*!$735$24638 set-stx-mark*!$735$14307) (set! set-stx-expr!$735$24639 set-stx-expr!$735$14305) (set! stx-subst*$735$24640 stx-subst*$735$14303) (set! stx-mark*$735$24641 stx-mark*$735$14301) (set! stx-expr$735$24642 stx-expr$735$14299) (set! stx?$735$24643 stx?$735$14297) (set! make-stx$735$24644 make-stx$735$14295) (set! make-full-rib$735$24645 make-full-rib$735$14292) (set! increment-rib-frequency!$735$24646 increment-rib-frequency!$735$14290) (set! unseal-rib!$735$24647 unseal-rib!$735$14288) (set! seal-rib!$735$24648 seal-rib!$735$14286) (set! extend-rib!$735$24649 extend-rib!$735$14284) (set! make-empty-rib$735$24650 make-empty-rib$735$14282) (set! set-rib-sealed/freq!$735$24651 set-rib-sealed/freq!$735$14280) (set! set-rib-label*!$735$24652 set-rib-label*!$735$14278) (set! set-rib-mark**!$735$24653 set-rib-mark**!$735$14276) (set! set-rib-sym*!$735$24654 set-rib-sym*!$735$14274) (set! rib-sealed/freq$735$24655 rib-sealed/freq$735$14272) (set! rib-label*$735$24656 rib-label*$735$14270) (set! rib-mark**$735$24657 rib-mark**$735$14268) (set! rib-sym*$735$24658 rib-sym*$735$14266) (set! rib?$735$24659 rib?$735$14264) (set! make-rib$735$24660 make-rib$735$14262) (set! gen-label$735$24661 gen-label$735$14259) (set! gen-global$735$24662 gen-global$735$14257) (set! gen-lexical$735$24663 gen-lexical$735$14255) (set! top-marked?$735$24664 top-marked?$735$14253) (set! top-mark*$735$24665 top-mark*$735$14251) (set! set-union$735$24667 set-union$735$14246) (set! set-cons$735$24668 set-cons$735$14244) (current-library-expander$735$13895 library-expander$735$14979)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (current-primitive-locations$735$13439 (lambda (x$735$25431) ((lambda (t$735$25433) (if t$735$25433 (cdr t$735$25433) (quote #f))) (assq x$735$25431 (quote ((syntax-error . syntax-error$735$24484) (syntax-dispatch . syntax-dispatch$735$24550) (make-variable-transformer . make-variable-transformer$735$24600) (identifier? . identifier?$735$24483) (generate-temporaries . generate-temporaries$735$24487) (free-identifier=? . free-identifier=?$735$24486) (syntax->datum . syntax->datum$735$24481) (datum->syntax . datum->syntax$735$24482) (bound-identifier=? . bound-identifier=?$735$24485) (null-environment . null-environment$735$24497) (eval . eval$735$24494) (environment . environment$735$24498))))))) (install-library$735$13887 (quote g$735$25398) (quote (ikarus interaction)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25399) (quote (psyntax null-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((unquote-splicing . g$735$24735) (unquote . g$735$24734) (delay . g$735$24727) (or . g$735$24725) (and . g$735$24724) (do . g$735$24723) (cond . g$735$24722) (let* . g$735$24721) (let . g$735$24720) (quasiquote . g$735$24716) (syntax-rules . g$735$24715) (case . g$735$24709) (if . g$735$24705) (letrec . g$735$24703) (lambda . g$735$24700) (quote . g$735$24697) (letrec-syntax . g$735$24695) (let-syntax . g$735$24694) (set! . g$735$24693) (begin . g$735$24691) (define-syntax . g$735$24689) (define . g$735$24688))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25400) (quote (psyntax scheme-report-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-ci>? . g$735$25380) (string-ci>=? . g$735$25379) (string-ci=? . g$735$25378) (string-ci<? . g$735$25377) (string-ci<=? . g$735$25376) (char-whitespace? . g$735$25375) (char-upper-case? . g$735$25374) (char-numeric? . g$735$25372) (char-lower-case? . g$735$25371) (char-upcase . g$735$25369) (char-downcase . g$735$25366) (char-ci>? . g$735$25365) (char-ci>=? . g$735$25364) (char-ci=? . g$735$25363) (char-ci<? . g$735$25362) (char-ci<=? . g$735$25361) (char-alphabetic? . g$735$25360) (call-with-output-file . g$735$25316) (call-with-input-file . g$735$25315) (write-char . g$735$25314) (write . g$735$25313) (with-output-to-file . g$735$25312) (with-input-from-file . g$735$25311) (read-char . g$735$25310) (read . g$735$25309) (peek-char . g$735$25308) (open-output-file . g$735$25307) (open-input-file . g$735$25306) (newline . g$735$25305) (display . g$735$25304) (close-output-port . g$735$25303) (close-input-port . g$735$25302) (eof-object . g$735$25300) (current-output-port . g$735$25298) (current-input-port . g$735$25297) (output-port? . g$735$25296) (input-port? . g$735$25295) (scheme-report-environment . g$735$25210) (quotient . g$735$25209) (null-environment . g$735$14972) (remainder . g$735$25208) (modulo . g$735$25207) (inexact->exact . g$735$25206) (force . g$735$25205) (exact->inexact . g$735$25204) (string-fill! . g$735$25201) (string-set! . g$735$25200) (set-cdr! . g$735$25199) (set-car! . g$735$25198) (memv . g$735$25192) (memq . g$735$25191) (member . g$735$25189) (assv . g$735$25181) (assq . g$735$25180) (assoc . g$735$25178) (eval . g$735$14978) (zero? . g$735$24947) (vector? . g$735$24946) (vector-set! . g$735$24945) (vector-ref . g$735$24944) (vector-length . g$735$24942) (vector-fill! . g$735$24940) (vector->list . g$735$24939) (vector . g$735$24938) (values . g$735$24937) (truncate . g$735$24936) (tan . g$735$24935) (symbol? . g$735$24934) (symbol->string . g$735$24932) (substring . g$735$24931) (string? . g$735$24930) (string>? . g$735$24929) (string>=? . g$735$24928) (string=? . g$735$24927) (string<? . g$735$24926) (string<=? . g$735$24925) (string-ref . g$735$24924) (string-length . g$735$24923) (string-copy . g$735$24921) (string-append . g$735$24920) (string->symbol . g$735$24919) (string->number . g$735$24918) (string->list . g$735$24917) (string . g$735$24916) (sqrt . g$735$24915) (sin . g$735$24914) (round . g$735$24913) (reverse . g$735$24912) (real? . g$735$24911) (real-part . g$735$24909) (rationalize . g$735$24908) (rational? . g$735$24907) (procedure? . g$735$24905) (positive? . g$735$24904) (pair? . g$735$24903) (odd? . g$735$24902) (numerator . g$735$24901) (number? . g$735$24900) (number->string . g$735$24899) (not . g$735$24897) (negative? . g$735$24896) (min . g$735$24894) (max . g$735$24893) (map . g$735$24892) (make-vector . g$735$24891) (make-string . g$735$24890) (make-rectangular . g$735$24889) (make-polar . g$735$24888) (magnitude . g$735$24887) (log . g$735$24886) (list? . g$735$24885) (list-tail . g$735$24884) (list-ref . g$735$24883) (list->vector . g$735$24882) (list->string . g$735$24881) (list . g$735$24880) (length . g$735$24879) (lcm . g$735$24878) (integer? . g$735$24877) (integer->char . g$735$24875) (inexact? . g$735$24873) (imag-part . g$735$24871) (gcd . g$735$24870) (for-each . g$735$24869) (floor . g$735$24868) (expt . g$735$24866) (exp . g$735$24865) (exact? . g$735$24864) (even? . g$735$24861) (eqv? . g$735$24859) (equal? . g$735$24858) (eq? . g$735$24857) (dynamic-wind . g$735$24856) (denominator . g$735$24849) (cos . g$735$24848) (cons . g$735$24847) (complex? . g$735$24846) (char? . g$735$24845) (char>? . g$735$24844) (char>=? . g$735$24843) (char=? . g$735$24842) (char<? . g$735$24841) (char<=? . g$735$24840) (char->integer . g$735$24839) (ceiling . g$735$24838) (call-with-values . g$735$24837) (call-with-current-continuation . g$735$24835) (cddddr . g$735$24834) (cdddar . g$735$24833) (cddadr . g$735$24832) (cddaar . g$735$24831) (cdaddr . g$735$24830) (cdadar . g$735$24829) (cdaadr . g$735$24828) (cdaaar . g$735$24827) (cadddr . g$735$24826) (caddar . g$735$24825) (cadadr . g$735$24824) (cadaar . g$735$24823) (caaddr . g$735$24822) (caadar . g$735$24821) (caaadr . g$735$24820) (caaaar . g$735$24819) (cdddr . g$735$24818) (cddar . g$735$24817) (cdadr . g$735$24816) (cdaar . g$735$24815) (caddr . g$735$24814) (cadar . g$735$24813) (caadr . g$735$24812) (caaar . g$735$24811) (cddr . g$735$24810) (cdar . g$735$24809) (cadr . g$735$24808) (caar . g$735$24807) (cdr . g$735$24806) (car . g$735$24805) (boolean? . g$735$24804) (atan . g$735$24802) (asin . g$735$24800) (apply . g$735$24799) (append . g$735$24798) (angle . g$735$24797) (acos . g$735$24796) (abs . g$735$24795) (/ . g$735$24794) (* . g$735$24793) (- . g$735$24792) (+ . g$735$24791) (>= . g$735$24790) (> . g$735$24789) (= . g$735$24788) (<= . g$735$24787) (< . g$735$24786) (unquote-splicing . g$735$24735) (unquote . g$735$24734) (delay . g$735$24727) (or . g$735$24725) (and . g$735$24724) (do . g$735$24723) (cond . g$735$24722) (let* . g$735$24721) (let . g$735$24720) (quasiquote . g$735$24716) (syntax-rules . g$735$24715) (case . g$735$24709) (if . g$735$24705) (letrec . g$735$24703) (lambda . g$735$24700) (quote . g$735$24697) (letrec-syntax . g$735$24695) (let-syntax . g$735$24694) (set! . g$735$24693) (begin . g$735$24691) (define-syntax . g$735$24689) (define . g$735$24688))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25401) (quote (psyntax modules)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((module . g$735$24690))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25402) (quote (chez parameters)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25403) (quote (rnrs)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$735$25388) (string-titlecase . g$735$25387) (string-normalize-nfkd . g$735$25386) (string-normalize-nfkc . g$735$25385) (string-normalize-nfd . g$735$25384) (string-normalize-nfc . g$735$25383) (string-foldcase . g$735$25382) (string-downcase . g$735$25381) (string-ci>? . g$735$25380) (string-ci>=? . g$735$25379) (string-ci=? . g$735$25378) (string-ci<? . g$735$25377) (string-ci<=? . g$735$25376) (char-whitespace? . g$735$25375) (char-upper-case? . g$735$25374) (char-title-case? . g$735$25373) (char-numeric? . g$735$25372) (char-lower-case? . g$735$25371) (char-general-category . g$735$25370) (char-upcase . g$735$25369) (char-titlecase . g$735$25368) (char-foldcase . g$735$25367) (char-downcase . g$735$25366) (char-ci>? . g$735$25365) (char-ci>=? . g$735$25364) (char-ci=? . g$735$25363) (char-ci<? . g$735$25362) (char-ci<=? . g$735$25361) (char-alphabetic? . g$735$25360) (make-variable-transformer . g$735$14407) (identifier? . g$735$15000) (generate-temporaries . g$735$14992) (free-identifier=? . g$735$14994) (syntax->datum . g$735$15004) (datum->syntax . g$735$15002) (bound-identifier=? . g$735$14996) (record-type-descriptor? . g$735$25359) (record-predicate . g$735$25358) (record-mutator . g$735$25357) (record-constructor . g$735$25356) (record-accessor . g$735$25355) (make-record-type-descriptor . g$735$25354) (make-record-constructor-descriptor . g$735$25353) (record? . g$735$25352) (record-type-uid . g$735$25351) (record-type-sealed? . g$735$25350) (record-type-parent . g$735$25349) (record-type-opaque? . g$735$25348) (record-type-name . g$735$25347) (record-type-generative? . g$735$25346) (record-type-field-names . g$735$25345) (record-rtd . g$735$25344) (record-field-mutable? . g$735$25343) (delete-file . g$735$25342) (file-exists? . g$735$25341) (vector-sort! . g$735$25340) (vector-sort . g$735$25339) (list-sort . g$735$25338) (symbol-hash . g$735$25337) (string-ci-hash . g$735$25336) (string-hash . g$735$25335) (equal-hash . g$735$25334) (hashtable-equivalence-function . g$735$25333) (make-hashtable . g$735$25332) (hashtable-hash-function . g$735$25331) (make-eqv-hashtable . g$735$25330) (make-eq-hashtable . g$735$25329) (hashtable? . g$735$25328) (hashtable-update! . g$735$25327) (hashtable-size . g$735$25326) (hashtable-set! . g$735$25325) (hashtable-ref . g$735$25324) (hashtable-mutable? . g$735$25323) (hashtable-keys . g$735$25322) (hashtable-entries . g$735$25321) (hashtable-delete! . g$735$25320) (hashtable-copy . g$735$25319) (hashtable-contains? . g$735$25318) (hashtable-clear! . g$735$25317) (call-with-output-file . g$735$25316) (call-with-input-file . g$735$25315) (write-char . g$735$25314) (write . g$735$25313) (with-output-to-file . g$735$25312) (with-input-from-file . g$735$25311) (read-char . g$735$25310) (read . g$735$25309) (peek-char . g$735$25308) (open-output-file . g$735$25307) (open-input-file . g$735$25306) (newline . g$735$25305) (display . g$735$25304) (close-output-port . g$735$25303) (close-input-port . g$735$25302) (eof-object? . g$735$25301) (eof-object . g$735$25300) (current-error-port . g$735$25299) (current-output-port . g$735$25298) (current-input-port . g$735$25297) (output-port? . g$735$25296) (input-port? . g$735$25295) (utf-8-codec . g$735$25294) (utf-16-codec . g$735$25293) (transcoder-error-handling-mode . g$735$25292) (transcoder-eol-style . g$735$25291) (transcoder-codec . g$735$25290) (transcoded-port . g$735$25289) (textual-port? . g$735$25288) (string->bytevector . g$735$25287) (standard-output-port . g$735$25286) (standard-input-port . g$735$25285) (standard-error-port . g$735$25284) (set-port-position! . g$735$25283) (put-u8 . g$735$25282) (put-string . g$735$25281) (put-datum . g$735$25280) (put-char . g$735$25279) (put-bytevector . g$735$25278) (port? . g$735$25277) (port-transcoder . g$735$25276) (port-position . g$735$25275) (port-has-set-port-position!? . g$735$25274) (port-has-port-position? . g$735$25273) (port-eof? . g$735$25272) (output-port-buffer-mode . g$735$25271) (open-string-output-port . g$735$25270) (open-string-input-port . g$735$25269) (open-file-output-port . g$735$25268) (open-file-input/output-port . g$735$25267) (open-file-input-port . g$735$25266) (open-bytevector-output-port . g$735$25265) (open-bytevector-input-port . g$735$25264) (native-transcoder . g$735$25263) (native-eol-style . g$735$25262) (make-transcoder . g$735$25261) (latin-1-codec . g$735$25260) (make-i/o-write-error . g$735$25259) (make-i/o-read-error . g$735$25258) (make-i/o-port-error . g$735$25257) (make-i/o-invalid-position-error . g$735$25256) (make-i/o-filename-error . g$735$25255) (make-i/o-file-protection-error . g$735$25254) (make-i/o-file-is-read-only-error . g$735$25253) (make-i/o-file-does-not-exist-error . g$735$25252) (make-i/o-file-already-exists-error . g$735$25251) (make-i/o-error . g$735$25250) (make-i/o-encoding-error . g$735$25249) (make-i/o-decoding-error . g$735$25248) (make-custom-textual-output-port . g$735$25247) (make-custom-textual-input/output-port . g$735$25246) (make-custom-textual-input-port . g$735$25245) (make-custom-binary-output-port . g$735$25244) (make-custom-binary-input/output-port . g$735$25243) (make-custom-binary-input-port . g$735$25242) (make-bytevector . g$735$25241) (lookahead-u8 . g$735$25240) (lookahead-char . g$735$25239) (i/o-write-error? . g$735$25238) (i/o-read-error? . g$735$25237) (i/o-port-error? . g$735$25236) (i/o-invalid-position-error? . g$735$25235) (i/o-filename-error? . g$735$25234) (i/o-file-protection-error? . g$735$25233) (i/o-file-is-read-only-error? . g$735$25232) (i/o-file-does-not-exist-error? . g$735$25231) (i/o-file-already-exists-error? . g$735$25230) (i/o-error? . g$735$25229) (i/o-error-port . g$735$25228) (i/o-error-filename . g$735$25227) (i/o-encoding-error? . g$735$25226) (i/o-encoding-error-char . g$735$25225) (i/o-decoding-error? . g$735$25224) (get-u8 . g$735$25223) (get-string-n! . g$735$25222) (get-string-n . g$735$25221) (get-string-all . g$735$25220) (get-line . g$735$25219) (get-datum . g$735$25218) (get-char . g$735$25217) (get-bytevector-some . g$735$25216) (get-bytevector-n! . g$735$25215) (get-bytevector-n . g$735$25214) (get-bytevector-all . g$735$25213) (flush-output-port . g$735$25212) (close-port . g$735$25211) (exit . g$735$25203) (command-line . g$735$25202) (remove . g$735$25197) (remv . g$735$25196) (remp . g$735$25195) (remq . g$735$25194) (partition . g$735$25193) (memv . g$735$25192) (memq . g$735$25191) (memp . g$735$25190) (member . g$735$25189) (exists . g$735$25188) (for-all . g$735$25187) (fold-right . g$735$25186) (fold-left . g$735$25185) (find . g$735$25184) (filter . g$735$25183) (cons* . g$735$25182) (assv . g$735$25181) (assq . g$735$25180) (assp . g$735$25179) (assoc . g$735$25178) (call-with-string-output-port . g$735$25177) (call-with-port . g$735$25176) (call-with-bytevector-output-port . g$735$25175) (bytevector->string . g$735$25174) (buffer-mode? . g$735$25173) (binary-port? . g$735$25172) (with-exception-handler . g$735$25171) (raise-continuable . g$735$25170) (raise . g$735$25169) (make-enumeration . g$735$25168) (enum-set=? . g$735$25167) (enum-set-universe . g$735$25166) (enum-set-union . g$735$25165) (enum-set-subset? . g$735$25164) (enum-set-projection . g$735$25163) (enum-set-member? . g$735$25162) (enum-set-intersection . g$735$25161) (enum-set-indexer . g$735$25160) (enum-set-difference . g$735$25159) (enum-set-constructor . g$735$25158) (enum-set-complement . g$735$25157) (enum-set->list . g$735$25156) (who-condition? . g$735$25155) (warning? . g$735$25154) (violation? . g$735$25153) (undefined-violation? . g$735$25152) (syntax-violation? . g$735$25151) (syntax-violation-subform . g$735$25150) (syntax-violation-form . g$735$25149) (syntax-violation . g$735$25148) (simple-conditions . g$735$25147) (serious-condition? . g$735$25146) (non-continuable-violation? . g$735$25145) (&non-continuable . g$735$25144) (message-condition? . g$735$25143) (make-who-condition . g$735$25142) (make-warning . g$735$25141) (make-violation . g$735$25140) (make-undefined-violation . g$735$25139) (make-syntax-violation . g$735$25138) (make-serious-condition . g$735$25137) (make-non-continuable-violation . g$735$25136) (make-message-condition . g$735$25135) (make-lexical-violation . g$735$25134) (make-irritants-condition . g$735$25133) (make-implementation-restriction-violation . g$735$25132) (make-error . g$735$25131) (make-assertion-violation . g$735$25130) (lexical-violation? . g$735$25129) (irritants-condition? . g$735$25128) (implementation-restriction-violation? . g$735$25127) (&implementation-restriction . g$735$25126) (error? . g$735$25125) (condition-who . g$735$25124) (condition-predicate . g$735$25123) (condition-message . g$735$25122) (condition-irritants . g$735$25121) (condition-accessor . g$735$25120) (condition . g$735$25119) (assertion-violation? . g$735$25118) (condition? . g$735$25117) (utf32->string . g$735$25116) (utf16->string . g$735$25115) (utf8->string . g$735$25114) (uint-list->bytevector . g$735$25113) (u8-list->bytevector . g$735$25112) (string->utf8 . g$735$25111) (string->utf32 . g$735$25110) (string->utf16 . g$735$25109) (sint-list->bytevector . g$735$25108) (native-endianness . g$735$25107) (bytevector? . g$735$25106) (bytevector=? . g$735$25105) (bytevector-uint-set! . g$735$25104) (bytevector-uint-ref . g$735$25103) (bytevector-u8-set! . g$735$25102) (bytevector-u8-ref . g$735$25101) (bytevector-u64-set! . g$735$25100) (bytevector-u64-ref . g$735$25099) (bytevector-u64-native-set! . g$735$25098) (bytevector-u64-native-ref . g$735$25097) (bytevector-u32-set! . g$735$25096) (bytevector-u32-ref . g$735$25095) (bytevector-u32-native-set! . g$735$25094) (bytevector-u32-native-ref . g$735$25093) (bytevector-u16-set! . g$735$25092) (bytevector-u16-ref . g$735$25091) (bytevector-u16-native-set! . g$735$25090) (bytevector-u16-native-ref . g$735$25089) (bytevector-sint-set! . g$735$25088) (bytevector-sint-ref . g$735$25087) (bytevector-s8-set! . g$735$25086) (bytevector-s8-ref . g$735$25085) (bytevector-s64-set! . g$735$25084) (bytevector-s64-ref . g$735$25083) (bytevector-s64-native-set! . g$735$25082) (bytevector-s64-native-ref . g$735$25081) (bytevector-s32-set! . g$735$25080) (bytevector-s32-ref . g$735$25079) (bytevector-s32-native-set! . g$735$25078) (bytevector-s32-native-ref . g$735$25077) (bytevector-s16-set! . g$735$25076) (bytevector-s16-ref . g$735$25075) (bytevector-s16-native-set! . g$735$25074) (bytevector-s16-native-ref . g$735$25073) (bytevector-length . g$735$25072) (bytevector-ieee-single-ref . g$735$25071) (bytevector-ieee-single-native-set! . g$735$25070) (bytevector-ieee-single-native-ref . g$735$25069) (bytevector-ieee-double-ref . g$735$25068) (bytevector-ieee-double-native-set! . g$735$25067) (bytevector-ieee-double-native-ref . g$735$25066) (bytevector-fill! . g$735$25065) (bytevector-copy! . g$735$25064) (bytevector-copy . g$735$25063) (bytevector->uint-list . g$735$25062) (bytevector->u8-list . g$735$25061) (bytevector->sint-list . g$735$25060) (no-nans-violation? . g$735$25059) (no-infinities-violation? . g$735$25058) (make-no-nans-violation . g$735$25057) (make-no-infinities-violation . g$735$25056) (real->flonum . g$735$25055) (flzero? . g$735$25054) (fltruncate . g$735$25053) (fltan . g$735$25052) (flsqrt . g$735$25051) (flsin . g$735$25050) (flround . g$735$25049) (flpositive? . g$735$25048) (flonum? . g$735$25047) (flodd? . g$735$25046) (flnumerator . g$735$25045) (flnegative? . g$735$25044) (flnan? . g$735$25043) (flmod0 . g$735$25042) (flmod . g$735$25041) (flmin . g$735$25040) (flmax . g$735$25039) (fllog . g$735$25038) (flinteger? . g$735$25037) (flinfinite? . g$735$25036) (flfloor . g$735$25035) (flfinite? . g$735$25034) (flexpt . g$735$25033) (flexp . g$735$25032) (fleven? . g$735$25031) (fldiv0-and-mod0 . g$735$25030) (fldiv0 . g$735$25029) (fldiv-and-mod . g$735$25028) (fldiv . g$735$25027) (fldenominator . g$735$25026) (flcos . g$735$25025) (flceiling . g$735$25024) (flatan . g$735$25023) (flasin . g$735$25022) (flacos . g$735$25021) (flabs . g$735$25020) (fl>? . g$735$25019) (fl>=? . g$735$25018) (fl=? . g$735$25017) (fl<? . g$735$25016) (fl<=? . g$735$25015) (fl/ . g$735$25014) (fl- . g$735$25013) (fl+ . g$735$25012) (fl* . g$735$25011) (fixnum->flonum . g$735$25010) (fxzero? . g$735$25009) (fxxor . g$735$25008) (fxrotate-bit-field . g$735$25007) (fxreverse-bit-field . g$735$25006) (fxpositive? . g$735$25005) (fxodd? . g$735$25004) (fxnot . g$735$25003) (fxnegative? . g$735$25002) (fxmod0 . g$735$25001) (fxmod . g$735$25000) (fxmin . g$735$24999) (fxmax . g$735$24998) (fxlength . g$735$24997) (fxior . g$735$24996) (fxif . g$735$24995) (fxfirst-bit-set . g$735$24994) (fxeven? . g$735$24993) (fxdiv0-and-mod0 . g$735$24992) (fxdiv0 . g$735$24991) (fxdiv-and-mod . g$735$24990) (fxdiv . g$735$24989) (fxcopy-bit-field . g$735$24988) (fxcopy-bit . g$735$24987) (fxbit-set? . g$735$24986) (fxbit-field . g$735$24985) (fxbit-count . g$735$24984) (fxarithmetic-shift-right . g$735$24983) (fxarithmetic-shift-left . g$735$24982) (fxarithmetic-shift . g$735$24981) (fxand . g$735$24980) (fx>? . g$735$24979) (fx>=? . g$735$24978) (fx=? . g$735$24977) (fx<? . g$735$24976) (fx<=? . g$735$24975) (fx-/carry . g$735$24974) (fx- . g$735$24973) (fx+/carry . g$735$24972) (fx+ . g$735$24971) (fx*/carry . g$735$24970) (fx* . g$735$24969) (greatest-fixnum . g$735$24968) (least-fixnum . g$735$24967) (fixnum-width . g$735$24966) (fixnum? . g$735$24965) (bitwise-rotate-bit-field . g$735$24964) (bitwise-reverse-bit-field . g$735$24963) (bitwise-length . g$735$24962) (bitwise-if . g$735$24961) (bitwise-first-bit-set . g$735$24960) (bitwise-copy-bit-field . g$735$24959) (bitwise-copy-bit . g$735$24958) (bitwise-bit-set? . g$735$24957) (bitwise-bit-field . g$735$24956) (bitwise-bit-count . g$735$24955) (bitwise-xor . g$735$24954) (bitwise-ior . g$735$24953) (bitwise-and . g$735$24952) (bitwise-not . g$735$24951) (bitwise-arithmetic-shift-right . g$735$24950) (bitwise-arithmetic-shift-left . g$735$24949) (bitwise-arithmetic-shift . g$735$24948) (zero? . g$735$24947) (vector? . g$735$24946) (vector-set! . g$735$24945) (vector-ref . g$735$24944) (vector-map . g$735$24943) (vector-length . g$735$24942) (vector-for-each . g$735$24941) (vector-fill! . g$735$24940) (vector->list . g$735$24939) (vector . g$735$24938) (values . g$735$24937) (truncate . g$735$24936) (tan . g$735$24935) (symbol? . g$735$24934) (symbol=? . g$735$24933) (symbol->string . g$735$24932) (substring . g$735$24931) (string? . g$735$24930) (string>? . g$735$24929) (string>=? . g$735$24928) (string=? . g$735$24927) (string<? . g$735$24926) (string<=? . g$735$24925) (string-ref . g$735$24924) (string-length . g$735$24923) (string-for-each . g$735$24922) (string-copy . g$735$24921) (string-append . g$735$24920) (string->symbol . g$735$24919) (string->number . g$735$24918) (string->list . g$735$24917) (string . g$735$24916) (sqrt . g$735$24915) (sin . g$735$24914) (round . g$735$24913) (reverse . g$735$24912) (real? . g$735$24911) (real-valued? . g$735$24910) (real-part . g$735$24909) (rationalize . g$735$24908) (rational? . g$735$24907) (rational-valued? . g$735$24906) (procedure? . g$735$24905) (positive? . g$735$24904) (pair? . g$735$24903) (odd? . g$735$24902) (numerator . g$735$24901) (number? . g$735$24900) (number->string . g$735$24899) (null? . g$735$24898) (not . g$735$24897) (negative? . g$735$24896) (nan? . g$735$24895) (min . g$735$24894) (max . g$735$24893) (map . g$735$24892) (make-vector . g$735$24891) (make-string . g$735$24890) (make-rectangular . g$735$24889) (make-polar . g$735$24888) (magnitude . g$735$24887) (log . g$735$24886) (list? . g$735$24885) (list-tail . g$735$24884) (list-ref . g$735$24883) (list->vector . g$735$24882) (list->string . g$735$24881) (list . g$735$24880) (length . g$735$24879) (lcm . g$735$24878) (integer? . g$735$24877) (integer-valued? . g$735$24876) (integer->char . g$735$24875) (infinite? . g$735$24874) (inexact? . g$735$24873) (inexact . g$735$24872) (imag-part . g$735$24871) (gcd . g$735$24870) (for-each . g$735$24869) (floor . g$735$24868) (finite? . g$735$24867) (expt . g$735$24866) (exp . g$735$24865) (exact? . g$735$24864) (exact-integer-sqrt . g$735$24863) (exact . g$735$24862) (even? . g$735$24861) (error . g$735$24860) (eqv? . g$735$24859) (equal? . g$735$24858) (eq? . g$735$24857) (dynamic-wind . g$735$24856) (div0-and-mod0 . g$735$24855) (mod0 . g$735$24854) (div0 . g$735$24853) (div-and-mod . g$735$24852) (mod . g$735$24851) (div . g$735$24850) (denominator . g$735$24849) (cos . g$735$24848) (cons . g$735$24847) (complex? . g$735$24846) (char? . g$735$24845) (char>? . g$735$24844) (char>=? . g$735$24843) (char=? . g$735$24842) (char<? . g$735$24841) (char<=? . g$735$24840) (char->integer . g$735$24839) (ceiling . g$735$24838) (call-with-values . g$735$24837) (call/cc . g$735$24836) (call-with-current-continuation . g$735$24835) (cddddr . g$735$24834) (cdddar . g$735$24833) (cddadr . g$735$24832) (cddaar . g$735$24831) (cdaddr . g$735$24830) (cdadar . g$735$24829) (cdaadr . g$735$24828) (cdaaar . g$735$24827) (cadddr . g$735$24826) (caddar . g$735$24825) (cadadr . g$735$24824) (cadaar . g$735$24823) (caaddr . g$735$24822) (caadar . g$735$24821) (caaadr . g$735$24820) (caaaar . g$735$24819) (cdddr . g$735$24818) (cddar . g$735$24817) (cdadr . g$735$24816) (cdaar . g$735$24815) (caddr . g$735$24814) (cadar . g$735$24813) (caadr . g$735$24812) (caaar . g$735$24811) (cddr . g$735$24810) (cdar . g$735$24809) (cadr . g$735$24808) (caar . g$735$24807) (cdr . g$735$24806) (car . g$735$24805) (boolean? . g$735$24804) (boolean=? . g$735$24803) (atan . g$735$24802) (assertion-violation . g$735$24801) (asin . g$735$24800) (apply . g$735$24799) (append . g$735$24798) (angle . g$735$24797) (acos . g$735$24796) (abs . g$735$24795) (/ . g$735$24794) (* . g$735$24793) (- . g$735$24792) (+ . g$735$24791) (>= . g$735$24790) (> . g$735$24789) (= . g$735$24788) (<= . g$735$24787) (< . g$735$24786) (let*-values . g$735$24785) (&no-nans . g$735$24784) (&no-infinities . g$735$24783) (&i/o-encoding . g$735$24782) (&i/o-decoding . g$735$24781) (&i/o-port . g$735$24780) (&i/o-file-does-not-exist . g$735$24779) (&i/o-file-already-exists . g$735$24778) (&i/o-file-is-read-only . g$735$24777) (&i/o-file-protection . g$735$24776) (&i/o-filename . g$735$24775) (&i/o-invalid-position . g$735$24774) (&i/o-write . g$735$24773) (&i/o-read . g$735$24772) (&i/o . g$735$24771) (&undefined . g$735$24770) (&syntax . g$735$24769) (&lexical . g$735$24768) (&who . g$735$24765) (&irritants . g$735$24764) (&assertion . g$735$24763) (&violation . g$735$24762) (&error . g$735$24761) (&serious . g$735$24760) (&warning . g$735$24759) (&message . g$735$24758) (&condition . g$735$24757) (define-condition-type . g$735$24756) (define-enumeration . g$735$24755) (define-record-type . g$735$24754) (parent-rtd . g$735$24753) (nongenerative . g$735$24752) (opaque . g$735$24751) (sealed . g$735$24750) (protocol . g$735$24749) (parent . g$735$24748) (immutable . g$735$24747) (mutable . g$735$24746) (fields . g$735$24745) (error-handling-mode . g$735$24744) (file-options . g$735$24743) (buffer-mode . g$735$24742) (eol-style . g$735$24741) (guard . g$735$24740) (unsyntax-splicing . g$735$24737) (unsyntax . g$735$24736) (unquote-splicing . g$735$24735) (unquote . g$735$24734) (_ . g$735$24733) (else . g$735$24732) (=> . g$735$24731) (... . g$735$24730) (assert . g$735$24729) (endianness . g$735$24728) (or . g$735$24725) (and . g$735$24724) (do . g$735$24723) (cond . g$735$24722) (let* . g$735$24721) (let . g$735$24720) (identifier-syntax . g$735$24719) (with-syntax . g$735$24718) (quasisyntax . g$735$24717) (quasiquote . g$735$24716) (syntax-rules . g$735$24715) (record-constructor-descriptor . g$735$24712) (record-type-descriptor . g$735$24711) (let-values . g$735$24710) (case . g$735$24709) (unless . g$735$24707) (when . g$735$24706) (if . g$735$24705) (letrec* . g$735$24704) (letrec . g$735$24703) (case-lambda . g$735$24701) (lambda . g$735$24700) (syntax . g$735$24699) (syntax-case . g$735$24698) (quote . g$735$24697) (letrec-syntax . g$735$24695) (let-syntax . g$735$24694) (set! . g$735$24693) (begin . g$735$24691) (define-syntax . g$735$24689) (define . g$735$24688))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25404) (quote (rnrs r5rs)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((scheme-report-environment . g$735$25210) (quotient . g$735$25209) (null-environment . g$735$14972) (remainder . g$735$25208) (modulo . g$735$25207) (inexact->exact . g$735$25206) (force . g$735$25205) (exact->inexact . g$735$25204) (delay . g$735$24727))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25405) (quote (rnrs control)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((do . g$735$24723) (unless . g$735$24707) (when . g$735$24706) (case-lambda . g$735$24701))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25406) (quote (rnrs eval)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((eval . g$735$14978) (environment . g$735$14970))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25407) (quote (rnrs mutable-pairs)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((set-cdr! . g$735$25199) (set-car! . g$735$25198))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25408) (quote (rnrs mutable-strings)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((string-fill! . g$735$25201) (string-set! . g$735$25200))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25409) (quote (rnrs programs)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((exit . g$735$25203) (command-line . g$735$25202))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25410) (quote (rnrs syntax-case)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((make-variable-transformer . g$735$14407) (identifier? . g$735$15000) (generate-temporaries . g$735$14992) (free-identifier=? . g$735$14994) (syntax->datum . g$735$15004) (datum->syntax . g$735$15002) (bound-identifier=? . g$735$14996) (syntax-violation . g$735$25148) (unsyntax-splicing . g$735$24737) (unsyntax . g$735$24736) (_ . g$735$24733) (... . g$735$24730) (with-syntax . g$735$24718) (quasisyntax . g$735$24717) (syntax . g$735$24699) (syntax-case . g$735$24698))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25411) (quote (rnrs files)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((delete-file . g$735$25342) (file-exists? . g$735$25341) (make-i/o-write-error . g$735$25259) (make-i/o-read-error . g$735$25258) (make-i/o-port-error . g$735$25257) (make-i/o-invalid-position-error . g$735$25256) (make-i/o-filename-error . g$735$25255) (make-i/o-file-protection-error . g$735$25254) (make-i/o-file-is-read-only-error . g$735$25253) (make-i/o-file-does-not-exist-error . g$735$25252) (make-i/o-file-already-exists-error . g$735$25251) (make-i/o-error . g$735$25250) (i/o-write-error? . g$735$25238) (i/o-read-error? . g$735$25237) (i/o-port-error? . g$735$25236) (i/o-invalid-position-error? . g$735$25235) (i/o-filename-error? . g$735$25234) (i/o-file-protection-error? . g$735$25233) (i/o-file-is-read-only-error? . g$735$25232) (i/o-file-does-not-exist-error? . g$735$25231) (i/o-file-already-exists-error? . g$735$25230) (i/o-error? . g$735$25229) (i/o-error-port . g$735$25228) (i/o-error-filename . g$735$25227) (&i/o-port . g$735$24780) (&i/o-file-does-not-exist . g$735$24779) (&i/o-file-already-exists . g$735$24778) (&i/o-file-is-read-only . g$735$24777) (&i/o-file-protection . g$735$24776) (&i/o-filename . g$735$24775) (&i/o-invalid-position . g$735$24774) (&i/o-write . g$735$24773) (&i/o-read . g$735$24772) (&i/o . g$735$24771))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25412) (quote (rnrs sorting)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((vector-sort! . g$735$25340) (vector-sort . g$735$25339) (list-sort . g$735$25338))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25413) (quote (rnrs base)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((zero? . g$735$24947) (vector? . g$735$24946) (vector-set! . g$735$24945) (vector-ref . g$735$24944) (vector-map . g$735$24943) (vector-length . g$735$24942) (vector-for-each . g$735$24941) (vector-fill! . g$735$24940) (vector->list . g$735$24939) (vector . g$735$24938) (values . g$735$24937) (truncate . g$735$24936) (tan . g$735$24935) (symbol? . g$735$24934) (symbol=? . g$735$24933) (symbol->string . g$735$24932) (substring . g$735$24931) (string? . g$735$24930) (string>? . g$735$24929) (string>=? . g$735$24928) (string=? . g$735$24927) (string<? . g$735$24926) (string<=? . g$735$24925) (string-ref . g$735$24924) (string-length . g$735$24923) (string-for-each . g$735$24922) (string-copy . g$735$24921) (string-append . g$735$24920) (string->symbol . g$735$24919) (string->number . g$735$24918) (string->list . g$735$24917) (string . g$735$24916) (sqrt . g$735$24915) (sin . g$735$24914) (round . g$735$24913) (reverse . g$735$24912) (real? . g$735$24911) (real-valued? . g$735$24910) (real-part . g$735$24909) (rationalize . g$735$24908) (rational? . g$735$24907) (rational-valued? . g$735$24906) (procedure? . g$735$24905) (positive? . g$735$24904) (pair? . g$735$24903) (odd? . g$735$24902) (numerator . g$735$24901) (number? . g$735$24900) (number->string . g$735$24899) (null? . g$735$24898) (not . g$735$24897) (negative? . g$735$24896) (nan? . g$735$24895) (min . g$735$24894) (max . g$735$24893) (map . g$735$24892) (make-vector . g$735$24891) (make-string . g$735$24890) (make-rectangular . g$735$24889) (make-polar . g$735$24888) (magnitude . g$735$24887) (log . g$735$24886) (list? . g$735$24885) (list-tail . g$735$24884) (list-ref . g$735$24883) (list->vector . g$735$24882) (list->string . g$735$24881) (list . g$735$24880) (length . g$735$24879) (lcm . g$735$24878) (integer? . g$735$24877) (integer-valued? . g$735$24876) (integer->char . g$735$24875) (infinite? . g$735$24874) (inexact? . g$735$24873) (inexact . g$735$24872) (imag-part . g$735$24871) (gcd . g$735$24870) (for-each . g$735$24869) (floor . g$735$24868) (finite? . g$735$24867) (expt . g$735$24866) (exp . g$735$24865) (exact? . g$735$24864) (exact-integer-sqrt . g$735$24863) (exact . g$735$24862) (even? . g$735$24861) (error . g$735$24860) (eqv? . g$735$24859) (equal? . g$735$24858) (eq? . g$735$24857) (dynamic-wind . g$735$24856) (div0-and-mod0 . g$735$24855) (mod0 . g$735$24854) (div0 . g$735$24853) (div-and-mod . g$735$24852) (mod . g$735$24851) (div . g$735$24850) (denominator . g$735$24849) (cos . g$735$24848) (cons . g$735$24847) (complex? . g$735$24846) (char? . g$735$24845) (char>? . g$735$24844) (char>=? . g$735$24843) (char=? . g$735$24842) (char<? . g$735$24841) (char<=? . g$735$24840) (char->integer . g$735$24839) (ceiling . g$735$24838) (call-with-values . g$735$24837) (call/cc . g$735$24836) (call-with-current-continuation . g$735$24835) (cddddr . g$735$24834) (cdddar . g$735$24833) (cddadr . g$735$24832) (cddaar . g$735$24831) (cdaddr . g$735$24830) (cdadar . g$735$24829) (cdaadr . g$735$24828) (cdaaar . g$735$24827) (cadddr . g$735$24826) (caddar . g$735$24825) (cadadr . g$735$24824) (cadaar . g$735$24823) (caaddr . g$735$24822) (caadar . g$735$24821) (caaadr . g$735$24820) (caaaar . g$735$24819) (cdddr . g$735$24818) (cddar . g$735$24817) (cdadr . g$735$24816) (cdaar . g$735$24815) (caddr . g$735$24814) (cadar . g$735$24813) (caadr . g$735$24812) (caaar . g$735$24811) (cddr . g$735$24810) (cdar . g$735$24809) (cadr . g$735$24808) (caar . g$735$24807) (cdr . g$735$24806) (car . g$735$24805) (boolean? . g$735$24804) (boolean=? . g$735$24803) (atan . g$735$24802) (assertion-violation . g$735$24801) (asin . g$735$24800) (apply . g$735$24799) (append . g$735$24798) (angle . g$735$24797) (acos . g$735$24796) (abs . g$735$24795) (/ . g$735$24794) (* . g$735$24793) (- . g$735$24792) (+ . g$735$24791) (>= . g$735$24790) (> . g$735$24789) (= . g$735$24788) (<= . g$735$24787) (< . g$735$24786) (let*-values . g$735$24785) (unquote-splicing . g$735$24735) (unquote . g$735$24734) (_ . g$735$24733) (else . g$735$24732) (=> . g$735$24731) (... . g$735$24730) (assert . g$735$24729) (or . g$735$24725) (and . g$735$24724) (cond . g$735$24722) (let* . g$735$24721) (let . g$735$24720) (identifier-syntax . g$735$24719) (quasiquote . g$735$24716) (syntax-rules . g$735$24715) (let-values . g$735$24710) (case . g$735$24709) (if . g$735$24705) (letrec* . g$735$24704) (letrec . g$735$24703) (lambda . g$735$24700) (quote . g$735$24697) (letrec-syntax . g$735$24695) (let-syntax . g$735$24694) (set! . g$735$24693) (begin . g$735$24691) (define-syntax . g$735$24689) (define . g$735$24688))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25414) (quote (rnrs lists)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((remove . g$735$25197) (remv . g$735$25196) (remp . g$735$25195) (remq . g$735$25194) (partition . g$735$25193) (memv . g$735$25192) (memq . g$735$25191) (memp . g$735$25190) (member . g$735$25189) (exists . g$735$25188) (for-all . g$735$25187) (fold-right . g$735$25186) (fold-left . g$735$25185) (find . g$735$25184) (filter . g$735$25183) (cons* . g$735$25182) (assv . g$735$25181) (assq . g$735$25180) (assp . g$735$25179) (assoc . g$735$25178))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25415) (quote (rnrs io simple)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((call-with-output-file . g$735$25316) (call-with-input-file . g$735$25315) (write-char . g$735$25314) (write . g$735$25313) (with-output-to-file . g$735$25312) (with-input-from-file . g$735$25311) (read-char . g$735$25310) (read . g$735$25309) (peek-char . g$735$25308) (open-output-file . g$735$25307) (open-input-file . g$735$25306) (newline . g$735$25305) (display . g$735$25304) (close-output-port . g$735$25303) (close-input-port . g$735$25302) (eof-object? . g$735$25301) (eof-object . g$735$25300) (current-error-port . g$735$25299) (current-output-port . g$735$25298) (current-input-port . g$735$25297) (output-port? . g$735$25296) (input-port? . g$735$25295) (make-i/o-write-error . g$735$25259) (make-i/o-read-error . g$735$25258) (make-i/o-port-error . g$735$25257) (make-i/o-invalid-position-error . g$735$25256) (make-i/o-filename-error . g$735$25255) (make-i/o-file-protection-error . g$735$25254) (make-i/o-file-is-read-only-error . g$735$25253) (make-i/o-file-does-not-exist-error . g$735$25252) (make-i/o-file-already-exists-error . g$735$25251) (make-i/o-error . g$735$25250) (i/o-write-error? . g$735$25238) (i/o-read-error? . g$735$25237) (i/o-port-error? . g$735$25236) (i/o-invalid-position-error? . g$735$25235) (i/o-filename-error? . g$735$25234) (i/o-file-protection-error? . g$735$25233) (i/o-file-is-read-only-error? . g$735$25232) (i/o-file-does-not-exist-error? . g$735$25231) (i/o-file-already-exists-error? . g$735$25230) (i/o-error? . g$735$25229) (i/o-error-port . g$735$25228) (i/o-error-filename . g$735$25227) (&i/o-port . g$735$24780) (&i/o-file-does-not-exist . g$735$24779) (&i/o-file-already-exists . g$735$24778) (&i/o-file-is-read-only . g$735$24777) (&i/o-file-protection . g$735$24776) (&i/o-filename . g$735$24775) (&i/o-invalid-position . g$735$24774) (&i/o-write . g$735$24773) (&i/o-read . g$735$24772) (&i/o . g$735$24771))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25416) (quote (rnrs bytevectors)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((make-bytevector . g$735$25241) (utf32->string . g$735$25116) (utf16->string . g$735$25115) (utf8->string . g$735$25114) (uint-list->bytevector . g$735$25113) (u8-list->bytevector . g$735$25112) (string->utf8 . g$735$25111) (string->utf32 . g$735$25110) (string->utf16 . g$735$25109) (sint-list->bytevector . g$735$25108) (native-endianness . g$735$25107) (bytevector? . g$735$25106) (bytevector=? . g$735$25105) (bytevector-uint-set! . g$735$25104) (bytevector-uint-ref . g$735$25103) (bytevector-u8-set! . g$735$25102) (bytevector-u8-ref . g$735$25101) (bytevector-u64-set! . g$735$25100) (bytevector-u64-ref . g$735$25099) (bytevector-u64-native-set! . g$735$25098) (bytevector-u64-native-ref . g$735$25097) (bytevector-u32-set! . g$735$25096) (bytevector-u32-ref . g$735$25095) (bytevector-u32-native-set! . g$735$25094) (bytevector-u32-native-ref . g$735$25093) (bytevector-u16-set! . g$735$25092) (bytevector-u16-ref . g$735$25091) (bytevector-u16-native-set! . g$735$25090) (bytevector-u16-native-ref . g$735$25089) (bytevector-sint-set! . g$735$25088) (bytevector-sint-ref . g$735$25087) (bytevector-s8-set! . g$735$25086) (bytevector-s8-ref . g$735$25085) (bytevector-s64-set! . g$735$25084) (bytevector-s64-ref . g$735$25083) (bytevector-s64-native-set! . g$735$25082) (bytevector-s64-native-ref . g$735$25081) (bytevector-s32-set! . g$735$25080) (bytevector-s32-ref . g$735$25079) (bytevector-s32-native-set! . g$735$25078) (bytevector-s32-native-ref . g$735$25077) (bytevector-s16-set! . g$735$25076) (bytevector-s16-ref . g$735$25075) (bytevector-s16-native-set! . g$735$25074) (bytevector-s16-native-ref . g$735$25073) (bytevector-length . g$735$25072) (bytevector-ieee-single-ref . g$735$25071) (bytevector-ieee-single-native-set! . g$735$25070) (bytevector-ieee-single-native-ref . g$735$25069) (bytevector-ieee-double-ref . g$735$25068) (bytevector-ieee-double-native-set! . g$735$25067) (bytevector-ieee-double-native-ref . g$735$25066) (bytevector-fill! . g$735$25065) (bytevector-copy! . g$735$25064) (bytevector-copy . g$735$25063) (bytevector->uint-list . g$735$25062) (bytevector->u8-list . g$735$25061) (bytevector->sint-list . g$735$25060) (endianness . g$735$24728))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25417) (quote (rnrs unicode)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$735$25388) (string-titlecase . g$735$25387) (string-normalize-nfkd . g$735$25386) (string-normalize-nfkc . g$735$25385) (string-normalize-nfd . g$735$25384) (string-normalize-nfc . g$735$25383) (string-foldcase . g$735$25382) (string-downcase . g$735$25381) (string-ci>? . g$735$25380) (string-ci>=? . g$735$25379) (string-ci=? . g$735$25378) (string-ci<? . g$735$25377) (string-ci<=? . g$735$25376) (char-whitespace? . g$735$25375) (char-upper-case? . g$735$25374) (char-title-case? . g$735$25373) (char-numeric? . g$735$25372) (char-lower-case? . g$735$25371) (char-general-category . g$735$25370) (char-upcase . g$735$25369) (char-titlecase . g$735$25368) (char-foldcase . g$735$25367) (char-downcase . g$735$25366) (char-ci>? . g$735$25365) (char-ci>=? . g$735$25364) (char-ci=? . g$735$25363) (char-ci<? . g$735$25362) (char-ci<=? . g$735$25361) (char-alphabetic? . g$735$25360))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25418) (quote (rnrs exceptions)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((with-exception-handler . g$735$25171) (raise-continuable . g$735$25170) (raise . g$735$25169) (guard . g$735$24740) (else . g$735$24732) (=> . g$735$24731))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25419) (quote (rnrs arithmetic bitwise)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((bitwise-rotate-bit-field . g$735$24964) (bitwise-reverse-bit-field . g$735$24963) (bitwise-length . g$735$24962) (bitwise-if . g$735$24961) (bitwise-first-bit-set . g$735$24960) (bitwise-copy-bit-field . g$735$24959) (bitwise-copy-bit . g$735$24958) (bitwise-bit-set? . g$735$24957) (bitwise-bit-field . g$735$24956) (bitwise-bit-count . g$735$24955) (bitwise-xor . g$735$24954) (bitwise-ior . g$735$24953) (bitwise-and . g$735$24952) (bitwise-not . g$735$24951) (bitwise-arithmetic-shift-right . g$735$24950) (bitwise-arithmetic-shift-left . g$735$24949) (bitwise-arithmetic-shift . g$735$24948))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25420) (quote (rnrs arithmetic fixnums)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((fxzero? . g$735$25009) (fxxor . g$735$25008) (fxrotate-bit-field . g$735$25007) (fxreverse-bit-field . g$735$25006) (fxpositive? . g$735$25005) (fxodd? . g$735$25004) (fxnot . g$735$25003) (fxnegative? . g$735$25002) (fxmod0 . g$735$25001) (fxmod . g$735$25000) (fxmin . g$735$24999) (fxmax . g$735$24998) (fxlength . g$735$24997) (fxior . g$735$24996) (fxif . g$735$24995) (fxfirst-bit-set . g$735$24994) (fxeven? . g$735$24993) (fxdiv0-and-mod0 . g$735$24992) (fxdiv0 . g$735$24991) (fxdiv-and-mod . g$735$24990) (fxdiv . g$735$24989) (fxcopy-bit-field . g$735$24988) (fxcopy-bit . g$735$24987) (fxbit-set? . g$735$24986) (fxbit-field . g$735$24985) (fxbit-count . g$735$24984) (fxarithmetic-shift-right . g$735$24983) (fxarithmetic-shift-left . g$735$24982) (fxarithmetic-shift . g$735$24981) (fxand . g$735$24980) (fx>? . g$735$24979) (fx>=? . g$735$24978) (fx=? . g$735$24977) (fx<? . g$735$24976) (fx<=? . g$735$24975) (fx-/carry . g$735$24974) (fx- . g$735$24973) (fx+/carry . g$735$24972) (fx+ . g$735$24971) (fx*/carry . g$735$24970) (fx* . g$735$24969) (greatest-fixnum . g$735$24968) (least-fixnum . g$735$24967) (fixnum-width . g$735$24966) (fixnum? . g$735$24965))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25421) (quote (rnrs arithmetic flonums)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((no-nans-violation? . g$735$25059) (no-infinities-violation? . g$735$25058) (make-no-nans-violation . g$735$25057) (make-no-infinities-violation . g$735$25056) (real->flonum . g$735$25055) (flzero? . g$735$25054) (fltruncate . g$735$25053) (fltan . g$735$25052) (flsqrt . g$735$25051) (flsin . g$735$25050) (flround . g$735$25049) (flpositive? . g$735$25048) (flonum? . g$735$25047) (flodd? . g$735$25046) (flnumerator . g$735$25045) (flnegative? . g$735$25044) (flnan? . g$735$25043) (flmod0 . g$735$25042) (flmod . g$735$25041) (flmin . g$735$25040) (flmax . g$735$25039) (fllog . g$735$25038) (flinteger? . g$735$25037) (flinfinite? . g$735$25036) (flfloor . g$735$25035) (flfinite? . g$735$25034) (flexpt . g$735$25033) (flexp . g$735$25032) (fleven? . g$735$25031) (fldiv0-and-mod0 . g$735$25030) (fldiv0 . g$735$25029) (fldiv-and-mod . g$735$25028) (fldiv . g$735$25027) (fldenominator . g$735$25026) (flcos . g$735$25025) (flceiling . g$735$25024) (flatan . g$735$25023) (flasin . g$735$25022) (flacos . g$735$25021) (flabs . g$735$25020) (fl>? . g$735$25019) (fl>=? . g$735$25018) (fl=? . g$735$25017) (fl<? . g$735$25016) (fl<=? . g$735$25015) (fl/ . g$735$25014) (fl- . g$735$25013) (fl+ . g$735$25012) (fl* . g$735$25011) (fixnum->flonum . g$735$25010) (&no-nans . g$735$24784) (&no-infinities . g$735$24783))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25422) (quote (rnrs hashtables)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((symbol-hash . g$735$25337) (string-ci-hash . g$735$25336) (string-hash . g$735$25335) (equal-hash . g$735$25334) (hashtable-equivalence-function . g$735$25333) (make-hashtable . g$735$25332) (hashtable-hash-function . g$735$25331) (make-eqv-hashtable . g$735$25330) (make-eq-hashtable . g$735$25329) (hashtable? . g$735$25328) (hashtable-update! . g$735$25327) (hashtable-size . g$735$25326) (hashtable-set! . g$735$25325) (hashtable-ref . g$735$25324) (hashtable-mutable? . g$735$25323) (hashtable-keys . g$735$25322) (hashtable-entries . g$735$25321) (hashtable-delete! . g$735$25320) (hashtable-copy . g$735$25319) (hashtable-contains? . g$735$25318) (hashtable-clear! . g$735$25317))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25423) (quote (rnrs io ports)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((eof-object? . g$735$25301) (eof-object . g$735$25300) (current-error-port . g$735$25299) (current-output-port . g$735$25298) (current-input-port . g$735$25297) (output-port? . g$735$25296) (input-port? . g$735$25295) (utf-8-codec . g$735$25294) (utf-16-codec . g$735$25293) (transcoder-error-handling-mode . g$735$25292) (transcoder-eol-style . g$735$25291) (transcoder-codec . g$735$25290) (transcoded-port . g$735$25289) (textual-port? . g$735$25288) (string->bytevector . g$735$25287) (standard-output-port . g$735$25286) (standard-input-port . g$735$25285) (standard-error-port . g$735$25284) (set-port-position! . g$735$25283) (put-u8 . g$735$25282) (put-string . g$735$25281) (put-datum . g$735$25280) (put-char . g$735$25279) (put-bytevector . g$735$25278) (port? . g$735$25277) (port-transcoder . g$735$25276) (port-position . g$735$25275) (port-has-set-port-position!? . g$735$25274) (port-has-port-position? . g$735$25273) (port-eof? . g$735$25272) (output-port-buffer-mode . g$735$25271) (open-string-output-port . g$735$25270) (open-string-input-port . g$735$25269) (open-file-output-port . g$735$25268) (open-file-input/output-port . g$735$25267) (open-file-input-port . g$735$25266) (open-bytevector-output-port . g$735$25265) (open-bytevector-input-port . g$735$25264) (native-transcoder . g$735$25263) (native-eol-style . g$735$25262) (make-transcoder . g$735$25261) (latin-1-codec . g$735$25260) (make-i/o-write-error . g$735$25259) (make-i/o-read-error . g$735$25258) (make-i/o-port-error . g$735$25257) (make-i/o-invalid-position-error . g$735$25256) (make-i/o-filename-error . g$735$25255) (make-i/o-file-protection-error . g$735$25254) (make-i/o-file-is-read-only-error . g$735$25253) (make-i/o-file-does-not-exist-error . g$735$25252) (make-i/o-file-already-exists-error . g$735$25251) (make-i/o-error . g$735$25250) (make-i/o-encoding-error . g$735$25249) (make-i/o-decoding-error . g$735$25248) (make-custom-textual-output-port . g$735$25247) (make-custom-textual-input/output-port . g$735$25246) (make-custom-textual-input-port . g$735$25245) (make-custom-binary-output-port . g$735$25244) (make-custom-binary-input/output-port . g$735$25243) (make-custom-binary-input-port . g$735$25242) (lookahead-u8 . g$735$25240) (lookahead-char . g$735$25239) (i/o-write-error? . g$735$25238) (i/o-read-error? . g$735$25237) (i/o-port-error? . g$735$25236) (i/o-invalid-position-error? . g$735$25235) (i/o-filename-error? . g$735$25234) (i/o-file-protection-error? . g$735$25233) (i/o-file-is-read-only-error? . g$735$25232) (i/o-file-does-not-exist-error? . g$735$25231) (i/o-file-already-exists-error? . g$735$25230) (i/o-error? . g$735$25229) (i/o-error-port . g$735$25228) (i/o-error-filename . g$735$25227) (i/o-encoding-error? . g$735$25226) (i/o-encoding-error-char . g$735$25225) (i/o-decoding-error? . g$735$25224) (get-u8 . g$735$25223) (get-string-n! . g$735$25222) (get-string-n . g$735$25221) (get-string-all . g$735$25220) (get-line . g$735$25219) (get-datum . g$735$25218) (get-char . g$735$25217) (get-bytevector-some . g$735$25216) (get-bytevector-n! . g$735$25215) (get-bytevector-n . g$735$25214) (get-bytevector-all . g$735$25213) (flush-output-port . g$735$25212) (close-port . g$735$25211) (call-with-string-output-port . g$735$25177) (call-with-port . g$735$25176) (call-with-bytevector-output-port . g$735$25175) (bytevector->string . g$735$25174) (buffer-mode? . g$735$25173) (binary-port? . g$735$25172) (&i/o-encoding . g$735$24782) (&i/o-decoding . g$735$24781) (&i/o-port . g$735$24780) (&i/o-file-does-not-exist . g$735$24779) (&i/o-file-already-exists . g$735$24778) (&i/o-file-is-read-only . g$735$24777) (&i/o-file-protection . g$735$24776) (&i/o-filename . g$735$24775) (&i/o-invalid-position . g$735$24774) (&i/o-write . g$735$24773) (&i/o-read . g$735$24772) (&i/o . g$735$24771) (error-handling-mode . g$735$24744) (file-options . g$735$24743) (buffer-mode . g$735$24742) (eol-style . g$735$24741))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25424) (quote (rnrs enums)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((make-enumeration . g$735$25168) (enum-set=? . g$735$25167) (enum-set-universe . g$735$25166) (enum-set-union . g$735$25165) (enum-set-subset? . g$735$25164) (enum-set-projection . g$735$25163) (enum-set-member? . g$735$25162) (enum-set-intersection . g$735$25161) (enum-set-indexer . g$735$25160) (enum-set-difference . g$735$25159) (enum-set-constructor . g$735$25158) (enum-set-complement . g$735$25157) (enum-set->list . g$735$25156) (define-enumeration . g$735$24755))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25425) (quote (rnrs conditions)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((who-condition? . g$735$25155) (warning? . g$735$25154) (violation? . g$735$25153) (undefined-violation? . g$735$25152) (syntax-violation? . g$735$25151) (syntax-violation-subform . g$735$25150) (syntax-violation-form . g$735$25149) (syntax-violation . g$735$25148) (simple-conditions . g$735$25147) (serious-condition? . g$735$25146) (non-continuable-violation? . g$735$25145) (&non-continuable . g$735$25144) (message-condition? . g$735$25143) (make-who-condition . g$735$25142) (make-warning . g$735$25141) (make-violation . g$735$25140) (make-undefined-violation . g$735$25139) (make-syntax-violation . g$735$25138) (make-serious-condition . g$735$25137) (make-non-continuable-violation . g$735$25136) (make-message-condition . g$735$25135) (make-lexical-violation . g$735$25134) (make-irritants-condition . g$735$25133) (make-implementation-restriction-violation . g$735$25132) (make-error . g$735$25131) (make-assertion-violation . g$735$25130) (lexical-violation? . g$735$25129) (irritants-condition? . g$735$25128) (implementation-restriction-violation? . g$735$25127) (&implementation-restriction . g$735$25126) (error? . g$735$25125) (condition-who . g$735$25124) (condition-predicate . g$735$25123) (condition-message . g$735$25122) (condition-irritants . g$735$25121) (condition-accessor . g$735$25120) (condition . g$735$25119) (assertion-violation? . g$735$25118) (condition? . g$735$25117) (&undefined . g$735$24770) (&syntax . g$735$24769) (&lexical . g$735$24768) (&who . g$735$24765) (&irritants . g$735$24764) (&assertion . g$735$24763) (&violation . g$735$24762) (&error . g$735$24761) (&serious . g$735$24760) (&warning . g$735$24759) (&message . g$735$24758) (&condition . g$735$24757) (define-condition-type . g$735$24756))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25426) (quote (rnrs records inspection)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((record? . g$735$25352) (record-type-uid . g$735$25351) (record-type-sealed? . g$735$25350) (record-type-parent . g$735$25349) (record-type-opaque? . g$735$25348) (record-type-name . g$735$25347) (record-type-generative? . g$735$25346) (record-type-field-names . g$735$25345) (record-rtd . g$735$25344) (record-field-mutable? . g$735$25343))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25427) (quote (rnrs records procedural)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((record-type-descriptor? . g$735$25359) (record-predicate . g$735$25358) (record-mutator . g$735$25357) (record-constructor . g$735$25356) (record-accessor . g$735$25355) (make-record-type-descriptor . g$735$25354) (make-record-constructor-descriptor . g$735$25353))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25428) (quote (rnrs records syntactic)) (quote (6)) (quote ()) (quote ()) (quote ()) (quote ((define-record-type . g$735$24754) (parent-rtd . g$735$24753) (nongenerative . g$735$24752) (opaque . g$735$24751) (sealed . g$735$24750) (protocol . g$735$24749) (parent . g$735$24748) (immutable . g$735$24747) (mutable . g$735$24746) (fields . g$735$24745) (record-constructor-descriptor . g$735$24712) (record-type-descriptor . g$735$24711))) (quote ()) values values (quote #t)) (install-library$735$13887 (quote g$735$25429) (quote (psyntax system $all)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((syntax-error . g$735$14998) (syntax-dispatch . g$735$14865) (pretty-print . g$735$25397) (eval-core . g$735$25396) (set-symbol-value! . g$735$25395) (symbol-value . g$735$25394) (gensym . g$735$25393) (void . g$735$25392) (load . g$735$25391) (interaction-environment . g$735$25390) (char-ready? . g$735$25389) (string-upcase . g$735$25388) (string-titlecase . g$735$25387) (string-normalize-nfkd . g$735$25386) (string-normalize-nfkc . g$735$25385) (string-normalize-nfd . g$735$25384) (string-normalize-nfc . g$735$25383) (string-foldcase . g$735$25382) (string-downcase . g$735$25381) (string-ci>? . g$735$25380) (string-ci>=? . g$735$25379) (string-ci=? . g$735$25378) (string-ci<? . g$735$25377) (string-ci<=? . g$735$25376) (char-whitespace? . g$735$25375) (char-upper-case? . g$735$25374) (char-title-case? . g$735$25373) (char-numeric? . g$735$25372) (char-lower-case? . g$735$25371) (char-general-category . g$735$25370) (char-upcase . g$735$25369) (char-titlecase . g$735$25368) (char-foldcase . g$735$25367) (char-downcase . g$735$25366) (char-ci>? . g$735$25365) (char-ci>=? . g$735$25364) (char-ci=? . g$735$25363) (char-ci<? . g$735$25362) (char-ci<=? . g$735$25361) (char-alphabetic? . g$735$25360) (make-variable-transformer . g$735$14407) (identifier? . g$735$15000) (generate-temporaries . g$735$14992) (free-identifier=? . g$735$14994) (syntax->datum . g$735$15004) (datum->syntax . g$735$15002) (bound-identifier=? . g$735$14996) (record-type-descriptor? . g$735$25359) (record-predicate . g$735$25358) (record-mutator . g$735$25357) (record-constructor . g$735$25356) (record-accessor . g$735$25355) (make-record-type-descriptor . g$735$25354) (make-record-constructor-descriptor . g$735$25353) (record? . g$735$25352) (record-type-uid . g$735$25351) (record-type-sealed? . g$735$25350) (record-type-parent . g$735$25349) (record-type-opaque? . g$735$25348) (record-type-name . g$735$25347) (record-type-generative? . g$735$25346) (record-type-field-names . g$735$25345) (record-rtd . g$735$25344) (record-field-mutable? . g$735$25343) (delete-file . g$735$25342) (file-exists? . g$735$25341) (vector-sort! . g$735$25340) (vector-sort . g$735$25339) (list-sort . g$735$25338) (symbol-hash . g$735$25337) (string-ci-hash . g$735$25336) (string-hash . g$735$25335) (equal-hash . g$735$25334) (hashtable-equivalence-function . g$735$25333) (make-hashtable . g$735$25332) (hashtable-hash-function . g$735$25331) (make-eqv-hashtable . g$735$25330) (make-eq-hashtable . g$735$25329) (hashtable? . g$735$25328) (hashtable-update! . g$735$25327) (hashtable-size . g$735$25326) (hashtable-set! . g$735$25325) (hashtable-ref . g$735$25324) (hashtable-mutable? . g$735$25323) (hashtable-keys . g$735$25322) (hashtable-entries . g$735$25321) (hashtable-delete! . g$735$25320) (hashtable-copy . g$735$25319) (hashtable-contains? . g$735$25318) (hashtable-clear! . g$735$25317) (call-with-output-file . g$735$25316) (call-with-input-file . g$735$25315) (write-char . g$735$25314) (write . g$735$25313) (with-output-to-file . g$735$25312) (with-input-from-file . g$735$25311) (read-char . g$735$25310) (read . g$735$25309) (peek-char . g$735$25308) (open-output-file . g$735$25307) (open-input-file . g$735$25306) (newline . g$735$25305) (display . g$735$25304) (close-output-port . g$735$25303) (close-input-port . g$735$25302) (eof-object? . g$735$25301) (eof-object . g$735$25300) (current-error-port . g$735$25299) (current-output-port . g$735$25298) (current-input-port . g$735$25297) (output-port? . g$735$25296) (input-port? . g$735$25295) (utf-8-codec . g$735$25294) (utf-16-codec . g$735$25293) (transcoder-error-handling-mode . g$735$25292) (transcoder-eol-style . g$735$25291) (transcoder-codec . g$735$25290) (transcoded-port . g$735$25289) (textual-port? . g$735$25288) (string->bytevector . g$735$25287) (standard-output-port . g$735$25286) (standard-input-port . g$735$25285) (standard-error-port . g$735$25284) (set-port-position! . g$735$25283) (put-u8 . g$735$25282) (put-string . g$735$25281) (put-datum . g$735$25280) (put-char . g$735$25279) (put-bytevector . g$735$25278) (port? . g$735$25277) (port-transcoder . g$735$25276) (port-position . g$735$25275) (port-has-set-port-position!? . g$735$25274) (port-has-port-position? . g$735$25273) (port-eof? . g$735$25272) (output-port-buffer-mode . g$735$25271) (open-string-output-port . g$735$25270) (open-string-input-port . g$735$25269) (open-file-output-port . g$735$25268) (open-file-input/output-port . g$735$25267) (open-file-input-port . g$735$25266) (open-bytevector-output-port . g$735$25265) (open-bytevector-input-port . g$735$25264) (native-transcoder . g$735$25263) (native-eol-style . g$735$25262) (make-transcoder . g$735$25261) (latin-1-codec . g$735$25260) (make-i/o-write-error . g$735$25259) (make-i/o-read-error . g$735$25258) (make-i/o-port-error . g$735$25257) (make-i/o-invalid-position-error . g$735$25256) (make-i/o-filename-error . g$735$25255) (make-i/o-file-protection-error . g$735$25254) (make-i/o-file-is-read-only-error . g$735$25253) (make-i/o-file-does-not-exist-error . g$735$25252) (make-i/o-file-already-exists-error . g$735$25251) (make-i/o-error . g$735$25250) (make-i/o-encoding-error . g$735$25249) (make-i/o-decoding-error . g$735$25248) (make-custom-textual-output-port . g$735$25247) (make-custom-textual-input/output-port . g$735$25246) (make-custom-textual-input-port . g$735$25245) (make-custom-binary-output-port . g$735$25244) (make-custom-binary-input/output-port . g$735$25243) (make-custom-binary-input-port . g$735$25242) (make-bytevector . g$735$25241) (lookahead-u8 . g$735$25240) (lookahead-char . g$735$25239) (i/o-write-error? . g$735$25238) (i/o-read-error? . g$735$25237) (i/o-port-error? . g$735$25236) (i/o-invalid-position-error? . g$735$25235) (i/o-filename-error? . g$735$25234) (i/o-file-protection-error? . g$735$25233) (i/o-file-is-read-only-error? . g$735$25232) (i/o-file-does-not-exist-error? . g$735$25231) (i/o-file-already-exists-error? . g$735$25230) (i/o-error? . g$735$25229) (i/o-error-port . g$735$25228) (i/o-error-filename . g$735$25227) (i/o-encoding-error? . g$735$25226) (i/o-encoding-error-char . g$735$25225) (i/o-decoding-error? . g$735$25224) (get-u8 . g$735$25223) (get-string-n! . g$735$25222) (get-string-n . g$735$25221) (get-string-all . g$735$25220) (get-line . g$735$25219) (get-datum . g$735$25218) (get-char . g$735$25217) (get-bytevector-some . g$735$25216) (get-bytevector-n! . g$735$25215) (get-bytevector-n . g$735$25214) (get-bytevector-all . g$735$25213) (flush-output-port . g$735$25212) (close-port . g$735$25211) (scheme-report-environment . g$735$25210) (quotient . g$735$25209) (null-environment . g$735$14972) (remainder . g$735$25208) (modulo . g$735$25207) (inexact->exact . g$735$25206) (force . g$735$25205) (exact->inexact . g$735$25204) (exit . g$735$25203) (command-line . g$735$25202) (string-fill! . g$735$25201) (string-set! . g$735$25200) (set-cdr! . g$735$25199) (set-car! . g$735$25198) (remove . g$735$25197) (remv . g$735$25196) (remp . g$735$25195) (remq . g$735$25194) (partition . g$735$25193) (memv . g$735$25192) (memq . g$735$25191) (memp . g$735$25190) (member . g$735$25189) (exists . g$735$25188) (for-all . g$735$25187) (fold-right . g$735$25186) (fold-left . g$735$25185) (find . g$735$25184) (filter . g$735$25183) (cons* . g$735$25182) (assv . g$735$25181) (assq . g$735$25180) (assp . g$735$25179) (assoc . g$735$25178) (call-with-string-output-port . g$735$25177) (call-with-port . g$735$25176) (call-with-bytevector-output-port . g$735$25175) (bytevector->string . g$735$25174) (buffer-mode? . g$735$25173) (binary-port? . g$735$25172) (with-exception-handler . g$735$25171) (raise-continuable . g$735$25170) (raise . g$735$25169) (eval . g$735$14978) (environment . g$735$14970) (make-enumeration . g$735$25168) (enum-set=? . g$735$25167) (enum-set-universe . g$735$25166) (enum-set-union . g$735$25165) (enum-set-subset? . g$735$25164) (enum-set-projection . g$735$25163) (enum-set-member? . g$735$25162) (enum-set-intersection . g$735$25161) (enum-set-indexer . g$735$25160) (enum-set-difference . g$735$25159) (enum-set-constructor . g$735$25158) (enum-set-complement . g$735$25157) (enum-set->list . g$735$25156) (who-condition? . g$735$25155) (warning? . g$735$25154) (violation? . g$735$25153) (undefined-violation? . g$735$25152) (syntax-violation? . g$735$25151) (syntax-violation-subform . g$735$25150) (syntax-violation-form . g$735$25149) (syntax-violation . g$735$25148) (simple-conditions . g$735$25147) (serious-condition? . g$735$25146) (non-continuable-violation? . g$735$25145) (&non-continuable . g$735$25144) (message-condition? . g$735$25143) (make-who-condition . g$735$25142) (make-warning . g$735$25141) (make-violation . g$735$25140) (make-undefined-violation . g$735$25139) (make-syntax-violation . g$735$25138) (make-serious-condition . g$735$25137) (make-non-continuable-violation . g$735$25136) (make-message-condition . g$735$25135) (make-lexical-violation . g$735$25134) (make-irritants-condition . g$735$25133) (make-implementation-restriction-violation . g$735$25132) (make-error . g$735$25131) (make-assertion-violation . g$735$25130) (lexical-violation? . g$735$25129) (irritants-condition? . g$735$25128) (implementation-restriction-violation? . g$735$25127) (&implementation-restriction . g$735$25126) (error? . g$735$25125) (condition-who . g$735$25124) (condition-predicate . g$735$25123) (condition-message . g$735$25122) (condition-irritants . g$735$25121) (condition-accessor . g$735$25120) (condition . g$735$25119) (assertion-violation? . g$735$25118) (condition? . g$735$25117) (utf32->string . g$735$25116) (utf16->string . g$735$25115) (utf8->string . g$735$25114) (uint-list->bytevector . g$735$25113) (u8-list->bytevector . g$735$25112) (string->utf8 . g$735$25111) (string->utf32 . g$735$25110) (string->utf16 . g$735$25109) (sint-list->bytevector . g$735$25108) (native-endianness . g$735$25107) (bytevector? . g$735$25106) (bytevector=? . g$735$25105) (bytevector-uint-set! . g$735$25104) (bytevector-uint-ref . g$735$25103) (bytevector-u8-set! . g$735$25102) (bytevector-u8-ref . g$735$25101) (bytevector-u64-set! . g$735$25100) (bytevector-u64-ref . g$735$25099) (bytevector-u64-native-set! . g$735$25098) (bytevector-u64-native-ref . g$735$25097) (bytevector-u32-set! . g$735$25096) (bytevector-u32-ref . g$735$25095) (bytevector-u32-native-set! . g$735$25094) (bytevector-u32-native-ref . g$735$25093) (bytevector-u16-set! . g$735$25092) (bytevector-u16-ref . g$735$25091) (bytevector-u16-native-set! . g$735$25090) (bytevector-u16-native-ref . g$735$25089) (bytevector-sint-set! . g$735$25088) (bytevector-sint-ref . g$735$25087) (bytevector-s8-set! . g$735$25086) (bytevector-s8-ref . g$735$25085) (bytevector-s64-set! . g$735$25084) (bytevector-s64-ref . g$735$25083) (bytevector-s64-native-set! . g$735$25082) (bytevector-s64-native-ref . g$735$25081) (bytevector-s32-set! . g$735$25080) (bytevector-s32-ref . g$735$25079) (bytevector-s32-native-set! . g$735$25078) (bytevector-s32-native-ref . g$735$25077) (bytevector-s16-set! . g$735$25076) (bytevector-s16-ref . g$735$25075) (bytevector-s16-native-set! . g$735$25074) (bytevector-s16-native-ref . g$735$25073) (bytevector-length . g$735$25072) (bytevector-ieee-single-ref . g$735$25071) (bytevector-ieee-single-native-set! . g$735$25070) (bytevector-ieee-single-native-ref . g$735$25069) (bytevector-ieee-double-ref . g$735$25068) (bytevector-ieee-double-native-set! . g$735$25067) (bytevector-ieee-double-native-ref . g$735$25066) (bytevector-fill! . g$735$25065) (bytevector-copy! . g$735$25064) (bytevector-copy . g$735$25063) (bytevector->uint-list . g$735$25062) (bytevector->u8-list . g$735$25061) (bytevector->sint-list . g$735$25060) (no-nans-violation? . g$735$25059) (no-infinities-violation? . g$735$25058) (make-no-nans-violation . g$735$25057) (make-no-infinities-violation . g$735$25056) (real->flonum . g$735$25055) (flzero? . g$735$25054) (fltruncate . g$735$25053) (fltan . g$735$25052) (flsqrt . g$735$25051) (flsin . g$735$25050) (flround . g$735$25049) (flpositive? . g$735$25048) (flonum? . g$735$25047) (flodd? . g$735$25046) (flnumerator . g$735$25045) (flnegative? . g$735$25044) (flnan? . g$735$25043) (flmod0 . g$735$25042) (flmod . g$735$25041) (flmin . g$735$25040) (flmax . g$735$25039) (fllog . g$735$25038) (flinteger? . g$735$25037) (flinfinite? . g$735$25036) (flfloor . g$735$25035) (flfinite? . g$735$25034) (flexpt . g$735$25033) (flexp . g$735$25032) (fleven? . g$735$25031) (fldiv0-and-mod0 . g$735$25030) (fldiv0 . g$735$25029) (fldiv-and-mod . g$735$25028) (fldiv . g$735$25027) (fldenominator . g$735$25026) (flcos . g$735$25025) (flceiling . g$735$25024) (flatan . g$735$25023) (flasin . g$735$25022) (flacos . g$735$25021) (flabs . g$735$25020) (fl>? . g$735$25019) (fl>=? . g$735$25018) (fl=? . g$735$25017) (fl<? . g$735$25016) (fl<=? . g$735$25015) (fl/ . g$735$25014) (fl- . g$735$25013) (fl+ . g$735$25012) (fl* . g$735$25011) (fixnum->flonum . g$735$25010) (fxzero? . g$735$25009) (fxxor . g$735$25008) (fxrotate-bit-field . g$735$25007) (fxreverse-bit-field . g$735$25006) (fxpositive? . g$735$25005) (fxodd? . g$735$25004) (fxnot . g$735$25003) (fxnegative? . g$735$25002) (fxmod0 . g$735$25001) (fxmod . g$735$25000) (fxmin . g$735$24999) (fxmax . g$735$24998) (fxlength . g$735$24997) (fxior . g$735$24996) (fxif . g$735$24995) (fxfirst-bit-set . g$735$24994) (fxeven? . g$735$24993) (fxdiv0-and-mod0 . g$735$24992) (fxdiv0 . g$735$24991) (fxdiv-and-mod . g$735$24990) (fxdiv . g$735$24989) (fxcopy-bit-field . g$735$24988) (fxcopy-bit . g$735$24987) (fxbit-set? . g$735$24986) (fxbit-field . g$735$24985) (fxbit-count . g$735$24984) (fxarithmetic-shift-right . g$735$24983) (fxarithmetic-shift-left . g$735$24982) (fxarithmetic-shift . g$735$24981) (fxand . g$735$24980) (fx>? . g$735$24979) (fx>=? . g$735$24978) (fx=? . g$735$24977) (fx<? . g$735$24976) (fx<=? . g$735$24975) (fx-/carry . g$735$24974) (fx- . g$735$24973) (fx+/carry . g$735$24972) (fx+ . g$735$24971) (fx*/carry . g$735$24970) (fx* . g$735$24969) (greatest-fixnum . g$735$24968) (least-fixnum . g$735$24967) (fixnum-width . g$735$24966) (fixnum? . g$735$24965) (bitwise-rotate-bit-field . g$735$24964) (bitwise-reverse-bit-field . g$735$24963) (bitwise-length . g$735$24962) (bitwise-if . g$735$24961) (bitwise-first-bit-set . g$735$24960) (bitwise-copy-bit-field . g$735$24959) (bitwise-copy-bit . g$735$24958) (bitwise-bit-set? . g$735$24957) (bitwise-bit-field . g$735$24956) (bitwise-bit-count . g$735$24955) (bitwise-xor . g$735$24954) (bitwise-ior . g$735$24953) (bitwise-and . g$735$24952) (bitwise-not . g$735$24951) (bitwise-arithmetic-shift-right . g$735$24950) (bitwise-arithmetic-shift-left . g$735$24949) (bitwise-arithmetic-shift . g$735$24948) (zero? . g$735$24947) (vector? . g$735$24946) (vector-set! . g$735$24945) (vector-ref . g$735$24944) (vector-map . g$735$24943) (vector-length . g$735$24942) (vector-for-each . g$735$24941) (vector-fill! . g$735$24940) (vector->list . g$735$24939) (vector . g$735$24938) (values . g$735$24937) (truncate . g$735$24936) (tan . g$735$24935) (symbol? . g$735$24934) (symbol=? . g$735$24933) (symbol->string . g$735$24932) (substring . g$735$24931) (string? . g$735$24930) (string>? . g$735$24929) (string>=? . g$735$24928) (string=? . g$735$24927) (string<? . g$735$24926) (string<=? . g$735$24925) (string-ref . g$735$24924) (string-length . g$735$24923) (string-for-each . g$735$24922) (string-copy . g$735$24921) (string-append . g$735$24920) (string->symbol . g$735$24919) (string->number . g$735$24918) (string->list . g$735$24917) (string . g$735$24916) (sqrt . g$735$24915) (sin . g$735$24914) (round . g$735$24913) (reverse . g$735$24912) (real? . g$735$24911) (real-valued? . g$735$24910) (real-part . g$735$24909) (rationalize . g$735$24908) (rational? . g$735$24907) (rational-valued? . g$735$24906) (procedure? . g$735$24905) (positive? . g$735$24904) (pair? . g$735$24903) (odd? . g$735$24902) (numerator . g$735$24901) (number? . g$735$24900) (number->string . g$735$24899) (null? . g$735$24898) (not . g$735$24897) (negative? . g$735$24896) (nan? . g$735$24895) (min . g$735$24894) (max . g$735$24893) (map . g$735$24892) (make-vector . g$735$24891) (make-string . g$735$24890) (make-rectangular . g$735$24889) (make-polar . g$735$24888) (magnitude . g$735$24887) (log . g$735$24886) (list? . g$735$24885) (list-tail . g$735$24884) (list-ref . g$735$24883) (list->vector . g$735$24882) (list->string . g$735$24881) (list . g$735$24880) (length . g$735$24879) (lcm . g$735$24878) (integer? . g$735$24877) (integer-valued? . g$735$24876) (integer->char . g$735$24875) (infinite? . g$735$24874) (inexact? . g$735$24873) (inexact . g$735$24872) (imag-part . g$735$24871) (gcd . g$735$24870) (for-each . g$735$24869) (floor . g$735$24868) (finite? . g$735$24867) (expt . g$735$24866) (exp . g$735$24865) (exact? . g$735$24864) (exact-integer-sqrt . g$735$24863) (exact . g$735$24862) (even? . g$735$24861) (error . g$735$24860) (eqv? . g$735$24859) (equal? . g$735$24858) (eq? . g$735$24857) (dynamic-wind . g$735$24856) (div0-and-mod0 . g$735$24855) (mod0 . g$735$24854) (div0 . g$735$24853) (div-and-mod . g$735$24852) (mod . g$735$24851) (div . g$735$24850) (denominator . g$735$24849) (cos . g$735$24848) (cons . g$735$24847) (complex? . g$735$24846) (char? . g$735$24845) (char>? . g$735$24844) (char>=? . g$735$24843) (char=? . g$735$24842) (char<? . g$735$24841) (char<=? . g$735$24840) (char->integer . g$735$24839) (ceiling . g$735$24838) (call-with-values . g$735$24837) (call/cc . g$735$24836) (call-with-current-continuation . g$735$24835) (cddddr . g$735$24834) (cdddar . g$735$24833) (cddadr . g$735$24832) (cddaar . g$735$24831) (cdaddr . g$735$24830) (cdadar . g$735$24829) (cdaadr . g$735$24828) (cdaaar . g$735$24827) (cadddr . g$735$24826) (caddar . g$735$24825) (cadadr . g$735$24824) (cadaar . g$735$24823) (caaddr . g$735$24822) (caadar . g$735$24821) (caaadr . g$735$24820) (caaaar . g$735$24819) (cdddr . g$735$24818) (cddar . g$735$24817) (cdadr . g$735$24816) (cdaar . g$735$24815) (caddr . g$735$24814) (cadar . g$735$24813) (caadr . g$735$24812) (caaar . g$735$24811) (cddr . g$735$24810) (cdar . g$735$24809) (cadr . g$735$24808) (caar . g$735$24807) (cdr . g$735$24806) (car . g$735$24805) (boolean? . g$735$24804) (boolean=? . g$735$24803) (atan . g$735$24802) (assertion-violation . g$735$24801) (asin . g$735$24800) (apply . g$735$24799) (append . g$735$24798) (angle . g$735$24797) (acos . g$735$24796) (abs . g$735$24795) (/ . g$735$24794) (* . g$735$24793) (- . g$735$24792) (+ . g$735$24791) (>= . g$735$24790) (> . g$735$24789) (= . g$735$24788) (<= . g$735$24787) (< . g$735$24786) (let*-values . g$735$24785) (&no-nans . g$735$24784) (&no-infinities . g$735$24783) (&i/o-encoding . g$735$24782) (&i/o-decoding . g$735$24781) (&i/o-port . g$735$24780) (&i/o-file-does-not-exist . g$735$24779) (&i/o-file-already-exists . g$735$24778) (&i/o-file-is-read-only . g$735$24777) (&i/o-file-protection . g$735$24776) (&i/o-filename . g$735$24775) (&i/o-invalid-position . g$735$24774) (&i/o-write . g$735$24773) (&i/o-read . g$735$24772) (&i/o . g$735$24771) (&undefined . g$735$24770) (&syntax . g$735$24769) (&lexical . g$735$24768) (&implementation . g$735$24767) (&non . g$735$24766) (&who . g$735$24765) (&irritants . g$735$24764) (&assertion . g$735$24763) (&violation . g$735$24762) (&error . g$735$24761) (&serious . g$735$24760) (&warning . g$735$24759) (&message . g$735$24758) (&condition . g$735$24757) (define-condition-type . g$735$24756) (define-enumeration . g$735$24755) (define-record-type . g$735$24754) (parent-rtd . g$735$24753) (nongenerative . g$735$24752) (opaque . g$735$24751) (sealed . g$735$24750) (protocol . g$735$24749) (parent . g$735$24748) (immutable . g$735$24747) (mutable . g$735$24746) (fields . g$735$24745) (error-handling-mode . g$735$24744) (file-options . g$735$24743) (buffer-mode . g$735$24742) (eol-style . g$735$24741) (guard . g$735$24740) (trace-define . g$735$24739) (trace-lambda . g$735$24738) (unsyntax-splicing . g$735$24737) (unsyntax . g$735$24736) (unquote-splicing . g$735$24735) (unquote . g$735$24734) (_ . g$735$24733) (else . g$735$24732) (=> . g$735$24731) (... . g$735$24730) (assert . g$735$24729) (endianness . g$735$24728) (delay . g$735$24727) (time . g$735$24726) (or . g$735$24725) (and . g$735$24724) (do . g$735$24723) (cond . g$735$24722) (let* . g$735$24721) (let . g$735$24720) (identifier-syntax . g$735$24719) (with-syntax . g$735$24718) (quasisyntax . g$735$24717) (quasiquote . g$735$24716) (syntax-rules . g$735$24715) (include . g$735$24714) (define-struct . g$735$24713) (record-constructor-descriptor . g$735$24712) (record-type-descriptor . g$735$24711) (let-values . g$735$24710) (case . g$735$24709) (parameterize . g$735$24708) (unless . g$735$24707) (when . g$735$24706) (if . g$735$24705) (letrec* . g$735$24704) (letrec . g$735$24703) (type-descriptor . g$735$24702) (case-lambda . g$735$24701) (lambda . g$735$24700) (syntax . g$735$24699) (syntax-case . g$735$24698) (quote . g$735$24697) (foreign-call . g$735$24696) (letrec-syntax . g$735$24695) (let-syntax . g$735$24694) (set! . g$735$24693) (import . g$735$24692) (begin . g$735$24691) (module . g$735$24690) (define-syntax . g$735$24689) (define . g$735$24688))) (quote ((g$735$14998 core-prim . syntax-error) (g$735$14865 core-prim . syntax-dispatch) (g$735$25397 core-prim . pretty-print) (g$735$25396 core-prim . eval-core) (g$735$25395 core-prim . set-symbol-value!) (g$735$25394 core-prim . symbol-value) (g$735$25393 core-prim . gensym) (g$735$25392 core-prim . void) (g$735$25391 core-prim . load) (g$735$25390 core-prim . interaction-environment) (g$735$25389 core-prim . char-ready?) (g$735$25388 core-prim . string-upcase) (g$735$25387 core-prim . string-titlecase) (g$735$25386 core-prim . string-normalize-nfkd) (g$735$25385 core-prim . string-normalize-nfkc) (g$735$25384 core-prim . string-normalize-nfd) (g$735$25383 core-prim . string-normalize-nfc) (g$735$25382 core-prim . string-foldcase) (g$735$25381 core-prim . string-downcase) (g$735$25380 core-prim . string-ci>?) (g$735$25379 core-prim . string-ci>=?) (g$735$25378 core-prim . string-ci=?) (g$735$25377 core-prim . string-ci<?) (g$735$25376 core-prim . string-ci<=?) (g$735$25375 core-prim . char-whitespace?) (g$735$25374 core-prim . char-upper-case?) (g$735$25373 core-prim . char-title-case?) (g$735$25372 core-prim . char-numeric?) (g$735$25371 core-prim . char-lower-case?) (g$735$25370 core-prim . char-general-category) (g$735$25369 core-prim . char-upcase) (g$735$25368 core-prim . char-titlecase) (g$735$25367 core-prim . char-foldcase) (g$735$25366 core-prim . char-downcase) (g$735$25365 core-prim . char-ci>?) (g$735$25364 core-prim . char-ci>=?) (g$735$25363 core-prim . char-ci=?) (g$735$25362 core-prim . char-ci<?) (g$735$25361 core-prim . char-ci<=?) (g$735$25360 core-prim . char-alphabetic?) (g$735$14407 core-prim . make-variable-transformer) (g$735$15000 core-prim . identifier?) (g$735$14992 core-prim . generate-temporaries) (g$735$14994 core-prim . free-identifier=?) (g$735$15004 core-prim . syntax->datum) (g$735$15002 core-prim . datum->syntax) (g$735$14996 core-prim . bound-identifier=?) (g$735$25359 core-prim . record-type-descriptor?) (g$735$25358 core-prim . record-predicate) (g$735$25357 core-prim . record-mutator) (g$735$25356 core-prim . record-constructor) (g$735$25355 core-prim . record-accessor) (g$735$25354 core-prim . make-record-type-descriptor) (g$735$25353 core-prim . make-record-constructor-descriptor) (g$735$25352 core-prim . record?) (g$735$25351 core-prim . record-type-uid) (g$735$25350 core-prim . record-type-sealed?) (g$735$25349 core-prim . record-type-parent) (g$735$25348 core-prim . record-type-opaque?) (g$735$25347 core-prim . record-type-name) (g$735$25346 core-prim . record-type-generative?) (g$735$25345 core-prim . record-type-field-names) (g$735$25344 core-prim . record-rtd) (g$735$25343 core-prim . record-field-mutable?) (g$735$25342 core-prim . delete-file) (g$735$25341 core-prim . file-exists?) (g$735$25340 core-prim . vector-sort!) (g$735$25339 core-prim . vector-sort) (g$735$25338 core-prim . list-sort) (g$735$25337 core-prim . symbol-hash) (g$735$25336 core-prim . string-ci-hash) (g$735$25335 core-prim . string-hash) (g$735$25334 core-prim . equal-hash) (g$735$25333 core-prim . hashtable-equivalence-function) (g$735$25332 core-prim . make-hashtable) (g$735$25331 core-prim . hashtable-hash-function) (g$735$25330 core-prim . make-eqv-hashtable) (g$735$25329 core-prim . make-eq-hashtable) (g$735$25328 core-prim . hashtable?) (g$735$25327 core-prim . hashtable-update!) (g$735$25326 core-prim . hashtable-size) (g$735$25325 core-prim . hashtable-set!) (g$735$25324 core-prim . hashtable-ref) (g$735$25323 core-prim . hashtable-mutable?) (g$735$25322 core-prim . hashtable-keys) (g$735$25321 core-prim . hashtable-entries) (g$735$25320 core-prim . hashtable-delete!) (g$735$25319 core-prim . hashtable-copy) (g$735$25318 core-prim . hashtable-contains?) (g$735$25317 core-prim . hashtable-clear!) (g$735$25316 core-prim . call-with-output-file) (g$735$25315 core-prim . call-with-input-file) (g$735$25314 core-prim . write-char) (g$735$25313 core-prim . write) (g$735$25312 core-prim . with-output-to-file) (g$735$25311 core-prim . with-input-from-file) (g$735$25310 core-prim . read-char) (g$735$25309 core-prim . read) (g$735$25308 core-prim . peek-char) (g$735$25307 core-prim . open-output-file) (g$735$25306 core-prim . open-input-file) (g$735$25305 core-prim . newline) (g$735$25304 core-prim . display) (g$735$25303 core-prim . close-output-port) (g$735$25302 core-prim . close-input-port) (g$735$25301 core-prim . eof-object?) (g$735$25300 core-prim . eof-object) (g$735$25299 core-prim . current-error-port) (g$735$25298 core-prim . current-output-port) (g$735$25297 core-prim . current-input-port) (g$735$25296 core-prim . output-port?) (g$735$25295 core-prim . input-port?) (g$735$25294 core-prim . utf-8-codec) (g$735$25293 core-prim . utf-16-codec) (g$735$25292 core-prim . transcoder-error-handling-mode) (g$735$25291 core-prim . transcoder-eol-style) (g$735$25290 core-prim . transcoder-codec) (g$735$25289 core-prim . transcoded-port) (g$735$25288 core-prim . textual-port?) (g$735$25287 core-prim . string->bytevector) (g$735$25286 core-prim . standard-output-port) (g$735$25285 core-prim . standard-input-port) (g$735$25284 core-prim . standard-error-port) (g$735$25283 core-prim . set-port-position!) (g$735$25282 core-prim . put-u8) (g$735$25281 core-prim . put-string) (g$735$25280 core-prim . put-datum) (g$735$25279 core-prim . put-char) (g$735$25278 core-prim . put-bytevector) (g$735$25277 core-prim . port?) (g$735$25276 core-prim . port-transcoder) (g$735$25275 core-prim . port-position) (g$735$25274 core-prim . port-has-set-port-position!?) (g$735$25273 core-prim . port-has-port-position?) (g$735$25272 core-prim . port-eof?) (g$735$25271 core-prim . output-port-buffer-mode) (g$735$25270 core-prim . open-string-output-port) (g$735$25269 core-prim . open-string-input-port) (g$735$25268 core-prim . open-file-output-port) (g$735$25267 core-prim . open-file-input/output-port) (g$735$25266 core-prim . open-file-input-port) (g$735$25265 core-prim . open-bytevector-output-port) (g$735$25264 core-prim . open-bytevector-input-port) (g$735$25263 core-prim . native-transcoder) (g$735$25262 core-prim . native-eol-style) (g$735$25261 core-prim . make-transcoder) (g$735$25260 core-prim . latin-1-codec) (g$735$25259 core-prim . make-i/o-write-error) (g$735$25258 core-prim . make-i/o-read-error) (g$735$25257 core-prim . make-i/o-port-error) (g$735$25256 core-prim . make-i/o-invalid-position-error) (g$735$25255 core-prim . make-i/o-filename-error) (g$735$25254 core-prim . make-i/o-file-protection-error) (g$735$25253 core-prim . make-i/o-file-is-read-only-error) (g$735$25252 core-prim . make-i/o-file-does-not-exist-error) (g$735$25251 core-prim . make-i/o-file-already-exists-error) (g$735$25250 core-prim . make-i/o-error) (g$735$25249 core-prim . make-i/o-encoding-error) (g$735$25248 core-prim . make-i/o-decoding-error) (g$735$25247 core-prim . make-custom-textual-output-port) (g$735$25246 core-prim . make-custom-textual-input/output-port) (g$735$25245 core-prim . make-custom-textual-input-port) (g$735$25244 core-prim . make-custom-binary-output-port) (g$735$25243 core-prim . make-custom-binary-input/output-port) (g$735$25242 core-prim . make-custom-binary-input-port) (g$735$25241 core-prim . make-bytevector) (g$735$25240 core-prim . lookahead-u8) (g$735$25239 core-prim . lookahead-char) (g$735$25238 core-prim . i/o-write-error?) (g$735$25237 core-prim . i/o-read-error?) (g$735$25236 core-prim . i/o-port-error?) (g$735$25235 core-prim . i/o-invalid-position-error?) (g$735$25234 core-prim . i/o-filename-error?) (g$735$25233 core-prim . i/o-file-protection-error?) (g$735$25232 core-prim . i/o-file-is-read-only-error?) (g$735$25231 core-prim . i/o-file-does-not-exist-error?) (g$735$25230 core-prim . i/o-file-already-exists-error?) (g$735$25229 core-prim . i/o-error?) (g$735$25228 core-prim . i/o-error-port) (g$735$25227 core-prim . i/o-error-filename) (g$735$25226 core-prim . i/o-encoding-error?) (g$735$25225 core-prim . i/o-encoding-error-char) (g$735$25224 core-prim . i/o-decoding-error?) (g$735$25223 core-prim . get-u8) (g$735$25222 core-prim . get-string-n!) (g$735$25221 core-prim . get-string-n) (g$735$25220 core-prim . get-string-all) (g$735$25219 core-prim . get-line) (g$735$25218 core-prim . get-datum) (g$735$25217 core-prim . get-char) (g$735$25216 core-prim . get-bytevector-some) (g$735$25215 core-prim . get-bytevector-n!) (g$735$25214 core-prim . get-bytevector-n) (g$735$25213 core-prim . get-bytevector-all) (g$735$25212 core-prim . flush-output-port) (g$735$25211 core-prim . close-port) (g$735$25210 core-prim . scheme-report-environment) (g$735$25209 core-prim . quotient) (g$735$14972 core-prim . null-environment) (g$735$25208 core-prim . remainder) (g$735$25207 core-prim . modulo) (g$735$25206 core-prim . inexact->exact) (g$735$25205 core-prim . force) (g$735$25204 core-prim . exact->inexact) (g$735$25203 core-prim . exit) (g$735$25202 core-prim . command-line) (g$735$25201 core-prim . string-fill!) (g$735$25200 core-prim . string-set!) (g$735$25199 core-prim . set-cdr!) (g$735$25198 core-prim . set-car!) (g$735$25197 core-prim . remove) (g$735$25196 core-prim . remv) (g$735$25195 core-prim . remp) (g$735$25194 core-prim . remq) (g$735$25193 core-prim . partition) (g$735$25192 core-prim . memv) (g$735$25191 core-prim . memq) (g$735$25190 core-prim . memp) (g$735$25189 core-prim . member) (g$735$25188 core-prim . exists) (g$735$25187 core-prim . for-all) (g$735$25186 core-prim . fold-right) (g$735$25185 core-prim . fold-left) (g$735$25184 core-prim . find) (g$735$25183 core-prim . filter) (g$735$25182 core-prim . cons*) (g$735$25181 core-prim . assv) (g$735$25180 core-prim . assq) (g$735$25179 core-prim . assp) (g$735$25178 core-prim . assoc) (g$735$25177 core-prim . call-with-string-output-port) (g$735$25176 core-prim . call-with-port) (g$735$25175 core-prim . call-with-bytevector-output-port) (g$735$25174 core-prim . bytevector->string) (g$735$25173 core-prim . buffer-mode?) (g$735$25172 core-prim . binary-port?) (g$735$25171 core-prim . with-exception-handler) (g$735$25170 core-prim . raise-continuable) (g$735$25169 core-prim . raise) (g$735$14978 core-prim . eval) (g$735$14970 core-prim . environment) (g$735$25168 core-prim . make-enumeration) (g$735$25167 core-prim . enum-set=?) (g$735$25166 core-prim . enum-set-universe) (g$735$25165 core-prim . enum-set-union) (g$735$25164 core-prim . enum-set-subset?) (g$735$25163 core-prim . enum-set-projection) (g$735$25162 core-prim . enum-set-member?) (g$735$25161 core-prim . enum-set-intersection) (g$735$25160 core-prim . enum-set-indexer) (g$735$25159 core-prim . enum-set-difference) (g$735$25158 core-prim . enum-set-constructor) (g$735$25157 core-prim . enum-set-complement) (g$735$25156 core-prim . enum-set->list) (g$735$25155 core-prim . who-condition?) (g$735$25154 core-prim . warning?) (g$735$25153 core-prim . violation?) (g$735$25152 core-prim . undefined-violation?) (g$735$25151 core-prim . syntax-violation?) (g$735$25150 core-prim . syntax-violation-subform) (g$735$25149 core-prim . syntax-violation-form) (g$735$25148 core-prim . syntax-violation) (g$735$25147 core-prim . simple-conditions) (g$735$25146 core-prim . serious-condition?) (g$735$25145 core-prim . non-continuable-violation?) (g$735$25144 core-prim . &non-continuable) (g$735$25143 core-prim . message-condition?) (g$735$25142 core-prim . make-who-condition) (g$735$25141 core-prim . make-warning) (g$735$25140 core-prim . make-violation) (g$735$25139 core-prim . make-undefined-violation) (g$735$25138 core-prim . make-syntax-violation) (g$735$25137 core-prim . make-serious-condition) (g$735$25136 core-prim . make-non-continuable-violation) (g$735$25135 core-prim . make-message-condition) (g$735$25134 core-prim . make-lexical-violation) (g$735$25133 core-prim . make-irritants-condition) (g$735$25132 core-prim . make-implementation-restriction-violation) (g$735$25131 core-prim . make-error) (g$735$25130 core-prim . make-assertion-violation) (g$735$25129 core-prim . lexical-violation?) (g$735$25128 core-prim . irritants-condition?) (g$735$25127 core-prim . implementation-restriction-violation?) (g$735$25126 core-prim . &implementation-restriction) (g$735$25125 core-prim . error?) (g$735$25124 core-prim . condition-who) (g$735$25123 core-prim . condition-predicate) (g$735$25122 core-prim . condition-message) (g$735$25121 core-prim . condition-irritants) (g$735$25120 core-prim . condition-accessor) (g$735$25119 core-prim . condition) (g$735$25118 core-prim . assertion-violation?) (g$735$25117 core-prim . condition?) (g$735$25116 core-prim . utf32->string) (g$735$25115 core-prim . utf16->string) (g$735$25114 core-prim . utf8->string) (g$735$25113 core-prim . uint-list->bytevector) (g$735$25112 core-prim . u8-list->bytevector) (g$735$25111 core-prim . string->utf8) (g$735$25110 core-prim . string->utf32) (g$735$25109 core-prim . string->utf16) (g$735$25108 core-prim . sint-list->bytevector) (g$735$25107 core-prim . native-endianness) (g$735$25106 core-prim . bytevector?) (g$735$25105 core-prim . bytevector=?) (g$735$25104 core-prim . bytevector-uint-set!) (g$735$25103 core-prim . bytevector-uint-ref) (g$735$25102 core-prim . bytevector-u8-set!) (g$735$25101 core-prim . bytevector-u8-ref) (g$735$25100 core-prim . bytevector-u64-set!) (g$735$25099 core-prim . bytevector-u64-ref) (g$735$25098 core-prim . bytevector-u64-native-set!) (g$735$25097 core-prim . bytevector-u64-native-ref) (g$735$25096 core-prim . bytevector-u32-set!) (g$735$25095 core-prim . bytevector-u32-ref) (g$735$25094 core-prim . bytevector-u32-native-set!) (g$735$25093 core-prim . bytevector-u32-native-ref) (g$735$25092 core-prim . bytevector-u16-set!) (g$735$25091 core-prim . bytevector-u16-ref) (g$735$25090 core-prim . bytevector-u16-native-set!) (g$735$25089 core-prim . bytevector-u16-native-ref) (g$735$25088 core-prim . bytevector-sint-set!) (g$735$25087 core-prim . bytevector-sint-ref) (g$735$25086 core-prim . bytevector-s8-set!) (g$735$25085 core-prim . bytevector-s8-ref) (g$735$25084 core-prim . bytevector-s64-set!) (g$735$25083 core-prim . bytevector-s64-ref) (g$735$25082 core-prim . bytevector-s64-native-set!) (g$735$25081 core-prim . bytevector-s64-native-ref) (g$735$25080 core-prim . bytevector-s32-set!) (g$735$25079 core-prim . bytevector-s32-ref) (g$735$25078 core-prim . bytevector-s32-native-set!) (g$735$25077 core-prim . bytevector-s32-native-ref) (g$735$25076 core-prim . bytevector-s16-set!) (g$735$25075 core-prim . bytevector-s16-ref) (g$735$25074 core-prim . bytevector-s16-native-set!) (g$735$25073 core-prim . bytevector-s16-native-ref) (g$735$25072 core-prim . bytevector-length) (g$735$25071 core-prim . bytevector-ieee-single-ref) (g$735$25070 core-prim . bytevector-ieee-single-native-set!) (g$735$25069 core-prim . bytevector-ieee-single-native-ref) (g$735$25068 core-prim . bytevector-ieee-double-ref) (g$735$25067 core-prim . bytevector-ieee-double-native-set!) (g$735$25066 core-prim . bytevector-ieee-double-native-ref) (g$735$25065 core-prim . bytevector-fill!) (g$735$25064 core-prim . bytevector-copy!) (g$735$25063 core-prim . bytevector-copy) (g$735$25062 core-prim . bytevector->uint-list) (g$735$25061 core-prim . bytevector->u8-list) (g$735$25060 core-prim . bytevector->sint-list) (g$735$25059 core-prim . no-nans-violation?) (g$735$25058 core-prim . no-infinities-violation?) (g$735$25057 core-prim . make-no-nans-violation) (g$735$25056 core-prim . make-no-infinities-violation) (g$735$25055 core-prim . real->flonum) (g$735$25054 core-prim . flzero?) (g$735$25053 core-prim . fltruncate) (g$735$25052 core-prim . fltan) (g$735$25051 core-prim . flsqrt) (g$735$25050 core-prim . flsin) (g$735$25049 core-prim . flround) (g$735$25048 core-prim . flpositive?) (g$735$25047 core-prim . flonum?) (g$735$25046 core-prim . flodd?) (g$735$25045 core-prim . flnumerator) (g$735$25044 core-prim . flnegative?) (g$735$25043 core-prim . flnan?) (g$735$25042 core-prim . flmod0) (g$735$25041 core-prim . flmod) (g$735$25040 core-prim . flmin) (g$735$25039 core-prim . flmax) (g$735$25038 core-prim . fllog) (g$735$25037 core-prim . flinteger?) (g$735$25036 core-prim . flinfinite?) (g$735$25035 core-prim . flfloor) (g$735$25034 core-prim . flfinite?) (g$735$25033 core-prim . flexpt) (g$735$25032 core-prim . flexp) (g$735$25031 core-prim . fleven?) (g$735$25030 core-prim . fldiv0-and-mod0) (g$735$25029 core-prim . fldiv0) (g$735$25028 core-prim . fldiv-and-mod) (g$735$25027 core-prim . fldiv) (g$735$25026 core-prim . fldenominator) (g$735$25025 core-prim . flcos) (g$735$25024 core-prim . flceiling) (g$735$25023 core-prim . flatan) (g$735$25022 core-prim . flasin) (g$735$25021 core-prim . flacos) (g$735$25020 core-prim . flabs) (g$735$25019 core-prim . fl>?) (g$735$25018 core-prim . fl>=?) (g$735$25017 core-prim . fl=?) (g$735$25016 core-prim . fl<?) (g$735$25015 core-prim . fl<=?) (g$735$25014 core-prim . fl/) (g$735$25013 core-prim . fl-) (g$735$25012 core-prim . fl+) (g$735$25011 core-prim . fl*) (g$735$25010 core-prim . fixnum->flonum) (g$735$25009 core-prim . fxzero?) (g$735$25008 core-prim . fxxor) (g$735$25007 core-prim . fxrotate-bit-field) (g$735$25006 core-prim . fxreverse-bit-field) (g$735$25005 core-prim . fxpositive?) (g$735$25004 core-prim . fxodd?) (g$735$25003 core-prim . fxnot) (g$735$25002 core-prim . fxnegative?) (g$735$25001 core-prim . fxmod0) (g$735$25000 core-prim . fxmod) (g$735$24999 core-prim . fxmin) (g$735$24998 core-prim . fxmax) (g$735$24997 core-prim . fxlength) (g$735$24996 core-prim . fxior) (g$735$24995 core-prim . fxif) (g$735$24994 core-prim . fxfirst-bit-set) (g$735$24993 core-prim . fxeven?) (g$735$24992 core-prim . fxdiv0-and-mod0) (g$735$24991 core-prim . fxdiv0) (g$735$24990 core-prim . fxdiv-and-mod) (g$735$24989 core-prim . fxdiv) (g$735$24988 core-prim . fxcopy-bit-field) (g$735$24987 core-prim . fxcopy-bit) (g$735$24986 core-prim . fxbit-set?) (g$735$24985 core-prim . fxbit-field) (g$735$24984 core-prim . fxbit-count) (g$735$24983 core-prim . fxarithmetic-shift-right) (g$735$24982 core-prim . fxarithmetic-shift-left) (g$735$24981 core-prim . fxarithmetic-shift) (g$735$24980 core-prim . fxand) (g$735$24979 core-prim . fx>?) (g$735$24978 core-prim . fx>=?) (g$735$24977 core-prim . fx=?) (g$735$24976 core-prim . fx<?) (g$735$24975 core-prim . fx<=?) (g$735$24974 core-prim . fx-/carry) (g$735$24973 core-prim . fx-) (g$735$24972 core-prim . fx+/carry) (g$735$24971 core-prim . fx+) (g$735$24970 core-prim . fx*/carry) (g$735$24969 core-prim . fx*) (g$735$24968 core-prim . greatest-fixnum) (g$735$24967 core-prim . least-fixnum) (g$735$24966 core-prim . fixnum-width) (g$735$24965 core-prim . fixnum?) (g$735$24964 core-prim . bitwise-rotate-bit-field) (g$735$24963 core-prim . bitwise-reverse-bit-field) (g$735$24962 core-prim . bitwise-length) (g$735$24961 core-prim . bitwise-if) (g$735$24960 core-prim . bitwise-first-bit-set) (g$735$24959 core-prim . bitwise-copy-bit-field) (g$735$24958 core-prim . bitwise-copy-bit) (g$735$24957 core-prim . bitwise-bit-set?) (g$735$24956 core-prim . bitwise-bit-field) (g$735$24955 core-prim . bitwise-bit-count) (g$735$24954 core-prim . bitwise-xor) (g$735$24953 core-prim . bitwise-ior) (g$735$24952 core-prim . bitwise-and) (g$735$24951 core-prim . bitwise-not) (g$735$24950 core-prim . bitwise-arithmetic-shift-right) (g$735$24949 core-prim . bitwise-arithmetic-shift-left) (g$735$24948 core-prim . bitwise-arithmetic-shift) (g$735$24947 core-prim . zero?) (g$735$24946 core-prim . vector?) (g$735$24945 core-prim . vector-set!) (g$735$24944 core-prim . vector-ref) (g$735$24943 core-prim . vector-map) (g$735$24942 core-prim . vector-length) (g$735$24941 core-prim . vector-for-each) (g$735$24940 core-prim . vector-fill!) (g$735$24939 core-prim . vector->list) (g$735$24938 core-prim . vector) (g$735$24937 core-prim . values) (g$735$24936 core-prim . truncate) (g$735$24935 core-prim . tan) (g$735$24934 core-prim . symbol?) (g$735$24933 core-prim . symbol=?) (g$735$24932 core-prim . symbol->string) (g$735$24931 core-prim . substring) (g$735$24930 core-prim . string?) (g$735$24929 core-prim . string>?) (g$735$24928 core-prim . string>=?) (g$735$24927 core-prim . string=?) (g$735$24926 core-prim . string<?) (g$735$24925 core-prim . string<=?) (g$735$24924 core-prim . string-ref) (g$735$24923 core-prim . string-length) (g$735$24922 core-prim . string-for-each) (g$735$24921 core-prim . string-copy) (g$735$24920 core-prim . string-append) (g$735$24919 core-prim . string->symbol) (g$735$24918 core-prim . string->number) (g$735$24917 core-prim . string->list) (g$735$24916 core-prim . string) (g$735$24915 core-prim . sqrt) (g$735$24914 core-prim . sin) (g$735$24913 core-prim . round) (g$735$24912 core-prim . reverse) (g$735$24911 core-prim . real?) (g$735$24910 core-prim . real-valued?) (g$735$24909 core-prim . real-part) (g$735$24908 core-prim . rationalize) (g$735$24907 core-prim . rational?) (g$735$24906 core-prim . rational-valued?) (g$735$24905 core-prim . procedure?) (g$735$24904 core-prim . positive?) (g$735$24903 core-prim . pair?) (g$735$24902 core-prim . odd?) (g$735$24901 core-prim . numerator) (g$735$24900 core-prim . number?) (g$735$24899 core-prim . number->string) (g$735$24898 core-prim . null?) (g$735$24897 core-prim . not) (g$735$24896 core-prim . negative?) (g$735$24895 core-prim . nan?) (g$735$24894 core-prim . min) (g$735$24893 core-prim . max) (g$735$24892 core-prim . map) (g$735$24891 core-prim . make-vector) (g$735$24890 core-prim . make-string) (g$735$24889 core-prim . make-rectangular) (g$735$24888 core-prim . make-polar) (g$735$24887 core-prim . magnitude) (g$735$24886 core-prim . log) (g$735$24885 core-prim . list?) (g$735$24884 core-prim . list-tail) (g$735$24883 core-prim . list-ref) (g$735$24882 core-prim . list->vector) (g$735$24881 core-prim . list->string) (g$735$24880 core-prim . list) (g$735$24879 core-prim . length) (g$735$24878 core-prim . lcm) (g$735$24877 core-prim . integer?) (g$735$24876 core-prim . integer-valued?) (g$735$24875 core-prim . integer->char) (g$735$24874 core-prim . infinite?) (g$735$24873 core-prim . inexact?) (g$735$24872 core-prim . inexact) (g$735$24871 core-prim . imag-part) (g$735$24870 core-prim . gcd) (g$735$24869 core-prim . for-each) (g$735$24868 core-prim . floor) (g$735$24867 core-prim . finite?) (g$735$24866 core-prim . expt) (g$735$24865 core-prim . exp) (g$735$24864 core-prim . exact?) (g$735$24863 core-prim . exact-integer-sqrt) (g$735$24862 core-prim . exact) (g$735$24861 core-prim . even?) (g$735$24860 core-prim . error) (g$735$24859 core-prim . eqv?) (g$735$24858 core-prim . equal?) (g$735$24857 core-prim . eq?) (g$735$24856 core-prim . dynamic-wind) (g$735$24855 core-prim . div0-and-mod0) (g$735$24854 core-prim . mod0) (g$735$24853 core-prim . div0) (g$735$24852 core-prim . div-and-mod) (g$735$24851 core-prim . mod) (g$735$24850 core-prim . div) (g$735$24849 core-prim . denominator) (g$735$24848 core-prim . cos) (g$735$24847 core-prim . cons) (g$735$24846 core-prim . complex?) (g$735$24845 core-prim . char?) (g$735$24844 core-prim . char>?) (g$735$24843 core-prim . char>=?) (g$735$24842 core-prim . char=?) (g$735$24841 core-prim . char<?) (g$735$24840 core-prim . char<=?) (g$735$24839 core-prim . char->integer) (g$735$24838 core-prim . ceiling) (g$735$24837 core-prim . call-with-values) (g$735$24836 core-prim . call/cc) (g$735$24835 core-prim . call-with-current-continuation) (g$735$24834 core-prim . cddddr) (g$735$24833 core-prim . cdddar) (g$735$24832 core-prim . cddadr) (g$735$24831 core-prim . cddaar) (g$735$24830 core-prim . cdaddr) (g$735$24829 core-prim . cdadar) (g$735$24828 core-prim . cdaadr) (g$735$24827 core-prim . cdaaar) (g$735$24826 core-prim . cadddr) (g$735$24825 core-prim . caddar) (g$735$24824 core-prim . cadadr) (g$735$24823 core-prim . cadaar) (g$735$24822 core-prim . caaddr) (g$735$24821 core-prim . caadar) (g$735$24820 core-prim . caaadr) (g$735$24819 core-prim . caaaar) (g$735$24818 core-prim . cdddr) (g$735$24817 core-prim . cddar) (g$735$24816 core-prim . cdadr) (g$735$24815 core-prim . cdaar) (g$735$24814 core-prim . caddr) (g$735$24813 core-prim . cadar) (g$735$24812 core-prim . caadr) (g$735$24811 core-prim . caaar) (g$735$24810 core-prim . cddr) (g$735$24809 core-prim . cdar) (g$735$24808 core-prim . cadr) (g$735$24807 core-prim . caar) (g$735$24806 core-prim . cdr) (g$735$24805 core-prim . car) (g$735$24804 core-prim . boolean?) (g$735$24803 core-prim . boolean=?) (g$735$24802 core-prim . atan) (g$735$24801 core-prim . assertion-violation) (g$735$24800 core-prim . asin) (g$735$24799 core-prim . apply) (g$735$24798 core-prim . append) (g$735$24797 core-prim . angle) (g$735$24796 core-prim . acos) (g$735$24795 core-prim . abs) (g$735$24794 core-prim . /) (g$735$24793 core-prim . *) (g$735$24792 core-prim . -) (g$735$24791 core-prim . +) (g$735$24790 core-prim . >=) (g$735$24789 core-prim . >) (g$735$24788 core-prim . =) (g$735$24787 core-prim . <=) (g$735$24786 core-prim . <) (g$735$24785 core-prim . let*-values) (g$735$24784 $core-rtd &no-nans-rtd &no-nans-rcd) (g$735$24783 $core-rtd &no-infinities-rtd &no-infinities-rcd) (g$735$24782 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g$735$24781 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g$735$24780 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g$735$24779 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g$735$24778 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g$735$24777 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g$735$24776 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g$735$24775 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g$735$24774 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g$735$24773 $core-rtd &i/o-write-rtd &i/o-write-rcd) (g$735$24772 $core-rtd &i/o-read-rtd &i/o-read-rcd) (g$735$24771 $core-rtd &i/o-rtd &i/o-rcd) (g$735$24770 $core-rtd &undefined-rtd &undefined-rcd) (g$735$24769 $core-rtd &syntax-rtd &syntax-rcd) (g$735$24768 $core-rtd &lexical-rtd &lexical-rcd) (g$735$24767 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g$735$24766 $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$735$24765 $core-rtd &who-rtd &who-rcd) (g$735$24764 $core-rtd &irritants-rtd &irritants-rcd) (g$735$24763 $core-rtd &assertion-rtd &assertion-rcd) (g$735$24762 $core-rtd &violation-rtd &violation-rcd) (g$735$24761 $core-rtd &error-rtd &error-rcd) (g$735$24760 $core-rtd &serious-rtd &serious-rcd) (g$735$24759 $core-rtd &warning-rtd &warning-rcd) (g$735$24758 $core-rtd &message-rtd &message-rcd) (g$735$24757 $core-rtd &condition-rtd &condition-rcd) (g$735$24756 macro . define-condition-type) (g$735$24755 macro . define-enumeration) (g$735$24754 macro . define-record-type) (g$735$24753 macro . parent-rtd) (g$735$24752 macro . nongenerative) (g$735$24751 macro . opaque) (g$735$24750 macro . sealed) (g$735$24749 macro . protocol) (g$735$24748 macro . parent) (g$735$24747 macro . immutable) (g$735$24746 macro . mutable) (g$735$24745 macro . fields) (g$735$24744 macro . error-handling-mode) (g$735$24743 macro . file-options) (g$735$24742 macro . buffer-mode) (g$735$24741 macro . eol-style) (g$735$24740 macro . guard) (g$735$24739 macro . trace-define) (g$735$24738 macro . trace-lambda) (g$735$24737 macro . unsyntax-splicing) (g$735$24736 macro . unsyntax) (g$735$24735 macro . unquote-splicing) (g$735$24734 macro . unquote) (g$735$24733 macro . _) (g$735$24732 macro . else) (g$735$24731 macro . =>) (g$735$24730 macro . ...) (g$735$24729 macro . assert) (g$735$24728 macro . endianness) (g$735$24727 macro . delay) (g$735$24726 macro . time) (g$735$24725 macro . or) (g$735$24724 macro . and) (g$735$24723 macro . do) (g$735$24722 macro . cond) (g$735$24721 macro . let*) (g$735$24720 macro . let) (g$735$24719 macro . identifier-syntax) (g$735$24718 macro . with-syntax) (g$735$24717 macro . quasisyntax) (g$735$24716 macro . quasiquote) (g$735$24715 macro . syntax-rules) (g$735$24714 macro . include) (g$735$24713 macro . define-struct) (g$735$24712 core-macro . record-constructor-descriptor) (g$735$24711 core-macro . record-type-descriptor) (g$735$24710 core-macro . let-values) (g$735$24709 core-macro . case) (g$735$24708 core-macro . parameterize) (g$735$24707 core-macro . unless) (g$735$24706 core-macro . when) (g$735$24705 core-macro . if) (g$735$24704 core-macro . letrec*) (g$735$24703 core-macro . letrec) (g$735$24702 core-macro . type-descriptor) (g$735$24701 core-macro . case-lambda) (g$735$24700 core-macro . lambda) (g$735$24699 core-macro . syntax) (g$735$24698 core-macro . syntax-case) (g$735$24697 core-macro . quote) (g$735$24696 core-macro . foreign-call) (g$735$24695 letrec-syntax) (g$735$24694 let-syntax) (g$735$24693 set!) (g$735$24692 import) (g$735$24691 begin) (g$735$24690 module) (g$735$24689 define-syntax) (g$735$24688 define))) values values (quote #f)) (install-library$735$13887 (quote g$735$25430) (quote (psyntax system $bootstrap)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((pretty-print . g$735$25397) (eval-core . g$735$25396) (set-symbol-value! . g$735$25395) (symbol-value . g$735$25394) (gensym . g$735$25393) (void . g$735$25392))) (quote ()) values values (quote #f)))


(begin (define load-r6rs-top-level$735$24686 (quote #f)) ((lambda (load-r6rs-top-level$735$24670) (begin (set! load-r6rs-top-level$735$24670 (lambda (filename$735$24672) ((lambda (x*$735$24674) (eval-r6rs-top-level$735$24480 x*$735$24674)) (with-input-from-file filename$735$24672 (lambda () (letrec ((f$735$24676 (lambda () ((lambda (x$735$24678) (if (eof-object? x$735$24678) (quote ()) (cons x$735$24678 (f$735$24676)))) (read))))) (f$735$24676))))))) (begin (set! load-r6rs-top-level$735$24686 load-r6rs-top-level$735$24670) (display (quote "r6rs psyntax ready\n")) ((lambda (args$735$24680) (begin (if (= (length args$735$24680) (quote 2)) (void) (begin (display (quote "provide a script name argument\n")) (exit (quote 17)))) ((lambda (script-name$735$24682 args$735$24683) (load-r6rs-top-level$735$24670 (car args$735$24683))) (car args$735$24680) (cdr args$735$24680)))) (command-line)) (exit (quote 0))))) (quote #f)))


